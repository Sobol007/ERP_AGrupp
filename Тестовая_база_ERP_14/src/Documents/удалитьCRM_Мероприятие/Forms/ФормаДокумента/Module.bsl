
///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
// Функция возвращает заголовок формиы.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Строка	- Заголовок формы
//
Функция ПолучитьЗаголовокФормы()
	Попытка
		ОчищенныйНомер = Строка(Число(Объект.Номер));
	Исключение
		ОчищенныйНомер = Объект.Номер;
	КонецПопытки;
	СтрокаЗаголовок = "Мероприятие ";
	СтрокаЗаголовок = СтрокаЗаголовок + " № " + ОчищенныйНомер + " от " + Формат(Объект.Дата, "ДФ='dd.MM.yyyy HH:mm'; ДЛФ=DT");
	Возврат СтрокаЗаголовок;
КонецФункции // ПолучитьЗаголовокФормы()

&НаКлиенте 
// Процедура настраивает видимость и доступность элементов формы.
//
// Параметры:
//	Нет.
//
Процедура НастроитьВидимостьИДоступностьФормы()
	Элементы.ВремяНачало.Видимость    = (НЕ Объект.НаВесьДень);
	Элементы.ВремяОкончание.Видимость = (НЕ Объект.НаВесьДень);
	Заголовок = ПолучитьЗаголовокФормы();
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр	= Ложь;
		Элементы.Ответственный.КнопкаВыбора		= Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр	= Истина;
		Элементы.Ответственный.КнопкаВыбора		= Ложь;
	КонецЕсли;
	// Страница "Участники"
	Элементы.СторонниеЛицаТелефонФлаг.Видимость	= ИспользоватьОповещенияСМС;
	Элементы.СторонниеЛицаАдресФлаг.Видимость	= ИспользоватьОповещенияЭлектроннаяПочта;
	Элементы.СвоиЛицаНапоминания.Видимость		= ИспользоватьНапоминания;
	Элементы.СвоиЛицаТелефонФлаг.Видимость		= ИспользоватьОповещенияСМС;
	Элементы.СвоиЛицаАдресФлаг.Видимость		= ИспользоватьОповещенияЭлектроннаяПочта;
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ЕстьПолныеПрава = (ЭтоПолноправныйПользователь ИЛИ (Объект.Автор = ТекПользователь) ИЛИ (Объект.Ответственный = ТекПользователь));
	Если НЕ ЕстьПолныеПрава Тогда
		Элементы.ГруппаСторонниеЛица.Видимость	= Ложь;
		// Только просмотр
		Если Объект.ГостиМогутИзменятьМероприятие Тогда
			Если НЕ Объект.ГостиМогутВидетьСписокГостей Тогда
				// ++zhdkse 14.12.2015
				//Элементы.ГруппаУчастники.Видимость	= Ложь;				
				// --zhdkse 14.12.2015
			ИначеЕсли НЕ Объект.ГостиМогутПриглашатьДругихГостей Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТолькоПросмотр	= Истина;
			Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
				ПодчиненныйЭлемент.Видимость	= Ложь;
			КонецЦикла;
			Элементы.ПодобратьМесто.Видимость									= Ложь;
			Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость	= Ложь;
			Если Объект.ГостиМогутВидетьСписокГостей Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
			Иначе	
				// ++zhdkse 14.12.2015
				//Элементы.ГруппаУчастники.Видимость	= Ложь;				
				// --zhdkse 14.12.2015
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// видимость расписания
	Элементы.РядСобытийНаименование.Видимость = Не Объект.ИзмененоВРяде;
	Если Элементы.РядСобытийНаименование.Видимость Тогда
		Элементы.Периодическое.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
	КонецЕсли;
	
	Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;

КонецПроцедуры // НастроитьВидимостьИДоступностьФормы()

&НаСервереБезКонтекста
// Функция возвращает массив помещений с наименованием, похожим на переданный текст.
//
// Параметры:
//	Текст	- Строка	- Наименование помещения.
//
// Возвращаемое значение:
//	Массив	- Vассив помещений с наименованием, похожим на переданный текст.
//
Функция ВернутьПомещенияПоТексту(Текст)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И (НЕ CRM_Помещения.ПометкаУдаления)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");                            
КонецФункции // ВернутьПомещенияПоТексту()

&НаСервере
// Процедура заполняет настройки оповещений.
//
// Параметры:
//	Нет.
//
&НаСервере
Процедура ЗаполнитьГруппуОповещений()
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	ЗаполнитьТаблицуОповещений();
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	// Всего предполагается 5 полей оповещений, по аналогии с гуглом.
	Ид = 0;
	Пока НЕ Ид = 5 Цикл
		Ид = Ид + 1;
		
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения"+Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения"+Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НоваяКомандаФормы = Команды.Добавить("УдалитьОповещение_"+Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	КонецЦикла;
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид > 5 Тогда Прервать; КонецЕсли; 
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru='Планируемая дата оповещения';en='Schedulable date of the notification'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
КонецПроцедуры // ЗаполнитьГруппуОповещений()

&НаКлиенте
// Процедура заполняет даты и времена начала и окончания мероприятия.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьДанныеФормы()
	ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаНачало		= ДатаВремя.Дата;
	ВремяНачало		= ДатаВремя.Время;
	ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеМероприятия);
	ДатаОкончание	= ДатаВремя.Дата;
	ВремяОкончание	= ДатаВремя.Время;
КонецПроцедуры

&НаКлиенте
// Процедура выполняет корректировку значений полей даты и времени.
//
// Параметры:
//	ПриоритетДатыНачала	- Булево	- Приоритет даты начала.
//
Процедура СкорректироватьДатуВремя(ПриоритетДатыНачала)
	Если ДатаНачало > ДатаОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ДатаОкончание = ДатаНачало;
		Иначе
			ДатаНачало = ДатаОкончание;
		КонецЕсли;
	КонецЕсли;
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) И ВремяНачало > ВремяОкончание Тогда
		Если ПриоритетДатыНачала Тогда
			ВремяОкончание = ВремяНачало;
		Иначе
			ВремяНачало = ВремяОкончание;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СкорректироватьДатуВремя()

&НаКлиенте
// Процедура - обработчик изменения контакта и контактной информации при изменении клиента.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//	ПодставлятьКонтактноеЛицо	- Булево	- Признак изменения контакта.
//
Процедура ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока, ПодставлятьКонтактноеЛицо = Ложь)
	Если ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		Если ПодставлятьКонтактноеЛицо Тогда
			ТекущаяСтрока.КонтактноеЛицо = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.Партнер, "CRM_ОсновноеКонтактноеЛицо");
		КонецЕсли;
		СтруктураПоиска	= Новый Структура;
		СтруктураПоиска.Вставить("Партнер",			ТекущаяСтрока.Партнер); 
		СтруктураПоиска.Вставить("КонтактноеЛицо",	ТекущаяСтрока.КонтактноеЛицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе	
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						Адрес = ЭлементСписка.Значение;
						Если Адрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
							ТекущаяСтрока.Принадлежность		= Ложь;
						Иначе	
							ТекущаяСтрока.Адрес					= Адрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер), Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
							ТекущаяСтрока.Принадлежность		= (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					Адрес = СписокАдресов[0].Значение;
					Если Адрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
						ТекущаяСтрока.Принадлежность		= Ложь;
					Иначе	
						ТекущаяСтрока.Адрес					= Адрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ТекущаяСтрока.Партнер,Строка(ТекущаяСтрока.Партнер),Строка(ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
						ТекущаяСтрока.Принадлежность		= (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
				ТекущаяСтрока.Принадлежность		= Ложь;
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
			ТекущаяСтрока.Принадлежность		= Ложь;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
		ТекущаяСтрока.Принадлежность		= Ложь;
	КонецЕсли;
КонецПроцедуры // ПриИзмененииПартнераКонтакногоЛица()

&НаКлиенте
// Процедура - обработчик изменения контактной информации при изменении лица.
//
// Параметры:
//	ТекущаяСтрока				- СтрокаТЧ	- Строка ТЧ
//
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	Если ЗначениеЗаполнено(ТекущаяСтрока.Лицо) Тогда
		ТекущаяСтрока.ПосетитМероприятие = 2;
		СтруктураПоиска	= Новый Структура("ОбъектКонтактнойИнформации", ТекущаяСтрока.Лицо); 
		// Телефон
		Если ИспользоватьОповещенияСМС Тогда
			СписокТелефонов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							ТекущаяСтрока.Телефон = "";
						Иначе
							ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						ТекущаяСтрока.Телефон = "";
					Иначе	
						ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
			СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
				ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						Адрес = ЭлементСписка.Значение;
						Если Адрес.Количество() = 0 Тогда
							ТекущаяСтрока.Адрес					= "";
							ТекущаяСтрока.ПредставлениеАдреса	= "";
						Иначе	
							ТекущаяСтрока.Адрес					= Адрес.Представление;
							ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					Адрес = СписокАдресов[0].Значение;
					Если Адрес.Количество() = 0 Тогда
						ТекущаяСтрока.Адрес					= "";
						ТекущаяСтрока.ПредставлениеАдреса	= "";
					Иначе	
						ТекущаяСтрока.Адрес					= Адрес.Представление;
						ТекущаяСтрока.ПредставлениеАдреса	= Строка(ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
					КонецЕсли;
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекущаяСтрока.Адрес					= "";
			ТекущаяСтрока.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Телефон = "";
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.ПредставлениеАдреса	= "";
	КонецЕсли;
	УстановитьПометкуУчастия();	
КонецПроцедуры // ПриИзмененииЛица()

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный номер телефона.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	ТелефонныйНомер = РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Телефон = ТелефонныйНомер.Представление;
КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
// Процедура - обработчик выбора e-mail.
//
// Параметры:
//	РезультатВыбора			- ЭлементСпискаЗначений	- Выбранный e-mail.
//	ДополнительныеПараметры	- Структура				- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораАдреса(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Адрес 										= РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Адрес	= Адрес.Представление;
	Если ДополнительныеПараметры.СвоеЛицо Тогда
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= Строка(ДополнительныеПараметры.ТекущаяСтрока.Лицо) + " <" + Адрес.Представление + ">";
	Иначе	
		ДополнительныеПараметры.ТекущаяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.Партнер, Строка(ДополнительныеПараметры.ТекущаяСтрока.Партнер), Строка(ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
		ДополнительныеПараметры.ТекущаяСтрока.Принадлежность		= (Адрес.Объект = ДополнительныеПараметры.ТекущаяСтрока.КонтактноеЛицо);
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораАдреса()	

&НаКлиенте
// Процедура устанавливает значения флажков в полях ТЧ.
//
// Параметры:
//	ИмяТЧ			- Строка	- Имя табличной части.
//	ИмяПоля			- Строка	- Имя колонки табличной части.
//	ЗначениеФлажка	- Булево	- Устанавливаемое значение.
//
Процедура УстановитьЗначениеФлажка(ИмяТЧ, ИмяПоля = Неопределено, ЗначениеФлажка)
	Для Каждого ЭлементКоллекции Из Объект[ИмяТЧ] Цикл
		Если ИмяПоля = Неопределено Тогда
			Если ИспользоватьНапоминания И (ИмяТЧ = "СвоиЛица") Тогда
				ЭлементКоллекции.ОтправлятьНапоминания = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияСМС Тогда
				ЭлементКоллекции.ОтправлятьСМС = ЗначениеФлажка;
			КонецЕсли;
			Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
				ЭлементКоллекции.ОтправлятьПоПочте = ЗначениеФлажка;
			КонецЕсли;
		Иначе
			ЭлементКоллекции[ИмяПоля] = ЗначениеФлажка;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьЗначениеФлажка()

&НаКлиенте
// Функция возвращает массив участников.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Массив	- Массив участников
//
Функция ПолучитьМассивУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивУчастников.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
				МассивУчастников.Добавить(СтрокаТаблицы.Лицо);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУчастников;
КонецФункции // ПолучитьМассивУчастников()	

&НаКлиенте
// Процедура устанавливает отметку у выбранной команды участия.
//
// Параметры:
//	Нет.
//
Процедура УстановитьПометкуУчастия()
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Элементы.СвоиЛицаПосещениеМероприятия.Видимость = Ложь;
	Иначе
		Элементы.СвоиЛицаПосещениеМероприятия.Видимость = Истина;
		//ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		//Элементы.СвоиЛицаПосещениеМероприятия.Видимость = (ТД.Лицо = ТекПользователь);
	КонецЕсли;
	Если Элементы.СвоиЛицаПосещениеМероприятия.Видимость Тогда
		Если ТД.ПосетитМероприятие = 0 Тогда
			ВыбранноеУчастие = "Нет";
		ИначеЕсли ТД.ПосетитМероприятие = 1 Тогда
			ВыбранноеУчастие = "Да";
		Иначе
			ВыбранноеУчастие = "МожетБыть";
		КонецЕсли;
		Для Каждого ТекЭлемент Из Элементы.СвоиЛицаПосещениеМероприятия.ПодчиненныеЭлементы Цикл
			ТекЭлемент.Пометка = (ТекЭлемент.Имя = ("СвоиЛицаМероприятие" + ВыбранноеУчастие));
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры // УстановитьПометкуУчастия()	

&НаКлиенте
// Процедура создает новый элемент ряда событий.
//
// Параметры:
//	Нет.
//
Процедура СоздатьНовыйЭлементРядСобытий()
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр(	"ru = 'Данные еще не записаны.
								|Установка признака периодичности возможна только после записи данных.
								|Данные будут записаны.'"));
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		СозданиеЭлементаРядаСобытий();
	КонецЕсли;

КонецПроцедуры // СоздатьНовыйЭлементРядСобытий()

&НаКлиенте
// Процедура обработки ответа на вопрос о записи документа.
//
Процедура ОбработкаОповещенияВопросОЗаписи(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Периодическое = Ложь;
		НастроитьВидимостьИДоступностьФормы();
		Возврат;
	КонецЕсли;
	СозданиеЭлементаРядаСобытий();
КонецПроцедуры

&НаКлиенте
Процедура СозданиеЭлементаРядаСобытий()
	Объект.Дата					= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	Объект.ОкончаниеМероприятия	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	
	ПараметрыФормы				= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаНачало)));
	ПараметрыФормы.Вставить("ВремяНачала", ВремяНачало);
	ПараметрыФормы.Вставить("ВремяКонца", ВремяОкончание);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Истина);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПризнакЗакрытия = Истина Тогда
			Если Дополнительно.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ВремяНачало			= Параметры.ВремяНачала;
					ВремяОкончание		= Параметры.ВремяКонца;
					ПризнакПериодическоеСобытиеИнициализация	= Истина;
					ПризнакИзмененоРасписание					= Истина;
					Объект.ИзмененоВРяде						= Ложь;
					Записать();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			Иначе
				Если Параметры.ДанныеБылиИзменены Тогда
					ВремяНачало		 = Параметры.ВремяНачала;
					ВремяОкончание	 = Параметры.ВремяКонца;
					ПризнакИзмененоРасписание = Истина;
					Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	Иначе
		Если Дополнительно.НовыйРяд Тогда
			Объект.Периодическое = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму расписания.
//
// Параметры:
//	Нет.
//
Процедура ОткрытьФормуРасписания()
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.Дата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ОкончаниеМероприятия);
	ПараметрыФормы = Новый Структура("Ключ", Объект.РядСобытий);
	
	ПараметрыФормы.Вставить("ВремяНачала", ДатаВремяНачала.Время);
	ПараметрыФормы.Вставить("ВремяКонца", ДатаВремяОкончания.Время);
	ПараметрыФормы.Вставить("ДатаНачала", НачалоДня(Объект.Дата));
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Ложь);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры // ОткрытьФормуРасписания()

&НаСервере
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Процедура ПроверитьНаличиеНовыхУчастников(ТекущийОбъект)
	НовыеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СторонниеЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СторонниеЛица.НайтиСтроки(Новый Структура("Партнер,КонтактноеЛицо", СтрокаУчастника.Партнер, СтрокаУчастника.КонтактноеЛицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= СтрокаУчастника.Партнер;
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.КонтактноеЛицо;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СвоиЛица Цикл
		МассивСтрок = ТекущийОбъект.Ссылка.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", СтрокаУчастника.Лицо));
		Если МассивСтрок.Количество() = 0 Тогда
			НоваяСтрока = НовыеУчастники.Добавить();
			НоваяСтрока.Партнер			= Справочники.Партнеры.ПустаяСсылка();
			НоваяСтрока.КонтактноеЛицо	= СтрокаУчастника.Лицо;
		КонецЕсли;
	КонецЦикла;
	ИзмененСоставСтороннихУчастников = (НовыеУчастники.Количество() > 0);
КонецПроцедуры // ПроверитьНаличиеНовыхУчастников()

&НаСервере
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Функция ПроверитьНаличиеУчастниковСобытия()
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_МероприятиеСторонниеЛица.Партнер,
	               |	CRM_МероприятиеСторонниеЛица.КонтактноеЛицо
	               |ИЗ
	               |	Документ.удалитьCRM_Мероприятие.СторонниеЛица КАК CRM_МероприятиеСторонниеЛица
	               |ГДЕ
	               |	CRM_МероприятиеСторонниеЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_МероприятиеСторонниеЛица.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_МероприятиеСторонниеЛица.КонтактноеЛицо = ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка),
	               |	CRM_МероприятиеСвоиЛица.Лицо
	               |ИЗ
	               |	Документ.удалитьCRM_Мероприятие.СвоиЛица КАК CRM_МероприятиеСвоиЛица
	               |ГДЕ
	               |	CRM_МероприятиеСвоиЛица.Ссылка = &Ссылка
	               |	И (НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	               |			ИЛИ НЕ CRM_МероприятиеСвоиЛица.Лицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	РезультатЗапроса = Запрос.Выполнить();			   
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции // ПроверитьНаличиеУчастниковСобытия()

&НаСервере
// Процедура заполняет таблицу оповещений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьТаблицуОповещений()
	Запрос = Новый Запрос;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь"	, Объект.Ответственный);
		Запрос.УстановитьПараметр("Предмет"			, Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения,
		|	CRM_Напоминания.Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
	Иначе
		ПризнакИзмененыОповещения = Истина;
		Запрос.УстановитьПараметр("Пользователь"	, Объект.Ответственный);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		|	ВЫБОР
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		|	КОНЕЦ КАК Канал,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОповещения";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", Объект.Дата));
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Объект.Ответственный);
		НоваяСтрокаТаб.ДатаОповещения = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьТаблицуОповещений()

&НаСервере
// Процедура пересчитывает даты оповещений.
//
// Параметры:
//	Нет.
//
Процедура ПересчитатьДатыОповещений()
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = СтрЗаменить(СтрокаТаб.ИмяПоля, "ПолеКанала_", "");
		ДатаОповещения = ДатаНачало;
		ВремяОповещения = ВремяНачало;
		СрокОповещения = СтрокаТаб.СрокОповещения;

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	СтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю"	,Ложь);
		СтрокаТаб.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(СтрокаТаб.ДатаОповещения > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
	КонецЦикла;
	ПризнакИзмененыОповещения = Истина;
КонецПроцедуры // ПересчитатьДатыОповещений()

&НаСервере
// Процедура добавляет оповещение.
//
// Параметры:
//	Нет.
//
Процедура ДобавитьОповещение()
	Ид = 0;
	Пока Ид < 5 Цикл
		Ид = Ид + 1;
		Если НЕ Элементы.Найти("ПолеКанала_"+Строка(Ид)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = _ТаблицаОповещений.Добавить();
		НоваяСтрока.Канал			= Перечисления.CRM_КаналыОповещений.Напоминание;
		НоваяСтрока.СрокОповещения	= 10;
		НоваяСтрока.Периодичность	= Перечисления.CRM_ПериодичностьОповещений.Минута;
		НоваяСтрока.ИмяПоля			= "ПолеКанала_"+Строка(Ид);
		НоваяСтрока.ДатаОповещения	= "ПолеКанала_"+Строка(Ид);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало)));
		СтруктураОповещения.Вставить("ВидОповещения"	,ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрока.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрока.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Пользователи.ТекущийПользователь());
		
		НоваяСтрока.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		Элемент = Элементы.Вставить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),Элементы.КаналыОповещений, Элементы._ДобавитьОповещение);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		Если ИспользоватьНапоминания Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.Напоминание;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.СМС;
		КонецЕсли;
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.СрокиОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = 10;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ПериодыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = Перечисления.CRM_ПериодичностьОповещений.Минута;
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), Элементы.УдалениеОповещений);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),Элементы.ДатыОповещений);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru='Планируемая дата оповещения';en='Schedulable date of the notification'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = НоваяСтрока.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		Прервать;
	КонецЦикла;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() = 5 Тогда
		Если НЕ Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
		КонецЕсли;
	КонецЕсли;
	ПризнакИзмененыОповещения	= Ложь;
КонецПроцедуры // ДобавитьОповещение()

&НаСервере
// Процедура удаляет оповещение.
//
// Параметры:
//	ИмяКоманды	- Строка	- Имя команды.
//
Процедура УдалитьОповещение(ИмяКоманды)
	ИдПолей = СтрЗаменить(ИмяКоманды, "УдалитьОповещение_","");
	Если НЕ Элементы.Найти("ПолеКанала_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеКанала_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеСрокаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеПериодаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("Кнопка_УдалитьОповещение_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеДатыОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеДатыОповещения_" + ИдПолей]);
	КонецЕсли;
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_" + ИдПолей));
	Если МассивСтрок.Количество() > 0 Тогда
		_ТаблицаОповещений.Удалить(_ТаблицаОповещений.Индекс(МассивСтрок[0]));
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид>5 Тогда Продолжить; КонецЕсли;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	Если Ид < 5 Тогда
		Если Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.КаналыОповещений);
			НовыйЭлемент.Заголовок	= "Добавить оповещение";
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьОповещение()

&НаСервере
// Процедура - обработчик события "ПриИзмененииОповещения".
//
// Параметры:
//	Ид	- Строка	- Идентификатор оповещения.
//
Процедура ПриИзмененииОповещения(Ид)
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля", "ПолеКанала_" + Ид));
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Канал			= ЭтотОбъект["_КаналОповещения" + Ид];
		МассивСтрок[0].СрокОповещения	= ЭтотОбъект["_СрокОповещения" + Ид];
		МассивСтрок[0].Периодичность	= ЭтотОбъект["_ПериодОповещения" + Ид];
		МассивСтрок[0].ДатаОповещения	= ЭтотОбъект["_ДатаОповещения" + Строка(Ид)];
	КонецЕсли;
КонецПроцедуры // ПриИзмененииОповещения()

&НаКлиенте
// Динамически подключаемый обработчик добавления оповещения.
//
// Параметры:
//	Элемент					- ЭлементФормы 	- Элемент формы.
//	СтандартнаяОбработка	- Булево		- Признак стандартной обработки.
//
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьОповещение();
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	// При добавлении оповещения изменения в форме не отражаются.
	Модифицированность = Истина;
КонецПроцедуры // Подключаемый_ДобавитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик удаления оповещения.
//
// Параметры:
//	Команда	- КомандаФормы 	- Команда формы.
//
Процедура Подключаемый_УдалитьОповещение(Команда)
	УдалитьОповещение(Команда.Имя);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры //  Подключаемый_УдалитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик начала выбора вида оповещения.
//
// Параметры:
//	Элемент					- ЭлементФормы 		- Элемент формы.
//	ДанныеВыбора			- СписокЗначений	- Данные выбора.
//	СтандартнаяОбработка	- Булево			- Признак стандартной обработки.
//
Процедура Подключаемый_НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Если ИспользоватьНапоминания Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.Напоминание"));
	КонецЕсли;
	Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта"));
	КонецЕсли;
	Если ИспользоватьОповещенияСМС Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.CRM_КаналыОповещений.СМС"));
	КонецЕсли;
КонецПроцедуры // Подключаемый_НачалоВыбора()

&НаКлиенте
// Динамически подключаемый обработчик изменения оповещения.
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	Если Найти(Элемент.Имя, "ПолеКанала_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеКанала_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеСрокаОповещения_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеПериодаОповещения_","");
	КонецЕсли;
	Если (Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0)
		ИЛИ (Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0) Тогда
		ДатаОповещения = ДатаНачало;
		ВремяОповещения = ВремяНачало;
		СрокОповещения = ЭтотОбъект["_СрокОповещения" + Строка(ИдПолей)];

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура(" Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ЭтотОбъект["_ПериодОповещения" + Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)]					= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		Элементы["ПолеДатыОповещения_"+Строка(ИдПолей)].ЦветТекста	= ?(ЭтотОбъект["_ДатаОповещения" + Строка(ИдПолей)] > ТекущаяДата(), Новый Цвет(25,85,174), Новый Цвет(255,0,0));
	КонецЕсли;
	ПриИзмененииОповещения(ИдПолей);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры // Подключаемый_ОповещениеПриИзменении()

&НаСервере
// Процедура устанавливает время начало и окончания по рабочему дню.
//
// Параметры:
//	Нет.
//
Процедура УстановитьВремяНачалоВремяОкончание()
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный, "ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	ВремяНачало	= ВремяНачалаРабочегоДня;
	ВремяОкончание	= ВремяОкончанияРабочегоДня;
КонецПроцедуры // УстановитьВремяНачалоВремяОкончание()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОПОВЕЩЕНИЙ ФОРМЫ

&НаКлиенте
// Процедура - обработчик выбора телефона.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Выбранное физическое лицо.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораСвоиЛица(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.СвоиЛица.Добавить();
		НоваяСтрока.Лицо = РезультатВыбора;
		ПриИзмененииЛица(НоваяСтрока);
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораСвоиЛица()

&НаКлиенте
// Процедура - обработчик подбора помещения по календарю.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораМеста(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
			Если НЕ ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
				Продолжить;
			КонецЕсли;
			Если (МинимальнаяВыбраннаяДата = Неопределено) ИЛИ (МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода) Тогда
				МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
			КонецЕсли;
			Если (МаксимальнаяВыбраннаяДата = Неопределено) ИЛИ (МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода) Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
			КонецЕсли;
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				Объект.Место		= СокрЛП(ДобавляемоеПомещение.Помещение);
				Объект.Помещение	= ДобавляемоеПомещение.Помещение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
			ДатаНачало		= ДатаВремя.Дата;
			ВремяНачало		= ДатаВремя.Время;
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
			ДатаОкончание	= ДатаВремя.Дата;
			ВремяОкончание	= ДатаВремя.Время;
			ДатаНачалоПриИзменении(Неопределено);
			ВремяНачалоПриИзменении(Неопределено);
			ДатаОкончаниеПриИзменении(Неопределено);
			ВремяОкончаниеПриИзменении(Неопределено);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораМеста()

&НаКлиенте
// Процедура - обработчик подбора участников.
//
// Параметры:
//	РезультатВыбора			- Массив		- Массив помещений.
//	ДополнительныеПараметры	- Структура		- Структура дополнительных параметров.
//
Процедура ОбработкаПодбораУчастников(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата	= Неопределено;
		МаксимальнаяВыбраннаяДата	= Неопределено;
		МассивВыбранныеПользователи	= Новый Массив();
		Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
			МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
			Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
				НоваяСтрока = Объект.СвоиЛица.Добавить();
				НоваяСтрока.Лицо	= ДобавляемыйПользователь.Пользователь;
				ПриИзмененииЛица(НоваяСтрока);
			КонецЕсли;
			Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
				МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
			КонецЕсли;
			Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
			КонецЕсли;
		КонецЦикла;
		Для Каждого УдаляемыйПользователь Из ДополнительныеПараметры.МассивУчастников Цикл
			Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
				НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", УдаляемыйПользователь));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					Объект.СвоиЛица.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
			ДатаНачало		= ДатаВремя.Дата;
			ВремяНачало		= ДатаВремя.Время;
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
			ДатаОкончание	= ДатаВремя.Дата;
			ВремяОкончание	= ДатаВремя.Время;
			ДатаНачалоПриИзменении(Неопределено);
			ВремяНачалоПриИзменении(Неопределено);
			ДатаОкончаниеПриИзменении(Неопределено);
			ВремяОкончаниеПриИзменении(Неопределено);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораУчастников()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "НаВесьДень".
//
Процедура НаВесьДеньПриИзменении(Элемент)
	НастроитьВидимостьИДоступностьФормы();
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		СкорректироватьДатуВремя(Ложь);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // НаВесьДеньПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ДатаНачало".
//
Процедура ДатаНачалоПриИзменении(Элемент)
	СкорректироватьДатуВремя(Истина);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ДатаНачалоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ДатаОкончание".
//
Процедура ДатаОкончаниеПриИзменении(Элемент)
	СкорректироватьДатуВремя(Ложь);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ДатаОкончаниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВремяНачало".
//
Процедура ВремяНачалоПриИзменении(Элемент)
	СкорректироватьДатуВремя(Истина);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ВремяНачалоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ВремяОкончание".
//
Процедура ВремяОкончаниеПриИзменении(Элемент)
	СкорректироватьДатуВремя(Ложь);
	ПересчитатьДатыОповещений();
	Модифицированность = Истина;
КонецПроцедуры // ВремяОкончаниеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ВремяНачало".
//
Процедура ВремяНачалоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяНачало");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачало, Элемент,,, ОписаниеОповещения);
КонецПроцедуры // ВремяНачалоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ВремяОкончание".
//
Процедура ВремяОкончаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Элемент", Элемент);
	Дополнительно.Вставить("Данные", "ВремяОкончание");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияВыбранногоВремени", ЭтотОбъект, Дополнительно);
	Если НачалоДня(ДатаНачало) = НачалоДня(ДатаОкончание) Тогда
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент, ВремяНачало, Истина, ОписаниеОповещения);
	Иначе
		CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончание, Элемент,,, ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры // ВремяОкончаниеНачалоВыбора()

&НаКлиенте
// Процедура обработки выбора времени из списка.
//
Процедура ОбработкаОповещенияВыбранногоВремени(ВыбранноеВремя, Дополнительно) Экспорт
	Если ВыбранноеВремя <> Неопределено Тогда
		ЭтотОбъект[Дополнительно.Данные] = ВыбранноеВремя.Значение;
		ВремяНачалоПриИзменении(Дополнительно.Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик выбора места.
//
// Параметры:
//	РезультатВыбора			- СправочникСсылка	- Результат выбора места.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораМеста(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Место = СокрЛП(РезультатВыбора);
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
		Объект.Помещение					= РезультатВыбора;
		Элементы.Место.РедактированиеТекста	= Ложь;
	Иначе
		Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		Элементы.Место.РедактированиеТекста	= Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораМеста()	

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "Место".
//
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораМеста	= Новый ОписаниеОповещения("ОбработкаВыбораМеста", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораМеста);
КонецПроцедуры // МестоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Очистка" элемента формы "Место".
//
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
КонецПроцедуры // МестоОчистка()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" элемента формы "Место".
//
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Массив = ВернутьПомещенияПоТексту(Текст);
	СписокПодбора = Новый СписокЗначений;
	Для Каждого Стр Из Массив Цикл
		СписокПодбора.Добавить(Стр);		
	КонецЦикла;
	ДанныеВыбора = СписокПодбора;
КонецПроцедуры // МестоАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "Помещение".
//
Процедура ПомещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Объект.Место = СокрЛП(ВыбранноеЗначение);
	Элементы.Место.РедактированиеТекста = Ложь;
КонецПроцедуры // ПомещениеОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
	Объект.ОтветственныйПосетитМероприятие	= 1;	
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура СторонниеЛицаПослеУдаления(Элемент)
// +ЕИС
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
// -ЕИС
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПриИзменении(Элемент)
	КоличествоЛиц = Объект.СторонниеЛица.Количество();
	Элементы.ГруппаСторонниеЛица.Заголовок = НСтр("ru='Сторонние лица';en='Indirect persons'")+?(КоличествоЛиц>0, " ("+Строка(КоличествоЛиц)+")", "");
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаПартнер".
//
Процедура СторонниеЛицаПартнерПриИзменении(Элемент)
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииПартнераКонтакногоЛица(ТД, Истина);
// +ЕИС
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
// -ЕИС
КонецПроцедуры // СторонниеЛицаПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаКонтактноеЛицо".
//
Процедура СторонниеЛицаКонтактноеЛицоПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
// +ЕИС
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
// -ЕИС
КонецПроцедуры // СторонниеЛицаКонтактноеЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СторонниеЛицаТелефон".
//
Процедура СторонниеЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
КонецПроцедуры // СторонниеЛицаТелефонНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СторонниеЛицаАдресПриИзменении(

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Ложь);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТД.Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТД.КонтактноеЛицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
КонецПроцедуры // СторонниеЛицаАдресНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СторонниеЛицаАдресОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СторонниеЛицаАдрес".
//
Процедура СторонниеЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТД = Элементы.СторонниеЛица.ТекущиеДанные;
	ТД.ПредставлениеАдреса	= Строка(ТД.Партнер) + " <" + Текст + ">";
КонецПроцедуры // СторонниеЛицаАдресОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" таблицы формы "СвоиЛица".
//
Процедура СвоиЛицаПриИзменении(Элемент)
	ИзмененСоставУчастников = Истина;
КонецПроцедуры // СвоиЛицаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы формы "СвоиЛица".
//
Процедура СвоиЛицаПриАктивизацииСтроки(Элемент)
	УстановитьПометкуУчастия();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СвоиЛицаЛицо".
//
Процедура СвоиЛицаЛицоПриИзменении(Элемент)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииЛица(ТД);
КонецПроцедуры // СвоиЛицаЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "СвоиЛицаТелефон".
//
Процедура СвоиЛицаТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ОписаниеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура("ОбъектКонтактнойИнформации", ТД.Лицо); 
	СписокТелефонов			= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
	ПоказатьВыборИзСписка(ОписаниеВыбораТелефона, СписокТелефонов, Элемент);
КонецПроцедуры // СвоиЛицаТелефонНачалоВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "СвоиЛицаАдрес".
//
Процедура СвоиЛицаАдресПриИзменении(Элемент)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СвоиЛицаАдресПриИзменении()
 
&НаКлиенте
Процедура СвоиЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущаяСтрока",	ТД);
	ДополнительныеПараметры.Вставить("СвоеЛицо",		Истина);
	ОписаниеВыбораАдреса	= Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, ДополнительныеПараметры);
	СтруктураПоиска			= Новый Структура("ОбъектКонтактнойИнформации", ТД.Лицо); 
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОписаниеВыбораАдреса, СписокАдресов, Элемент);
КонецПроцедуры // СвоиЛицаАдресНачалоВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "СвоиЛицаАдрес".
//
Процедура СвоиЛицаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если НЕ (РезультатПроверки.КодОшибки =  0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры // СвоиЛицаАдресОбработкаВыбора()
 
&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "ОкончаниеВводаТекста".
//
Процедура СвоиЛицаАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	ТД.ПредставлениеАдреса	= Строка(ТД.Лицо) + " <" + Текст + ">";
КонецПроцедуры // СвоиЛицаАдресОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Периодическое".
//
Процедура ПериодическоеПриИзменении(Элемент)
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы();
КонецПроцедуры // ПериодическоеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Нажатие" элемента формы "РядСобытийНаименование".
//
Процедура РядСобытийНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		СоздатьНовыйЭлементРядСобытий();
	Иначе
		ОткрытьФормуРасписания();
	КонецЕсли;
КонецПроцедуры // РядСобытийНаименованиеНажатие()

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик команды формы "УстановитьФлажки".
//
Процедура УстановитьФлажки(Команда)
	Если Команда.Имя = "СторонниеЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СторонниеЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Истина);
	ИначеЕсли Команда.Имя = "СвоиЛицаУстановитьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Истина);
	КонецЕсли;
КонецПроцедуры // УстановитьФлажки()

&НаКлиенте
// Процедура - обработчик команды формы "СнятьФлажки".
//
Процедура СнятьФлажки(Команда)
	Если Команда.Имя = "СторонниеЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица","ОтправлятьСМС",Ложь);
	ИначеЕсли Команда.Имя = "СторонниеЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СторонниеЛица", "ОтправлятьПоПочте", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьВсеФлажки" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", , Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиНапоминания" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьНапоминания", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиТелефон" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьСМС", Ложь);
	ИначеЕсли Команда.Имя = "СвоиЛицаСнятьФлажкиПочта" Тогда
		УстановитьЗначениеФлажка("СвоиЛица", "ОтправлятьПоПочте", Ложь);
	КонецЕсли;
КонецПроцедуры // СнятьФлажки()

&НаКлиенте
// Процедура - обработчик команды формы "ПодобратьМесто".
//
Процедура ПодобратьМесто(Команда)
	ДополнительныеПараметры		= Новый Структура;
	ОписаниеПодбораМеста		= Новый ОписаниеОповещения("ОбработкаПодбораМеста", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Место",							Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачало + (ВремяНачало - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончание + (ВремяОкончание - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораМеста);
КонецПроцедуры // ПодобратьМесто()

&НаКлиенте
// Процедура - обработчик команды формы "ПодобратьУчастников".
//
Процедура ПодобратьУчастников(Команда)
	МассивУчастников			= ПолучитьМассивУчастников();
	ДополнительныеПараметры		= Новый Структура("МассивУчастников", МассивУчастников);
	ОписаниеПодбораУчастников	= Новый ОписаниеОповещения("ОбработкаПодбораУчастников", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",						МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачало + (ВремяНачало - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончание + (ВремяОкончание - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораУчастников);
КонецПроцедуры // ПодобратьУчастников()

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьФизЛицо".
//
Процедура ДобавитьФизЛицо(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ДобавитьФизЛицо()

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "УчастиеВМероприятии".
//
Процедура УчастиеВМероприятии(Команда)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда
		Возврат;
	ИначеЕсли Команда.Имя = "МероприятиеДа" Тогда
		ТД.ПосетитМероприятие = 1;	
	ИначеЕсли Команда.Имя = "МероприятиеМожетБыть" Тогда
		ТД.ПосетитМероприятие = 2;	
	ИначеЕсли Команда.Имя = "МероприятиеНет" Тогда
		ТД.ПосетитМероприятие = 0;	
	КонецЕсли;
	УстановитьПометкуУчастия();
	Модифицированность = Истина;
КонецПроцедуры // УчастиеВМероприятии()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДанныеВзаимодействия = Неопределено;
	Если Параметры.Свойство("ДанныеВзаимодействия", ДанныеВзаимодействия) ИЛИ ДанныеФормыВЗначение(Объект,Тип("ДокументОбъект.удалитьCRM_Мероприятие")).ДополнительныеСвойства.Свойство("ДанныеВзаимодействия", ДанныеВзаимодействия) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДанныеВзаимодействия);
		Если ДанныеВзаимодействия.Свойство("Партнер") Тогда
			СтрокаСторонниеЛица = Объект.СторонниеЛица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСторонниеЛица, ЭтотОбъект.Параметры.ДанныеВзаимодействия);
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Если ЗначениеЗаполнено(Параметры.Основание.Партнер) Тогда
			СтрокаСторонниеЛица = Объект.СторонниеЛица.Добавить();
			СтрокаСторонниеЛица.Партнер = Параметры.Основание.Партнер;
			СтрокаСторонниеЛица.КонтактноеЛицо = Параметры.Основание.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	Если ЭтотОбъект.Параметры.Свойство("Взаимодействие") Тогда
		ЭтотОбъект.Взаимодействие	= ЭтотОбъект.Параметры.Взаимодействие;
	КонецЕсли;
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = Пользователи.АвторизованныйПользователь(); 
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Объект.Подразделение	= Объект.Ответственный.Подразделение;
			Объект.ОтветственныйПосетитМероприятие	= 1;			
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();			
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.ОкончаниеМероприятия) Тогда
			Объект.ОкончаниеМероприятия = Объект.Дата + 3600;			
		КонецЕсли;	
		//Если ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.ДокументОснование.ПолучитьОбъект() = Неопределено Тогда
		//	ТребуетсяПредварительноЗаписатьИнтерес = Истина;
		//	
		//КонецЕсли;
		
		Если Параметры.Свойство("ЗаполняемИзПланировщика") Тогда
			Объект.Дата					= Параметры.Дата;
			Объект.ОкончаниеМероприятия	= Параметры.ОкончаниеМероприятия;
			Объект.Тема					= Параметры.Тема;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Состояние) Тогда
			Объект.Состояние = Справочники.CRM_СостоянияСобытий.Запланировано;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Начало") Тогда
		Объект.Дата = Параметры.Начало;
	КонецЕсли;
	Если Параметры.Свойство("Окончание") Тогда
		Объект.ОкончаниеМероприятия = Параметры.Окончание;
	КонецЕсли;
	Если Параметры.Свойство("Наименование") Тогда
		Объект.Тема = Параметры.Наименование;
	КонецЕсли;
	
	ОтрисоватьКатегорииНаФорме();
	
	ЗаполнитьГруппуОповещений();
	
	ПериодическоеСтароеЗначение = Объект.Периодическое;
	
	ПредставлениеДокументаОснования = Формат(Объект.ДокументОснование);
	Элементы.ДокументОснование.Видимость = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
		Объект.Подразделение	= Объект.Ответственный.Подразделение;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение	= Объект.Ответственный.Подразделение;
	КонецЕсли;
	
	// Устанавливаем отбор по подразделению для тегов
	// подразделение из текущего пользователя.
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
	
	СформироватьПредставлениеВложений();
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	ЗаполнитьДанныеФормы();
	// Если текущий пользователь есть в участниках, то позиционируемся на него.
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	МассивСтрок = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекПользователь));
	Если МассивСтрок.Количество() > 0 Тогда
		//ЭтаФорма.ТекущийЭлемент = Элементы.ГруппаУчастники;
		Элементы.СвоиЛица.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	НастроитьВидимостьИДоступностьФормы();
	
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() И Объект.СторонниеЛица.Количество()>0 Тогда
		Для каждого ТекущаяСтрока из Объект.СторонниеЛица Цикл
			ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
		КонецЦикла;
	КонецЕсли;
	СторонниеЛицаПриИзменении(Неопределено);
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ДекорацияФормы") или ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда Продолжить конецЕсли;
		Элемент.Доступность = Ложь;
	КонецЦикла;	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если ТребуетсяПредварительноЗаписатьИнтерес Тогда
	//	Отказ = Истина;
	//	ОП = Новый ОписаниеОповещения("ОбработчикОповещенияЗаписиИнтереса", ЭтотОбъект);
	//	ПоказатьВопрос(ОП, "Требуется записать интерес. Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	//КонецЕсли;
	//
	
	Если ЭтотОбъект.Модифицированность И ВопросИзмененияЗадавался Тогда
		ВопросИзмененияЗадавался = Ложь;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
	ДатаНовая				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачало, ВремяНачало);
	ОкончаниеСобытияНовое	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончание, ВремяОкончание);
	Объект.Дата					= ДатаНовая;
	Объект.ОкончаниеМероприятия	= ОкончаниеСобытияНовое;
	
	Если Не ВопросИзмененияЗадавался Тогда
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			бПризнакИзмененоВРяде = Неопределено;
			Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде И НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
				// Проверка на то, что даты были изменены больше чем на день - для периодического события это означает установку
				// флага ИзмененоВРяде.
				ДатаСтарая				= Объект.Дата;
				ОкончаниеСобытияСтарое	= Объект.ОкончаниеМероприятия;
				бИзмененаДатаНачала		= НЕ (НачалоДня(ДатаСтарая) = НачалоДня(ДатаНовая));
				бИзмененаДатаОкончания	= НЕ (НачалоДня(ОкончаниеСобытияСтарое) = НачалоДня(ОкончаниеСобытияНовое));
				Если бИзмененаДатаНачала ИЛИ бИзмененаДатаОкончания Тогда
					бПризнакИзмененоВРяде = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Если Не ПризнакПериодическоеСобытиеИнициализация Тогда
				Если Объект.Периодическое Тогда
					Если НЕ Объект.ИзмененоВРяде И (бПризнакИзмененоВРяде = Истина) Тогда
						Объект.ИзмененоВРяде = Истина;
					КонецЕсли;
				ИначеЕсли ПериодическоеСтароеЗначение И НЕ Объект.ИзмененоВРяде Тогда
					// Снята пометка "Периодическое".
					ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда";
				КонецЕсли;
				Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде Тогда
					Если ПризнакПериодическоеСобытиеИнициализация Тогда
						ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
					Иначе
						Если НЕ Модифицированность И НЕ ПризнакИзмененоРасписание Тогда
							ПериодическоеСобытиеСпособИзмененияРяда = "";
						Иначе
							ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив());
							Если НЕ ПризнакИзмененоРасписание Тогда
								ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
							КонецЕсли;
							ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
							ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
							
							Отказ = Истина;
							ОП = Новый ОписаниеОповещения("ОбработчикОповещенияСпособаИзмененияРяда", ЭтотОбъект);
							ОткрытьФорму("Документ.удалитьCRM_Мероприятие.Форма.ФормаИзменениеПериодическогоСобытия", ПараметрыФормы, ЭтотОбъект,,,,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью()

&НаКлиенте
Процедура ОбработчикОповещенияСпособаИзмененияРяда(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПринятьИзменения = Истина Тогда 
			ПериодическоеСобытиеСпособИзмененияРяда = Параметры.СпособИзмененияРяда;
			ВопросИзмененияЗадавался = Истина;
			Записать();
		Иначе
			ВопросИзмененияЗадавался = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// &НаКлиенте
//Процедура ОбработчикОповещенияЗаписиИнтереса(Параметры, Дополнительно) Экспорт
//	Если Параметры <> Неопределено Тогда
//		Если Параметры =  КодВозвратаДиалога.Да Тогда
//			ТребуетсяПредварительноЗаписатьИнтерес = Ложь;
//			Оповестить("ЗаписатьИнтерес", ЭтотОбъект.ВладелецФормы.УникальныйИдентификатор);
//			Записать();
//		КонецЕсли;
//	КонецЕсли
//КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СторонниеЛица.Свернуть("Партнер,КонтактноеЛицо,Адрес,ПредставлениеАдреса,Принадлежность,Телефон","ОтправлятьСМС,ОтправлятьПоПочте");
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если (ПризнакПериодическоеСобытиеИнициализация Или ПризнакИзмененоРасписание) И ТекущийОбъект.Периодическое Тогда
			Если ПризнакПериодическоеСобытиеИнициализация Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
			КонецЕсли;
			ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.Дата, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			Иначе
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			КонецЕсли;
			
			Если МассивДатРасписания.Количество() = 0 Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!';en='The schedule of periodic event are adjust incorrectly - to the specified period did not get any event!'"));
					//НастроитьВидимостьИДоступностьФормы(ЭтаФорма);
					Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
					Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;
					Возврат;
				КонецЕсли;
			Иначе
				ДатаВремяПервоеСобытие = МассивДатРасписания[0];
				ТекущийОбъект.Дата = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.Дата - НачалоДня(ТекущийОбъект.Дата)) ;
				ТекущийОбъект.ОкончаниеМероприятия = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ОкончаниеМероприятия - НачалоДня(ТекущийОбъект.ОкончаниеМероприятия));
			КонецЕсли;
		Иначе
			Если ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если	ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд"
					ИЛИ	ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					//
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				ИначеЕсли Не Модифицированность Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				КонецЕсли;
			ИначеЕсли Не ТекущийОбъект.Периодическое И ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) И Не ТекущийОбъект.ИзмененоВРяде Тогда
				Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
					ТекущийОбъект.мНеУстанавливатьПризнакИзмененоВРяде		= Истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Признаки. по которым в дальнейшем после записи будем определять, надо ли	оповестить участников мероприятия.
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоМероприятия = ЭтоНовыйОбъект;
	Если НЕ ЭтоНовыйОбъект Тогда
		Если НЕ (ТекущийОбъект.Дата = ТекущийОбъект.Ссылка.Дата) ИЛИ НЕ (ТекущийОбъект.ОкончаниеМероприятия = ТекущийОбъект.Ссылка.ОкончаниеМероприятия) Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
		Если НЕ (ТекущийОбъект.Место = ТекущийОбъект.Ссылка.Место) Тогда
			ПризнакИзмененоМестоМероприятия = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ (Год(ТекущийОбъект.Дата) = Год(ТекущийОбъект.Ссылка.Дата)) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПроверитьНаличиеНовыхУчастников(ТекущийОбъект);
	КонецЕсли;
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
	
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(ЭтотОбъект._ТаблицаОповещений, Тип("ТаблицаЗначений"));
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Новое",			ПризнакНовогоМероприятия);
	СтруктураИзменений.Вставить("ИзмененаДата",		ПризнакИзмененаДата);
	СтруктураИзменений.Вставить("ИзмененоМесто",	ПризнакИзмененоМестоМероприятия);
	//СтруктураИзменений.Вставить("Отменено",		ЭтаФорма.ПризнакОтменыСобытия);
	//СтруктураИзменений.Вставить("Завершено",		ЭтаФорма.ПризнакЗавершенияСобытия);
	СтруктураИзменений.Вставить("ИзмененСостав",	ИзмененСоставСтороннихУчастников);
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений",					ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ЭтоНовоеСобытие",								ПризнакНовогоМероприятия);
	СтруктураДанных.Вставить("ИзмененСоставУчастников",						ИзмененСоставУчастников);
	СтруктураДанных.Вставить("ПризнакПериодическоеСобытиеИнициализация",	ПризнакПериодическоеСобытиеИнициализация);
	СтруктураДанных.Вставить("Пользователь",								ТекущийОбъект.Ответственный);
	СтруктураДанных.Вставить("Состояние",									СтруктураИзменений);
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	Если ПризнакИзмененыОповещения ИЛИ ПризнакПериодическоеСобытиеИнициализация ИЛИ ИзмененСоставУчастников Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(ТекущийОбъект.Ссылка, АдресНастроек);
		ИзмененСоставУчастников	= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
КонецПроцедуры // ПриЗаписиНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПослеЗаписиНаСервере".
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
			// Если удаляются все события ряда, форма должна быть закрыта после записи, т.к. объекта, связанного с формой, уже
			// не будет.
			ЗакрытьФормуПослеЗаписиСОповещением = Истина;
			// Объект нужно разблокировать т.к. он будет удаляться программно.
			Попытка
				ТекущийОбъект.Разблокировать();
			Исключение
			КонецПопытки;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
		ИначеЕсли ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде И ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРяда) Тогда
			Если ПризнакИзмененоРасписание Тогда
				//ЗакрытьФормуПослеЗаписиСОповещением = Истина;
				// Объект нужно разблокировать т.к. он будет изменяться программно.
				Попытка
					ТекущийОбъект.Разблокировать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.Дата,,АдресНастроек);
		КонецЕсли;
		ПериодическоеСобытиеСпособИзмененияРяда		= "";
		ПризнакПериодическоеСобытиеИнициализация	= Ложь;
		ПризнакИзмененоРасписание					= Ложь;
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры // ПослеЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// Посмотрим, надо ли оповестить участников события об изменениях.
	Если ПризнакНовогоМероприятия ИЛИ ПризнакИзмененаДата ИЛИ ИзмененСоставСтороннихУчастников ИЛИ ПризнакИзмененоМестоМероприятия Тогда
		Если ПроверитьНаличиеУчастниковСобытия() Тогда
			СтруктураИзменений = Новый Структура;
			СтруктураИзменений.Вставить("Новое",			ПризнакНовогоМероприятия);
			СтруктураИзменений.Вставить("ИзмененаДата",		ПризнакИзмененаДата);
			СтруктураИзменений.Вставить("ИзмененоМесто",	ПризнакИзмененоМестоМероприятия);
			СтруктураИзменений.Вставить("ИзмененСостав",	ИзмененСоставСтороннихУчастников);
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Событие",			Объект.Ссылка);
			СтруктураОповещения.Вставить("НовыеУчастники",	НовыеУчастники);
			СтруктураОповещения.Вставить("Состояние",		СтруктураИзменений);
			CRM_ОповещенияСервер.ОповеститьУчастниковСобытия(СтруктураОповещения);
		КонецЕсли;
		ПризнакНовогоМероприятия			= Ложь;
		ПризнакИзмененаДата					= Ложь;
		ПризнакИзмененоМестоМероприятия		= Ложь;
		ИзмененСоставСтороннихУчастников	= Ложь;
	КонецЕсли;
	ПредставлениеДокументаОснования = Формат(Объект.ДокументОснование);
	Оповестить("ОбновитьПланировщик");
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;	
КонецПроцедуры // ПослеЗаписи()

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(,Объект.ДокументОснование);
КонецПроцедуры

// +ГруппаИнтерес

#КонецОбласти

#Область ПривязкаДокументовКИнтересамКлиентов

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КлиентСписок) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.КлиентСписок);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтересОбработкаВыбора(ВыбранноеЗначение, Результат)
	CRM_ОбщегоНазначенияКлиент.ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	
	CRM_ОбщегоНазначенияКлиент.ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// -ГруппаИнтерес

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Интерес" Тогда
		Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество()  > 0 Тогда
			Если Параметр = ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка Тогда
				ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Если ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги") Тогда
		Подключаемый_ОбновитьОблакоТегов();
	Иначе
		Элементы.ОблакоТегов.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий, Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.удалитьCRM_Мероприятие.Форма.ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

#Область РаботаСВложениями_Мероприятие

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...';en='No attachments ...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	Вложения = ПолучитьВложенияМероприятия();
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...';en='No attachments ...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияМероприятия()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	удалитьCRM_МероприятиеПрисоединенныеФайлы.Ссылка,
	|	удалитьCRM_МероприятиеПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	удалитьCRM_МероприятиеПрисоединенныеФайлы.Размер КАК Размер
	|ИЗ
	|	Справочник.удалитьCRM_МероприятиеПрисоединенныеФайлы КАК удалитьCRM_МероприятиеПрисоединенныеФайлы
	|ГДЕ
	|	удалитьCRM_МероприятиеПрисоединенныеФайлы.ВладелецФайла = &Мероприятие
	|	И НЕ удалитьCRM_МероприятиеПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Мероприятие", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ВложенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Мероприятие не записано. Добавление файлов невозможно!';en='The event is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗакрытиеПрисоединенныхФайлов", ЭтотОбъект);
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено, ,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры
			 
&НаКлиенте
Процедура ЗакрытиеПрисоединенныхФайлов(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьПредставлениеВложений();
КонецПроцедуры
			 
#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры
