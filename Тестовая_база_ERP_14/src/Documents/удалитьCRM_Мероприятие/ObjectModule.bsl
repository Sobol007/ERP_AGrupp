
Перем мНеУстанавливатьПризнакИзмененоВРяде Экспорт; // Признак того, что не нужно устанавливать флаг ИзмененоВРяде.
Перем КонвертацияИнтересов Экспорт; // Запрещать изменение состояния, если документ создаётся конвертированием из события

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Процедура заполняет список участников мероприятия
//
// Параметры: Нет
//
Процедура ЗаполнитьСписокУчастников() Экспорт
	
	СписокКлиентов = "";
	СписокУчастников = "";
	Для Каждого Участник Из СторонниеЛица Цикл
		Если ЗначениеЗаполнено(Участник.Партнер) Тогда
			СписокКлиентов = СписокКлиентов + ?(СписокКлиентов = "","","; ") + Участник.Партнер;
		КонецЕсли;
		Если ЗначениеЗаполнено(Участник.КонтактноеЛицо) Тогда
			СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.КонтактноеЛицо;
		КонецЕсли;
	КонецЦикла;
	Для Каждого Участник Из СвоиЛица Цикл
		СписокУчастников = СписокУчастников + ?(СписокУчастников = "","","; ") + Участник.Лицо;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения.Ссылка;
		ЭтотОбъект.Описание				= ДанныеЗаполнения.Описание;
		ЭтотОбъект.Ответственный		= ДанныеЗаполнения.Ответственный;
		ЭтотОбъект.Подразделение		= ДанныеЗаполнения.Подразделение;
		ЭтотОбъект.Тема					= ДанныеЗаполнения.Тема;
		ЭтотОбъект.Организация			= ДанныеЗаполнения.Организация;
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
	//	ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения.ДокументОснование;
	//	ЭтотОбъект.Ответственный		= ДанныеЗаполнения.Ответственный;
	//	ЭтотОбъект.Подразделение		= ДанныеЗаполнения.Подразделение;
	//	ЭтотОбъект.Тема					= ДанныеЗаполнения.Содержание;
	//	ЭтотОбъект.Автор				= ДанныеЗаполнения.Автор;
	//	ЭтотОбъект.Дата					= ДанныеЗаполнения.ПлановаяДата;
	//	ЭтотОбъект.Организация			= ДанныеЗаполнения.Организация;
	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Партнеры") Тогда
	    Если ДанныеЗаполнения.Ссылка.ЭтоГруппа Тогда
			СтандартнаяОбработка = Ложь;	
			Возврат;
		КонецЕсли;
		ЭтотОбъект.Автор				= Пользователи.АвторизованныйПользователь();
		ЭтотОбъект.Ответственный		= ДанныеЗаполнения.ОсновнойМенеджер;
		ЭтотОбъект.Подразделение		= ДанныеЗаполнения.ОсновнойМенеджер.Подразделение;
		НоваяСтрока = ЭтотОбъект.СторонниеЛица.Добавить();
		НоваяСтрока.Партнер = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.КонтактноеЛицо = ДанныеЗаполнения.CRM_ОсновноеКонтактноеЛицо;
		СтруктураПоиска	= Новый Структура;
		СтруктураПоиска.Вставить("Партнер",			НоваяСтрока.Партнер); 
		СтруктураПоиска.Вставить("КонтактноеЛицо",	НоваяСтрока.КонтактноеЛицо); 
		// Телефон
		Если Константы.CRM_ИспользоватьОповещенияСМС.Получить() Тогда
			СписокТелефонов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
			Если СписокТелефонов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокТелефонов Цикл
					Если ЭлементСписка.Пометка Тогда
						ТелефонныйНомер = ЭлементСписка.Значение;
						Если ТелефонныйНомер.Количество() = 0 Тогда
							НоваяСтрока.Телефон = "";
						Иначе	
							НоваяСтрока.Телефон = ТелефонныйНомер.Представление;
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					ТелефонныйНомер = СписокТелефонов[0].Значение;
					Если ТелефонныйНомер.Количество() = 0 Тогда
						НоваяСтрока.Телефон = "";
					Иначе	
						НоваяСтрока.Телефон = ТелефонныйНомер.Представление;
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока.Телефон = "";
			КонецЕсли;
		Иначе
			НоваяСтрока.Телефон = "";
		КонецЕсли;
		// E-майл
		Если Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить() Тогда
			СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
			Если СписокАдресов.Количество() > 0 Тогда
				ЕстьДляОповещений = Ложь;
				Для Каждого ЭлементСписка Из СписокАдресов Цикл
					Если ЭлементСписка.Пометка Тогда
						Адрес = ЭлементСписка.Значение;
						Если Адрес.Количество() = 0 Тогда
							НоваяСтрока.Адрес					= "";
							НоваяСтрока.ПредставлениеАдреса	= "";
							НоваяСтрока.Принадлежность		= Ложь;
						Иначе	
							НоваяСтрока.Адрес					= Адрес.Представление;
							НоваяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = НоваяСтрока.Партнер,Строка(НоваяСтрока.Партнер), Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
							НоваяСтрока.Принадлежность		= (Адрес.Объект = НоваяСтрока.КонтактноеЛицо);
						КонецЕсли;
						ЕстьДляОповещений = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если НЕ ЕстьДляОповещений Тогда
					Адрес = СписокАдресов[0].Значение;
					Если Адрес.Количество() = 0 Тогда
						НоваяСтрока.Адрес					= "";
						НоваяСтрока.ПредставлениеАдреса	= "";
						НоваяСтрока.Принадлежность		= Ложь;
					Иначе	
						НоваяСтрока.Адрес					= Адрес.Представление;
						НоваяСтрока.ПредставлениеАдреса	= ?(Адрес.Объект = НоваяСтрока.Партнер,Строка(НоваяСтрока.Партнер),Строка(НоваяСтрока.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
						НоваяСтрока.Принадлежность		= (Адрес.Объект = НоваяСтрока.КонтактноеЛицо);
					КонецЕсли;
				КонецЕсли;
			Иначе
				НоваяСтрока.Адрес					= "";
				НоваяСтрока.ПредставлениеАдреса	= "";
				НоваяСтрока.Принадлежность		= Ложь;
			КонецЕсли;
		Иначе
			НоваяСтрока.Адрес					= "";
			НоваяСтрока.ПредставлениеАдреса	= "";
			НоваяСтрока.Принадлежность		= Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ЗаполняемИзПланировщика") Тогда
			
			Тема					= ДанныеЗаполнения.Тема;
			Дата					= ДанныеЗаполнения.Дата;
			ОкончаниеМероприятия	= ДанныеЗаполнения.ОкончаниеМероприятия;
			Автор					= Пользователи.ТекущийПользователь();
			Ответственный			= Пользователи.ТекущийПользователь();
			Состояние				= Справочники.CRM_СостоянияСобытий.Запланировано;
			
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяКатегорияСобытия");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				ОсновнаяКатегория = ЗначениеНастройки;
			КонецЕсли;
			
			ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
				Если Организация <> ЗначениеНастройки Тогда
					Организация = ЗначениеНастройки;
				КонецЕсли;
			Иначе
				Организация = CRM_ОбщегоНазначенияСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
		Иначе
			Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
				CRM_ОбщегоНазначенияСервер.ЗаполнитьИнтересСостояние(ЭтотОбъект, ДанныеЗаполнения.ДокументОснование, Истина);
			КонецЕсли;	
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
			//ЭтотОбъект.ДокументОснование	= ДанныеЗаполнения.ДокументОснование;
			//ЭтотОбъект.Ответственный		= ДанныеЗаполнения.Ответственный;
			//ЭтотОбъект.Подразделение		= ДанныеЗаполнения.Подразделение;
			//ЭтотОбъект.Тема					= ДанныеЗаполнения.Тема;
			//ЭтотОбъект.Автор				= ДанныеЗаполнения.Автор;
			//ЭтотОбъект.Дата					= ДанныеЗаполнения.Дата;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСписокУчастников();
	
	Если Периодическое И ЗначениеЗаполнено(РядСобытий) И Не ИзмененоВРяде И мНеУстанавливатьПризнакИзмененоВРяде <> Истина Тогда
		ИзмененоВРяде = Истина;
		Периодическое = Ложь;
	КонецЕсли;
	
	// Проверка на Дубли строк в Табличных частях "Свои лица" и "Сторонние лица".
	
	Если Не ЗначениеЗаполнено(Ссылка) И НЕ КонвертацияИнтересов Тогда
		Состояние = Справочники.CRM_СостоянияСобытий.Запланировано;		
	КонецЕсли; 
	
КонецПроцедуры // ПередЗаписью()

#КонецОбласти

#КонецЕсли

Процедура ОбработкаСозданияНовогоРяда()
	// удалим сначала старые 
	ДатаНачала = Дата;
	ДатаОкончания = РядСобытий.ДатаОкончания;
	ДатаНачала		= НачалоДня(ДатаНачала);
	ДатаОкончания	= НачалоДня(ДатаОкончания);
	Если ДатаОкончания <= ДатаНачала Тогда
		РезультатЗапросаПоСобытиямРяда = CRM_МероприятияСервер.ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,, Мин(ДатаНачала, ДатаОкончания),, Истина, Истина);
	Иначе
		РезультатЗапросаПоСобытиямРяда = CRM_МероприятияСервер.ПолучитьРезультатЗапросаПоМероприятиямРяда(РядСобытий,Ссылка, ДатаНачала, ДатаОкончания, Истина, Истина);
	КонецЕсли;
    ТаблицаСобытий = РезультатЗапросаПоСобытиямРяда.Выгрузить();
	Для Каждого СтрокаСобытия Из  ТаблицаСобытий Цикл
		// Удалим запись из регистра до записи события, при записи события 
		// с пометкой удаления регистр уже очищается.
		НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(СтрокаСобытия.Мероприятие);
		НаборЗаписей.Прочитать();
		
		ИдентификаторПовтСобытия =  НаборЗаписей[0].Идентификатор;
		
		ОбъектСобытия = СтрокаСобытия.Мероприятие.ПолучитьОбъект();
		ОбъектСобытия.ПометкаУдаления = Истина;
		ОбъектСобытия.Записать();
		АвторСобытия = Неопределено;
	КонецЦикла;

	НовоеРасписание = РядСобытий.Расписание.Получить();
	СтароеРасписание = Неопределено;
	НаборЗаписейРегистра = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(Ссылка);
	НаборЗаписейРегистра.Прочитать();

	Если НЕ НаборЗаписейРегистра.Количество()= 0 Тогда
		СтароеРасписание = НаборЗаписейРегистра[0].Расписание.Получить();
		ИдПовтСобытия =  НаборЗаписейРегистра[0].Идентификатор;
		АвторСобытия = Неопределено;
	КонецЕсли;
	Если СтароеРасписание <> Неопределено Тогда
						
		НовыйРяд = Справочники.CRM_РядыСобытий.СоздатьЭлемент();
		НовыйРяд.ДатаОкончания  = РядСобытий.ДатаОкончания;
		НовоеРасписание = РядСобытий.Расписание.Получить();  
		НовоеРасписание.ВремяНачала = Дата(1,1,1)+ Час(ЭтотОбъект.Дата)*3600+Минута(ЭтотОбъект.Дата)*60+Секунда(ЭтотОбъект.Дата);
		НовоеРасписание.ВремяКонца  = Дата(1,1,1)+ Час(ЭтотОбъект.ОкончаниеМероприятия)*3600+Минута(ЭтотОбъект.ОкончаниеМероприятия)*60+Секунда(ЭтотОбъект.ОкончаниеМероприятия);
		НовыйРяд.Расписание =  Новый ХранилищеЗначения(НовоеРасписание, Новый СжатиеДанных());
		
		// Вернем обратно значения предыдущего расписания.
		СтарыйРяд = РядСобытий.Получитьобъект();
		СтарыйРяд.ДатаОкончания = Дата;
		СтарыйРяд.Расписание = Новый ХранилищеЗначения(СтароеРасписание, Новый СжатиеДанных);
		СтарыйРяд.Наименование = Строка(СтароеРасписание);
		СтарыйРяд.Записать();
		
		НовыйРяд.ДатаНачала = Дата;  
		НовыйРяд.Наименование  = Строка(НовыйРяд.Расписание.Получить());
		НовыйРяд.Записать();
		ЭтотОбъект.РядСобытий = НовыйРяд.Ссылка;
	КонецЕсли;

КонецПроцедуры

КонвертацияИнтересов = Ложь;
