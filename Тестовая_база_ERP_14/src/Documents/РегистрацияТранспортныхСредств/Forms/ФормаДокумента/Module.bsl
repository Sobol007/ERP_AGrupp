
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем СтруктураСохраняемыхРеквизитов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	#Область СтандартныеПодсистемы
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СтруктураСохраняемыхРеквизитов = Новый Структура;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ВыполнитьИнициализацию();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_РегистрацияТранспортныхСредств", ПараметрыЗаписи, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваПриИзменении(Элемент)
	
	СтруктураКодов = КодыВидовТС.Получить(Объект.КодВидаТранспортногоСредства);
	
	Если СтруктураКодов <> Неопределено Тогда
		
		КодЕдиницыИзмерения = Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.НайтиПоЗначению(СтруктураКодов.КодЕдиницыИзмерения);
		Если КодЕдиницыИзмерения <> Неопределено Тогда
			Объект.ЕдиницаИзмеренияНалоговойБазы = КодЕдиницыИзмерения.Значение;
		Иначе
			Объект.ЕдиницаИзмеренияНалоговойБазы = "";
		КонецЕсли;
			
		УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьНаименованиеВидаТС(ЭтаФорма);
	ЗаполнитьНалоговуюСтавку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СписокВыбораКодовТС.Количество() = 0 Тогда
	
		СписокВыбораКодовТС = Новый СписокЗначений;
		СписокВыбораКодовТС.Добавить("51000", НСтр("ru = '51000 Автомобили легковые';
													|en = '51000 Passenger cars'"));
		СписокВыбораКодовТС.Добавить("51004", НСтр("ru = '51004 - прочие автомобили легковые (кроме включенных по кодам 56600, 56700)';
													|en = '51004 - other cars (except for included by 56600, 56700 codes)'"));
		СписокВыбораКодовТС.Добавить("52001", НСтр("ru = '52001 Автомобили грузовые (кроме включенных по коду 57000)';
													|en = '52001 Trucks (except for included by 57000 code)'"));
		
	КонецЕсли;
	
	Если СписокВыбораКодовТС.НайтиПоЗначению("ФормаВыбораКодаТС") = Неопределено Тогда
		СписокВыбораКодовТС.Добавить("ФормаВыбораКодаТС", НСтр("ru = 'Другие коды видов ТС...';
																|en = 'Other codes of vehicle kinds...'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаКодВидаТранспортногоСредстваЗавершение", ЭтотОбъект, Элемент);
	ПоказатьВыборИзСписка(Оповещение, СписокВыбораКодовТС, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНалоговойБазыПриИзменении(Элемент)
	
	УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкологическийКлассНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "РегистрацияТранспортныхСредств");
	ПараметрыФормы.Вставить("НазваниеМакета", "КодыЭкологическихКлассов");
	ПараметрыФормы.Вставить("ТекущийПериод", Объект.Дата);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЭкологическийКлассНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПостановкаНаУчетВНалоговомОрганеПриИзменении(Элемент)
	
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		ВосстановитьРеквизиты(Объект, "НалоговыйОрган, КодПоОКТМО, КодПоОКАТО", СтруктураСохраняемыхРеквизитов);
	Иначе
		СохранитьРеквизиты(Объект, "НалоговыйОрган, КодПоОКТМО, КодПоОКАТО", СтруктураСохраняемыхРеквизитов);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйОрганПриИзменении(Элемент)
	
	НалоговыйОрганПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяЛьготаПриИзменении(Элемент)
	
	// Сохраним значения
	Если ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		СохранитьРеквизиты(ЭтаФорма,
			"КодНалоговойЛьготыОсвобождениеОтНалогообложения, РегиональныйКодЛьготыОсвобождениеОтНалогообложения",
			СтруктураСохраняемыхРеквизитов);
			
		КодНалоговойЛьготыОсвобождениеОтНалогообложения = "";
		РегиональныйКодЛьготыОсвобождениеОтНалогообложения = "";
			
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыСнижениеНалоговойСтавки", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "ЛьготнаяСтавка", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыСнижениеНалоговойСтавки = "";
		РегиональныйКодЛьготыСнижениеНалоговойСтавки = "";
		Объект.ЛьготнаяСтавка = 0;
		
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "ПроцентУменьшения", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = "";
		РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах = "";
		Объект.ПроцентУменьшения = 0;
		
	ИначеЕсли ТекущаяНалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		СохранитьРеквизиты(ЭтаФорма, "КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму", СтруктураСохраняемыхРеквизитов);
		СохранитьРеквизиты(Объект, "СуммаУменьшения", СтруктураСохраняемыхРеквизитов);
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму = "";
		Объект.СуммаУменьшения = 0;
		
	КонецЕсли;
	
	Объект.КодНалоговойЛьготы = "";
	Объект.РегиональныйКодЛьготы = "";
	
	// Восстановим значения
	Если Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		ВосстановитьРеквизиты(ЭтаФорма,
			"КодНалоговойЛьготыОсвобождениеОтНалогообложения, РегиональныйКодЛьготыОсвобождениеОтНалогообложения",
			СтруктураСохраняемыхРеквизитов);
			
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыОсвобождениеОтНалогообложения;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыОсвобождениеОтНалогообложения;
			
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		КодНалоговойЛьготыСнижениеНалоговойСтавки = "20230";
		ВосстановитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыСнижениеНалоговойСтавки", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "ЛьготнаяСтавка", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыСнижениеНалоговойСтавки;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыСнижениеНалоговойСтавки;
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = "20220";
		ВосстановитьРеквизиты(ЭтаФорма, "РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "ПроцентУменьшения", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах;
		Объект.РегиональныйКодЛьготы = РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах;
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		ВосстановитьРеквизиты(ЭтаФорма, "КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму", СтруктураСохраняемыхРеквизитов);
		ВосстановитьРеквизиты(Объект, "СуммаУменьшения", СтруктураСохраняемыхРеквизитов);
		
		Объект.КодНалоговойЛьготы = КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму;
		Объект.РегиональныйКодЛьготы = "";
		
	КонецЕсли;
	
	ТекущаяНалоговаяЛьгота = Объект.НалоговаяЛьгота;
	УстановитьДоступностьНалоговыхЛьгот(ЭтаФорма);
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура КодПоОКТМОПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	ЗаполнитьНалоговуюСтавку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛьготнаяСтавкаПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентУменьшенияПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаУменьшенияПриИзменении(Элемент)
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъекта", "РегистрСведений");
	ПараметрыФормы.Вставить("НазваниеОбъекта", "РегистрацияТранспортныхСредств");
	ПараметрыФормы.Вставить("НазваниеМакета", "ЛьготыПоТранспортномуНалогу");
	Если Элемент.Имя = "КодЛьготыУменьшениеСуммыНалогаНаСумму" Тогда
		ПараметрыФормы.Вставить("ТекущийПериод",	'20070101');
	Иначе
		ПараметрыФормы.Вставить("ТекущийПериод",	ЭтаФорма.Объект.Дата);
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("КодНалоговойЛьготыНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораКода", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура КодЛьготыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.КодНалоговойЛьготы = "";
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РегиональныйКодЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОснованиеЛьготы", ЭтаФорма.Объект.РегиональныйКодЛьготы);
	
	ДополнительныеПараметры = Новый Структура("Льгота", Элемент.Имя);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуРегиональныйКодЛьготыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ФормаВводаОснованияЛьготы", 
		ПараметрыФормы, 
		ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РегиональныйКодЛьготыОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.РегиональныйКодЛьготы = "";
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяБазаПриИзменении(Элемент)
	
	ЗаполнитьНалоговуюСтавку(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОС

&НаКлиенте
Процедура ОСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВнеоборотныеАктивыКлиентСервер.ОбработкаВыбораЭлемента(Объект.ОС, "ОсновноеСредство", ВыбранноеЗначение);
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтражениеРасходов

&НаКлиенте
Процедура ОтражениеРасходовСтатьяРасходовПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.ОтражениеРасходов.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТаблицы.СтатьяРасходов) Тогда
		АмортизацияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения);
	Иначе
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуРегистрации(Команда)
	
	Если Элементы.ОС.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, в которых необходимо заполнить дату регистрации';
									|en = 'Select lines to fill in a registration date'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьДатуРегистрацииЗавершение", ЭтотОбъект, Элементы.ОС.ВыделенныеСтроки);
	ПоказатьВводДаты(Оповещение, Объект.Дата, НСтр("ru = 'Введите дату регистрации';
													|en = 'Enter registration date'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавку(Команда)

	Ошибки = Новый Массив;
	
	ЗаполнитьНалоговуюСтавку(ЭтаФорма, Ошибки, Истина);
	
	Для Каждого Ошибка Из Ошибки Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка.ТекстСообщения, , Ошибка.Поле, "");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подобрать(Команда)
	
	ПараметрыПодбора = ВнеоборотныеАктивыКлиентСервер.ПараметрыПодбора(Элементы.ОСОсновноеСредство, ЭтаФорма);
	ОткрытьФорму("Справочник.ОбъектыЭксплуатации.ФормаВыбора", 
					ПараметрыПодбора, Элементы.ОС,,,,, 
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ОтражениеРасходов"));
	
	#Область ОбщаяСобственность
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЧислитель.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДоляВПравеОбщейСобственностиЗнаменатель.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ОбщаяСобственность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти
	
	#Область ОСДатаРегистрации
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ОСДатаРегистрации.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОС.ДатаРегистрации");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<совпадает с датой документа>';
																|en = '<matches the document date>'"));
	
	#КонецОбласти
	
	#Область ОтражениеРасходовПодразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.Подразделение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Местонахождение ОС>';
																|en = '<FA location>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
	#Область ОтражениеРасходовНаправлениеДеятельности
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтражениеРасходовНаправлениеДеятельности.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОтражениеРасходов.НаправлениеДеятельности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Направление деятельности ОС>';
																|en = '<FA line of business>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ВыполнитьИнициализацию();
	
	ЗаполнитьДанныеОНалоговомОргане();
	УстановитьВидимость(ЭтаФорма);
	УстановитьДоступностьНалоговогоОргана(ЭтаФорма);
	УстановитьЗаголовокНалоговойБазы(ЭтаФорма);
	ЗаполнитьНаименованиеВидаТС(ЭтаФорма);
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	УстановитьДоступностьНалоговыхЛьгот(ЭтаФорма);
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ОтражениеРасходов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьИнициализацию()
	
	Если ИнициализацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияВыполнена = Истина;
	
	СписокКодовЕдиницИзмеренияТС = КодыЕдиницИзмеренияТС();
	Для Каждого ЕдиницаИзмеренияТС Из СписокКодовЕдиницИзмеренияТС Цикл
		Элементы.ЕдиницаИзмеренияНалоговойБазы.СписокВыбора.Добавить(ЕдиницаИзмеренияТС.Значение, ЕдиницаИзмеренияТС.Представление);
	КонецЦикла;
	
	ЗаполнитьКодыВидовТС();
	
	Если Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения Тогда
		КодНалоговойЛьготыОсвобождениеОтНалогообложения = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыОсвобождениеОтНалогообложения = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		КодНалоговойЛьготыСнижениеНалоговойСтавки = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыСнижениеНалоговойСтавки = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		КодНалоговойЛьготыУменьшениеСуммыНалогаВПроцентах = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыУменьшениеСуммыНалогаВПроцентах = Объект.РегиональныйКодЛьготы;
	ИначеЕсли Объект.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		КодНалоговойЛьготыУменьшениеСуммыНалогаНаСумму = Объект.КодНалоговойЛьготы;
		РегиональныйКодЛьготыУменьшениеСуммыНалогаНаСумму = Объект.РегиональныйКодЛьготы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КодыЕдиницИзмеренияТС()
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", НСтр("ru = 'л. с.';
								|en = 'r. r.'"));
	Список.Добавить("999", НСтр("ru = 'Кгс';
								|en = 'Kgf'"));
	Список.Добавить("181", НСтр("ru = 'БРТ';
								|en = 'GROSS'"));
	Список.Добавить("796", НСтр("ru = 'шт';
								|en = 'pcs.'"));
	
	Возврат Список;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКодыВидовТС()
	
	ТекущийПоказательГод = ?(Объект.Дата = Дата(1, 1, 1, 0, 0, 0), Год(ТекущаяДатаСеанса()), Год(Объект.Дата));
	
	Если СтарыйГод = 0
		ИЛИ (СтарыйГод >= 2012 И ТекущийПоказательГод < 2012)
		ИЛИ (СтарыйГод < 2012 И ТекущийПоказательГод >= 2012) Тогда 
		
		ТаблицаКодовВидовТС = ПолучитьКодыВидовТС(ТекущийПоказательГод);
		СтарыйГод = ТекущийПоказательГод;

		СтруктураКода = Новый Структура("Наименование, КодЕдиницыИзмерения");
		
		СоответствиеКодов = Новый Соответствие;
		Для каждого СтрокаКода Из ТаблицаКодовВидовТС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураКода, СтрокаКода);
			СоответствиеКодов.Вставить(СтрокаКода.Код, Новый ФиксированнаяСтруктура(СтруктураКода));
		КонецЦикла;
		КодыВидовТС = Новый ФиксированноеСоответствие(СоответствиеКодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодыВидовТС(Год)

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = РегистрыСведений.РегистрацияТранспортныхСредств.ПолучитьМакет("ВидыТранспортныхСредств");
	
	Если Год < 2011 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2007");
	ИначеЕсли Год < 2012 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2011");
	ИначеЕсли Год < 2013 Тогда
		ТекущаяОбласть = Макет.Области.Найти("Область2012");
	Иначе
		ТекущаяОбласть = Макет.Области.Найти("Область2013");
	КонецЕсли;

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции // ПолучитьКодыВидовТС()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДатаРегистрации = ВнеоборотныеАктивыКлиентСервер.МинимальнаяДатаРегистрации(Объект);
	
	Элементы.КодПоОКАТО.Видимость = (ДатаРегистрации <> '000101010000' И Год(ДатаРегистрации) < 2014);
	
	ВидимостьЛьготы = 
		(ДатаРегистрации <> '000101010000' И Год(ДатаРегистрации) < 2012) 
		ИЛИ Объект.НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму");
	Элементы.НалоговаяЛьготаУменьшениеСуммыНалогаНаСумму.Видимость = ВидимостьЛьготы;
	Элементы.СуммаУменьшения.Видимость = ВидимостьЛьготы;
	Элементы.КодЛьготыУменьшениеСуммыНалогаНаСумму.Видимость = ВидимостьЛьготы;
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговогоОргана(Форма)
	
	Форма.Элементы.ГруппаНалоговыйОрган.Доступность = 
		Форма.Объект.ПостановкаНаУчетВНалоговомОргане = ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьНалоговыхЛьгот(Форма)
	
	НалоговаяЛьгота = Форма.Объект.НалоговаяЛьгота;
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаКодЛьготыОсвобождениеОтНалогообложения.Доступность = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения");
		
	СнижениеНалоговойСтавки = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки");
	Элементы.ЛьготнаяСтавка.Доступность = СнижениеНалоговойСтавки;
	Элементы.ГруппаКодЛьготыСнижениеНалоговойСтавки.Доступность = СнижениеНалоговойСтавки;
	
	УменьшениеСуммыНалогаВПроцентах = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах");
	Элементы.ПроцентУменьшения.Доступность = УменьшениеСуммыНалогаВПроцентах;
	Элементы.ГруппаКодЛьготыУменьшениеСуммыНалогаВПроцентах.Доступность = УменьшениеСуммыНалогаВПроцентах;
		
	УменьшениеСуммыНалогаНаСумму = 
		НалоговаяЛьгота = ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму");
	Элементы.СуммаУменьшения.Доступность = УменьшениеСуммыНалогаНаСумму;
	Элементы.КодЛьготыУменьшениеСуммыНалогаНаСумму.Доступность = УменьшениеСуммыНалогаНаСумму;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокНалоговойБазы(Форма)
	
	ЕдиницаИзмеренияНалоговойБазы = Форма.Объект.ЕдиницаИзмеренияНалоговойБазы;
	
	Если ПустаяСтрока(ЕдиницаИзмеренияНалоговойБазы) Тогда
		Заголовок = НСтр("ru = 'Налоговая база';
						|en = 'Tax base'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "251" Тогда
		Заголовок = НСтр("ru = 'Мощность двигателя';
						|en = 'Engine capacity '");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "999" Тогда
		Заголовок = НСтр("ru = 'Сила тяги';
						|en = 'Tractive force'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "181" Тогда
		Заголовок = НСтр("ru = 'Валовая вместимость';
						|en = 'Gross tonnage'");
	ИначеЕсли ЕдиницаИзмеренияНалоговойБазы = "796" Тогда
		Заголовок = НСтр("ru = 'Налоговая база';
						|en = 'Tax base'");
	Иначе
		Заголовок = НСтр("ru = 'Налоговая база';
						|en = 'Tax base'");
	КонецЕсли;
	
	Форма.Элементы.НалоговаяБаза.Заголовок = Заголовок;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНаименованиеВидаТС(Форма)
	
	Если ПустаяСтрока(Форма.Объект.КодВидаТранспортногоСредства) Тогда
		Форма.НаименованиеВидаТС = "";
	Иначе
		СтруктураКодов = Форма.КодыВидовТС.Получить(Форма.Объект.КодВидаТранспортногоСредства);
		Если СтруктураКодов = Неопределено Тогда
			Форма.НаименованиеВидаТС = "";
		Иначе
			Форма.НаименованиеВидаТС = СтруктураКодов.Наименование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО()
	
	ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru = 'Постановка на учет в налоговом органе';
												|en = 'Registration with a tax authority'");
	
	Если Объект.ПостановкаНаУчетВНалоговомОргане = 
		ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ПоМестуНахожденияОрганизации") Тогда
		
		ТекстПостановкаНаУчетВНалоговомОргане = НСтр("ru = 'Постановка на учет в налоговом органе: по месту нахождения организации';
													|en = 'Registration with a tax authority: according to company location'");
		
	ИначеЕсли Объект.ПостановкаНаУчетВНалоговомОргане = 
		ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда
		
		Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
			КодНО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.НалоговыйОрган, "Код");
		Иначе
			КодНО = "<...>";
		КонецЕсли;
		
		ШаблонТекста = НСтр("ru = 'Постановка на учет в налоговом органе: ИФНС %1, код по ОКТМО %2';
							|en = 'Registration with a tax authority: IFTS %1, RNCMT code %2'");
		ТекстПостановкаНаУчетВНалоговомОргане = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекста,
				КодНО,
				?(ЗначениеЗаполнено(Объект.КодПоОКТМО), Объект.КодПоОКТМО, "<...>"));
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(ЭтотОбъект, "ГруппаПостановкаНаУчетВНалоговомОргане", ТекстПостановкаНаУчетВНалоговомОргане);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(Форма)
	
	Объект = Форма.Объект;
	
	Если Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется") Тогда
		
		ТекстНалоговойЛьготы = НСтр("ru = 'Налоговая льгота: Не применяется';
									|en = 'Tax relief: Not applied'");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.ОсвобождениеОтНалогообложения") Тогда
		
		ТекстНалоговойЛьготы = НСтр("ru = 'Освобождение от налогообложения';
									|en = 'Taxation exemption '");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки") Тогда
		
		ШаблонТекста = НСтр("ru = 'Пониженная налоговая ставка: %1';
							|en = 'Reduced tax rate: %1'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.ЛьготнаяСтавка);
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах") Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога на: %1 %2';
							|en = 'Tax amount reduction in the amount of: %1 %2'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.ПроцентУменьшения, "%");
		
	ИначеЕсли Объект.НалоговаяЛьгота = 
		ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму") Тогда
		
		ШаблонТекста = НСтр("ru = 'Уменьшение суммы налога на %1';
							|en = 'Tax amount reduction in the amount of %1'");
		ТекстНалоговойЛьготы = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, Объект.СуммаУменьшения);
		
	КонецЕсли;
	
	Если Объект.НалоговаяЛьгота <> ПредопределенноеЗначение("Перечисление.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется") Тогда
		
		Если Объект.КодНалоговойЛьготы = "30200" Тогда
			
			ШаблонТекста = НСтр("ru = '%1, код льготы %2';
								|en = '%1, benefit code %2 '");
				ТекстНалоговойЛьготы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
				ТекстНалоговойЛьготы,
				Объект.КодНалоговойЛьготы);
			
		Иначе
			
			ШаблонТекста = НСтр("ru = '%1, код льготы %2/%3';
								|en = '%1, benefit code %2/%3'");
			ТекстНалоговойЛьготы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
				ТекстНалоговойЛьготы,
				?(ЗначениеЗаполнено(Объект.КодНалоговойЛьготы), Объект.КодНалоговойЛьготы, "<...>"),
				?(ЗначениеЗаполнено(Объект.РегиональныйКодЛьготы), Объект.РегиональныйКодЛьготы, "<...>"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокГруппы(Форма, "ГруппаНалоговаяЛьгота", ТекстНалоговойЛьготы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГруппы(Форма, НазваниеГруппы, ЗаголовокТекст)
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьГоловнуюОрганизацию(Форма)
	
	Форма.ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Форма.Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаКодВидаТранспортногоСредстваЗавершение(Результат, Элемент) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Значение <> "ФормаВыбораКодаТС" Тогда
			
			Объект.КодВидаТранспортногоСредства = Результат.Значение;
			Модифицированность = Истина;
			КодВидаТранспортногоСредстваПриИзменении(Элемент);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ТекущийКод", Элемент.ТекстРедактирования);
			ПараметрыФормы.Вставить("Дата", Объект.Дата);
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			
			ОповещениеОЗакрытии = Новый ОписаниеОповещения(
				"КодВидаТранспортногоСредстваНачалоВыбораЗавершение",
				ЭтотОбъект,
				ДополнительныеПараметры);
			
			ОткрытьФорму(
				"Документ.РегистрацияТранспортныхСредств.Форма.ФормаВыбораКодаВидаТранспортногоСредства",
				ПараметрыФормы,ЭтаФорма,,,,
				ОповещениеОЗакрытии);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодВидаТранспортногоСредстваНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	ВыбранноеЗначение = РезультатЗакрытия;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		Модифицированность = Истина;
		
		Объект.КодВидаТранспортногоСредства = ВыбранноеЗначение.КодВидаТС;
		
		Если СписокВыбораКодовТС.НайтиПоЗначению(ВыбранноеЗначение.КодВидаТС) = Неопределено Тогда
			
			СписокВыбораКодовТС.Вставить(0, ВыбранноеЗначение.КодВидаТС, ВыбранноеЗначение.КодВидаТС + " " + ВыбранноеЗначение.Наименование); 
			
			ЗначениеДляОткрытияФормыВыбора = СписокВыбораКодовТС.НайтиПоЗначению("ФормаВыбораКодаТС");
			Если ЗначениеДляОткрытияФормыВыбора <> Неопределено Тогда
				СписокВыбораКодовТС.Удалить(ЗначениеДляОткрытияФормыВыбора);
			КонецЕсли;
			
			МаксимальноеКоличество = 6;
			КоличествоЗначений     = СписокВыбораКодовТС.Количество();
			
			Если КоличествоЗначений > МаксимальноеКоличество Тогда
				Для ОбратныйИндекс = 1 По КоличествоЗначений Цикл
					ЗначениеСписка = СписокВыбораКодовТС[КоличествоЗначений - ОбратныйИндекс];
					Если СписокВыбораКодовТС.Индекс(ЗначениеСписка) > (МаксимальноеКоличество - 1) Тогда
						СписокВыбораКодовТС.Удалить(ЗначениеСписка);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		КодВидаТранспортногоСредстваПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЭкологическийКлассНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	КодЭкологическогоКласса = РезультатЗакрытия;
	
	Если КодЭкологическогоКласса <> Неопределено Тогда
		Объект.ЭкологическийКласс = КодЭкологическогоКласса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СохранитьРеквизиты(Объект, СписокРеквизитов, СтруктураСохраняемыхРеквизитов)
	
	ВременнаяСтруктура = Новый Структура(СписокРеквизитов);
	Для каждого КлючИЗначение Из ВременнаяСтруктура Цикл
		СтруктураСохраняемыхРеквизитов.Вставить(КлючИЗначение.Ключ, Объект[КлючИЗначение.Ключ]);
		Объект[КлючИЗначение.Ключ] = ОбщегоНазначенияБПКлиентСервер.ПустоеЗначениеТипа(ТипЗнч(Объект[КлючИЗначение.Ключ]));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВосстановитьРеквизиты(Объект, СписокРеквизитов, СтруктураСохраняемыхРеквизитов)
	
	ВременнаяСтруктура = Новый Структура(СписокРеквизитов);
	Для каждого КлючИЗначение Из ВременнаяСтруктура Цикл
		Если СтруктураСохраняемыхРеквизитов.Свойство(КлючИЗначение.Ключ) Тогда
			Объект[КлючИЗначение.Ключ] = СтруктураСохраняемыхРеквизитов[КлючИЗначение.Ключ]
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НалоговыйОрганПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда 
		Объект.КодПоОКТМО = Объект.НалоговыйОрган.КодПоОКТМО;
		Объект.КодПоОКАТО = Объект.НалоговыйОрган.КодПоОКАТО;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияПостановкаНаУчетВНО();
	ЗаполнитьНалоговуюСтавку(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговойЛьготыНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	КодЛьготы = РезультатЗакрытия;
	
	Если КодЛьготы <> Неопределено Тогда
		Элемент.ВыделенныйТекст = КодЛьготы;
		Объект.КодНалоговойЛьготы = КодЛьготы;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРегиональныйКодЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЭтаФорма[ДополнительныеПараметры.Льгота] = Результат;
		Объект.РегиональныйКодЛьготы = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображенияНалоговойЛьготы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуРегистрацииЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ВыбраннаяДата <> Неопределено Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.ОС.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаРегистрации = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНалоговуюСтавку(Форма, Ошибки = Неопределено, ПоКнопке = Ложь)
	
	Объект = Форма.Объект;
	
	НалоговаяСтавкаПредставление = НСтр("ru = '<не определена>';
										|en = '<not defined>'");
	НалоговаяСтавкаГиперссылка = "";
	
	Если Ошибки = Неопределено Тогда
		Ошибки = Новый Массив;
	КонецЕсли;
	
	Отказ = Ложь;

	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Отказ = Истина;
		
		Ошибка = Новый Структура("ТекстСообщения, Поле",
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Дата';
																		|en = 'Date'")), "Объект.Период");
		Ошибки.Добавить(Ошибка);
	КонецЕсли;

	Если Объект.ПостановкаНаУчетВНалоговомОргане =
		ПредопределенноеЗначение("Перечисление.ПостановкаНаУчетВНалоговомОргане.ВДругомНалоговомОргане") Тогда

		ОКТМОДляЗаполнения = Объект.КодПоОКТМО;

		Если НЕ ЗначениеЗаполнено(Объект.КодПоОКТМО) Тогда
			Отказ = Истина;
			
			Ошибка = Новый Структура("ТекстСообщения, Поле",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'ОКТМО';
																			|en = 'RNCMT'")), "Объект.КодПоОКТМО");
			Ошибки.Добавить(Ошибка);
		КонецЕсли;

	Иначе

		ОКТМОДляЗаполнения = Форма.ОКТМО;

		Если НЕ ЗначениеЗаполнено(Форма.ОКТМО) Тогда
			Отказ = Истина;
			
			Ошибка = Новый Структура("ТекстСообщения, Поле",
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'ОКТМО';
																			|en = 'RNCMT'")), "ОКТМОСсылка");
			Ошибки.Добавить(Ошибка);
		КонецЕсли;

	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.КодВидаТранспортногоСредства) Тогда
		Отказ = Истина;
		
		Ошибка = Новый Структура("ТекстСообщения, Поле",
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, НСтр("ru = 'Код вида ТС';
																		|en = 'Vehicle kind code'")), "Объект.КодВидаТранспортногоСредства");
		Ошибки.Добавить(Ошибка);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.НалоговаяБаза) Тогда
		Отказ = Истина;
		
		Ошибка = Новый Структура("ТекстСообщения, Поле",
			ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, Форма.Элементы.НалоговаяБаза.Заголовок), "Объект.НалоговаяБаза");
		Ошибки.Добавить(Ошибка);
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		ДанныеДляЗаполнения = Новый Структура("
			|Дата,
			|ОсновноеСредство,
			|Организация,
			|ОКТМО,
			|КодВидаТранспортногоСредства,
			|НалоговаяБаза");
			
		ЗаполнитьЗначенияСвойств(ДанныеДляЗаполнения, Объект);
		ДанныеДляЗаполнения.ОКТМО = ОКТМОДляЗаполнения;
		
		Если Объект.ОС.Количество() <> 0 Тогда
			ДанныеДляЗаполнения.ОсновноеСредство = Объект.ОС[0].ОсновноеСредство;
		КонецЕсли; 
		
		ЗаполнитьСтавкуНаСервере(ДанныеДляЗаполнения,
			Объект.НалоговаяСтавка,
			Ошибки);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСтавкуНаСервере(ДанныеДляЗаполнения, НалоговаяСтавка, Ошибки)

	// Для кодов автономных округов в составе края (области), являющихся субъектами РФ,
	// значимыми для идентификации субъекта являются 1-й, 2-й и 3-й знаки.
	КодПоОКТМО = Лев(ДанныеДляЗаполнения.ОКТМО, 3);

	// Для остальных субъектов РФ значимые для идентификации знаки 1-й и 2-й.
	Если НЕ (КодПоОКТМО = "118" ИЛИ КодПоОКТМО = "718" ИЛИ КодПоОКТМО = "719") Тогда
		КодПоОКТМО = Лев(КодПоОКТМО, 2);
	КонецЕсли;

	Макет = Документы.РегистрацияТранспортныхСредств.ПолучитьМакет("КодыВидовИКатегорииТС");
	КодыВидовИКатегорииТС = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	
	НайденнаяСтрока = КодыВидовИКатегорииТС.Найти(ДанныеДляЗаполнения.КодВидаТранспортногоСредства, "КодВида");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		КатегорияТС = НайденнаяСтрока.Категория;
	КонецЕсли;
	
	Год = Год(ДанныеДляЗаполнения.Дата);
	
	ИмяМакета = "СтавкиНалога" + ?(Год > 2014, Формат(Год, "ЧГ="), "2015");
	
	Если Метаданные.Документы.РегистрацияТранспортныхСредств.Макеты.Найти(ИмяМакета) = Неопределено Тогда
		Ошибка = Новый Структура("ТекстСообщения,Поле", 
			СтрШаблон(НСтр("ru = 'Отсутствует информация о ставках на налоговый период %1';
							|en = 'No information on rates for fiscal period %1'"), Формат(Год, "ЧГ=")), "");
		
		Ошибки.Добавить(Ошибка);
		Возврат;
	КонецЕсли;
	
	Макет = Документы.РегистрацияТранспортныхСредств.ПолучитьМакет(ИмяМакета);
	
	НалоговыеСтавки = ОбщегоНазначения.ПрочитатьXMLВТаблицу(Макет.ПолучитьТекст()).Данные;
	НалоговыеСтавки.Колонки.A.Имя = "КодПоОКТМО";
	НалоговыеСтавки.Колонки.B.Имя = "КатегорияТС";
	НалоговыеСтавки.Колонки.C.Имя = "МинимальноеЗначениеМощности";
	НалоговыеСтавки.Колонки.D.Имя = "МаксимальноеЗначениеМощности";
	НалоговыеСтавки.Колонки.E.Имя = "МинимальноеКоличествоЛетСГодаВыпускаТС";
	НалоговыеСтавки.Колонки.F.Имя = "МаксимальноеКоличествоЛетСГодаВыпускаТС";
	НалоговыеСтавки.Колонки.G.Имя = "Размер";
	
	Отбор = Новый Структура("КодПоОКТМО,КатегорияТС", КодПоОКТМО, КатегорияТС);
	
	Ставки = НалоговыеСтавки.НайтиСтроки(Отбор);
	
	Если Ставки.Количество() = 1 Тогда
		
		НалоговаяСтавка = Число(Ставки[0].Размер);
		
	ИначеЕсли Ставки.Количество() > 1 Тогда
		
		Для Каждого Ставка Из Ставки Цикл
			
			МинимальноеЗначениеМощности = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Ставка.МинимальноеЗначениеМощности);
			МаксимальноеЗначениеМощности = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Ставка.МаксимальноеЗначениеМощности);
			МинимальноеКоличествоЛетСГодаВыпускаТС = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Ставка.МинимальноеКоличествоЛетСГодаВыпускаТС);
			МаксимальноеКоличествоЛетСГодаВыпускаТС = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Ставка.МаксимальноеКоличествоЛетСГодаВыпускаТС);
			
			Если МинимальноеЗначениеМощности <= ДанныеДляЗаполнения.НалоговаяБаза
				И (НЕ ЗначениеЗаполнено(МаксимальноеЗначениеМощности)
				   ИЛИ ДанныеДляЗаполнения.НалоговаяБаза <= МаксимальноеЗначениеМощности) Тогда
				
				Если (ЗначениеЗаполнено(МинимальноеКоличествоЛетСГодаВыпускаТС)
						ИЛИ ЗначениеЗаполнено(МаксимальноеКоличествоЛетСГодаВыпускаТС))
					И ЗначениеЗаполнено(ДанныеДляЗаполнения.ОсновноеСредство) Тогда
					
					ДатаВыпуска = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляЗаполнения.ОсновноеСредство, "ДатаВыпуска");
					
					Если ЗначениеЗаполнено(ДатаВыпуска) Тогда
						
						КоличествоЛетСГодаВыпускаТС = Год - Год(ДатаВыпуска);
						Если МинимальноеКоличествоЛетСГодаВыпускаТС <= КоличествоЛетСГодаВыпускаТС
							И (НЕ ЗначениеЗаполнено(МаксимальноеКоличествоЛетСГодаВыпускаТС)
							   ИЛИ КоличествоЛетСГодаВыпускаТС <= МаксимальноеКоличествоЛетСГодаВыпускаТС) Тогда
							
							НалоговаяСтавка = Ставка.Размер;
							
							Прервать;
							
						КонецЕсли;
						
					Иначе
						
						Ошибка = Новый Структура("ТекстСообщения, Поле",
							НСтр("ru = 'Ставка налога установлена с учетом количества лет, прошедших с года выпуска транспортного средства.
							|Укажите дату выпуска основного средства.';
							|en = 'Tax rate is set considering the number of years passed since the vehicle manufacture year. 
							|Specify the issue date of the fixed asset.'"),
							"Запись.ОсновноеСредство");
						
						Ошибки.Добавить(Ошибка);
						
						НалоговаяСтавка = 0;
						Прервать;
						
					КонецЕсли;
					
				Иначе
				
					НалоговаяСтавка = Ставка.Размер;
					
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()

	ЗаполнитьДанныеОНалоговомОргане();
	УстановитьГоловнуюОрганизацию(ЭтаФорма);
	ЗаполнитьНалоговуюСтавку(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОНалоговомОргане()
	
	ОКТМО = "";
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
	
		НалоговыйОрган = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "РегистрацияВНалоговомОргане");
		
		Если ЗначениеЗаполнено(НалоговыйОрган) Тогда
			ОКТМО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НалоговыйОрган, "КодПоОКТМО");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АмортизацияСтатьяРасходовПриИзмененииНаСервере(КэшированныеЗначения)
	
	СтрокаТаблицы = Объект.ОтражениеРасходов.НайтиПоИдентификатору(
		Элементы.ОтражениеРасходов.ТекущаяСтрока);
	
	ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(
		Объект,
		СтрокаТаблицы.СтатьяРасходов,
		СтрокаТаблицы.АналитикаРасходов);
		
	СтруктураДействий = Новый Структура("ЗаполнитьПризнакАналитикаРасходовОбязательна");
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()

	ЗаполнитьНалоговуюСтавку(ЭтаФорма);

	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
