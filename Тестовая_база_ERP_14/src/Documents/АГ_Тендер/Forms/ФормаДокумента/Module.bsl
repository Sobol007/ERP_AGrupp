#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("ТекущаяСтрокаЗадачи") Тогда
		АГ_ТекущаяСтрокаЗадачи = Параметры.ТекущаяСтрокаЗадачи;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Истина;
	Иначе
		АГ_ТекущаяСтрокаЗадачи = 9999999999;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьРолиАкцептаОтказа();
	УстановитьВидимостьДоступность();
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаЗакупкуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Если ЗначениеЗаполнено(Объект.СсылкаНаЗакупку) Тогда
		ПерейтиПоНавигационнойСсылке(Объект.СсылкаНаЗакупку);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АукционПриИзменении(Элемент)
	
	Если НЕ Объект.Аукцион Тогда
		Объект.ДатаАукциона	= Неопределено;
	КонецЕсли;
	
	
	УстановитьВидимостьДоступность();
		
КонецПроцедуры

&НаКлиенте
Процедура ШагТендераПриИзменении(Элемент)
	
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	
	УстановитьНовоеЗначениеСтатуса();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНовоеЗначениеСтатуса()
	
	ПараметрыДляОпределенияСтатуса	= Документы.АГ_Тендер.ПараметрыДляОпределенияСтатуса(Объект);
	
	Объект.СтатусТендера	= Документы.АГ_Тендер.СтатусТендераПоШагу(Объект.ШагТендера,Объект.СтатусТендера,ПараметрыДляОпределенияСтатуса);
	
КонецПроцедуры	

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ЗаполнитьСвязанныеРеквизитыПартнера();
	УстановитьНовоеЗначениеСтатуса();
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЗаказчикаПриИзменении(Элемент)
	
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорЗаключенПриИзменении(Элемент)
	
	Если НЕ Объект.ДоговорЗаключен И ЗначениеЗаполнено(Объект.ДатаЗаключенияДоговора) Тогда
		Объект.ДатаЗаключенияДоговора	= Неопределено;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Модифицированность = Истина;
		
		Если ДобавляетсяФайлПротокола Тогда
			
			СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
			
			Объект.ФайлПротокола = СсылкаНаФайл;
			
		Иначе
			Если ТипЗнч(Источник) = Тип("Массив") Тогда
				Для Каждого ДобавляемыйФайл ИЗ Источник Цикл
					НоваяСтрокаДанныеПоЗаявке	= Объект.ДанныеПоЗаявке.Добавить();
					НоваяСтрокаДанныеПоЗаявке.ПрисоединенныйФайл	= ДобавляемыйФайл;	
				КонецЦикла;	
			Иначе
				НоваяСтрокаДанныеПоЗаявке	= Объект.ДанныеПоЗаявке.Добавить();
				НоваяСтрокаДанныеПоЗаявке.ПрисоединенныйФайл	= Источник;
			КонецЕсли;
			
			УстановитьВидимостьДоступность();
		КонецЕсли;
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПротоколаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если НЕ ЭтотОбъект.ПроверитьЗаполнение() Тогда
			Возврат
		КонецЕсли;	
			
        Записать();
    Иначе
        Возврат
    КонецЕсли;
    
    
    ДобавитьФайлФрагмент(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоЗаявкеПрисоединенныйФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	
	ТекущийФайл	= Элементы.ДанныеПоЗаявке.ТекущиеДанные.ПрисоединенныйФайл;
	
	Если ЗначениеЗаполнено(ТекущийФайл) Тогда
		
		ДанныеФайла = АГ_ПолучитьДанныеФайла(ТекущийФайл, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует файл просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ДанныеПоЗаявке.ПрисоединенныйФайл");
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоЗаявкеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ	= Истина;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора файла необходимо записать объект. Записать?'");
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьФайлПротоколаЗавершение", ЭтотОбъект,Ложь), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьФайлФрагмент(Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		РуководительОтветственногоМенеджера	= РуководительОтветственногоМенеджера(Объект.Ответственный);
	Иначе
		РуководительОтветственногоМенеджера	= ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Команды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура НаписатьЭлектронноеПисьмо(Команда)
	
	Результат = ДоступнаОтправкаПисем();
	Если НЕ Результат Тогда
		Сообщить("Отправка электронных писем недоступна. Обратитесь к администратору",СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки	= ПолучитьПараметрыОтправкиНаСервере();
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	
		
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыОтправкиНаСервере()
	
	Возврат Документы.АГ_Тендер.СтруктураПараметровПисьма(Объект,УникальныйИдентификатор)
	
КонецФункции	

&НаКлиенте
Процедура АкцептОтказаНОП(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПричинаНеучастия) Тогда
		ПоказатьПредупреждение(,"Не заполнена причина неучастия!");
		Возврат;	
	КонецЕсли;	
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.НОП"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.АкцептОтказа"));
		
		
	Если СогласованиеРуководительДивизиона Тогда
		
		Пользователь	= ПолучитьСогласующего(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.РуководительДивизиона"));
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Сообщить("Не найден пользователь Директор МЦ! Напоминание не создано!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
		
		СоздатьНапоминаниеПользователюАкцептОтказа(Пользователь);
		
	Иначе
		
		АкцептОтказа();
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуНОП(Команда)
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.НОП"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.ОтправленНаДоработку"));
		
	ПринятьВернутьВРаботу(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура АкцептОтказаРуководительДивизиона(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПричинаНеучастия) Тогда
		ПоказатьПредупреждение(,"Не заполнена причина неучастия!");
		Возврат;	
	КонецЕсли;
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.РуководительДивизиона"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.АкцептОтказа"));
		
	Если СогласованиеДиректорПоПродажам Тогда
		
		Пользователь	= ПолучитьСогласующего(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ДиректорПоПродажам"));
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Сообщить("Не найден пользователь Руководитель дивизиона! Напоминание не создано!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
		
		СоздатьНапоминаниеПользователюАкцептОтказа(Пользователь);
		
	Иначе
		
		АкцептОтказа();
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуРуководительДивизиона(Команда)
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.РуководительДивизиона"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.ОтправленНаДоработку"));
		
	ПринятьВернутьВРаботу(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура АкцептОтказаДиректорПоПродажам(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПричинаНеучастия) Тогда
		ПоказатьПредупреждение(,"Не заполнена причина неучастия!");
		Возврат;	
	КонецЕсли;
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ДиректорПоПродажам"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.АкцептОтказа"));
		
		
	Если СогласованиеГенеральныйДиректор Тогда
		
		Пользователь	= ПолучитьСогласующего(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ГенеральныйДиректор"));
		
		Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
			Сообщить("Не найден пользователь Директор по продажам! Напоминание не создано!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
		
		СоздатьНапоминаниеПользователюАкцептОтказа(Пользователь);
		
	Иначе
		
		АкцептОтказа();
	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуДиректорПоПродажам(Команда)
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ДиректорПоПродажам"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.ОтправленНаДоработку"));
		
	ПринятьВернутьВРаботу(Истина);
	
		
КонецПроцедуры

&НаКлиенте
Процедура АкцептОтказаГенеральныйДиректор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПричинаНеучастия) Тогда
		ПоказатьПредупреждение(,"Не заполнена причина неучастия!");
		Возврат;	
	КонецЕсли;
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ГенеральныйДиректор"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.АкцептОтказа"));
		
	АкцептОтказа();	
		
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботуГенеральныйДиректор(Команда)
	
	ДобавитьДействиеИсторииСогласования(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ГенеральныйДиректор"),
		ПредопределенноеЗначение("Перечисление.АГ_РезультатСогласованияТендера.ОтправленНаДоработку"));
		
	ПринятьВернутьВРаботу(Истина);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	ПринятьВернутьВРаботу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказОтУчастия(Команда)
	
	//Фирсанов О.И. 20.06.2019 21:36:30->
	//Если НЕ ПроверитьИСохранить() Тогда
	//	Возврат;
	//КонецЕсли;	
	//<-
	Если СогласованиеНОП Тогда
		
		ПользовательНОП	= ПолучитьСогласующего(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.НОП"));
		
		Если НЕ ЗначениеЗаполнено(ПользовательНОП) Тогда
			Сообщить("Не найден пользователь НОП! Напоминание не создано!",СтатусСообщения.ОченьВажное);
			Возврат;
		КонецЕсли;
		
		//Фирсанов О.И. 20.06.2019 21:36:30->
		Если НЕ ПроверитьИСохранить() Тогда
			Возврат;
		КонецЕсли;	
		//<-
		
		СоздатьНапоминаниеПользователюАкцептОтказа(ПользовательНОП);
		
	Иначе
		
		АкцептОтказа();
		
		//Фирсанов О.И. 20.06.2019 21:36:30->
		ПроверитьИСохранить();	
		//<-
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаСозданиеКонтрагента(Команда)
	Форма = ПолучитьФорму("Документ.АГ_ЗаявкаНаСозданиеИзменениеНовогоКонтрагента.Форма.ФормаДокумента");
	ДанныеФормы = Форма.Объект; // Получаем объект формы в переменную
	
	СтруктураЗаполнения	= Новый Структура("Наименование,НаименованиеПолное,БизнесРегион,Ответственный,Дата",
		Объект.НаименованиеЗаказчика, Объект.НаименованиеЗаказчика,Объект.БизнесРегион,Объект.Ответственный,ТекущаяДата());
	
	ЗаполнитьЗаявкуНаСозданиеИзменениеНовогоКонтрагентаНаСервере(ДанныеФормы,СтруктураЗаполнения); // Заполняем документ на сервере
	КопироватьДанныеФормы(ДанныеФормы, Форма.Объект); // копируем наш объект в объект формы и далее открываем ее
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФайлПротокола(Команда)
	
	Объект.ФайлПротокола = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлПротокола(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора файла необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьФайлПротоколаЗавершение", ЭтотОбъект,Истина), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьФайлФрагмент(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСогласование(Команда)
	Если ЭтотОбъект.ПроверитьЗаполнение() Тогда
		
		Объект.СтатусТендера	= ПредопределенноеЗначение("Перечисление.АГ_СтатусТендера.СогласованиеТКП");
		Записать();
		
		ТекстНапоминания	= "Просьба согласовать участие в тендере №"+Объект.Номер;
		Пользователь	= РуководительОтветственногоМенеджера;
		СоздатьНапоминаниеПользователю(ТекстНапоминания,Пользователь);
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВОЭТ(Команда)
	
	Объект.ШагТендера	= ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг6_ПодачаДокументов");
	Объект.СтатусТендера	= ПредопределенноеЗначение("Перечисление.АГ_СтатусТендера.ПодачаДокументов");
	
	Записать();
		
	ТекстНапоминания	= "Согласование тендера №"+Объект.Номер+" выполнено, "+ПользователиКлиентСервер.ТекущийПользователь();
	СоздатьНапоминаниеПользователю(ТекстНапоминания,Объект.Ответственный);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	
	Объект.ШагТендера	= ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти");
	Объект.СтатусТендера	= ПредопределенноеЗначение("Перечисление.АГ_СтатусТендера.ПодготовкаТКП");
	
	Записать();
		
	ТекстНапоминания	= "Тендер №"+Объект.Номер+" возвращен в работу, "+ПользователиКлиентСервер.ТекущийПользователь();
	СоздатьНапоминаниеПользователю(ТекстНапоминания,Объект.Ответственный);
	
КонецПроцедуры

 
#КонецОбласти

#Область Прочее

&НаСервереБезКонтекста
Функция РуководительОтветственногоМенеджера(Пользователь)
	Возврат Документы.АГ_Тендер.РуководительОтветственного(Пользователь); 	
КонецФункции	

&НаСервереБезКонтекста
Процедура ЗаполнитьЗаявкуНаСозданиеИзменениеНовогоКонтрагентаНаСервере(ДанныеФормы,СтруктураЗаполнения)
	
	
	Док = Документы.АГ_ЗаявкаНаСозданиеИзменениеНовогоКонтрагента.СоздатьДокумент();

	Док.ТипОперации	= Перечисления.АГ_ТипыОперацийЗаявок.Создание;
	ЗаполнитьЗначенияСвойств(Док,СтруктураЗаполнения);

	ЗначениеВДанныеФормы(Док,ДанныеФормы);
	
КонецПроцедуры	

&НаСервере
Функция ПроверитьИСохранить()
	Если ЭтаФорма.Модифицированность Тогда
		Если ЭтотОбъект.ПроверитьЗаполнение() Тогда
			ЭтотОбъект.Записать();
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПроверитьПровестиЗакрыть()
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ДатаАукциона.Видимость	= Объект.Аукцион;
	Элементы.ДатаЗаключенияДоговора.Видимость	= Объект.ДоговорЗаключен;
	Элементы.ШагТендера.Доступность	= ДоступностьРолиДляРучногоИзмененияШага();
	Элементы.СтатусТендера.Доступность	= Элементы.ШагТендера.Доступность;
	Элементы.ФормаНаписатьЭлектронноеПисьмо.Видимость	= ДоступнаОтправкаПисем();
	
	Элементы.ДекорацияГенеральныйДиректор.Видимость	= СогласованиеГенеральныйДиректор;
	Элементы.АкцептОтказаГенеральныйДиректор.Видимость	= СогласованиеГенеральныйДиректор;
	Элементы.ВернутьВРаботуГенеральныйДиректор.Видимость	= СогласованиеГенеральныйДиректор;
	Элементы.ДекорацияДиректорПоПродажам.Видимость	= СогласованиеДиректорПоПродажам;
	Элементы.АкцептОтказаДиректорПоПродажам.Видимость	= СогласованиеДиректорПоПродажам;
	Элементы.ВернутьВРаботуДиректорПоПродажам.Видимость	= СогласованиеДиректорПоПродажам;
	Элементы.ДекорацияРуководительДивизиона.Видимость	= СогласованиеРуководительДивизиона;
	Элементы.АкцептОтказаРуководительДивизиона.Видимость	= СогласованиеРуководительДивизиона;
	Элементы.ВернутьВРаботуРуководительДивизиона.Видимость	= СогласованиеРуководительДивизиона;
	Элементы.ДекорацияНОП.Видимость	= СогласованиеНОП;
	Элементы.АкцептОтказаНОП.Видимость	= СогласованиеНОП;
	Элементы.ВернутьВРаботуНОП.Видимость	= СогласованиеНОП;
	
	Элементы.ФормаПринятьВРаботу.Доступность	= ЗначениеЗаполнено(Объект.Партнер);
	Элементы.ЗаявкаНаСозданиеКонтрагента.Доступность	= НЕ ЗначениеЗаполнено(Объект.Партнер)И ЗначениеЗаполнено(Объект.НаименованиеЗаказчика);

	ВидимостьСтраницыДанныеПоЗаявке	= (Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти")
		ИЛИ Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг6_ПодачаДокументов")
		ИЛИ Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг7_Результат")
		ИЛИ Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг8_ОбязательстваВыполнены"));
	
	Элементы.ГруппаДанныеПоЗаявке.Видимость	= ВидимостьСтраницыДанныеПоЗаявке;
	
	Элементы.ОтправитьНаСогласование.Видимость	= (Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти")
		И Объект.ДанныеПоЗаявке.Количество()>0);
		
	ВидимостьКнопокСогласованияШаг5	= (Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти") 
		И  (РуководительОтветственногоМенеджера=ПользователиКлиентСервер.ТекущийПользователь() ИЛИ ТекущийПользовательСПолнымиПравами));
		
	Элементы.ФормаПередатьВОЭТ.Видимость	= ВидимостьКнопокСогласованияШаг5;
	Элементы.ФормаВернутьНаДоработку.Видимость	= ВидимостьКнопокСогласованияШаг5;
	
	Элементы.РезультатТендера.Доступность	=  Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг6_ПодачаДокументов");
	
КонецПроцедуры

&НаСервере
Функция ДоступностьРолиДляРучногоИзмененияШага()
	
	Возврат Пользователи.РолиДоступны("АГ_ПросмотрЛогинаИПароляЭТП",,Ложь);
	
КонецФункции	
	
&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НоваяСтрокаИсторияСтатусов	= Объект.ИсторияСтатусов.Добавить();
		НоваяСтрокаИсторияСтатусов.Шаг	= Объект.ШагТендера;
		НоваяСтрокаИсторияСтатусов.ДатаСтатуса	= ТекущаяДатаСеанса();
		НоваяСтрокаИсторияСтатусов.Ответственный	= ПользователиКлиентСервер.ТекущийПользователь();
		
		Объект.ОтветственныйЗаМониторинг	= ПользователиКлиентСервер.ТекущийПользователь();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		РуководительОтветственногоМенеджера	= РуководительОтветственногоМенеджера(Объект.Ответственный);
	КонецЕсли;
	ТекущийПользовательСПолнымиПравами	= РольДоступна(Метаданные.Роли.ПолныеПрава);
	
	Если Объект.СтатусТендера=Перечисления.АГ_СтатусТендера.ЗакупкаНеСостоялась ИЛИ Объект.СтатусТендера=Перечисления.АГ_СтатусТендера.Отклонен
		ИЛИ Объект.СтатусТендера=Перечисления.АГ_СтатусТендера.Победа ИЛИ Объект.СтатусТендера=Перечисления.АГ_СтатусТендера.Поражение Тогда
		
		РезультатТендера	= Объект.СтатусТендера;
	Иначе
		РезультатТендера	= Перечисления.АГ_СтатусТендера.ПустаяСсылка();	
	КонецЕсли;	
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//УсловноеОформление.Элементы.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОбязательныеРеквизитыВЗависимостиОтШага()
	
	Если Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг1_ПередачаВРаботу") Тогда
		
		//Элементы.ОтветственныйЗаРаспределение.АвтоОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Ответственный.Партнер);
		Элементы.ОтветственныйЗаРаспределение.АвтоОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Ответственный);
		Элементы.ОтветственныйЗаРаспределение.ОтметкаНезаполненного	= Элементы.ОтветственныйЗаРаспределение.АвтоОтметкаНезаполненного;
		//Элементы.Ответственный.АвтоОтметкаНезаполненного = ЗначениеЗаполнено(Объект.Партнер);
		Элементы.Партнер.АвтоОтметкаНезаполненного = ЛОЖЬ;
		Элементы.Партнер.ОтметкаНезаполненного	= Элементы.Партнер.АвтоОтметкаНезаполненного;
		
		//Элементы.Ответственный.ОтметкаНезаполненного	= Элементы.Ответственный.АвтоОтметкаНезаполненного;
		
	ИначеЕсли Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг2_Распределение") Тогда	
		
		Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Партнер.ОтметкаНезаполненного	= Элементы.Партнер.АвтоОтметкаНезаполненного;
		
	//Фирсанов О.И. 20.06.2019 21:36:30->	
	ИначеЕсли Объект.ШагТендера=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг7_Результат")
		И Объект.СтатусТендера=ПредопределенноеЗначение("Перечисление.АГ_СтатусТендера.ОтказОтУчастия") Тогда	
		
		Элементы.Партнер.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Партнер.ОтметкаНезаполненного	= Элементы.Партнер.АвтоОтметкаНезаполненного;	
	//<-	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеРеквизитыПартнера()
	
	Объект.БизнесРегион	= Объект.Партнер.БизнесРегион;
	Объект.Ответственный	= Объект.Партнер.ОсновнойМенеджер;
	Если НЕ ЗначениеЗаполнено(Объект.НаименованиеЗаказчика) Тогда
		Объект.НаименованиеЗаказчика	= Объект.Партнер.Наименование;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция ДоступнаОтправкаПисем()
	Возврат РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем();
КонецФункции	

&НаКлиенте
Процедура СоздатьНапоминаниеПользователюАкцептОтказа(Пользователь)
	
	ТекстНапоминания	= 
	"Добрый день!
	|Необходимо акцептовать отказ от участия в тендере №"
	+Объект.НомерЗакупки+", "+Объект.Партнер+", НМЦ "+Объект.НМЦ;
	
	СоздатьНапоминаниеПользователю(ТекстНапоминания,Пользователь)
	
КонецПроцедуры	

&НаКлиенте
Процедура ДобавитьДействиеИсторииСогласования(Роль,Результат)
	
	НоваяСтрокаИсторияСогласования	= Объект.ИсторияСогласования.Добавить();
	НоваяСтрокаИсторияСогласования.ДатаИзменения	= ТекущаяДата();
	НоваяСтрокаИсторияСогласования.Пользователь		= ПользователиКлиентСервер.ТекущийПользователь();
	НоваяСтрокаИсторияСогласования.Роль		= Роль;
	НоваяСтрокаИсторияСогласования.Результат		= Результат;
	НоваяСтрокаИсторияСогласования.ПричинаНеучастия	= Объект.ПричинаНеучастия;
	
	Записать();
	
КонецПроцедуры	

&НаКлиенте
Процедура АкцептОтказа()
	
	Объект.ШагТендера	= ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг7_Результат");
	Объект.СтатусТендера	= ПредопределенноеЗначение("Перечисление.АГ_СтатусТендера.ОтказОтУчастия");
	
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВернутьВРаботу(НапомнитьМенеджеруВозвращенВРаботу=Ложь)
	
	Объект.ШагТендера	= ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг4_Согласование");
	
	УстановитьОбязательныеРеквизитыВЗависимостиОтШага();
	
	УстановитьНовоеЗначениеСтатуса();
	
	Если НапомнитьМенеджеруВозвращенВРаботу Тогда
		
		Если Объект.ИсторияСогласования.Количество()>0 Тогда
			ПоследняяСтрокаИсторияСогласования	= Объект.ИсторияСогласования[Объект.ИсторияСогласования.Количество()-1];
			Пользователь	= Строка(ПоследняяСтрокаИсторияСогласования.Роль)+" "+ПоследняяСтрокаИсторияСогласования.Пользователь;
		Иначе
			Пользователь	= ПользователиКлиентСервер.ТекущийПользователь();
		КонецЕсли;
		
		ТекстНапоминания	= "Тендер "+Объект.НомерЗакупки+" возвращен в работу, "+Пользователь;
	
		СоздатьНапоминаниеПользователю(ТекстНапоминания,Объект.Ответственный)
		
	КонецЕсли;	
	
	ЗапуститьПроцедуруДО();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСогласующего(Роль)
	
	Пользователь	= Неопределено;
	
	Подразделение	= Объект.Ответственный.Подразделение;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АГ_РолиСогласованияОтказаОтУчастияВТендереСрезПоследних.Пользователь КАК Пользователь,
		|	ВЫБОР
		|		КОГДА АГ_РолиСогласованияОтказаОтУчастияВТендереСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет
		|ИЗ
		|	РегистрСведений.АГ_РолиСогласованияОтказаОтУчастияВТендере.СрезПоследних(
		|			,
		|			Роль = &Роль
		|				И (Подразделение = &Подразделение
		|					ИЛИ Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))) КАК АГ_РолиСогласованияОтказаОтУчастияВТендереСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
	
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("Роль", Роль);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Пользователь	= ВыборкаДетальныеЗаписи.Пользователь;
	КонецЕсли;
	
	Возврат Пользователь
	
КонецФункции	

&НаСервере
Процедура СоздатьНапоминаниеПользователю(ТекстНапоминания,Пользователь)
	
	Документы.АГ_Тендер.СоздатьНапоминаниеПользователю(Объект.Ссылка,ТекстНапоминания,Пользователь);
	
КонецПроцедуры

&НаСервере
Процедура ЗапуститьПроцедуруДО()
	
	Если ЭтаФорма.Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПравилаИнтеграцииС1СДокументооборотом.Ссылка КАК Правило
		|ИЗ
		|	Справочник.ПравилаИнтеграцииС1СДокументооборотом КАК ПравилаИнтеграцииС1СДокументооборотом
		|ГДЕ
		|	ПравилаИнтеграцииС1СДокументооборотом.ТипОбъектаПотребителя = ""Документ.АГ_Тендер""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Сообщить("Не настроены правила интеграции с Документооборотом. Обратитесь к администратору!",СтатусСообщения.ОченьВажное);
	    Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();
	
	ОбъектДО	= ИнтеграцияС1СДокументооборотВызовСервера.СоздатьОбъектДОПоПравилу(Объект.Ссылка,ВыборкаДетальныеЗаписи.Правило);
	
	Если ТипЗнч(ОбъектДО)=Тип("Строка") Тогда
		//передано описание ошибки
		ТекстСообщения	= "Возникла ошибка автоматического создания процесса документооборота:"+ОбъектДО
		+Символы.ПС+"Обратитесь к администратору!";
		
		Сообщить(ТекстСообщения,СтатусСообщения.ОченьВажное);
	Иначе	
		//ОбъектДО	- это Структура("name,id,type")
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРолиАкцептаОтказа()
	
	
	МассивРолей	= ПереченьРолейАкцептаОтСуммыТендера(Объект.НМЦ);
	Если Ложь тогда
		МассивРолей	= Новый Массив;
	КонецЕсли;	
	
	
	СогласованиеНОП	= (МассивРолей.Найти(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.НОП"))<>Неопределено);
	СогласованиеРуководительДивизиона	= (МассивРолей.Найти(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.РуководительДивизиона"))<>Неопределено);
	СогласованиеДиректорПоПродажам	= (МассивРолей.Найти(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ДиректорПоПродажам"))<>Неопределено);
	СогласованиеГенеральныйДиректор	= (МассивРолей.Найти(ПредопределенноеЗначение("Перечисление.АГ_РолиСогласованияТендера.ГенеральныйДиректор"))<>Неопределено);
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПереченьРолейАкцептаОтСуммыТендера(НМЦ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АГ_СогласованиеТендеров.Роль КАК Роль
		|ИЗ
		|	РегистрСведений.АГ_СогласованиеТендеров КАК АГ_СогласованиеТендеров
		|ГДЕ
		|	АГ_СогласованиеТендеров.СуммаОт <= &Сумма";
	
	Запрос.УстановитьПараметр("Сумма", НМЦ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	мРоли = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Роль");
	
	Возврат мРоли;
	
КонецФункции	

&НаКлиенте
Процедура ФайлПротоколОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	
	Если ЗначениеЗаполнено(Объект.ФайлПротокола) Тогда
		
		ДанныеФайла = АГ_ПолучитьДанныеФайла(ЭтаФорма.Объект.ФайлПротокола, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует файл просмотра'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ФайлПротокола");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция АГ_ПолучитьДанныеФайла(ФайлКартинки, УникальныйИдентификатор)
	
	Возврат РаботаСФайлами.ДанныеФайла(ФайлКартинки, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлФрагмент(РежимДобавлениеФайлаПротокола)
    
    Перем ИдентификаторФайла;
	
	ДобавляетсяФайлПротокола	= РежимДобавлениеФайлаПротокола;
    
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    РаботаСФайламиКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла);

КонецПроцедуры

&НаКлиенте
Процедура РезультатТендераПриИзменении(Элемент)
	
	Объект.СтатусТендера	= РезультатТендера;
	Объект.ШагТендера	= ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг7_Результат");
	
КонецПроцедуры

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуПервая(Команда)

	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуВторая(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласованСЗамечаниями", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуТретья(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументНеСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

#КонецОбласти



