#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция СтатусТендераПоШагу(Шаг,ПрерыдущийСтатус=Неопределено,ДополнительныеПараметры) Экспорт
	Статус	= ПрерыдущийСтатус;	
	Если Шаг=Перечисления.АГ_ШагиТендера.Шаг1_ПередачаВРаботу Тогда
		Статус	= Перечисления.АГ_СтатусТендера.Новый;
	ИначеЕсли Шаг=Перечисления.АГ_ШагиТендера.Шаг2_Распределение Тогда
	 	Статус	= Перечисления.АГ_СтатусТендера.НазначениеМенеджера;
	ИначеЕсли Шаг=Перечисления.АГ_ШагиТендера.Шаг3_ПредварительноеПодтверждение Тогда
		ПартнерЗаполнен	= Истина;
		ДополнительныеПараметры.Свойство("ПартнерЗаполнен",ПартнерЗаполнен);		
		Статус	= ?(ПартнерЗаполнен,Перечисления.АГ_СтатусТендера.ВРаботе,Перечисления.АГ_СтатусТендера.ОбработкаКонтрагента);
	ИначеЕсли Шаг=Перечисления.АГ_ШагиТендера.Шаг4_Согласование Тогда
	 	Статус	= Перечисления.АГ_СтатусТендера.НаСогласовании;
	ИначеЕсли Шаг=Перечисления.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти Тогда
		Если ПрерыдущийСтатус<>Перечисления.АГ_СтатусТендера.СогласованиеТКП Тогда
			Статус	= Перечисления.АГ_СтатусТендера.ПодготовкаТКП;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Статус;
	
КонецФункции

Функция ПараметрыДляОпределенияСтатуса(Объект) Экспорт
	
	СтрПараметры	= Новый Структура;
	
	СтрПараметры.Вставить("ПартнерЗаполнен",ЗначениеЗаполнено(Объект.Партнер));
	
	Возврат СтрПараметры;
	
	
КонецФункции	

Процедура СоздатьНапоминаниеПользователю(Ссылка,ТекстНапоминания,Пользователь) Экспорт
	
	ДопПараметры	= Новый Структура();
	ДопПараметры.Вставить("ПолучательОповещения",Пользователь);
	ДопПараметры.Вставить("ОповещениеОНеотправленныхПисьмах",Истина);
	
	CRM_НапоминанияСервер.ДобавитьНапоминание(Ссылка, ТекстНапоминания, ДопПараметры, ТекущаяДатаСеанса(),ЛОЖЬ);
	
КонецПроцедуры

Функция СтруктураПараметровПисьма(Объект,УникальныйИдентификаторФормы=Неопределено) Экспорт
	
	Если НЕ РаботаСПочтовымиСообщениями.ДоступнаОтправкаПисем() Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	ПараметрыОтправки = Новый Структура("Тема,Вложения,Получатель,Кому,Предмет,Текст,Тело");
	
	ПараметрыОтправки.Тема = "ВНИМАНИЕ ТЕНДЕР «"+?(ЗначениеЗаполнено(Объект.Партнер),Объект.Партнер,Объект.НаименованиеЗаказчика)+"»";
	
	Если УникальныйИдентификаторФормы=Неопределено Тогда
		УникальныйИдентификаторФормы	= Новый УникальныйИдентификатор;	
	КонецЕсли;	
	
	СписокВложений =  МассивПрикрепленныхФайлов(Объект.Ссылка,УникальныйИдентификаторФормы);
	ПараметрыОтправки.Вложения = СписокВложений;
	
	МассивПолучателей	= Новый Массив;
	Кому	= "";
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		АдресЭлПочты	= АдресЭлектроннойПочтыПользователя(Объект.Ответственный);
		Если ЗначениеЗаполнено(АдресЭлПочты) Тогда
			ПолучательСтруктура	= Новый Структура("Адрес,Представление,ИсточникКонтактнойИнформации",АдресЭлПочты,Строка(Объект.Ответственный),Объект.Ответственный);
			МассивПолучателей.Добавить(ПолучательСтруктура);
			Кому	= АдресЭлПочты;
		Иначе
			Сообщить("Не заполнен адрес пользователя:"+Объект.Ответственный+". Письмо пользователю не будет отправлено",СтатусСообщения.Важное);
		КонецЕсли;                                                            
		
		РуководительОтветственного	=  РуководительОтветственного(Объект.Ответственный);
		Если ЗначениеЗаполнено(РуководительОтветственного) Тогда
			АдресЭлПочты	= АдресЭлектроннойПочтыПользователя(РуководительОтветственного);
			Если ЗначениеЗаполнено(АдресЭлПочты) Тогда
				ПолучательСтруктура	= Новый Структура("Адрес,Представление,ИсточникКонтактнойИнформации",АдресЭлПочты,Строка(РуководительОтветственного),РуководительОтветственного);
				МассивПолучателей.Добавить(ПолучательСтруктура);
				Если НЕ ПустаяСтрока(Кому) Тогда
					Кому	= Кому+"; ";
				КонецЕсли;	
				Кому	= Кому+АдресЭлПочты;	
			Иначе
				Сообщить("Не заполнен адрес пользователя:"+РуководительОтветственного+". Письмо пользователю не будет отправлено",СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если МассивПолучателей.Количество() = 0 Тогда
		ПараметрыОтправки	= Неопределено;
		Сообщить("Не заполнены адреса для отправки письма!",СтатусСообщения.Важное);
	Иначе	
		ПараметрыОтправки.Получатель= МассивПолучателей;
		ПараметрыОтправки.Кому		= Кому;
		ПараметрыОтправки.Предмет	= Объект.Ссылка;
		ПараметрыОтправки.Текст		= СформироватьТекстПисьма(Объект);
		ПараметрыОтправки.Тело      = ПараметрыОтправки.Текст;	
	КонецЕсли;	
	
	Возврат ПараметрыОтправки;
	
КонецФункции	

Функция ОтправитьПисьмоОтветственному(Ссылка) Экспорт
	
	ПараметрыОтправки	= СтруктураПараметровПисьма(Ссылка);
	
	Если ПараметрыОтправки=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ДоступныеУчетныеЗаписи	= РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина,,Истина);
	Если ДоступныеУчетныеЗаписи.Количество()>0 Тогда
		
		УчетнаяЗапись	= ДоступныеУчетныеЗаписи[0].Ссылка;
		
		РезультатОтправки	= РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись,ПараметрыОтправки);
		
		Возврат (РезультатОтправки<>Неопределено);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
КонецПроцедуры

// Добавляет команду создания документа "Тендер".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.АГ_Тендер) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.АГ_Тендер.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.АГ_Тендер);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция МассивПрикрепленныхФайлов(Ссылка,УникальныйИдентификатор)
	
	МассивФайлов	= Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) тогда
		Возврат МассивФайлов;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АГ_ТендерПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АГ_ТендерПрисоединенныеФайлы КАК АГ_ТендерПрисоединенныеФайлы
		|ГДЕ
		|	АГ_ТендерПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И АГ_ТендерПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СвойстваФайла = РаботаСФайлами.ДанныеФайла(ВыборкаДетальныеЗаписи.Ссылка,УникальныйИдентификатор,Истина,Ложь);
		
		Вложение = Новый Структура;
		Вложение.Вставить("АдресВоВременномХранилище", СвойстваФайла.СсылкаНаДвоичныеДанныеФайла);
		Вложение.Вставить("Представление", СвойстваФайла.ИмяФайла);
		
		МассивФайлов.Добавить(Вложение);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

Функция СформироватьТекстПисьма(Объект)
	
	НаименованиеЗаказчика	= ?(ЗначениеЗаполнено(Объект.Партнер),Строка(Объект.Партнер),Объект.НаименованиеЗаказчика);
	
	//ДатаПринятия	= Объект.Дата;
	//ДатаПредвПодтверждения	= "";
	//ДатаСогласованияОтсрочкиПлатежа	= "";
	//ДатаПередачиКомТехЧастиЗаявки	= "";
	//Для Каждого СтрокаИсторияСтатусов ИЗ Объект.ИсторияСтатусов Цикл
	//	Если СтрокаИсторияСтатусов.Шаг=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг1_ПередачаВРаботу") Тогда
	//		ДатаПринятия	= СтрокаИсторияСтатусов.ДатаСтатуса;
	//	ИначеЕсли СтрокаИсторияСтатусов.Шаг=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг3_ПредварительноеПодтверждение") Тогда
	//		ДатаПредвПодтверждения	= СтрокаИсторияСтатусов.ДатаСтатуса;
	//	ИначеЕсли СтрокаИсторияСтатусов.Шаг=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг4_Согласование") Тогда
	//		ДатаСогласованияОтсрочкиПлатежа	= СтрокаИсторияСтатусов.ДатаСтатуса;
	//	ИначеЕсли СтрокаИсторияСтатусов.Шаг=ПредопределенноеЗначение("Перечисление.АГ_ШагиТендера.Шаг5_ПередачаКоммерческойИТехЧасти") Тогда
	//		ДатаПередачиКомТехЧастиЗаявки	= СтрокаИсторияСтатусов.ДатаСтатуса;	
	//	КонецЕсли;	
	//КонецЦикла;	
	
	ИНН	= "";
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ИНН	= ИННПартнера(Объект.Партнер);	
	КонецЕсли;
	
	КритерииОценки	= "";
	Для Каждого СтрокаКритерииОценки ИЗ Объект.КритерииОценки Цикл
		Если НЕ ПустаяСтрока(КритерииОценки) Тогда
			КритерииОценки	= КритерииОценки+", ";	
		КонецЕсли;	
		КритерииОценки	= КритерииОценки+СтрокаКритерииОценки.КритерийОценки+" "+СтрокаКритерииОценки.Процент+" % ";
	КонецЦикла;	
	
	
	ТекстПисьма	= "
	|Добрый День!
	|Сообщаем, что выложен новый тендер по контрагенту «"+НаименованиеЗаказчика+"», в котором Вам необходимо принять участие.
	|Для этого просим Вас:
	|
	|Сообщить о том, что тендер принят в работу
	|Дать предварительное подтверждение/не подтверждение участия в торгах (с указанием конкретных причин)
	|Согласовать отсрочку платежа ОФК
	|Передать в ОЭТ коммерческую и техническую части заявки
	|В случае победы заключить договор
	|Осуществить поставку
	|Получить отзыв от Заказчика
	|
	|Дата ОПЗ: "+Объект.ОПЗ+"
	|Заказчик: "+НаименованиеЗаказчика+" ИНН:"+ИНН+"
	|Участник: "+Объект.Ответственный+"
	|Куратор: "+Объект.ОтветственныйЗаМониторинг+"
	|Сортамент (в основной массе): "+Объект.Сортамент+"
	|НМЦ: "+Объект.НМЦ+" руб.
	|
	|Ограничения
	|Критерии оценки: "+КритерииОценки+"
	|Обеспечение заявки – "+Формат(Объект.ОбеспечениеЗаявки,"БЛ=нет; БИ=да")+"
	|Обеспечение договора – "+Формат(Объект.ОбеспечениеДоговора,"БЛ=нет; БИ=да")+"
	|Преференции субъектам МиСБ – "+Формат(Объект.ЗакупкаДляМСП,"БЛ=нет; БИ=да")+"
	|ГОСОБОРОНЗАКАЗ – "+Формат(Объект.ГОЗ,"БЛ=нет; БИ=да")+"
	|
	|Предмет и особенности заказа: "+Объект.ПредметИОсобенностиЗакупки+"
	|Период поставки – "+Объект.ПериодПоставки+"
	|Место поставки - "+Объект.БизнесРегион+"
	|Условия оплаты – "+Объект.УсловияОплаты+"
	| 
	|
	|С уважением, отдел электронных торгов!";
	
	Возврат ТекстПисьма;
	
КонецФункции

Функция ИННПартнера(ПартнерСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.ИНН КАК ИНН
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Партнер", ПартнерСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ИНН;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция РуководительОтветственного(Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Пользователи1.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи1
		|		ПО (Пользователи.Подразделение.ТекущийРуководитель = Пользователи1.ФизическоеЛицо
		|				И Пользователи1.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция АдресЭлектроннойПочтыПользователя(Пользователь)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь,ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.EmailПользователя"));	
	
КонецФункции

#КонецОбласти
