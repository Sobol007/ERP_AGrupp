#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Производственная операция".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПроизводственнаяОперация2_2) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПроизводственнаяОперация2_2.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПроизводственнаяОперация2_2);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПооперационноеУправление";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьПроизводственнуюОперациюНаОсновании";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПроизводственнаяОперация";
	КомандаПечати.Представление = НСтр("ru = 'Производственная операция';
										|en = 'Production operation'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	//
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПроизводственнаяОперацияЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Этикетка операции';
										|en = 'Operation label'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СтатусДокумента

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПроизводственныхОпераций[НовыйСтатус];
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка                КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ТаблицаДокументов.Статус                КАК ТекущийСтатус,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	&Статус                                 КАК НовыйСтатус,
		|	ПРЕДСТАВЛЕНИЕ(&Статус)                  КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен              КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления       КАК ПометкаУдаления,
		|	ИСТИНА                                  КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)");
		
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "ПроизводственнаяОперация2_2" дополнительные проверки отсутствуют
	
КонецФункции

// Выполняет действия необходимые при установке нового статуса документа
//
// Параметры:
//  Объект - ДанныеФормыСтруктура, ДокументОбъект - объект, в котором изменяется статус.
//
Процедура ЗаполнитьРеквизитыПриУстановкеСтатуса(Объект) Экспорт
	
	Если Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена
		И Объект.КоличествоФакт = 0 Тогда
		
		Объект.КоличествоФакт = Объект.Количество;
		
	КонецЕсли;
	
	Если Объект.Статус <> Перечисления.СтатусыПроизводственныхОпераций.Выполнена Тогда
		
		Объект.КоличествоФакт = 0;
		Объект.ТребуетПовторения = Ложь;
		
	КонецЕсли;
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
		Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполняется
			ИЛИ Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
		Объект.НачалоВыполнения);
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
		Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена,
		Объект.ОкончаниеВыполнения);
	
	ЗаполнитьСтатусыУказанияСерий(Объект);
	
КонецПроцедуры

// Процедура заполняет статусы указания серий в строках табличных частей
// 
Процедура ЗаполнитьСтатусыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Документы.ПроизводственнаяОперация2_2.ПараметрыУказанияСерий(Объект);
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.МатериалыИРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата, Статус, Этап";
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - Состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = Новый Структура;
	
	НастройкиПроизводства = ПроизводствоСервер.ИспользованиеСерийВПроизводстве22();
	
	#Область ВыходныеИзделия
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ПроизводственнаяОперация2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "ВыходныеИзделия";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии = "ВыходныеИзделияСерии";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерийТЧ.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПроизводствоПродукции);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	ПараметрыУказанияСерийТЧ.ФактОтбора = (Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	
	ПараметрыУказанияСерийТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерийТЧ.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	
	ПараметрыУказанияСерий.Вставить("ВыходныеИзделия", ПараметрыУказанияСерийТЧ);
	
	#КонецОбласти
	
	#Область МатериалыИРаботы
	ПараметрыУказанияСерийТЧ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерийТЧ.ПолноеИмяОбъекта = "Документ.ПроизводственнаяОперация2_2";
	
	ПараметрыУказанияСерийТЧ.ИмяПоляСклад = "Подразделение";
	ПараметрыУказанияСерийТЧ.ИмяТЧТовары = "МатериалыИРаботы";
	ПараметрыУказанияСерийТЧ.ИмяТЧСерии  = "МатериалыИРаботы";
	
	ПараметрыУказанияСерийТЧ.УчитыватьСебестоимостьПоСериям = НастройкиПроизводства.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерийТЧ.ИспользоватьСерииНоменклатуры  = НастройкиПроизводства.ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерийТЧ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве);
	
	ПараметрыУказанияСерийТЧ.ЭтоНакладная = Истина;
	
	ПараметрыУказанияСерийТЧ.РегистрироватьСерии = Истина; // всегда используется форма регистрации серий (в ней можно также выбрать из остатков)
	ПараметрыУказанияСерийТЧ.ПланированиеОтгрузки = Ложь;
	ПараметрыУказанияСерийТЧ.ПланированиеОтбора = Ложь;
	
	ПараметрыУказанияСерийТЧ.ФактОтбора = (Объект.Статус = Перечисления.СтатусыПроизводственныхОпераций.Выполнена);
	
	ПараметрыУказанияСерийТЧ.Дата = Объект.Дата;
	
	ПараметрыУказанияСерий.Вставить("МатериалыИРаботы", ПараметрыУказанияСерийТЧ);
	#КонецОбласти
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения	 - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
// 
// Возвращаемое значение:
//  ДокументСсылка.ЭтапПроизводства2_2 - Ссылка на распоряжение.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия();
		
	ИначеЕсли ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИРаботы" Тогда
		
		ТекстЗапроса = ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалыИРаботы();
		
	КонецЕсли;                                                        
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Прочее

// Назначает рабочий центр выбранным операциям операциям
//
// Параметры:
//  Операция	 - ДокументСсылка.ПроизводственнаяОперация2_2, Массив	 - документ или массив документов "Производственная операция"
//  РабочийЦентр - СправочникСсылка.РабочиеЦентры						 - назначаемый рабочий центр.
//
Процедура НазначитьРабочийЦентрОперациям(Операция, РабочийЦентр) Экспорт
	
	МассивСсылок = УправлениеПроизводствомКлиентСервер.МассивЗначений(Операция);
	
	Если Не РабочийЦентр.Пустая() Тогда
		ВидРабочегоЦентра = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РабочийЦентр, "ВидРабочегоЦентра");
	Иначе
		ВидРабочегоЦентра = Неопределено;
	КонецЕсли;
	
	Для каждого Операция Из МассивСсылок Цикл
		
		ДокументОбъект = Операция.ПолучитьОбъект();
		
		Попытка
			ДокументОбъект.Заблокировать();
		Исключение
			ТекстИсключения = СтрШаблон(
				НСтр("ru = 'Не удалось изменить документ %1. Возможно, документ в настоящий момент редактируется.';
					|en = 'Cannot change the %1 document. Maybe, the document is being edited.'"),
				Операция);
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
		
		ДокументОбъект.РабочийЦентр = РабочийЦентр;
		
		Если ВидРабочегоЦентра <> Неопределено Тогда
			ДокументОбъект.ВидРабочегоЦентра = ВидРабочегоЦентра;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.Разблокировать();
		
	КонецЦикла;
	
КонецПроцедуры

// Получает данные выполненных документов.
//
// Параметры:
//  Этап - ДокументСсылка.ЭтапПроизводства2_2 - этап для отбора операций.
// 
// Возвращаемое значение:
//  Структура - содержит свернутые данные табличных частей выполненных операций.
//
Функция ДанныеВыполненныхОпераций(Этап) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(Таблица.Количество) КАК Количество,
		|	Таблица.Упаковка КАК Упаковка,
		|	Таблица.Серия КАК Серия
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Упаковка,
		|	Таблица.Серия,
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Серия КАК Серия,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.ВыходныеИзделияСерии КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Серия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Упаковка КАК Упаковка,
		|	Таблица.Серия КАК Серия,
		|	СУММА(Таблица.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура,
		|	Таблица.Характеристика,
		|	Таблица.Упаковка,
		|	Таблица.Серия,
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ) КАК ДатаВыполнения,
		|	Таблица.ВидРабот КАК ВидРабот,
		|	Таблица.Исполнитель КАК Исполнитель,
		|	Таблица.НазначениеРабот КАК НазначениеРабот,
		|	СУММА(Таблица.Количество) КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Документ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2.Трудозатраты КАК Таблица
		|		ПО Документ.Ссылка = Таблица.Ссылка
		|ГДЕ
		|	Документ.Этап = &Этап
		|	И Документ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|	И Документ.Проведен
		|	И Таблица.Ссылка ЕСТЬ НЕ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(Документ.ОкончаниеВыполнения, ДЕНЬ),
		|	Таблица.ВидРабот,
		|	Таблица.Исполнитель,
		|	Таблица.НазначениеРабот");
	
	Запрос.УстановитьПараметр("Этап", Этап);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВыходныеИзделия", МассивРезультатов[0].Выгрузить());
	Результат.Вставить("ВыходныеИзделияСерии", МассивРезультатов[1].Выгрузить());
	Результат.Вставить("МатериалыИРаботы", МассивРезультатов[2].Выгрузить());
	Результат.Вставить("Трудозатраты", МассивРезультатов[3].Выгрузить());
	
	Возврат Результат;
	
КонецФункции

// Включает/отключает использование свойств документа.
//
Процедура УстановитьИспользованиеСвойств() Экспорт
	
	ОперацииИспользуются = Константы.ИспользоватьПооперационноеУправление.Получить()
		ИЛИ Константы.ИспользоватьПооперационноеПланирование.Получить();
		
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ОперацииИспользуются;
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств(
		"Документ_ПроизводственнаяОперация2_2", ПараметрыНабора);
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств(
		"Документ_ПроизводственнаяОперация2_2_Общие", ПараметрыНабора);
	
	ВидыИспользуются = ОперацииИспользуются
		И Константы.ИспользоватьВидыТехнологическихОпераций.Получить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыОпераций.НаборСвойств КАК Ссылка
		|ИЗ
		|	Справочник.ВидыТехнологическихОпераций КАК ВидыОпераций
		|ГДЕ
		|	ВидыОпераций.НаборСвойств.Используется <> &Используется");
	Запрос.УстановитьПараметр("Используется", ВидыИспользуются);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.Используется = ВидыИспользуются;
		СпрОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Разбить(Ссылка, ЗначенияЗаполнения, БлокироватьДанные = Истина) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		ОбъектСтарый = Ссылка.ПолучитьОбъект();
		
		Если БлокироватьДанные Тогда
			ОбъектСтарый.Заблокировать();
		КонецЕсли;
		
		ОбъектСтарый.ДополнительныеСвойства.Вставить("Разбиение");
		ОбъектНовый = ОбъектСтарый.Скопировать();
		
		// Заполнение реквизитов шапки
		ЗаполнитьЗначенияСвойств(ОбъектНовый, ЗначенияЗаполнения);
		
		Коэффициент = ?(ОбъектСтарый.Количество <> 0, ОбъектНовый.Количество/ОбъектСтарый.Количество, -1);
		
		ОбъектНовый.Дата = ТекущаяДатаСеанса();
		
		ОбъектСтарый.Количество = ОбъектСтарый.Количество - ОбъектНовый.Количество;
		ОбъектСтарый.ВремяВыполнения = ОбъектСтарый.ВремяВыполнения - ОбъектНовый.ВремяВыполнения;
		
		Если ОбъектСтарый.КоличествоФакт <> 0 Тогда
			
			КоличествоФакт = ОбъектСтарый.КоличествоФакт;
			ОбъектСтарый.КоличествоФакт = Мин(ОбъектСтарый.Количество, ОбъектСтарый.КоличествоФакт);
			ОбъектНовый.КоличествоФакт = КоличествоФакт - ОбъектСтарый.КоличествоФакт;
			
		КонецЕсли;
		
		Если Коэффициент <> -1 Тогда
			
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок",
				ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
			
			КэшированныеЗначения = Неопределено;
			
			СтрокиУдалить = Новый Структура("Старый, Новый", Новый Соответствие, Новый Соответствие);
			ИменаТЧ = СтрРазделить("МатериалыИРаботы,ВыходныеИзделия,ВыходныеИзделияСерии,Трудозатраты", ",");
			
			// Пересчет табличных частей
			Для каждого ТЧ Из ИменаТЧ Цикл
				
				Для Индекс = 0 По ОбъектНовый[ТЧ].Количество()-1 Цикл
					
					СтрокаНовый = ОбъектНовый[ТЧ][Индекс];
					СтрокаНовый.Количество = СтрокаНовый.Количество * Коэффициент;
					Если СтрокаНовый.Количество = 0 Тогда
						Если СтрокиУдалить.Новый.Получить(ТЧ) = Неопределено Тогда
							СтрокиУдалить.Новый.Вставить(ТЧ, Новый Массив);
						КонецЕсли;
						СтрокиУдалить.Новый[ТЧ].Добавить(СтрокаНовый);
					КонецЕсли;
					
					СтрокаСтарый = ОбъектСтарый[ТЧ][Индекс];
					СтрокаСтарый.Количество = СтрокаСтарый.Количество - СтрокаНовый.Количество;
					Если СтрокаСтарый.Количество = 0 Тогда
						Если СтрокиУдалить.Старый.Получить(ТЧ) = Неопределено Тогда
							СтрокиУдалить.Старый.Вставить(ТЧ, Новый Массив);
						КонецЕсли;
						СтрокиУдалить.Старый[ТЧ].Добавить(СтрокаСтарый);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТЧ = "МатериалыИРаботы" ИЛИ ТЧ = "ВыходныеИзделия" Тогда
					ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектНовый[ТЧ], СтруктураДействий, КэшированныеЗначения);
					ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ОбъектСтарый[ТЧ], СтруктураДействий, КэшированныеЗначения);
				КонецЕсли;
				
			КонецЦикла;
			
			// Сверка серий изделий
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
			
			Для Сч = 1 По 2 Цикл
				
				Объект = ?(Сч = 1, ОбъектНовый, ОбъектСтарый);
				
				Если Объект.ВыходныеИзделияСерии.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Серии = Объект.ВыходныеИзделияСерии.Выгрузить(, "Номенклатура, Характеристика, Количество");
				Серии.Свернуть("Номенклатура, Характеристика", "Количество");
				
				Изделия = Объект.ВыходныеИзделия.Выгрузить(, "Номенклатура, Характеристика, Количество");
				Изделия.Свернуть("Номенклатура, Характеристика", "Количество");
				Изделия.Индексы.Добавить("Номенклатура, Характеристика");
				
				Для каждого СтрокаСерия Из Серии Цикл
					
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерия);
					СтрокиИзделия = Изделия.НайтиСтроки(СтруктураПоиска);
					
					Отклонение = ?(СтрокиИзделия.ВГраница() = 0, СтрокиИзделия[0].Количество - СтрокаСерия.Количество, 0);
					Если Отклонение = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НайденныеСтроки = Объект.ВыходныеИзделияСерии.НайтиСтроки(СтруктураПоиска);
					
					Для каждого Строка Из НайденныеСтроки Цикл
							
						Если Строка.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;
							
						КоличествоЗачет = Макс(Отклонение, -Строка.Количество);
						Отклонение = Отклонение - КоличествоЗачет;
						Строка.Количество = Строка.Количество + КоличествоЗачет;
							
						Если Строка.Количество = 0 Тогда
							Имя = ?(Сч = 1, "Новый", "Старый");
							Если СтрокиУдалить[Имя].Получить("ВыходныеИзделияСерии") = Неопределено Тогда
								СтрокиУдалить[Имя].Вставить("ВыходныеИзделияСерии", Новый Массив);
							КонецЕсли;
							СтрокиУдалить[Имя]["ВыходныеИзделияСерии"].Добавить(Строка);
						КонецЕсли;
						
						Если Отклонение = 0 Тогда
							Прервать;
						КонецЕсли;
							
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
			// Удаление пустых строк
			Для каждого КлючИЗначение Из СтрокиУдалить.Старый Цикл
				Для каждого Строка Из КлючИЗначение.Значение Цикл
					ОбъектСтарый[КлючИЗначение.Ключ].Удалить(Строка);
				КонецЦикла;
			КонецЦикла;
			Для каждого КлючИЗначение Из СтрокиУдалить.Новый Цикл
				Для каждого Строка Из КлючИЗначение.Значение Цикл
					ОбъектНовый[КлючИЗначение.Ключ].Удалить(Строка);
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		// Запись документов
		РежимЗаписи = ?(ОбъектСтарый.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ОбъектСтарый.Записать(РежимЗаписи);
		ОбъектНовый.Записать(РежимЗаписи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Производственные операции';
				|en = 'Production operations'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ПроизводственнаяОперация2_2,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	ПереопределениеРасчетаПараметров = Новый Структура;
	
	ПолноеИмяДокумента = "Документ.ПроизводственнаяОперация2_2";
	
	Если ИмяРегистра = "ДвиженияСерийТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	Иначе
		
		ШаблонИсключения = НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.';
								|en = 'In the %1 document, adaptation of request for generating records of the %2 register is not implemented.'");
		ТекстИсключения = СтрШаблон(ШаблонИсключения, ПолноеИмяДокумента, ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ПереопределениеРасчетаПараметров);
	
	Возврат Результат;
	
КонецФункции

// Используется в механизмах обновления ИБ
//
// Параметры:
//  ИмяРегистра	 - Строка	 - имя регистра.
// 
// Возвращаемое значение:
//  Соответствие - 
//
Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Дата, Подразделение");
	
	Запрос.УстановитьПараметр("Период", Реквизиты.Дата);
	Запрос.УстановитьПараметр("Подразделение", Реквизиты.Подразделение);
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество,
	|	&Подразделение КАК Отправитель,
	|	&Подразделение КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПотреблениеМатериаловПриПроизводстве) КАК СкладскаяОперация,
	|	&Ссылка КАК Документ,
	|	ЛОЖЬ КАК ЭтоСкладскоеДвижение
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Количество,
	|	&Подразделение,
	|	&Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции),
	|	&Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	ТабличнаяЧасть.Серия,
	|	ТабличнаяЧасть.Количество,
	|	&Подразделение,
	|	&Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ПроизводствоПродукции),
	|	&Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделияСерии КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Серии

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийВыходныеИзделия()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриПроизводствеПродукции
	|			ТОГДА ВЫБОР
	|					КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|							И ТоварыДляЗапроса.Количество > 0
	|						ТОГДА 2
	|					КОГДА НЕ &ФактОтбора
	|							И ЕСТЬNULL(СерииДляЗапроса.Количество, 0) = 0
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО ТоварыДляЗапроса.ВидНоменклатуры = ВидыНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО Товары.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И Товары.Характеристика = СерииДляЗапроса.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаЗаполненияСтатусовУказанияСерийМатериалыИРаботы()

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерийСтарый,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ВидыНоменклатуры.ПолитикаУчетаСерий.УказыватьПриРасходеМатериалов
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 2
	|					КОГДА НЕ &ФактОтбора
	|						ТОГДА 21
	|					ИНАЧЕ 1
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО Товары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (СпрНоменклатура.ВидНоменклатуры = ВидыНоменклатуры.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтатусУказанияСерийСтарый
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Печать

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПроизводственнаяОперация") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПроизводственнаяОперация",
			НСтр("ru = 'Производственная операция';
				|en = 'Production operation'"),
			СформироватьПечатнуюФормуОперация(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПроизводственнаяОперацияЭтикетка") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПроизводственнаяОперацияЭтикетка",
			НСтр("ru = 'Этикетка операции';
				|en = 'Operation label'"),
			СформироватьПечатнуюФормуЭтикеткаОперации(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Производственная операция

Функция СформироватьПечатнуюФормуОперация(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственнаяОперация2_2_ПроизводственнаяОперация";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПроизводственнаяОперация2_2.ПФ_MXL_ПроизводственнаяОперация");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиПроизводственнаяОперация(МассивОбъектов);
	
	ПараметрыПодразделений = ПроизводствоСервер.ПараметрыПроизводственныхПодразделений(ДанныеДляПечати.Подразделения);
	ИспользоватьИнтервалЧас = Константы.ИспользоватьИнтервалПланированияЧас.Получить();
	
	ВыборкаШапка = ДанныеДляПечати.ВыборкаШапка;
	
	Пока ВыборкаШапка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
	
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
			ВыборкаШапка, НСтр("ru = 'Производственная операция';
								|en = 'Production operation'"));
		Область.Параметры.Ссылка = ВыборкаШапка.Ссылка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			ВыборкаШапка.Ссылка);
	
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		
		Область.Параметры.Заполнить(ВыборкаШапка);
		
		Область.Параметры.ИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			ВыборкаШапка.ИзделиеНаименованиеПолное,
			ВыборкаШапка.ИзделиеХарактеристикаНаименованиеПолное);
			
		Область.Параметры.ЕдиницаИзмеренияКоличества = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			ВыборкаШапка.ЕдиницаИзмеренияПредставление, ВыборкаШапка.КоличествоПлан);
			
		Область.Параметры.ВремяВыполненияПредставление = "" + ВыборкаШапка.ВремяВыполнения + " " + ВыборкаШапка.ВремяВыполненияЕдИзм;
		
		Если ПараметрыПодразделений.Получить(ВыборкаШапка.Подразделение).ИспользоватьПооперационноеПланирование Тогда
			Формат = "ДФ='dd.MM.yy HH:mm:ss'";
		ИначеЕсли ИспользоватьИнтервалЧас Тогда
			Формат = "ДФ='dd.MM.yyyy HH:mm'";
		Иначе
			Формат = "ДЛФ=D";
		КонецЕсли;
		
		Область.Область("НачалоВыполнения").Формат = Формат;
		Область.Область("ОкончаниеВыполнения").Формат = Формат;
		
		ТабличныйДокумент.Вывести(Область);
		
		// Материалы
		ПечатнаяФормаОперацияВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаМатериалы);
		
		// Изделия
		ПечатнаяФормаОперацияВывестиИзделия(Макет, ТабличныйДокумент, ВыборкаШапка, ДанныеДляПечати.ВыборкаИзделия);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиПроизводственнаяОперация(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Операции.Ссылка                          КАК Ссылка,
		|	Операции.Номер                           КАК Номер,
		|	Операции.Дата                            КАК Дата,
		|	Операции.Подразделение                   КАК Подразделение,
		|	Операции.Подразделение.Представление     КАК ПодразделениеПредставление,
		|	Операции.Операция                        КАК Операция,
		|	Операции.Операция.Владелец               КАК МаршрутнаяКарта,
		|	Операции.Операция.Владелец.Представление КАК МаршрутнаяКартаПредставление,
		|	Операции.Наименование                    КАК Наименование,
		|	Операции.Исполнитель                     КАК Исполнитель,
		|	Операции.Исполнитель.Представление       КАК ИсполнительПредставление,
		|
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеНоменклатура                      КАК Изделие,
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеНоменклатура.НаименованиеПолное   КАК ИзделиеНаименованиеПолное,
		|	Операции.Этап.ПартияПроизводства.ОсновноеИзделиеХарактеристика.НаименованиеПолное КАК ИзделиеХарактеристикаНаименованиеПолное,
		|	Операции.Операция.ЕдиницаИзмерения.Представление                                  КАК ЕдиницаИзмеренияПредставление,
		|
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр
		|		ИНАЧЕ Операции.ВидРабочегоЦентра
		|	КОНЕЦ                                    КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр.Представление
		|		ИНАЧЕ Операции.ВидРабочегоЦентра.Представление
		|	КОНЕЦ                                    КАК РабочийЦентрПредставление,
		|
		|	Операции.Количество                      КАК КоличествоПлан,
		|	Операции.КоличествоФакт                  КАК КоличествоФакт,
		|	Операции.НачалоВыполнения                КАК НачалоВыполнения,
		|	Операции.ОкончаниеВыполнения             КАК ОкончаниеВыполнения,
		|	Операции.ВремяВыполнения                 КАК ВремяВыполнения,
		|	Операции.ВремяВыполненияЕдИзм            КАК ВремяВыполненияЕдИзм
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Материалы.Ссылка                            КАК Ссылка,
		|	Материалы.НомерСтроки                       КАК НомерСтроки,
		|	Материалы.Номенклатура                      КАК Номенклатура,
		|	Материалы.Номенклатура.Код                  КАК Код,
		|	Материалы.Номенклатура.Артикул              КАК Артикул,
		|	Материалы.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Материалы.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	&ТекстЗапросаЕдиницаИзмеренияМатериалы      КАК ЕдиницаИзмерения,
		|	Материалы.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2.МатериалыИРаботы КАК Материалы
		|ГДЕ
		|	Материалы.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Изделия.Ссылка                            КАК Ссылка,
		|	Изделия.НомерСтроки                       КАК НомерСтроки,
		|	Изделия.Номенклатура                      КАК Номенклатура,
		|	Изделия.Номенклатура.Код                  КАК Код,
		|	Изделия.Номенклатура.Артикул              КАК Артикул,
		|	Изделия.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Изделия.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	&ТекстЗапросаЕдиницаИзмеренияИзделия      КАК ЕдиницаИзмерения,
		|	Изделия.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2.ВыходныеИзделия КАК Изделия
		|ГДЕ
		|	Изделия.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	НомерСтроки
		|ИТОГИ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)";
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование", "Материалы.Упаковка", "Материалы.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмеренияМатериалы", ТекстЕдИзм);
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование", "Изделия.Упаковка", "Изделия.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаЕдиницаИзмеренияИзделия", ТекстЕдИзм);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка",        МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаМатериалы",    МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("ВыборкаИзделия",      МассивРезультатов[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляПечати.Вставить("Подразделения",       МассивРезультатов[3].Выгрузить().ВыгрузитьКолонку("Подразделение"));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Процедура ПечатнаяФормаОперацияВывестиМатериалы(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаМатериалы)
	
	Если НЕ ВыборкаМатериалы.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
		
	Область = Макет.ПолучитьОбласть("ЗаголовокТовары");
	Область.Параметры.ИмяТаблицы = НСтр("ru = 'Материалы';
										|en = 'Materials'");
	ТабличныйДокумент.Вывести(Область);
			
	Если ВыводитьКоды Тогда
	   	
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_СКодом");
			
	Иначе
				
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_БезКода");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_БезКода");
		
	КонецЕсли;
			
	ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = НСтр("ru = 'Материал';
														|en = 'Material'");
		
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Выборка = ВыборкаМатериалы.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[КолонкаКодов];
		КонецЕсли;
						
		ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименованиеПолное,
			Выборка.ХарактеристикаНаименованиеПолное);
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТовары"));
	
КонецПроцедуры

Процедура ПечатнаяФормаОперацияВывестиИзделия(Макет, ТабличныйДокумент, ВыборкаШапка, ВыборкаИзделия)
	
	Если НЕ ВыборкаИзделия.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
		Возврат;
	КонецЕсли;
			
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
	Область = Макет.ПолучитьОбласть("ЗаголовокТовары");
	Область.Параметры.ИмяТаблицы = НСтр("ru = 'Выходные изделия';
										|en = 'Finished products'");
	ТабличныйДокумент.Вывести(Область);
	
	Если ВыводитьКоды Тогда
	   	
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_СКодом");
		ОбластьШапка.Параметры.ИмяКолонкиКодов = КолонкаКодов;
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_СКодом");
			
	Иначе
				
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТовары_БезКода");
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТовары_БезКода");
		
	КонецЕсли;
			
	ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = НСтр("ru = 'Изделие';
														|en = 'Product'");
		
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Выборка = ВыборкаИзделия.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбластьСтрока.Параметры.Заполнить(Выборка);
			
		Если ВыводитьКоды Тогда
			ОбластьСтрока.Параметры.Артикул = Выборка[КолонкаКодов];
		КонецЕсли;
						
		ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
			Выборка.НоменклатураНаименованиеПолное,
			Выборка.ХарактеристикаНаименованиеПолное);
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
			
	ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТовары"));
	
КонецПроцедуры

// Этикетка операции

Функция СформироватьПечатнуюФормуЭтикеткаОперации(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственнаяОперация2_2_ПроизводственнаяОперацияЭтикетка";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПроизводственнаяОперация2_2.ПФ_MXL_ПроизводственнаяОперацияЭтикетка");
	ПервыйДокумент = Истина;
	
	Выборка = ДанныеДляПечатиЭтикеткиОперации(МассивОбъектов);
	
	Пока Выборка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Область = Макет.ПолучитьОбласть("Этикетка");
		
		Область.Параметры.Заполнить(Выборка);
		
		Область.Параметры.ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 от %2';
															|en = '%1 from %2'"),
			Выборка.Номер,
			Формат(Выборка.Дата, "ДЛФ=D"));
		
		Область.Параметры.ЕдиницаИзмеренияКоличества = УправлениеПроизводствомКлиентСервер.ПредставлениеЕдиницыИзмеренияОперации(
			Выборка.ЕдиницаИзмеренияПредставление, Выборка.КоличествоПлан);
			
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			Выборка.Ссылка);
	    
		ТабличныйДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиЭтикеткиОперации(Ссылки)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Операции.Ссылка                    КАК Ссылка,
		|	Операции.Номер                     КАК Номер,
		|	Операции.Дата                      КАК Дата,
		|	Операции.Операция                  КАК Операция,
		|	Операции.Наименование              КАК Наименование,
		|	Операции.Исполнитель               КАК Исполнитель,
		|	Операции.Исполнитель.Представление КАК ИсполнительПредставление,
		|
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр
		|		ИНАЧЕ Операции.ВидРабочегоЦентра
		|	КОНЕЦ                              КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.РабочийЦентр <> ЗНАЧЕНИЕ(Справочник.РабочиеЦентры.ПустаяСсылка)
		|			ТОГДА Операции.РабочийЦентр.Представление
		|		ИНАЧЕ Операции.ВидРабочегоЦентра.Представление
		|	КОНЕЦ                              КАК РабочийЦентрПредставление,
		|
		|	Операции.Количество                КАК КоличествоПлан,
		|	Операции.ВремяВыполнения           КАК ВремяВыполнения,
		|	Операции.ВремяВыполненияЕдИзм      КАК ВремяВыполненияЕдИзм,
		|
		|	Операции.Операция.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияПредставление
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка");
	
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает настройки использования опциональных табличных частей в операциях.
//
// Параметры:
//  Подразделение - СправочникСсылка.СтруктураПредприятия - подразделение документа.
//  МаршрутнаяКарта	- СправочникСсылка.МаршрутныеКарты - маршрутная карта документа.
// 
// Возвращаемое значение:
//  Структура - настройки.
//
Функция НастройкиУчета(Подразделение, МаршрутнаяКарта) Экспорт
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Подразделение);
	
	Если ЗначениеЗаполнено(МаршрутнаяКарта) Тогда
		ДопПараметры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			МаршрутнаяКарта, "ИспользоватьМатериалы, ИспользоватьВыходныеИзделия");
	Иначе
		ДопПараметры = Новый Структура("ИспользоватьМатериалы, ИспользоватьВыходныеИзделия", Истина, Истина);
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИспользоватьМатериалы",
		ПараметрыПодразделения.ИспользоватьМатериалыВОперациях
		И ДопПараметры.ИспользоватьМатериалы);
	
	Результат.Вставить("ИспользоватьВыходныеИзделия",
		ПараметрыПодразделения.ИспользоватьВыходныеИзделияВОперациях
		И ДопПараметры.ИспользоватьВыходныеИзделия);
	
	Результат.Вставить("ИспользоватьБригадныеНаряды",
		ПараметрыПодразделения.ИспользоватьБригадныеНаряды);
	
	Результат.Вставить("ИспользоватьСменныеЗадания",
		ПараметрыПодразделения.ИспользоватьСменныеЗадания);
		
	Результат.Вставить("ИспользоватьПооперационноеПланирование",
		ПараметрыПодразделения.ИспользоватьПооперационноеПланирование);
		
	Результат.Вставить("ИспользоватьУчастки",
		ПараметрыПодразделения.ИспользоватьУчастки);
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьПроизводственнуюОперациюНаОснованииПроверкаОснования(ОбъектОснование) Экспорт
	
	РезультатПроверки = Новый Структура("ТекстОшибки", Неопределено);
	
	Если ТипЗнч(ОбъектОснование) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
		ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектОснование, "Подразделение"));
		
		Если Не ПараметрыПодразделения.ИспользоватьПооперационноеУправление Тогда
			
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
												|en = 'Unable to execute the command for this document'");
			
		КонецЕсли;
		
	Иначе
		
		РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
											|en = 'Unable to execute the command for this document'");
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура СоздатьВТПартииОпераций(МенеджерВременныхТаблиц, Этапы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК ПроизводственнаяОперация,
		|	Таблица.Этап КАК Этап,
		|	Таблица.Операция КАК Операция,
		|	Таблица.ИдентификаторОперации КАК ИдентификаторОперации,
		|	Таблица.НомерПартии КАК НомерПартии,
		|	ВЫБОР
		|		КОГДА Таблица.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|			ТОГДА Таблица.КоличествоФакт
		|		ИНАЧЕ Таблица.Количество
		|	КОНЕЦ КАК Количество,
		|	Таблица.Подразделение КАК Подразделение,
		|	Таблица.РабочийЦентр КАК РабочийЦентр,
		|	Таблица.Статус КАК Статус,
		|	Таблица.ТребуетПовторения КАК ТребуетПовторения
		|ПОМЕСТИТЬ ВТПартииОпераций
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Этап В(&МассивСсылок)
		|	И Таблица.Проведен");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", ОбщегоНазначенияУТКлиентСервер.Массив(Этапы));
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаСписокОпераций() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	Операции.Ссылка КАК Ссылка,
		|	Операции.Номер КАК Номер,
		|	Операции.Исполнитель КАК Исполнитель,
		|	Операции.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Операции.РабочийЦентр КАК РабочийЦентр,
		|	ВЫБОР
		|		КОГДА Операции.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполнена)
		|			ТОГДА Операции.КоличествоФакт
		|		ИНАЧЕ Операции.Количество
		|	КОНЕЦ КАК Количество,
		|	Операции.Операция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	Операции.Статус КАК Статус
		|ИЗ
		|	Документ.ПроизводственнаяОперация2_2 КАК Операции
		|ГДЕ
		|	Операции.Ссылка В(&СписокОпераций)
		|	И Операции.Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли