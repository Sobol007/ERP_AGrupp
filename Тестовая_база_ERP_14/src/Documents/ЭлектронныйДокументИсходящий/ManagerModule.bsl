
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	Данные = Новый Массив;
	
	// Заполнение истории обработки.
	Данные_ЗаполнитьИсториюОбработки = ДанныеКОбработке_ЗаполнитьИсториюОбработки();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Данные, Данные_ЗаполнитьИсториюОбработки, Истина);
	// Заполнение договора контрагента.
	Данные_ЗаполнитьДоговорКонтрагента = ДанныеКОбработке_ЗаполнитьДоговорКонтрагента();
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Данные, Данные_ЗаполнитьДоговорКонтрагента, Истина);
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Данные, ДополнительныеПараметры);
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры);
	
	МетаданныеОбъекта = Метаданные.Документы.ЭлектронныйДокументИсходящий;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ПараметрыВыборки.ДополнительныеИсточникиДанных.Вставить("НастройкаЭДО");
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, ПараметрыВыборки);
	
	НаборСсылок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		НаборСсылок.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	ИсторияОбработки = ИсторияОбработкиДокументов(НаборСсылок);
	Договоры = ДоговорыДокументов(НаборСсылок);
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаОбъект);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Записать = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				ОбработатьДанные_ЗаполнитьИсториюОбработки(Объект, ИсторияОбработки, Записать);
				ОбработатьДанные_ЗаполнитьДоговорКонтрагента(Объект, Договоры, Записать);
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать исходящий электронный документ: %1 по причине:';
									|en = 'Cannot process the outgoing electronic document: %1 due to:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеОбъекта, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые исходящие электронные документы (пропущены): %1';
								|en = 'Cannot process some outgoing electronic documents (skipped): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция исходящих электронных документов: %1';
								|en = 'Another set of outgoing electronic documents is processed: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,
			МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов  = Параметры.ПрогрессВыполнения.ОбработаноОбъектов  + ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Добавляет присоединенный файл к электронному документу.
// Не контролирует, существует ли уже у документа присоединенный файл, поэтому вызывать можно только в том случае,
// если точно известно, что файл еще не создан.
//
// Параметры:
//  Объект			 - ДанныеФормыСтруктура, ДокументОбъект.ЭлектронныйДокументИсходящий - объект произвольного электронного документа.
//  АдресВХранилище	 - Строка - адрес временного хранилища, содержащего файл.
//  ИмяФайла		 - Строка - имя файла без каталога.
// 
// Возвращаемое значение:
//  СправочникСсылка.ЭДПрисоединенныеФайлы - ссылка на созданный файл электронного документа.
//
Функция ДобавитьПрисоединенныйФайл(Объект, АдресВХранилище, ИмяФайла) Экспорт

	ПрисоединенныйФайлРасширение            = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяФайла);
	ПрисоединенныйФайлИмяФайлаБезРасширения = СтрЗаменить(ИмяФайла, "." + ПрисоединенныйФайлРасширение, "");
	
	Результат = Неопределено;
	
	// Определим настройку обмена и транспортную информацию.
	ПараметрыСоглашения = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыСоглашения) Тогда
		ИдентификаторОрганизации = ПараметрыСоглашения.ИдентификаторОрганизации;
		ИдентификаторКонтрагента = ПараметрыСоглашения.ИдентификаторКонтрагента;
		СоглашениеЭД             = ПараметрыСоглашения.СоглашениеЭД;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыСоглашения) И НЕ ЗначениеЗаполнено(СоглашениеЭД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	Если НЕ (ЗначениеЗаполнено(ПрисоединенныйФайлИмяФайлаБезРасширения)
		И ЭтоАдресВременногоХранилища(АдресВХранилище)) Тогда
		
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор",                      Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов",             Объект.Ссылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения",           ПрисоединенныйФайлИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",         ПрисоединенныйФайлРасширение);
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
	
	СсылкаНаФайл = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.УникальныйИД));
	Результат = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресВХранилище,,, СсылкаНаФайл);
	НомерДокумента = ОбменСКонтрагентамиВнутренний.ВернутьИдЭД(Результат);
	
	СтруктураДокумента.Вставить("НаименованиеФайла",   ПрисоединенныйФайлИмяФайлаБезРасширения);
	СтруктураДокумента.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);
	СтруктураДокумента.Вставить("НаправлениеЭД",       Перечисления.НаправленияЭД.Исходящий);
	СтруктураДокумента.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.Сформирован);
	СтруктураДокумента.Вставить("Отправитель",         ИдентификаторОрганизации);
	СтруктураДокумента.Вставить("Получатель",          ИдентификаторКонтрагента);
	СтруктураДокумента.Вставить("НомерЭД",             НомерДокумента);
	СтруктураДокумента.Вставить("УникальныйИД",        НомерДокумента);

	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Результат, СтруктураДокумента, Ложь);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обновление

Процедура ИнициализироватьПараметрыОбработкиДляПереходаНаНовуюВерсию(Параметры)
	
	// Определим общее количество объектов к обработке.
	Если Параметры.ПрогрессВыполнения.ВсегоОбъектов = 0 Тогда
		
		ПараметрыВыборки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
		ПараметрыВыборки.ВыбиратьПорциями = Ложь;
		Выборка = ОбновлениеИнформационнойБазы.ВыбратьСсылкиДляОбработки(Параметры.Очередь, "Документ.ЭлектронныйДокументИсходящий", ПараметрыВыборки);
		Параметры.ПрогрессВыполнения.ВсегоОбъектов = Выборка.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеКОбработке_ЗаполнитьИсториюОбработки() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.ДатаПодписания = &ПустаяДата
	|	И ЭлектронныйДокументИсходящий.ДатаОтправки = &ПустаяДата
	|	И ЭлектронныйДокументИсходящий.ДатаАннулирования = &ПустаяДата
	|	И НЕ ЭлектронныйДокументИсходящий.СостояниеЭДО В (&СостоянияЗавершения)";
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	СостоянияЗавершения = Новый Массив;
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	Запрос.УстановитьПараметр("СостоянияЗавершения", СостоянияЗавершения);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Функция ДанныеКОбработке_ЗаполнитьДоговорКонтрагента() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	НЕ ЭлектронныйДокументИсходящий.СостояниеЭДО В (&СостоянияЗавершения)
	|	И ЭлектронныйДокументИсходящий.ДоговорКонтрагента = &ПустойДоговорКонтрагента
	|	И ЭлектронныйДокументИсходящий.НастройкаЭДО.ДоговорКонтрагента <> &ПустойДоговорКонтрагента";
	СостоянияЗавершения = Новый Массив;
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.Аннулирован);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ЗакрытПринудительно);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершен);
	СостоянияЗавершения.Добавить(Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением);
	Запрос.УстановитьПараметр("СостоянияЗавершения", СостоянияЗавершения);
	ПустойДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение();
	Запрос.УстановитьПараметр("ПустойДоговорКонтрагента", ПустойДоговорКонтрагента);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанные_ЗаполнитьИсториюОбработки(Объект, ИсторияОбработки, Записать)
	
	СтрокаИсторииОбработки = ИсторияОбработки.Найти(Объект.Ссылка, "ЭлектронныйДокумент");
	Если СтрокаИсторииОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаПодписания)
		ИЛИ ЗначениеЗаполнено(Объект.ДатаОтправки)
		ИЛИ ЗначениеЗаполнено(Объект.ДатаАннулирования) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНеизвестна = Дата(3000, 1, 1);
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПодписания)
		И СтрокаИсторииОбработки.ДатаПодписания <> ДатаНеизвестна Тогда
		Объект.ДатаПодписания = СтрокаИсторииОбработки.ДатаПодписания;
		Записать = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаОтправки)
		И СтрокаИсторииОбработки.ДатаОтправки <> ДатаНеизвестна Тогда
		Объект.ДатаОтправки = СтрокаИсторииОбработки.ДатаОтправки;
		Записать = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАннулирования)
		И СтрокаИсторииОбработки.ДатаАннулирования <> ДатаНеизвестна Тогда
		Объект.ДатаАннулирования = СтрокаИсторииОбработки.ДатаАннулирования;
		Записать = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДанные_ЗаполнитьДоговорКонтрагента(Объект, Договоры, Записать)
	
	СтрокаДоговора = Договоры.Найти(Объект.Ссылка, "ЭлектронныйДокумент");
	Если СтрокаДоговора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДоговора.ДоговорКонтрагента)
		И Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
		И Объект.ДоговорКонтрагента <> СтрокаДоговора.ДоговорКонтрагента Тогда
		
		Объект.ДоговорКонтрагента = СтрокаДоговора.ДоговорКонтрагента;
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИсторияОбработкиДокументов(Знач НаборЭлектронныхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналСобытийЭД.ВладелецЭД КАК ЭлектронныйДокумент,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЖурналСобытийЭД.СтатусЭД В (&СтатусыПодписан)
	|				ТОГДА ЖурналСобытийЭД.Дата
	|			ИНАЧЕ ДАТАВРЕМЯ(3000, 1, 1)
	|		КОНЕЦ) КАК ДатаПодписания,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЖурналСобытийЭД.СтатусЭД В (&СтатусыОтправлен)
	|				ТОГДА ЖурналСобытийЭД.Дата
	|			ИНАЧЕ ДАТАВРЕМЯ(3000, 1, 1)
	|		КОНЕЦ) КАК ДатаОтправки,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЖурналСобытийЭД.СтатусЭД В (&СтатусыАннулирован)
	|				ТОГДА ЖурналСобытийЭД.Дата
	|			ИНАЧЕ ДАТАВРЕМЯ(3000, 1, 1)
	|		КОНЕЦ) КАК ДатаАннулирования
	|ИЗ
	|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
	|ГДЕ
	|	ЖурналСобытийЭД.ВладелецЭД В(&ЭлектронныеДокументы)
	|	И ЖурналСобытийЭД.ПрисоединенныйФайл.ТипЭлементаВерсииЭД В(&ТипыПервичныхЭД)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналСобытийЭД.ВладелецЭД";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", НаборЭлектронныхДокументов);
	СтатусыПодписан = Новый Массив;
	СтатусыПодписан.Добавить(Перечисления.СтатусыЭД.Подписан);
	СтатусыПодписан.Добавить(Перечисления.СтатусыЭД.ПолностьюПодписан);
	Запрос.УстановитьПараметр("СтатусыПодписан", СтатусыПодписан);
	СтатусыОтправлен = Новый Массив;
	СтатусыОтправлен.Добавить(Перечисления.СтатусыЭД.Отправлен);
	СтатусыОтправлен.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	Запрос.УстановитьПараметр("СтатусыОтправлен", СтатусыОтправлен);
	СтатусыАннулирован = Новый Массив;
	СтатусыАннулирован.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	Запрос.УстановитьПараметр("СтатусыАннулирован", СтатусыАннулирован);
	Запрос.УстановитьПараметр("ТипыПервичныхЭД", ОбменСКонтрагентамиСлужебный.ТипыПервичныхЭД());
	
	ИсторияОбработки = Запрос.Выполнить().Выгрузить();
	ИсторияОбработки.Индексы.Добавить("ЭлектронныйДокумент");
	
	Возврат ИсторияОбработки;
	
КонецФункции

Функция ДоговорыДокументов(Знач НаборЭлектронныхДокументов) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭлектронныйДокументИсходящий.Ссылка КАК ЭлектронныйДокумент,
	|	ЭлектронныйДокументИсходящий.НастройкаЭДО.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|ГДЕ
	|	ЭлектронныйДокументИсходящий.Ссылка В(&ЭлектронныеДокументы)";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", НаборЭлектронныхДокументов);
	
	Договоры = Запрос.Выполнить().Выгрузить();
	Договоры.Индексы.Добавить("ЭлектронныйДокумент");
	
	Возврат Договоры;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
