

#Область ОписаниеПеременных

&НаКлиенте
Перем КонтекстВыбора;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Состояние = Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
		Рассмотрено = Истина;
		ПриСозданииЧтенииНаСервере();
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
		ИзменилисьКонтакты = Истина;
	КонецЕсли;
	
	Если НЕ ИнформационнаяБазаФайловая Тогда
		Элементы.АдресатыПроверитьСтатусыДоставки.Видимость = Ложь;
	КонецЕсли;
	
	Взаимодействия.ЗаполнитьСписокВыбораДляРассмотретьПосле(Элементы.РассмотретьПосле.СписокВыбора);
	
	// Определим типы контактов, которые можно создать.
	СписокИнтерактивноСоздаваемыхКонтактов = Взаимодействия.СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов();
	Элементы.СоздатьКонтакт.Видимость      = СписокИнтерактивноСоздаваемыхКонтактов.Количество() > 0;
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	Если Параметры.Свойство("Взаимодействие") Тогда
		Взаимодействие	= Параметры.Взаимодействие;
	КонецЕсли;
	Если Параметры.Свойство("ДанныеЗаполнения") Тогда
		Объект.ВзаимодействиеОснование = Параметры.ДанныеЗаполнения;
	КонецЕсли;
	
	CRM_ШаблоныОбъектов.СформироватьДополнительныеЭлементыФормы(ЭтотОбъект);
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	Если Параметры.Свойство("СокращеннаяФорма") или Параметры.Основание<>Неопределено Тогда
		Элементы.ГруппаПравая.Видимость = Ложь;
		Элементы.СтраницаКомментарий.Видимость = Ложь;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);

КонецПроцедуры 

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// +SMS4B
	Если НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнены настройки отправки SMS сообщений.';en='The settings for sending SMS messages are not filled.'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	// -SMS4B
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьДоступностьСозданияКонтакта();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// +CRM
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	// -CRM
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	ПроверитьДоступностьСозданияКонтакта();
	КоличествоАдресатов = Объект.Адресаты.Количество();
	
	// +SMS4B
	Если ИмяСобытия = "ВыбранКонтакт" Тогда
		ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И Объект.SMS4B_ЕстьАвтотекст Тогда
				ТекущиеДанные.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
						Объект.ТекстСообщения,
						ТекущиеДанные.Контакт,
						SMS4B_ТаблицаАвтотекста);
		КонецЕсли;
	КонецЕсли;
	// -SMS4B
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, РежимЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	// +CRM
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов",Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);	
	// -CRM
	
	// +SMS4B
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		ТекущийОбъект.SMS4B_СтатусСтрокой = НСтр("ru = 'Всего: '") + Строка(Объект.Адресаты.Количество()) + ";" + НСтр("ru = ' записано, но не отправлено'");
	КонецЕсли;
	// -SMS4B
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "СообщениеSMS");
	ПроверитьДоступностьСозданияКонтакта();
	
	// +CRM
	Если ЗначениеЗаполнено(Взаимодействие) Тогда
		CRM_ВзаимодействияСервер.ДобавитьДокументВРегистр(Взаимодействие, Объект.Ссылка);
	КонецЕсли;
	Оповестить("ЛентаСобытий_Обновить");
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьЗаполнениеСпискаАдресатов(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
		ИЛИ Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
		ВзаимодействияКлиент.ПроверкаЗаполненностиРеквизитовОтложеннойОтправки(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ВзаимодействияКлиент.ФормаОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, КонтекстВыбора);
	
	// +CRM
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если Объект.Адресаты.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Очистить список получателей?';en='Clear the list of receivers?'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,,);
		Иначе	
			CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		CRM_ОбработкаВыбораНаСервере(МассивПользователейГрупп);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.CRM_ШаблоныОбъектов") Тогда
		CRM_ЗагрузитьИзШаблонаНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
	// -CRM
	
КонецПроцедуры

// +CRM

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Ответ, ВыбранноеЗначение) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
	КонецЕсли;
	CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыКонтактыДопРеквизитыКомментарийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства")
		И ТекущаяСтраница.Имя = "СтраницаДополнительныеРеквизиты"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(
		РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура НаКонтролеПриИзменении()
	
	Рассмотрено = НЕ НаКонтроле;
	УправлениеДоступностью(ЭтотОбъект);
	// +SMS4B
	SMS4B_УправлениеДоступностью();
	// -SMS4B
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСообщенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ОсталосьСимволов      = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	                          Объект.ОтправлятьВТранслите,
	                          Текст);
	Объект.ТекстСообщения = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьВТранслитеПриИзменении(Элемент)
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	                        Объект.ОтправлятьВТранслите,
	                        Объект.ТекстСообщения)
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВзаимодействияКлиент.ПредметНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// +SMS4B

&НаКлиенте
Процедура SMS4B_ДатаКогдаОтправитьПриИзменении(Элемент)
	
	Объект.ДатаКогдаОтправить = SMS4B_ДатаКогдаОтправить + (SMS4B_ВремяКогдаОтправить - Дата('00010101'));
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если Объект.ДатаКогдаОтправить < ДатаСеанса Тогда
		Объект.ДатаКогдаОтправить	= ДатаСеанса;
		SMS4B_ДатаКогдаОтправить	= Объект.ДатаКогдаОтправить;
		SMS4B_ВремяКогдаОтправить	= Объект.ДатаКогдаОтправить;
	КонецЕсли;
	
	НоваяАктуальность = Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
	Если ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) И (Объект.ДатаАктуальностиОтправки < НоваяАктуальность) Тогда
		SMS4B_ДатаАктуальностиОтправки	= НоваяАктуальность;
		SMS4B_ВремяАктуальностиОтправки	= НоваяАктуальность;
		SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	Иначе
		
		МаксДлительностьДоставки = SMS4B_НастройкиСервиса.МаксДлительностьДоставки;
		Если (МаксДлительностьДоставки > 0) И ((Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > МаксДлительностьДоставки * 3600) Тогда
			ТекстСообщения = НСтр("ru = 'Длительность доставки превышает " + МаксДлительностьДоставки / 24 + " суток'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Объект.ДатаАктуальностиОтправки = (Объект.ДатаКогдаОтправить + (МаксДлительностьДоставки * 3600));
		КонецЕсли;
		
		SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьПриИзменении(Элемент)
	
	SMS4B_ДатаКогдаОтправитьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ДатаАктуальностиОтправкиПриИзменении(Элемент)
	
	Объект.ДатаАктуальностиОтправки = SMS4B_ДатаАктуальностиОтправки + (SMS4B_ВремяАктуальностиОтправки - Дата('00010101'));
	
	Если Не ЗначениеЗаполнено(Объект.ДатаАктуальностиОтправки) Тогда
		Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли; 
	
	Если Объект.ДатаАктуальностиОтправки < (Объект.ДатаКогдаОтправить + 900) Тогда
		ТекстСообщения = НСтр("ru='Срок актуальности сообщения не может быть меньше 15 минут от времени начала рассылки.';en=""The period of the message's actuality can not be less than 15 minutes from the time of the start of the mailing.""");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + 900;
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
	
	МаксАктуальностьДоставки = SMS4B_НастройкиСервиса.МаксАктуальностьДоставки;
	Если (МаксАктуальностьДоставки > 0) И (Объект.ДатаАктуальностиОтправки > (Объект.Дата + (МаксАктуальностьДоставки * 3600))) Тогда
		ТекстСообщения = НСтр("ru = 'Срок актуальности сообщения не может быть больше " + МаксАктуальностьДоставки / 24 + " сут. от даты документа'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки	= (Объект.Дата + (МаксАктуальностьДоставки * 3600));
		SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
		SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	КонецЕсли;
	
	МаксДлительностьДоставки = SMS4B_НастройкиСервиса.МаксДлительностьДоставки;
	Если (МаксДлительностьДоставки > 0) И ((Объект.ДатаАктуальностиОтправки - Объект.ДатаКогдаОтправить) > МаксДлительностьДоставки * 3600) Тогда
		ТекстСообщения = НСтр("ru = 'Длительность доставки превышает " + МаксДлительностьДоставки / 24 + " суток'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Объект.ДатаАктуальностиОтправки = (Объект.ДатаКогдаОтправить + (МаксДлительностьДоставки * 3600));
	КонецЕсли;
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиПриИзменении(Элемент)
	
	SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ИспользоватьПериодЗапретаПриИзменении(Элемент)
	
	Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
		ПериодЗапрета = SMS4B_НастройкиСервиса.ПериодЗапрета;
		Если Не ЗначениеЗаполнено(Объект.SMS4B_НачалоПериодаЗапрета) Тогда
			Объект.SMS4B_НачалоПериодаЗапрета = ПериодЗапрета.ДатаНачала;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.SMS4B_КонецПериодаЗапрета) Тогда 
			Объект.SMS4B_КонецПериодаЗапрета = ПериодЗапрета.ДатаОкончания;
		КонецЕсли;
	Иначе
		Объект.SMS4B_НачалоПериодаЗапрета = Дата('00010101');
		Объект.SMS4B_КонецПериодаЗапрета  = Дата('00010101');
	КонецЕсли;
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_НачалоПериодаЗапретаПриИзменении(Элемент)
	
	Объект.SMS4B_НачалоПериодаЗапрета = НачалоЧаса(Объект.SMS4B_НачалоПериодаЗапрета);
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_НачалоПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.SMS4B_НачалоПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.SMS4B_НачалоПериодаЗапрета = Объект.SMS4B_НачалоПериодаЗапрета + 82800;
	Иначе	
		Объект.SMS4B_НачалоПериодаЗапрета = Объект.SMS4B_НачалоПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_КонецПериодаЗапретаПриИзменении(Элемент)
	
	Объект.SMS4B_КонецПериодаЗапрета = НачалоЧаса(Объект.SMS4B_КонецПериодаЗапрета);
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_КонецПериодаЗапретаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.SMS4B_КонецПериодаЗапрета = Дата('00010101') И (Направление = -1) Тогда
		Объект.SMS4B_КонецПериодаЗапрета = Объект.SMS4B_КонецПериодаЗапрета + 82800;
	Иначе	
		Объект.SMS4B_КонецПериодаЗапрета = Объект.SMS4B_КонецПериодаЗапрета + 3600 * Направление;
	КонецЕсли;	
	
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_РавномернаяРассылкаПриИзменении(Элемент)
	
	КоличествоПолучателей = Объект.Адресаты.Количество();
	Если Объект.SMS4B_РавномернаяРассылка И (КоличествоПолучателей > 0) Тогда
		КогдаОтправить = Объект.ДатаКогдаОтправить;
		АктуальностьОтправки = Объект.ДатаАктуальностиОтправки;
		Если Не ЗначениеЗаполнено(АктуальностьОтправки) Тогда
			АктуальностьОтправки = КогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
		КонецЕсли;
		Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
			Всего = SMS4B_ИсключениеВременногоПериода(КогдаОтправить, АктуальностьОтправки, Объект.SMS4B_НачалоПериодаЗапрета, Объект.SMS4B_КонецПериодаЗапрета);
		Иначе
			Всего = SMS4B_ИсключениеВременногоПериода(КогдаОтправить, АктуальностьОтправки);
		КонецЕсли;
		ТекстВсего		= SMS4B_ПолучитьПредставлениеВремени(Всего);
		ТекстИнтервала	= SMS4B_ПолучитьПредставлениеВремени(Всего / КоличествоПолучателей);
		Элементы.ВремяРассылки.Заголовок = НСтр("ru='В течение '") + ТекстВсего + НСтр("ru=' с интервалом '") + ТекстИнтервала;
	Иначе
		Элементы.ВремяРассылки.Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ТекстСообщенияПриИзменении(Элемент)
	
	SMS4B_ТекстСообщенияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_БалансНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	SMS4B_ВзаимодействияКлиент.SMS4B_ОткрытьЛичныйКабинетСервиса(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= SMS4B_ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") + (Цел((SMS4B_ВремяКогдаОтправить - НачалоДня(SMS4B_ВремяКогдаОтправить)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("SMS4B_ВремяКогдаОтправитьЗавершениеВыбора", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяКогдаОтправитьЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		SMS4B_ВремяКогдаОтправить = ВыбранныйЭлемент.Значение;
		SMS4B_ДатаКогдаОтправитьПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	СписокВремени			= SMS4B_ЗаполнитьСписокВыбораВремени();
	ЗначениеОкругленное		= Дата("00010101") + (Цел((SMS4B_ВремяАктуальностиОтправки - НачалоДня(SMS4B_ВремяАктуальностиОтправки)) / (30 * 60)) * (30 * 60) );
	НачальноеЗначение		= СписокВремени.НайтиПоЗначению(ЗначениеОкругленное);
	ОповещениеВыбора		= Новый ОписаниеОповещения("SMS4B_ВремяАктуальностиОтправкиЗавершениеВыбора", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзСписка(ОповещениеВыбора, СписокВремени, Элемент, НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВремяАктуальностиОтправкиЗавершениеВыбора(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		SMS4B_ВремяАктуальностиОтправки = ВыбранныйЭлемент.Значение;
		SMS4B_ДатаАктуальностиОтправкиПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыКакСвязатьсяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(ТекущиеДанные.Контакт);
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_АдресатыКакСвязатьсяЗавершениеВыбора", ЭтотОбъект, ТекущиеДанные);
	ПоказатьВыборИзСписка(ОповещениеЗавершения, СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыКакСвязатьсяЗавершениеВыбора(ВыбранныйЭлемент, ТекущиеДанные) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки", ВыбранныйЭлемент.Значение));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекущиеДанные.НомерДляОтправки	= ВыбранныйЭлемент.Значение;
		ТекущиеДанные.КакСвязаться		= ВыбранныйЭлемент.Представление;
	ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
		Если НайденныеСтроки[0].НомерСтроки = ТекущиеДанные.НомерСтроки Тогда
			ТекущиеДанные.НомерДляОтправки	= ВыбранныйЭлемент.Значение;
			ТекущиеДанные.КакСвязаться		= ВыбранныйЭлемент.Представление;
		Иначе	
			ПоказатьПредупреждение(, НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов.';en='The selected phone number is already present in the destination table.'"));
		КонецЕсли;
	Иначе	
		ПоказатьПредупреждение(, НСтр("ru='Выбранный номер телефона уже присутствует в таблице адресатов.';en='The selected phone number is already present in the destination table.'"));
	КонецЕсли;
	
КонецПроцедуры

// -SMS4B

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАдресаты

&НаКлиенте
Процедура АдресатыПриИзменении(Элемент)
	
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	КоличествоАдресатов = Объект.Адресаты.Количество();
	ИзменилисьКонтакты = Истина;
	
	// +SMS4B
	SMS4B_РавномернаяРассылкаПриИзменении(Неопределено);
	// -SMS4B
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПриАктивизацииСтроки(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	текДанные = Элементы.Адресаты.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТолькоEmail",                       Ложь);
	ПараметрыОткрытия.Вставить("ТолькоТелефон",                     Истина);
	ПараметрыОткрытия.Вставить("ЗаменятьПустыеАдресИПредставление", Истина);
	ПараметрыОткрытия.Вставить("ДляФормыУточненияКонтактов",        Ложь);
	ПараметрыОткрытия.Вставить("ИдентификаторФормы",                УникальныйИдентификатор);
	
	ВзаимодействияКлиент.ВыбратьКонтакт(Предмет, текДанные.КакСвязаться, текДанные.ПредставлениеКонтакта,
	                                    текДанные.Контакт, ПараметрыОткрытия); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКонтактаПриИзменении(Элемент)
	
	ПроверитьДоступностьСозданияКонтакта();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактПриИзменении(Элемент)
	
	// +SMS4B
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Контакт = Неопределено Тогда
		ТекущиеДанные.ПредставлениеКонтакта	= "";
		ТекущиеДанные.НомерДляОтправки			= "";
		ТекущиеДанные.КакСвязаться				= "";
		ТекущиеДанные.SMS4B_ТекстСообщения		= "";
		Возврат;
	КонецЕсли;
	
	СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(ТекущиеДанные.Контакт);
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ЭлементСписка.Представление));
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекущиеДанные.КакСвязаться		= ЭлементСписка.Представление;
			ТекущиеДанные.НомерДляОтправки	= ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		ТекущиеДанные.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущиеДанные.Контакт,
				SMS4B_ТаблицаАвтотекста);
	КонецЕсли;
	
	// -SMS4B
	
	ПроверитьДоступностьСозданияКонтакта();
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	
	// +CRM	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);	
	// -CRM	
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Адресаты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.СостояниеСообщения) Тогда
		ТекущиеДанные.СостояниеСообщения = ПредопределенноеЗначение("Перечисление.СостоянияСообщенияSMS.Черновик");
	КонецЕсли;
	
КонецПроцедуры 

// +CRM

&НаКлиенте
Процедура АдресатыПослеУдаления(Элемент)
	
	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
КонецПроцедуры

// -CRM

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьКонтактВыполнить()
	
	текДанные = Элементы.Адресаты.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		ВзаимодействияКлиент.СоздатьКонтакт(
			текДанные.ПредставлениеКонтакта, текДанные.КакСвязаться, Объект.Ссылка, СписокИнтерактивноСоздаваемыхКонтактов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ОчиститьСообщения();
	
	Если ПроверитьЗаполнение() Тогда
		ОтправитьВыполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыДоставки(Команда)
	
	ОчиститьСообщения();
	ПроверитьСтатусыДоставкиСервер();
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// +SMS4B

&НаКлиенте
Процедура SMS4B_ОбновитьНастройки(Команда)
	
	Если SMS4B_ОбновитьНастройкиСервиса() Тогда
		ТекстОповещения = НСтр("ru='Обновление параметров SMS4B';en='Update SMS4B settings'");
		ТекстПояснения = НСтр("ru='Параметры сервиса SMS4B успешно обновлены.';en='SMS4B service parameters have been successfully updated.'");
		ПоказатьОповещениеПользователя(ТекстОповещения,, ТекстПояснения, БиблиотекаКартинок.Информация32, СтатусОповещенияПользователя.Информация, "SMS4B");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВставитьШаблон(Команда)
	
	ОповещениеПродолжения = Новый ОписаниеОповещения("SMS4B_ВставитьШаблонПродолжить", ЭтотОбъект, Новый Структура);
	
	Если ЗначениеЗаполнено(Объект.ТекстСообщения) Тогда
		ТекстВопроса = НСтр("ru='Текст сообщения будет заменен содержанием выбранного шаблона. Продолжить?';en='The text of the message will be replaced with the contents of the selected template. Continue?'");
		ПоказатьВопрос(ОповещениеПродолжения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыполнитьОбработкуОповещения(ОповещениеПродолжения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_SMS4B_ВставитьТэгАвтотекста(Команда)
	
	ИмяКоманды = СтрЗаменить(Команда.Имя, "SMS4B_", "");
	НайденныеСтроки = SMS4B_ТаблицаАвтотекста.НайтиСтроки(Новый Структура("ИмяКоманды", ИмяКоманды));
	Если НайденныеСтроки.Количество() > 0 Тогда
		Элементы.ТекстСообщения.ВыделенныйТекст = НайденныеСтроки[0].Тэг;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыПроверитьТелефоны(Команда)
	
	Если SMS4B_ПроверитьЗаполнениеАдресатов() Тогда
		ПоказатьПредупреждение(, НСтр("ru='Проверка выполнена успешно!';en='Verification completed successfully!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыВыделитьСОдинаковымиТелефонами(Команда)
	
	SMS4B_ВыделитьАдресатовСОдинаковымиТелефонами();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыУдалитьСОдинаковымиТелефонами(Команда)
	
	SMS4B_УдалитьАдресатовСОдинаковымиТелефонами();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыУдалитьБезТелефонов(Команда)
	
	SMS4B_УдалитьАдресатовБезТелефона();
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыОчистить(Команда)
	
	Если Объект.Адресаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = НСтр("ru='Табличная часть содержит записи. Продолжить?';en='The tabular part contained records. Continue?'");
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_АдресатыОчиститьЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_АдресатыОчиститьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Адресаты.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// -SMS4B

// +CRM

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоГруппе(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Партнеры.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчета(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.SMS4B_ФормаВыбораРезультатаОтчета", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоРезультатамОтчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Участники.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоРезультатуОтчета(Результат.СписокСсылок);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоСегменту(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЕстьЗаписи", (Объект.Адресаты.Количество() > 0));
	ОписаниеОповещения = Новый ОписаниеОповещения("CRM_ПолучателиЗаполнитьПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СообщениеSMS.Форма.SMS4B_ФормаВыборСегмента", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура CRM_ПолучателиЗаполнитьПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) Тогда
		CRM_Сегмент							= Результат.Сегмент;
		CRM_ВидКонтактнойИнформации			= Результат.ВидКонтактнойИнформации;
		CRM_НеЗаполнятьСПустымиТелефонами	= Результат.НеЗаполнятьСПустымиТелефонами;
		CRM_ТолькоОсновныеКонтактныеЛица	= Результат.ТолькоОсновныеКонтактныеЛица;
		Если Результат.ОчищатьТЧ Тогда
			Объект.Адресаты.Очистить();
		КонецЕсли;
		CRM_ЗаполнитьТЧПоСегменту();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

// -CRM

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПроверитьДоступностьСозданияКонтакта()
	
	ТекДанные = Элементы.Адресаты.ТекущиеДанные;
	Элементы.СоздатьКонтакт.Доступность = (Не Объект.Ссылка.Пустая())
	                                       И ((ТекДанные <> Неопределено) 
	                                       И (НЕ ЗначениеЗаполнено(ТекДанные.Контакт)));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ОбработатьПереданныеПараметры(Параметры);
	ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "СообщениеSMS");
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
	                     Объект.ОтправлятьВТранслите,
	                     Объект.ТекстСообщения);
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	НаКонтроле = НЕ Рассмотрено;
	УправлениеДоступностью(ЭтотОбъект);
	КоличествоАдресатов = Объект.Адресаты.Количество();
	
	// +SMS4B
	
	ТаблицаАвтотекста = РеквизитФормыВЗначение("SMS4B_ТаблицаАвтотекста");
	SMS4B_Взаимодействия.SMS4B_СформироватьСписокАвтотекста(ТаблицаАвтотекста, Перечисления.CRM_НазначенияАвтотекста.АвтотекстСМССообщение);
	ЗначениеВРеквизитФормы(ТаблицаАвтотекста, "SMS4B_ТаблицаАвтотекста");
	SMS4B_Взаимодействия.SMS4B_ЗаполнитьКоманднуюПанельАвтотекста(ЭтотОбъект);
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	
	SMS4B_НастройкиСервиса = Новый ФиксированнаяСтруктура(SMS4B_ОтправкаSMS.SMS4B_ПрочитатьНастройкиСервиса());
	
	SMS4B_Баланс = Формат(SMS4B_НастройкиСервиса.ОстатокПоСчету, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00" ) + НСтр("ru=' руб.'");
	
	Если Объект.SMS4B_ТипСообщения <> Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ИменаОтправителя = SMS4B_НастройкиСервиса.ИменаОтправителя;
		СписокВыбора = Элементы.SMS4B_ИмяОтправителя.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ИмяОтправителя Из ИменаОтправителя Цикл
			СписокВыбора.Добавить(ИмяОтправителя);
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Объект.Дата 					= ТекущаяДатаСеанса();
		Объект.ДатаКогдаОтправить		= Объект.Дата;
		Если ЗначениеЗаполнено(SMS4B_НастройкиСервиса.СрокЖизниСообщений) Тогда
			Объект.ДатаАктуальностиОтправки	= Объект.ДатаКогдаОтправить + (SMS4B_НастройкиСервиса.СрокЖизниСообщений * 3600);
		КонецЕсли;
		
		Объект.SMS4B_ТипСообщения = Перечисления.SMS4B_ТипыСообщений.Исходящее;
		
		НастройкиОтправки = ОтправкаSMS.НастройкиОтправкиSMS();
		Объект.SMS4B_ИмяОтправителя = НастройкиОтправки.ИмяОтправителя;
		
		Объект.SMS4B_ИспользоватьПериодЗапрета = Константы.SMS4B_ИспользоватьПериодЗапретаОтправки.Получить();
		Если Объект.SMS4B_ИспользоватьПериодЗапрета Тогда
			ПериодЗапрета = SMS4B_НастройкиСервиса.ПериодЗапрета;
			Объект.SMS4B_НачалоПериодаЗапрета = ПериодЗапрета.ДатаНачала;
			Объект.SMS4B_КонецПериодаЗапрета = ПериодЗапрета.ДатаОкончания;
		КонецЕсли;
		
		Если Объект.SMS4B_ЕстьАвтотекст Тогда
			Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
				ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
					Объект.ТекстСообщения,
					ТекущаяСтрока.Контакт,
					SMS4B_ТаблицаАвтотекста);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	SMS4B_ДатаКогдаОтправить		= Объект.ДатаКогдаОтправить;
	SMS4B_ВремяКогдаОтправить		= Объект.ДатаКогдаОтправить;
	SMS4B_ДатаАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	SMS4B_ВремяАктуальностиОтправки	= Объект.ДатаАктуальностиОтправки;
	
	SMS4B_УправлениеДоступностью();
	
	Если Объект.SMS4B_ТипСообщения = Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ТекстЗаголовка	= НСтр("ru='Входящее сообщение';en='The enter message'");
	Иначе	
		ТекстЗаголовка	= НСтр("ru='Исходящее сообщение';en='Outgoing message'");
	КонецЕсли;
	ТекстЗаголовка	= ТекстЗаголовка + " от " + Формат(Объект.Дата, "ДЛФ=DD") + " (" + НРег(Строка(Объект.Состояние)) + ")";
	Заголовок		= ТекстЗаголовка;
	
	// -SMS4B
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВыполнить()
	
	ОчиститьСообщения();
	
	Если ИнформационнаяБазаФайловая 
		И (Объект.ДатаКогдаОтправить = Дата(1,1,1) ИЛИ Объект.ДатаКогдаОтправить < ОбщегоНазначенияКлиент.ДатаСеанса())
		И (Объект.ДатаАктуальностиОтправки = Дата(1,1,1) ИЛИ Объект.ДатаАктуальностиОтправки > ОбщегоНазначенияКлиент.ДатаСеанса()) Тогда
			КоличествоОтправленных = ВыполнитьОтправкуНаСервере();
			Если НЕ КоличествоОтправленных > 0 Тогда
				Возврат;
			КонецЕсли;
	Иначе
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Объект);
	КонецЕсли;
	
	Записать();
	Закрыть();

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеСпискаАдресатов(Отказ)

	Для Каждого Адресат Из Объект.Адресаты Цикл
		ПроверитьЗаполнениеТелефона(Адресат, Отказ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТелефона(Адресат, Отказ)
	
	Если ПустаяСтрока(Адресат.КакСвязаться) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Поле ""Номер телефона"" не заполнено.';en='Phone number is not populated.'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
			Возврат;
	КонецЕсли;
		
	Если СтрРазделить(Адресат.КакСвязаться, ";", Ложь).Количество() > 1 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Должен быть указан только один номер телефона';en='Enter only one phone number'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
			Возврат;
	КонецЕсли;
		
	Если Не Взаимодействия.КорректноВведенНомерТелефона(Адресат.КакСвязаться) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Введите номер телефона в международном формате.
			|Допускается использовать в номере пробелы, скобки и дефисы.
			|Например, ""+7 (123) 456-78-90"".'"),
			,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"),
			,
			Отказ);
			Возврат;
	Иначе
		Адресат.НомерДляОтправки = ФорматироватьНомер(Адресат.КакСвязаться);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФорматироватьНомер(Номер)
	Результат = "";
	ДопустимыеСимволы = "+1234567890";
	Для Позиция = 1 По СтрДлина(Номер) Цикл
		Символ = Сред(Номер,Позиция,1);
		Если СтрНайти(ДопустимыеСимволы, Символ) > 0 Тогда
			Результат = Результат + Символ;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрДлина(Результат) > 10 Тогда
		ПервыйСимвол = Лев(Результат, 1);
		Если ПервыйСимвол = "8" Тогда
			Результат = "+7" + Сред(Результат, 2);
		ИначеЕсли ПервыйСимвол <> "+" Тогда
			Результат = "+" + Результат;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыполнитьОтправкуНаСервере()
	
	// +SMS4B
	//Возврат Взаимодействия.ОтправкаSMSПоДокументу(Объект);
	Возврат SMS4B_Взаимодействия.ОтправкаSMSПоДокументу(Объект);
	// -SMS4B
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностью(Форма)

	СообщениеОтправлено = СообщениеОтправлено(Форма.Объект.Состояние);
	
	ОтправкаДоступна = Истина;
	Если Форма.ИнформационнаяБазаФайловая Тогда
		Если СообщениеОтправлено Тогда
			ОтправкаДоступна = Ложь;
		ИначеЕсли Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее") Тогда
			#Если Клиент Тогда
				ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
			#Иначе
				ДатаСеанса = ТекущаяДатаСеанса();
			#КонецЕсли
			Если (Форма.Объект.ДатаКогдаОтправить) <> Дата(1,1,1)
				И Форма.Объект.ДатаКогдаОтправить > ДатаСеанса Тогда
				ОтправкаДоступна = Ложь;
			КонецЕсли;
			Если (Форма.Объект.ДатаАктуальностиОтправки) <> Дата(1,1,1)
				И Форма.Объект.ДатаАктуальностиОтправки < ДатаСеанса Тогда
				ОтправкаДоступна = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Форма.Объект.Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик") Тогда
			ОтправкаДоступна = Ложь;
		КонецЕсли
	КонецЕсли;
	
	Форма.Элементы.ФормаОтправить.Доступность                 = ОтправкаДоступна;
	Форма.Элементы.Адресаты.ТолькоПросмотр                    = СообщениеОтправлено;
	Форма.Элементы.ОтправлятьВТранслите.Доступность           = НЕ СообщениеОтправлено;
	Форма.Элементы.ТекстСообщения.ТолькоПросмотр              = СообщениеОтправлено;
	Форма.Элементы.РассмотретьПосле.Доступность               = Форма.НаКонтроле;
	Форма.Элементы.ГруппаДатаОтправкиАктуальность.Доступность = НЕ СообщениеОтправлено;
	
	Форма.Элементы.АдресатыПроверитьСтатусыДоставки.Доступность =
	                 Форма.ИнформационнаяБазаФайловая
	                 И СообщениеОтправлено
	                 И Форма.Объект.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Доставляется");
	
	// +CRM
	Форма.Элементы.CRM_ПолучателиЗаполнить.Доступность = Не СообщениеОтправлено;
	// -CRM
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусыДоставкиСервер()

	УстановитьПривилегированныйРежим(Истина);
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выполнены настройки отправки SMS.';en='Settings of SMS sending are not executed.'"),,"Объект");
		Возврат;
	КонецЕсли;
	
	// +SMS4B
	//Взаимодействия.ПроверитьСтатусыДоставкиSMS(Объект, Модифицированность);
	SMS4B_Взаимодействия.ПроверитьСтатусыДоставкиSMS(Объект, Модифицированность);
	SMS4B_УправлениеДоступностью();
	// -SMS4B
	УправлениеДоступностью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(ПереданныеПараметры)
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Если ПереданныеПараметры.Свойство("Текст") И НЕ ПустаяСтрока(ПереданныеПараметры.Текст) Тогда
			
			Объект.ТекстСообщения = ПереданныеПараметры.Текст;
			
		КонецЕсли;
		
		Если ПереданныеПараметры.Адресаты <> Неопределено Тогда
			
			Если ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("Строка") И НЕ ПустаяСтрока(ПереданныеПараметры.Адресаты) Тогда
				
				НоваяСтрока = Объект.Адресаты.Добавить();
				НоваяСтрока.Адрес = ПереданныеПараметры.Кому;
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из ПереданныеПараметры.Адресаты Цикл
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться  = ЭлементСписка.Значение;
					НоваяСтрока.Представление = ЭлементСписка.Представление;
				КонецЦикла;
				
			ИначеЕсли ТипЗнч(ПереданныеПараметры.Адресаты) = Тип("Массив") Тогда
				
				Для Каждого ЭлементМассива Из ПереданныеПараметры.Адресаты Цикл
					
					НоваяСтрока = Объект.Адресаты.Добавить();
					НоваяСтрока.КакСвязаться          = ЭлементМассива.Телефон;
					НоваяСтрока.ПредставлениеКонтакта = ЭлементМассива.Представление;
					НоваяСтрока.Контакт               = ЭлементМассива.ИсточникКонтактнойИнформации;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПереданныеПараметры.Свойство("Предмет") Тогда
			Предмет = ПереданныеПараметры.Предмет;
		КонецЕсли;
		
		Если ПереданныеПараметры.Свойство("ОтправлятьВТранслите") Тогда
			Объект.ОтправлятьВТранслите = ПереданныеПараметры.ОтправлятьВТранслите;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОтправлено(Состояние)
	
	Возврат Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Черновик")
	        И Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияДокументаСообщениеSMS.Исходящее");
	
КонецФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// +SMS4B

&НаКлиенте
Функция SMS4B_ЗаполнитьСписокВыбораВремени()
	СписокВремени	= Новый СписокЗначений;
	ПустаяДата		= Дата("00010101");
	ТекВремя		= ПустаяДата;
	Пока НачалоДня(ТекВремя) <= НачалоДня(ПустаяДата) Цикл
		ПредставлениеВремени = Формат(ТекВремя, "ДФ=HH:mm; ДП=00:00");
		СписокВремени.Добавить(ТекВремя, ПредставлениеВремени);
		ТекВремя = ТекВремя + 30 * 60;
	КонецЦикла;
	Возврат СписокВремени;
КонецФункции

&НаКлиенте
Функция SMS4B_ИсключениеВременногоПериода(Знач Начало, Знач Конец, Знач Т1 = 0, Знач Т2 = 0)
	Если ТипЗнч(Начало) = Тип("Дата") тогда
		Если ТипЗнч(Т1)=Тип("Дата") тогда
			Т1 = Т1 - НачалоДня(Т1);
		КонецЕсли;
		Если ТипЗнч(Т2)=Тип("Дата") тогда
			Т2 = Т2 - НачалоДня(Т2);
			Если Т2 = 0 тогда
				Т2 = 86400;
			КонецЕсли;
		КонецЕсли;
		ДД = Мин(Конец, КонецДня(Начало)+1);
		Всего = SMS4B_ИсключениеВременногоПериода(Начало - НачалоДня(Начало), ДД - НачалоДня(Начало), Т1, Т2);
		Если ДД <Конец тогда
			Всего = Всего + SMS4B_ИсключениеВременногоПериода(0,Конец - НачалоДня(Конец), Т1, Т2);
			ПолныхДней = (НачалоДня(Конец)-ДД)/86400;
			ЧастьДня = ?(Т1>Т2, Т1-Т2, 86400-Т2+Т1);
			Всего = Всего + ПолныхДней*ЧастьДня;
		КонецЕсли;
	Иначе
		Всего = Конец - Начало;
		Если Т1 <= Т2 тогда
			Если (Т1 < Конец) И (Т2 > Начало) тогда
				Всего = Всего - (Т2-Т1) + ?(Т1<Начало, Начало-Т1, 0) + ?(Т2>Конец, Т2-Конец, 0);
			КонецЕсли;
		Иначе
			Всего = Всего - ?(Начало<Т2, Т2-Начало, 0) - ?(Конец>Т1, Конец-Т1, 0);
		КонецЕсли;
	КонецЕсли;
	Возврат Всего;
КонецФункции

&НаКлиенте
Функция SMS4B_ПолучитьПредставлениеВремени(Время)
	СписокВремен = Новый СписокЗначений;
	СписокВремен.Добавить(86400,	"ru='дня(ей)'");
	СписокВремен.Добавить(3600,		"ru='часа(ов)'");
	СписокВремен.Добавить(60,		"ru='минут(ы)'");
	СписокВремен.Добавить(1,		"ru='секунд(ы)'");
	Текст = "";
	Для Каждого Элемент Из СписокВремен Цикл
		Если Время >= Элемент.Значение Тогда
			Текст = Формат(Время / Элемент.Значение, "ЧДЦ=1; ЧРД=.; ЧГ=0") + " " + НСтр(Элемент.Представление);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Текст;
КонецФункции

&НаКлиенте
Процедура SMS4B_ВставитьШаблонПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("SMS4B_ВставитьШаблонЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("Справочник.SMS4B_ШаблоныСообщений.ФормаВыбора",, ЭтотОбъект, , , , ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура SMS4B_ВставитьШаблонЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	SMS4B_ЗаполнитьТекстПоШаблонуСообщения(Результат);
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ЗаполнитьТекстПоШаблонуСообщения(ШаблонСообщения)
	
	Объект.ТекстСообщения = ШаблонСообщения.Содержание;
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущаяСтрока.Контакт,
				SMS4B_ТаблицаАвтотекста);
		КонецЦикла;
	КонецЕсли;
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
		Объект.ОтправлятьВТранслите,
		Объект.ТекстСообщения);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ОбновитьИспользованиеАвтотекста()
	
	ЕстьАвтотекст = Ложь;
	ТекстПоиска = Объект.ТекстСообщения;
	Для Каждого СтрокаАвтотекста Из SMS4B_ТаблицаАвтотекста Цикл
		Если СтрНайти(ТекстПоиска, СтрокаАвтотекста.Тэг) > 0 Тогда
			ЕстьАвтотекст = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Объект.SMS4B_ЕстьАвтотекст = ЕстьАвтотекст;
	
	Если НЕ ЕстьАвтотекст Тогда 
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_ТекстСообщенияПриИзмененииНаСервере()
	
	SMS4B_ОбновитьИспользованиеАвтотекста();
	Если Объект.SMS4B_ЕстьАвтотекст Тогда
		Для Каждого ТекущаяСтрока Из Объект.Адресаты Цикл 
			ТекущаяСтрока.SMS4B_ТекстСообщения = SMS4B_Взаимодействия.SMS4B_ЗаполнитьТекстПоШаблонуАвтотекста(
				Объект.ТекстСообщения,
				ТекущаяСтрока.Контакт,
				SMS4B_ТаблицаАвтотекста);
		КонецЦикла;
	КонецЕсли;
	
	ОсталосьСимволов = ВзаимодействияКлиентСервер.СформироватьИнформационнуюНадписьКоличествоСимволовСообщений(
		Объект.ОтправлятьВТранслите,
		Объект.ТекстСообщения);
	
	SMS4B_УправлениеДоступностью();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УправлениеДоступностью()
	
	СообщениеОтправлено = СообщениеОтправлено(Объект.Состояние);
	
	Элементы.SMS4B_НачалоПериодаЗапрета.Доступность = Объект.SMS4B_ИспользоватьПериодЗапрета;
	Элементы.SMS4B_КонецПериодаЗапрета.Доступность  = Объект.SMS4B_ИспользоватьПериодЗапрета;
	Элементы.SMS4B_АдресатыТекстСообщения.Видимость = Объект.SMS4B_ЕстьАвтотекст;
	
	Элементы.SMS4B_ИмяОтправителяБаланс.Доступность = Не СообщениеОтправлено;
	Элементы.SMS4B_ПанельШаблоны.Доступность = Не СообщениеОтправлено;
	
	Элементы.SMS4B_ГруппаАдресатыПроверка.Доступность = Не СообщениеОтправлено;
	
КонецПроцедуры

&НаСервере
Функция SMS4B_ОбновитьНастройкиСервиса()
	
	РезультатПодключения = SMS4B_ОтправкаSMS.SMS4B_ОбновитьНастройкиСервиса();
	Если РезультатПодключения.Ошибка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПодключения.ОписаниеОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	SMS4B_НастройкиСервиса = Новый ФиксированнаяСтруктура(РезультатПодключения.НастройкиСервиса);
	
	Баланс = Формат(SMS4B_НастройкиСервиса.ОстатокПоСчету, "ЧДЦ=2; ЧРГ=' '; ЧН=0,00" ) + НСтр("ru=' руб.'");
	
	Если Объект.SMS4B_ТипСообщения <> Перечисления.SMS4B_ТипыСообщений.Входящее Тогда
		ИменаОтправителя = SMS4B_НастройкиСервиса.ИменаОтправителя;
		СписокВыбора = Элементы.SMS4B_ИмяОтправителя.СписокВыбора;
		СписокВыбора.Очистить();
		Для Каждого ИмяОтправителя Из ИменаОтправителя Цикл
			СписокВыбора.Добавить(ИмяОтправителя);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция SMS4B_ПроверитьЗаполнениеАдресатов()
	
	ЕстьОшибки = Ложь;
	СписокТелефонов = Новый СписокЗначений;
	
	Для Каждого Адресат Из Объект.Адресаты Цикл
		Если ПустаяСтрока(Адресат.КакСвязаться) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Номер телефона"" не заполнено.';en='Phone number is not populated.'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		ИначеЕсли СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Адресат.КакСвязаться, ";", Истина).Количество() > 1 Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Должен быть указан только один номер телефона';en='Enter only one phone number'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
		Иначе
			Если Взаимодействия.КорректноВведенНомерТелефона(Адресат.КакСвязаться) Тогда
				Если СписокТелефонов.НайтиПоЗначению(Адресат.КакСвязаться) = Неопределено Тогда
					СписокТелефонов.Добавить(Адресат.КакСвязаться);
					Адресат.НомерДляОтправки = SMS4B_ОтправкаSMS.ФорматироватьНомер(Адресат.КакСвязаться);
				Иначе	
					ЕстьОшибки = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Номер телефона уже присутствует в таблице адресатов!';en='The phone number already exists in the recipient table!'"), ,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
				КонецЕсли;
			Иначе	
				ЕстьОшибки = Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Номер телефона должен быть указан в формате ""+xx (xxx) xxxxxxx"".';en='The phone number must be specified in the format ""+ xx (xxx) xxxxxxx"".'"), ,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "КакСвязаться"));
			КонецЕсли;
		КонецЕсли;
		Если Объект.SMS4B_ЕстьАвтотекст И ПустаяСтрока(Адресат.SMS4B_ТекстСообщения) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Поле ""Текст сообщения"" не заполнено.';en='The field ""Message text"" is not filled.'"), ,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Адресаты", Адресат.НомерСтроки, "SMS4B_ТекстСообщения"));
		КонецЕсли; 
	КонецЦикла;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура SMS4B_ВыделитьАдресатовСОдинаковымиТелефонами()
	
	SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216,218,154));
	МассивЦветов.Добавить(Новый Цвет(218,195,154));
	МассивЦветов.Добавить(Новый Цвет(218,172,154));
	МассивЦветов.Добавить(Новый Цвет(218,154,156));
	МассивЦветов.Добавить(Новый Цвет(218,154,180));
	МассивЦветов.Добавить(Новый Цвет(196,154,218));
	МассивЦветов.Добавить(Новый Цвет(154,162,218));
	МассивЦветов.Добавить(Новый Цвет(154,192,218));
	МассивЦветов.Добавить(Новый Цвет(148,218,228));
	УжеПроверенныеНомера = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект.Адресаты Цикл
		ТекНомер = СтрокаТаблицы.КакСвязаться;
		Если НЕ ЗначениеЗаполнено(ТекНомер) Тогда Продолжить; КонецЕсли;
		Если НЕ (УжеПроверенныеНомера.Найти(ТекНомер) = Неопределено) Тогда Продолжить; КонецЕсли;
		УжеПроверенныеНомера.Добавить(ТекНомер);
		НайденныеСтроки = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", ТекНомер));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			ОформлениеЭлемента = SMS4B_ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Адресаты");
			НовоеПоле.Использование = Истина;
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				ИндексСтроки = Объект.Адресаты.Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект.Адресаты.Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьАдресатовСОдинаковымиТелефонами()
	
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		МассивСтрок = Объект.Адресаты.НайтиСтроки(Новый Структура("КакСвязаться", СтрокаТЧ.КакСвязаться));
		Если МассивСтрок.Количество() > 1 Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;	
	КонецЦикла;
	SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами();
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьАдресатовБезТелефона()
	
	КоличествоАдресатов = Объект.Адресаты.Количество();
	Для Индекс = 1 По КоличествоАдресатов Цикл
		СтрокаТЧ = Объект.Адресаты[КоличествоАдресатов - Индекс];
		Если ПустаяСтрока(СтрокаТЧ.КакСвязаться) Тогда
			Объект.Адресаты.Удалить(СтрокаТЧ);
			Модифицированность = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура SMS4B_УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами()
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных("Адресаты") Тогда
				Продолжить;
			КонецЕсли;
			ОформлениеЭлемента = SMS4B_ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда Продолжить; КонецЕсли;
			Если ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект.Адресаты.ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				Продолжить;
			КонецЕсли;
			Если Найти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка
			УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция SMS4B_ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// -SMS4B

// +CRM

#Область ОбработчикиЗаполнения

&НаСервере
// Процедура заполняет получателей по сегменту
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТЧПоСегменту()
	Запрос = Новый Запрос;
	Если CRM_Сегмент.СпособФормирования = Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		РеквизитыСКДСегмента = CRM_ОбщегоНазначенияСервер.ПолучитьЗначенияРеквизитов(
			CRM_Сегмент,
			"СхемаКомпоновкиДанных,ХранилищеНастроекКомпоновкиДанных,ИмяШаблонаСКД");
		НастройкиСегмента = РеквизитыСКДСегмента.ХранилищеНастроекКомпоновкиДанных.Получить();
		Если ПустаяСтрока(РеквизитыСКДСегмента.ИмяШаблонаСКД) Тогда
			СКД = РеквизитыСКДСегмента.СхемаКомпоновкиДанных.Получить();
		Иначе
			СКД_Макета = СегментыСервер.ПолучитьОписаниеИСхемуКомпоновкиДанныхПоИмениМакета(CRM_Сегмент, РеквизитыСКДСегмента.ИмяШаблонаСКД);
			СКД = СКД_Макета.СхемаКомпоновкиДанных;
		КонецЕсли;
		Если СКД.НаборыДанных.Найти("СписокСегмента") <> Неопределено Тогда
			Поля = СКД.НаборыДанных.СписокСегмента.Поля;
			Для Каждого Поле Из Поля Цикл
				Поле.ОграничениеИспользования.Поле = Ложь;
			КонецЦикла;
			НастройкиСписка = СКД.ВариантыНастроек.Список.Настройки;
			Настройки = СКД.НастройкиПоУмолчанию;
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.ПараметрыДанных, Настройки.ПараметрыДанных);
			CRM_СегментыСервер.СкопироватьЭлементы(НастройкиСписка.Отбор, Настройки.Отбор);
		ИначеЕсли  СКД.НаборыДанных.Найти("ФормированиеСегмента") <> Неопределено Тогда
			Если НастройкиСегмента <> Неопределено Тогда
				НастройкиСписка = НастройкиСегмента;
			Иначе
				НастройкиСписка = СКД.ВариантыНастроек.ФормированиеСегмента.Настройки;
			КонецЕсли;
		Иначе
			НастройкиСписка = Неопределено;
		КонецЕсли;
		Если НастройкиСписка = Неопределено Тогда
			МассивПартнеров = Новый Массив();
		Иначе
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(
				СКД,НастройкиСписка,,,
				Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
			);
			ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ТаблицаЗначений = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
			ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
			МассивПартнеров = ТаблицаЗначений.ВыгрузитьКолонку("Партнер");
		КонецЕсли;
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	Партнеры.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ
               |	Партнеры.Ссылка КАК Партнер,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	Справочник.Партнеры КАК Партнеры
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО Партнеры.Ссылка = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	НЕ Партнеры.ПометкаУдаления
			   |	И Партнеры.Ссылка В (&МассивПартнеров)";
		КонецЕсли;
		Запрос.УстановитьПараметр("МассивПартнеров", МассивПартнеров);
	Иначе	
		Запрос.УстановитьПараметр("Сегмент", CRM_Сегмент);
		Если CRM_ТолькоОсновныеКонтактныеЛица Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ПартнерыСегмента.Партнер.CRM_ОсновноеКонтактноеЛицо КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		Иначе
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
               |	ПартнерыСегмента.Партнер КАК Партнер,
               |	ПартнерыСегмента.Сегмент,
               |	ЕСТЬNULL(КонтактныеЛицаПартнеров.Ссылка, ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)) КАК КонтактноеЛицо
               |ИЗ
               |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
               |		ПО ПартнерыСегмента.Партнер = КонтактныеЛицаПартнеров.Владелец
               |			И (НЕ КонтактныеЛицаПартнеров.ПометкаУдаления)
               |ГДЕ
               |	ПартнерыСегмента.Сегмент = &Сегмент
               |	И НЕ ПартнерыСегмента.Партнер.ПометкаУдаления";
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	ТабПартнеров = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаб ИЗ ТабПартнеров Цикл
		Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.КонтактноеЛицо);
		Иначе	
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(СтрокаТаб.Партнер);
		КонецЕсли;	
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока = Объект.Адресаты.Добавить();
			Если ЗначениеЗаполнено(СтрокаТаб.КонтактноеЛицо) Тогда
				НоваяСтрока.Контакт	= СтрокаТаб.КонтактноеЛицо;
			Иначе
				НоваяСтрока.Контакт	= СтрокаТаб.Партнер;
			КонецЕсли;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоСегменту()	

&НаСервере
// Процедура заполняет получателей по результату отчета
//
// Параметры:
//	СписокСсылок	- СписокЗначений	- Список получателей из отчета
//
Процедура CRM_ЗаполнитьТЧПоРезультатуОтчета(СписокСсылок)
	Для Каждого ЭлементСписка ИЗ СписокСсылок Цикл
		Если НЕ ЭлементСписка.Пометка Тогда Продолжить; КонецЕсли;
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ЭлементСписка.Значение);
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение; 
			НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
			НоваяСтрока							= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ЭлементСписка.Значение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // CRM_ЗаполнитьТЧПоРезультатуОтчета()

&НаСервере
// Функция возвращает список номеров телефонов получателя
//
// Парамеры:
//	Получатель	- СправочникСсылка	- Получатель
//
// Возвращаемое значение:
//	СписокЗначений	- Список номеров телефонов
//
Функция CRM_ПолучитьСписокНомеровТелефоновКонтрагента(Получатель)
	Если НЕ ЗначениеЗаполнено(Получатель) Тогда 
		ТаблицаКИ = Новый ТаблицаЗначений;
	ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Партнеры") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(Получатель,, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюОбъекта(,Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюПользователей(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	ИначеЕсли  ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица")  Тогда
		ТаблицаКИ = CRM_ОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформациюФизЛиц(Получатель, Перечисления.ТипыКонтактнойИнформации.Телефон);
	Иначе	
		ТаблицаКИ = Новый ТаблицаЗначений;
	КонецЕсли;	
	// Заполним список выбора
	СписокВозврата = Новый СписокЗначений;
	Для Каждого Строка ИЗ ТаблицаКИ Цикл
		НомерТелефона = SMS4B_ОтправкаSMS.ФорматироватьНомер(Строка.Представление);
		Если СтрДлина(НомерТелефона) > 10 Тогда
			Если Найти(Прав(НомерТелефона, 10), "9") = 1 Тогда
				СписокВозврата.Вставить(0, Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			Иначе	
				СписокВозврата.Добавить(Строка.Представление, СокрЛП(Строка.Представление) + " (" + Строка.Вид + ")");
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции // CRM_ПолучитьСписокНомеровТелефоновКонтрагента()

&НаСервере
// Функция возвращает массив клиентов, входящих в переданную группу
//
// Параметры:
//	ПартнерГруппа	- СправочникСсылка	- Группа клиентов
//
// Возвращаемое значение:
//	Массив	- Массив клиентов
//
Функция CRM_ПолучитьПартнеровГруппы(ПартнерГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ПартнерГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	Партнеры.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Партнеры КАК Партнеры
	                |ГДЕ
	                |	НЕ Партнеры.ПометкаУдаления
	                |	И НЕ Партнеры.ЭтоГруппа";
	Если ПартнерГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Партнеры.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Партнеры.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Партнеры.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьПартнеровГруппы()

&НаСервере
// Функция возвращает массив физических лиц, входящих в переданную группу
//
// Параметры:
//	ФизЛицоГруппа	- СправочникСсылка	- Группа физических лиц
//
// Возвращаемое значение:
//	Массив	- Массив физических лиц
//
Функция CRM_ПолучитьФизическихЛицГруппы(ФизЛицоГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", ФизЛицоГруппа);
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ФизическиеЛица.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.ФизическиеЛица КАК ФизическиеЛица
	                |ГДЕ
	                |	НЕ ФизическиеЛица.ПометкаУдаления
	                |	И НЕ ФизическиеЛица.ЭтоГруппа";
	Если ФизЛицоГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И ФизическиеЛица.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И ФизическиеЛица.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	ФизическиеЛица.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // CRM_ПолучитьФизическихЛицГруппы()

&НаСервере
// Процедура загружает данные из шалона
//
// Параметры:
//	ШаблонОбъект	- СправочникОъект	- Шалон
//
Процедура CRM_ЗагрузитьИзШаблонаНаСервере(ШаблонОбъект)
	ОписаниеРеквизитов = ПолучитьРеквизиты("Объект");
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	CRM_ШаблоныОбъектов.ЗаполнитьПредставлениеОбъекта(ШаблонОбъект, ОбъектЗначение, ОписаниеРеквизитов);
	ЗначениеВДанныеФормы(ОбъектЗначение, Объект);
КонецПроцедуры // CRM_ЗагрузитьИзШаблонаНаСервере()

&НаСервере
// Процедура добавляет получателей, входящих в переданную группу
//
// Параметры:
//	ГруппаПользователей	- СправочникСсылка	- Группа пользователей
//
Процедура CRM_ДобавитьПолучателейПоГруппеПользователей(ГруппаПользователей)
	Если НЕ ЗначениеЗаполнено(ГруппаПользователей) Или НЕ (ТипЗнч(ГруппаПользователей) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		Возврат;
	КонецЕсли;
	МассивПользователиГруппы = CRM_ОбщегоНазначенияСервер.ПолучитьПользователейГруппы(ГруппаПользователей, Истина);
	Для Каждого ПользовательСсылка Из МассивПользователиГруппы Цикл
		СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ПользовательСсылка);
		НоваяСтрока 						= Объект.Адресаты.Добавить();
		НоваяСтрока.Контакт					= ПользовательСсылка;
		НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
		Если СписокТелефонов.Количество() > 0 Тогда
			НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
			НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ДобавитьПолучателейПоГруппеПользователей()

&НаСервере
// Процедура - обработчик события "Выбор"
//
// Параметры:
//	ВыбранноеЗначение	- СправочникСсылка	- Выбранное значение
//
Процедура CRM_ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Партнеры.ПустаяСсылка()) Тогда
			мПартнеры = CRM_ПолучитьПартнеровГруппы(ВыбранноеЗначение);
			Для Каждого эПартнер Из мПартнеры Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эПартнер);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.ФизическиеЛица.ПустаяСсылка()) Тогда
			мФизЛица = CRM_ПолучитьФизическихЛицГруппы(ВыбранноеЗначение);
			Для Каждого эФизЛицо Из мФизЛица Цикл
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(эФизЛицо);
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
					НоваяСтрока.КакСвязаться			= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки		= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				ИначеЕсли НЕ CRM_НеЗаполнятьСПустымиТелефонами Тогда
					НоваяСтрока							= Объект.Адресаты.Добавить();
					НоваяСтрока.Контакт					= эПартнер;
					НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранноеЗначение);
			НоваяСтрока 						= Объект.Адресаты.Добавить();
			НоваяСтрока.Контакт					= ВыбранноеЗначение;
			НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
			Если СписокТелефонов.Количество() > 0 Тогда
				НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
				НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
			КонецЕсли;	
		КонецЕсли;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ГруппыПользователей")
		Или	ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			МассивПользователейГрупп = ВыбранноеЗначение;
		Иначе
			МассивПользователейГрупп = Новый Массив();
			МассивПользователейГрупп.Добавить(ВыбранноеЗначение);
		КонецЕсли;
		Для Каждого ВыбранныйПользовательГруппа Из МассивПользователейГрупп Цикл
			Если ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.Пользователи") Тогда
				СписокТелефонов = CRM_ПолучитьСписокНомеровТелефоновКонтрагента(ВыбранныйПользовательГруппа);
				НоваяСтрока 						= Объект.Адресаты.Добавить();
				НоваяСтрока.Контакт					= ВыбранныйПользовательГруппа;
				НоваяСтрока.ПредставлениеКонтакта	= НоваяСтрока.Контакт.Наименование;
				Если СписокТелефонов.Количество() > 0 Тогда
					НоваяСтрока.КакСвязаться		= СписокТелефонов[0].Значение;
					НоваяСтрока.НомерДляОтправки	= SMS4B_ОтправкаSMS.ФорматироватьНомер(НоваяСтрока.КакСвязаться); 
				КонецЕсли;	
			ИначеЕсли ТипЗнч(ВыбранныйПользовательГруппа) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				CRM_ДобавитьПолучателейПоГруппеПользователей(ВыбранныйПользовательГруппа);
			КонецЕсли;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // CRM_ОбработкаВыбораНаСервере()

#КонецОбласти

#Область ОбработчикиСобытийШаблонов

&НаКлиенте
Процедура Подключаемый_ЗагрузитьИзШаблона(Команда)
	
	СсылкаНаОбъект = Объект.Ссылка;
	сПараметры = Новый Структура("Ссылка, Форма", СсылкаНаОбъект, ЭтотОбъект);
	CRM_ШаблоныОбъектовКлиент.ЗагрузитьИзШаблонаНаКлиенте(сПараметры);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыДляВыгрузки()
	
	ОбъектЗначение = РеквизитФормыВЗначение("Объект");
	
	ОбъектСтруктура = Новый Структура("ОбъектЗначение", ОбъектЗначение);
	АдресВХранилище = ПоместитьВоВременноеХранилище(ОбъектСтруктура, УникальныйИдентификатор);
	
	Возврат Новый Структура("ЗначенияЗаполнения",Новый Структура("Объект,ТипФормы",АдресВХранилище,"ФормаДокумента"));
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВыгрузитьВШаблон(Команда)
	
	ОткрытьФорму("Справочник.CRM_ШаблоныОбъектов.ФормаОбъекта",ПолучитьПараметрыДляВыгрузки(),ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИнтереса

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КлиентСписок) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.КлиентСписок);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	

	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

// -CRM

#КонецОбласти

