#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВыработкаСотрудников.ДобавитьКомандуСоздатьНаОснованииСозданиеВыработкиСотрудников(КомандыСозданияНаОсновании);
	
	Документы.ВнутреннееПотреблениеТоваров.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	//++ НЕ УТ
	Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	//-- НЕ УТ
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЗаказНаРемонтЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на ремонт".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаРемонт) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказНаРемонт.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказНаРемонт);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьУправлениеРемонтами";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияВнутреннихРаспоряжений(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает реквизиты, зависимые от хозяйственной операции документа.
//
// Параметры:
//  ХозяйственнаяОперация	 - ПеречислениеСсылка.ХозяйственныеОперации	 - Ссылка на текущую операцию
//  МассивВсехРеквизитов	 - Массив									 - Массив реквизитов документа
//  МассивРеквизитовОперации - Массив									 - Массив реквизитов операции.
// 
// Возвращаемое значение:
//  Массив - Массив реквизитов хозяйственной операции.
//
Функция ИменаРеквизитовПоХозяйственнойОперации(ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("Ремонты.СтатьяРасходов");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.Ремонт Тогда
		
		МассивРеквизитовОперации.Добавить("Ремонты.СтатьяРасходов");
		
	КонецЕсли;
	
	Возврат МассивРеквизитовОперации;
	
КонецФункции

// Отменяет все строки, по которым не было документальное оформленение работ сотрудников.
//
// Параметры:
// 		Документ - ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура - документ, в котором необходимо отменить непоставленные материалы и невыполненные работы
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков.
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк.
//
Функция ОтменитьНевыполненныеСтрокиТрудозатрат(Документ, Знач ПроверятьОстатки = Истина) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	Таблица = Документ.Трудозатраты;
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено",
		Истина);
	
	Если Не ПроверятьОстатки Тогда
		Для н = 0 По Таблица.Количество() - 1 Цикл
			Если Не Таблица[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(Таблица[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыОстатки.ВидРабот КАК ВидРабот,
	|	ЗаказыОстатки.Исполнитель КАК Бригада,
	|	СУММА(ЗаказыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Распоряжение = &ЗаказНаРемонт) КАК ЗаказыОстатки
	|ГДЕ
	|	ЗаказыОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыОстатки.ВидРабот,
	|	ЗаказыОстатки.Исполнитель");
	
	Запрос.УстановитьПараметр("ЗаказНаРемонт", Документ.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Остатки = Результат.Выгрузить();
	
	СчетСтрок = 0;
	СтруктураПоискаПоОстаткам = Новый Структура("ВидРабот, Бригада");
	Пока СчетСтрок < Таблица.Количество() Цикл
		
		Строка = Таблица[СчетСтрок];
		
		Если Строка.Отменено Тогда
			СчетСтрок = СчетСтрок + 1;
			Продолжить;
		КонецЕсли;
		
		Остаток = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоОстаткам, Строка);
		НайденныеОстатки = Остатки.НайтиСтроки(СтруктураПоискаПоОстаткам);
		Если НайденныеОстатки.Количество() <> 0 Тогда
			Остаток = НайденныеОстатки[0].КоличествоОстаток;
		КонецЕсли;
		
		Если Остаток > 0 Тогда
			
			Если Остаток >= Строка.Количество Тогда
				Остаток = Остаток - Строка.Количество;
				ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			Иначе
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
				
				Строка.Количество = Строка.Количество - Остаток;
				
				НоваяСтрока.Количество = Остаток;
				
				Остаток = 0;
			КонецЕсли;
			
			КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			
			НайденныеОстатки[0].КоличествоОстаток = Остаток;
			
		КонецЕсли;
		
		СчетСтрок = СчетСтрок + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Заполняет поле "Склад" в табличной части материалов и работ по данным настройки передачи материалов.
//
// Параметры:
// 		Документ - ДанныеФормыКоллекция, ДокументОбъект.ЗаказНаРемонт - Документ, в котором необходимо заполнить колонку склад табличной части материалов и работ
// 		Строки - Массив - Массив строк табличной части, в которых необходимо заполнить колонку "Склад".
//
Процедура ЗаполнитьСкладПоНастройкамПередачиМатериалов(Документ, Строки=Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	(ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика
	|ПОМЕСТИТЬ ДанныеЗаполнения
	|ИЗ
	|	&ДанныеЗаполнения КАК ДанныеЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаполнения.ИндексСтроки,
	|	ВЫБОР
	|		КОГДА &ТекстПолеОснование = ЗНАЧЕНИЕ(Перечисление.ОснованияДляПолученияМатериаловВПроизводстве.ПоЗаказуНаПроизводство)
	|			ТОГДА &ТекстПоляСкладМатериалов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад
	|ИЗ
	|	ДанныеЗаполнения КАК ДанныеЗаполнения
	|		%ТекстЗапросаНастройкиПередачиМатериалов%";
		
	ТекстЗапросаДляПолученияСклада = ПроизводствоСервер.ТекстЗапросаНастройкиПередачиМатериалов(
										"ДанныеЗаполнения", 
										"&Подразделение",
										ОбеспечениеПроизводства.ВариантЗаполненияОбеспеченияПоВерсииПроизводства());
										
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"%ТекстЗапросаНастройкиПередачиМатериалов%",
						ТекстЗапросаДляПолученияСклада.ТекстСоединения);
						
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПоляСкладМатериалов",
						ТекстЗапросаДляПолученияСклада.ТекстПолеСклад);
		
	ТекстЗапроса = СтрЗаменить(
						ТекстЗапроса, 
						"&ТекстПолеОснование",
						ТекстЗапросаДляПолученияСклада.ТекстПолеОснование);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Документ.МатериалыИРаботы.Выгрузить(Строки));
	Запрос.УстановитьПараметр("Подразделение", Документ.Подразделение);
	Запрос.УстановитьПараметр("СкладПоУмолчанию", Справочники.Склады.СкладПоУмолчанию());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Документ.МатериалыИРаботы[Выборка.ИндексСтроки], Выборка);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
// 		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
// Возвращаемое значение:
// 		Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказНаРемонт";
	ПараметрыУказанияСерий.ИмяТЧСерии = "МатериалыИРаботы";
		
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
		
	ПараметрыУказанияСерий.ИмяТЧТовары = "МатериалыИРаботы";
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаНаВнутренниеНужды);
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//	ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//		поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
// 		ДокументСсылка.ЗаказНаРемонт - Ссылка на заказ.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
// 		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
// 		Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказНаРемонт - документ, по которому создаются временные таблицы.
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	Товары.Ссылка.Назначение КАК Назначение,
	|	Сумма(Товары.Количество) КАК Заказано,
	|	МАКСИМУМ(Товары.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(Товары.Упаковка) КАК Упаковка2,
	|	Максимум(Товары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|	И НЕ Товары.Отменено
	|	И Товары.Ссылка = &Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Ссылка.Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Подразделение КАК Подразделение,
	|	Товары.Назначение КАК Назначение,
	|	Товары.Заказано КАК Заказано,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ КАК Упаковка,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Склад КАК Склад,
	|	Товары.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	Сумма(Товары.Количество) КАК Заказано,
	|	Товары.Упаковка КАК Упаковка,
	|	Максимум(Товары.НомерСтроки) КАК НомерСтроки,
	|	Товары.Серия КАК Серия
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Товары
	|ГДЕ
	|	Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И Товары.Ссылка = &Заказ
	|	И НЕ Товары.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Упаковка,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Склад,
	|	Товары.Ссылка.Подразделение,
	|	Товары.Серия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.Выполнить();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРОК ПРИ СМЕНЕ СТАТУСА

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
// 		МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
// 		НовыйСтатус - Строка - Имя нового статуса
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаРемонт[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Остатки.ЗаказНаВнутреннееПотребление КАК Заказ
		|ПОМЕСТИТЬ втОстаткиПоНоменклатуре
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(, ЗаказНаВнутреннееПотребление В (&МассивДокументов)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.ЗаказНаВнутреннееПотребление
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.Распоряжение КАК Заказ
		|ПОМЕСТИТЬ втОстаткиПоТрудозатратам
		|ИЗ
		|	РегистрНакопления.ТрудозатратыКОформлению.Остатки(, Распоряжение В (&МассивДокументов)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Распоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением,
		|	ВЫБОР
		|		КОГДА втОстаткиПоНоменклатуре.Заказ ЕСТЬ NULL 
		|				И втОстаткиПоТрудозатратам.Заказ ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОстаткиПоЗаказу
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоНоменклатуре КАК втОстаткиПоНоменклатуре
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоНоменклатуре.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоТрудозатратам КАК втОстаткиПоТрудозатратам
		|		ПО ТаблицаДокументов.Ссылка = втОстаткиПоТрудозатратам.Заказ
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
		|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
		|	ВЫБОР
		|		КОГДА ТаблицаДокументов.Статус = &Статус
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СтатусСовпадает,
		|	ТаблицаДокументов.Проведен КАК Проведен,
		|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ЗаписьПроведением
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ТаблицаДокументов
		|ГДЕ
		|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
		|";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//  ВыборкаПроверки			 - ВыборкаИзРезультатаЗапроса	 - Текущая строка выборки
//  НовыйСтатус				 - Перечисление					 - Новый статус
//  ДополнительныеПараметры	 - Структура					 - Структура дополнительных параметров
//  ШаблонСообщения			 - Строка						 - Сообщение, которое нужно показать.
// 
// Возвращаемое значение:
//  Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры, ШаблонСообщения = Неопределено) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа") Тогда
		
		Если ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
			
			Если ШаблонСообщения = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ выполен не полностью';
									|en = 'Status ""%Статус%"" of document ""%Документ%"" is not set, because the order is not fulfilled completely'");
			Иначе
				ТекстОшибки = ШаблонСообщения;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
// 		Структура - Структура состояния выполнения.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",    2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 3);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка", "МатериалыИРаботы");
	СтруктураСостояние.Вставить("ИмяПоляДатаОтгрузки", "Ссылка.ДатаНачала");
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Материал';
																|en = 'Material'"));
	
	Возврат СтруктураСостояние;
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	ДопустимыеСтатусы = Новый Массив;
	Если ИмяДокумента = "ВнутреннееПотреблениеТоваров" Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ИначеЕсли ИмяДокумента = "ВыработкаСотрудников" Тогда
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
		ДопустимыеСтатусы.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	КонецЕсли;
	
	Возврат ДопустимыеСтатусы;
	
КонецФункции

#Область УчетНДС

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ПриобретениеУслугПоЛизингу, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.Дата = Объект.Дата;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.СписаниеТоваровИРаботНаСтатьи = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Инициализирует параметры проверки заполнения документа по виду деятельности НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ПриобретениеУслугПоЛизингу, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС().
//
Функция ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУП.ПараметрыПроверкиЗаполненияДокументаПоВидуДеятельностиНДС();
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "Ремонты";
	ПараметрыЗаполнения.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыЗаполнения.ИмяРеквизитаАналитикаРасходов = "Ссылка";
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

#Область Обеспечение

// Используется для получения данных из заказов на ремонт, используемых в обработке "Состояние обеспечения заказов".
// Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
// Возвращаемое значение:
// 		Строка - Текст запроса - Текст запроса для выборки данных.
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                        КАК Заказ,
	|	Т.КодСтроки                     КАК КодСтроки,
	|	Т.НомерСтроки                   КАК НомерСтроки,
	|	0                               КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО                    КАК Продукция,
	|	НЕОПРЕДЕЛЕНО                    КАК Этап,
	|	0                               КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура                  КАК Номенклатура,
	|	Т.Характеристика                КАК Характеристика,
	|	Т.Склад                         КАК Склад,
	|	ТаблицаДокумента.Назначение     КАК Назначение,
	|	ТаблицаДокумента.Подразделение  КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения    КАК ВариантОбеспечения,
	|	
	|	ВЫБОР КОГДА Т.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) ТОГДА
	|			ТаблицаДокумента.ДатаЗавершения
	|		ИНАЧЕ
	|			ТаблицаДокумента.ДатаНачала
	|	КОНЕЦ               КАК         ДатаОтгрузки,
	|	
	|	Т.Упаковка                      КАК Упаковка,
	|	
	|	Т.Количество                    КАК Количество,
	|	
	|	ДАТАВРЕМЯ(1, 1, 1)              КАК ЖелаемаяДатаОтгрузки,
	|	ИСТИНА                          КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата           КАК Дата,
	|	NULL                            КАК Партнер,
	|	ТаблицаДокумента.Ответственный  КАК Менеджер,
	|	ТаблицаДокумента.Статус         КАК Статус,
	|	ИСТИНА                          КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)
	|	И ТаблицаДокумента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
	
	ДатаНачалаПоУмолчанию = НачалоДня(ТекущаяДатаСеанса());
	ДатаЗавершенияПоУмолчанию = НачалоДня(ТекущаяДатаСеанса());
	
	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	Если Операция = "ИндексыСтрок" Тогда
		Работы = ПереченьРабот(Объект);
	КонецЕсли;

	ДатаНачалаДоИзменения     = Объект.ДатаНачала;
	ДатаЗавершенияДоИзменения = Объект.ДатаЗавершения;

	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Истина;
	ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.ДатаНачала;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.МатериалыИРаботы.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.МатериалыИРаботы[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;
			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.МатериалыИРаботы.Вставить(Объект.МатериалыИРаботы.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		// Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад");
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		Если Операция = "ИндексыСтрок" Тогда
			ЭтоРабота = Работы.Найти(ТекСтрокаТовары.Номенклатура) <> Неопределено;
		Иначе
			ЭтоРабота = ТекСтрокаТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа;
		КонецЕсли;
		Если ЭтоРабота И СтрокаОбеспечения.Отгружено = 0 Тогда
			ДатаЗавершенияПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаЗавершенияПоУмолчанию);
		ИначеЕсли СтрокаОбеспечения.Отгружено = 0 Тогда
			ДатаНачалаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаНачалаПоУмолчанию);
		КонецЕсли;
		Если (Операция = "Заказ" Или Операция = "ИндексыСтрок"
			Или ДатаНачалаПоУмолчанию > Объект.ДатаНачала И СтрокаОбеспечения.Отгружено = 0) И Не ЭтоРабота Тогда
			Объект.ДатаНачала = ДатаНачалаПоУмолчанию;
		КонецЕсли;
		Если (Операция = "Заказ" Или Операция = "ИндексыСтрок"
			Или ДатаЗавершенияПоУмолчанию > Объект.ДатаЗавершения И СтрокаОбеспечения.Отгружено = 0) И ЭтоРабота Тогда
			Объект.ДатаЗавершения = ДатаЗавершенияПоУмолчанию;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;
	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ЗначениеЗаполнено(ДатаЗавершенияДоИзменения) И
		Объект.ДатаЗавершения - Объект.ДатаНачала < ДатаЗавершенияДоИзменения - ДатаНачалаДоИзменения Тогда

		Объект.ДатаЗавершения = Объект.ДатаНачала + (ДатаЗавершенияДоИзменения - ДатаНачалаДоИзменения);

	КонецЕсли;

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаРемонт));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Ложь;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ПутиКДанным", Новый Соответствие());
	Параметры.Вставить("ИмяТабличнойЧасти", "МатериалыИРаботы");
	Параметры.Вставить("СтатусКВыполнению", Истина);
	Параметры.Вставить("ИмяМенеджераРегистра", "ЗаказыНаВнутреннееПотребление");
	
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаНачала");
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаЗавершения");
	
	Возврат Параметры;
	
КонецФункции

Функция ПереченьРабот(Объект) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка В(&НоменклатураЗаказа)
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	Запрос.УстановитьПараметр("НоменклатураЗаказа", Объект.МатериалыИРаботы.ВыгрузитьКолонку("Номенклатура"));
	Работы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Работы;

КонецФункции

#КонецОбласти

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ЕстьНазначениеВТЧ = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПланРемонтов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПериодыАктуальностиОбъектовЭксплуатации(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРемонтыРабочихЦентров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);

	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеШапки.Ссылка             КАК Ссылка,
		|	ДанныеШапки.Дата               КАК Период,
		|	ДанныеШапки.Номер              КАК Номер,
		|	ДанныеШапки.ДатаНачала         КАК ДатаНачала,
		|	ДанныеШапки.ДатаЗавершения     КАК ДатаЗавершения,
		|	ДанныеШапки.Подразделение      КАК Подразделение,
		|	ДанныеШапки.Организация        КАК Организация,
		|	ДанныеШапки.Статус             КАК Статус,
		|	ДанныеШапки.Ответственный      КАК Ответственный,
		|	ДанныеШапки.Комментарий        КАК Комментарий,
		|	ДанныеШапки.Проведен           КАК Проведен,
		|	ДанныеШапки.ПометкаУдаления    КАК ПометкаУдаления,
		|	ДанныеШапки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеШапки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеШапки.Назначение         КАК Назначение,
		|	ЕСТЬNULL(ДанныеШапки.Назначение.ДвиженияПоСкладскимРегистрам,ЛОЖЬ) КАК ДвиженияПоСкладскимРегистрам,
		|	ДанныеШапки.ОбъектЭксплуатации КАК ОбъектЭксплуатации
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ДанныеШапки
		|ГДЕ
		|	ДанныеШапки.Ссылка = &Ссылка";

	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",              Реквизиты.Период);
	Запрос.УстановитьПараметр("ДатаНачала",          Реквизиты.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаЗавершения",      Реквизиты.ДатаЗавершения);
	Запрос.УстановитьПараметр("Подразделение",       Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Организация",         Реквизиты.Организация);
	Запрос.УстановитьПараметр("Статус",              Реквизиты.Статус);
	Запрос.УстановитьПараметр("Назначение",          Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ДвиженияПоСкладскимРегистрам", Реквизиты.ДвиженияПоСкладскимРегистрам);
	Запрос.УстановитьПараметр("ОбъектЭксплуатации",  Реквизиты.ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("ИспользоватьУзлы",    ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации"));
	Запрос.УстановитьПараметр("Ответственный",       Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Комментарий",         Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Проведен",            Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",     Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Номер",               Реквизиты.Номер);
	Запрос.УстановитьПараметр("НомерНаПечать", ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	Запрос.УстановитьПараметр("НаправлениеДеятельности", Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));

КонецПроцедуры

// Производит запись движений в регистр "ПланРемонтов"
//
Процедура ОтразитьПланРемонтов(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланРемонтов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияПланРемонтов = Движения.ПланРемонтов;
	ДвиженияПланРемонтов.Записывать = Истина;
	ДвиженияПланРемонтов.Загрузить(Таблица);
	
КонецПроцедуры

// Производит запись движений в регистр "РемонтыРабочихЦентров"
//
Процедура ОтразитьРемонтыРабочихЦентров(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРемонтыРабочихЦентров;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвиженияРемонтыРабочихЦентров = Движения.РемонтыРабочихЦентров;
	ДвиженияРемонтыРабочихЦентров.Записывать = Истина;
	ДвиженияРемонтыРабочихЦентров.Загрузить(Таблица);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ЗаказыНаВнутреннееПотребление";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)           КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ТаблицаТовары.Ссылка                   КАК ЗаказНаВнутреннееПотребление,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	ТаблицаТовары.Серия                    КАК Серия,
		|	ТаблицаТовары.КодСтроки                КАК КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ТаблицаТовары.Склад
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОНЕЦ КАК Склад,
		|	ТаблицаТовары.Количество               КАК Заказано,
		|	0 КАК КОформлению
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ВЫРАЗИТЬ(&ДатаНачала КАК ДАТА)
		|		ИНАЧЕ ВЫРАЗИТЬ(&ДатаЗавершения КАК ДАТА)
		|	КОНЕЦ,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.КодСтроки,
		|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|				ТОГДА ТаблицаТовары.Склад
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		КОНЕЦ КАК Склад,
		|	0,
		|	ТаблицаТовары.Количество
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
		|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаТовары.Ссылка,
		|	ТаблицаТовары.Номенклатура,
		|	ТаблицаТовары.Характеристика,
		|	ТаблицаТовары.Серия,
		|	ТаблицаТовары.КодСтроки,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ТаблицаТовары.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ,
		|	-ТаблицаТовары.Количество,
		|	0
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|	ГДЕ
		|		ТаблицаТовары.Ссылка = &Ссылка
		|		И ТаблицаТовары.Отменено
		|		И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПланРемонтов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПланРемонтов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	&ДатаЗавершения КАК Период,
		|	ЕСТЬNULL(УзлыОбъектовЭксплуатации.Ссылка, &ОбъектЭксплуатации) КАК ОбъектЭксплуатации,
		|	Ремонты.ВидРемонта КАК ВидРемонта,
		|	Ремонты.РемонтныйЦикл КАК РемонтныйЦикл
		|ИЗ
		|	Документ.ЗаказНаРемонт.Ремонты КАК Ремонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|		ПО Ремонты.Узел = УзлыОбъектовЭксплуатации.Ссылка И &ИспользоватьУзлы
		|ГДЕ
		|	Ремонты.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаРемонтыРабочихЦентров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "РемонтыРабочихЦентров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказНаРемонтРабочиеЦентры.Ссылка КАК ЗаказНаРемонт,
		|	ЗаказНаРемонтРабочиеЦентры.РабочийЦентр КАК РабочийЦентр,
		|	ЗаказНаРемонтРабочиеЦентры.НомерСтроки КАК НомерСтроки,
		|	ЗаказНаРемонтРабочиеЦентры.ДатаНачала КАК ДатаНачала,
		|	ЗаказНаРемонтРабочиеЦентры.ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Документ.ЗаказНаРемонт.РабочиеЦентры КАК ЗаказНаРемонтРабочиеЦентры
		|ГДЕ
		|	ЗаказНаРемонтРабочиеЦентры.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТрудозатратыКОформлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ДатаНачала КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	&Организация КАК Организация,
		|	ЗаказНаРемонтТрудозатраты.Ссылка КАК Распоряжение,
		|	ЗаказНаРемонтТрудозатраты.ВидРабот КАК ВидРабот,
		|	ЗаказНаРемонтТрудозатраты.Бригада КАК Исполнитель,
		|	&Подразделение КАК Подразделение,
		|	ЗаказНаРемонтТрудозатраты.Количество КАК Количество,
		|	ЗаказНаРемонтТрудозатраты.КодСтроки КАК КодСтрокиРаспоряжения
		|ИЗ
		|	Документ.ЗаказНаРемонт.Трудозатраты КАК ЗаказНаРемонтТрудозатраты
		|ГДЕ
		|	ЗаказНаРемонтТрудозатраты.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|	И НЕ ЗаказНаРемонтТрудозатраты.Отменено";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	// Резервирование материалов
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ,
	|	0                                      КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка материалов
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
	|
	|	ТаблицаТовары.Количество               КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		// Формирование потребности
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
		|	&Период                                 КАК Период,
		|	ТаблицаТовары.Склад                     КАК Склад,
		|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
		|	ТаблицаТовары.Характеристика            КАК Характеристика,
		|	&Назначение                             КАК Назначение,
		|	ТаблицаТовары.Количество                КАК Потребность,
		|	ТаблицаТовары.Количество                КАК КЗаказу,
		|	0                                       КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Закрытие потребности
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
		|	&Период                                 КАК Период,
		|	ТаблицаТовары.Склад                     КАК Склад,
		|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
		|	ТаблицаТовары.Характеристика            КАК Характеристика,
		|	&Назначение                             КАК Назначение,
		|	ТаблицаТовары.Количество                КАК Потребность,
		|	0                                       КАК КЗаказу,
		|	ТаблицаТовары.Количество                КАК НаличиеПодЗаказ
		|
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
		|
		|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	&ДатаНачала                          КАК Период,
		|	&ДатаНачала                          КАК ДатаОтгрузки,
		|
		|	ТаблицаТовары.Номенклатура           КАК Номенклатура,
		|	ТаблицаТовары.Характеристика         КАК Характеристика,
		|	ТаблицаТовары.Склад                  КАК Склад,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			&Назначение
		|		КОНЕЦ                                            КАК Назначение,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоИзЗаказов,
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоПодЗаказ,
		|
		|
		|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
		|			ТаблицаТовары.Количество
		|		КОНЕЦ                                            КАК КоличествоНеобеспечено
		|
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|
		|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	ВЫРАЗИТЬ(&ДатаЗавершения КАК ДАТА)     КАК Период,
		|	&Подразделение                         КАК Подразделение,
		|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
		|	ТаблицаТовары.Характеристика           КАК Характеристика,
		|	&Назначение                            КАК Назначение,
		|	ТаблицаТовары.Количество               КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И НЕ ТаблицаТовары.Отменено
		|
		|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И ТаблицаТовары.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
		|
		|	И НЕ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Создан)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаПериодыАктуальностиОбъектовЭксплуатации(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ПериодыАктуальностиОбъектовЭксплуатации";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА Документ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
		|			ТОГДА Документ.ДатаЗавершенияФактическая
		|		ИНАЧЕ Документ.ДатаЗавершения
		|	КОНЕЦ КАК Период,
		|	Документ.ОбъектЭксплуатации КАК ОбъектЭксплуатации
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &Ссылка
		|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ДатаНачала                            КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Подразделение                         КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	ТаблицаТовары.Количество               КАК ВРезерве,
	|	0                                      КАК КОтгрузке,
	|	0                                      КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения =
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&ДатаНачала                            КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Подразделение                         КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|			И &ДвиженияПоСкладскимРегистрам 
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ								   КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	0                                      КАК ВРезерве,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры  В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.КВыполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Выполняется),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаРемонт.Закрыт))
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказНаРемонт";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ЗаказыНаВнутреннееПотребление" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаВнутреннееПотребление(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТрудозатратыКОформлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТрудозатратыКОформлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ЗаказНаРемонтТрудозатраты";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Подразделение КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Ответственный КАК Ответственный,
	|	&Комментарий КАК Комментарий,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	0 КАК Сумма,
	|	&Статус КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	"""" КАК Дополнительно,
	|	&Период КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	&Период    КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументовВнутреннегоТовародвижения

Функция ЕстьЗаказыВРаботе(Параметры)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаРемонт.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаРемонт КАК ЗаказНаРемонт
		|ГДЕ
		|	ЗаказНаРемонт.Проведен
		|	И ЗаказНаРемонт.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыВнутреннихЗаказов.Закрыт)");
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаРемонт)
			И ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеРемонтами")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Заказы на ремонт';
							|en = 'Repair orders'");
	ТекстСсылки = "Документ.ЗаказНаРемонт.Форма.ФормаСпискаДокументов";
	
	Если ЕстьЗаказыВРаботе(Параметры) Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ТекстСсылки);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветаСтиля.НезаполненноеПолеТаблицы,, ТекстСсылки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаТоварыДокумента(Отбор) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Ссылка                       КАК ЗаказНаВнутреннееПотребление,
	|	Таблица.Номенклатура                 КАК Номенклатура,
	|	Таблица.Характеристика               КАК Характеристика,
	|	ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
	|			Таблица.Ссылка.Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                КАК Назначение,
	|	Таблица.КодСтроки                    КАК КодСтроки,
	|	Таблица.Серия                        КАК Серия,
	|	Таблица.Количество                   КАК Количество,
	|	Таблица.Упаковка                     КАК Упаковка,
	|	NULL                                 КАК ДатаОтгрузки,
	|	ТаблицаРемонты.СтатьяРасходов        КАК СтатьяРасходов,
	|	ВЫБОР 
	|		КОГДА ТаблицаРемонты.СтатьяРасходов.РасходыНаОбъектыЭксплуатации
	|			ТОГДА Таблица.Ссылка.ОбъектЭксплуатации
	|		КОГДА ТаблицаРемонты.СтатьяРасходов.РасходыНаЗаказыНаРемонт
	|			ТОГДА Таблица.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                КАК АналитикаРасходов,
	|	NULL                                 КАК ГруппаПродукции,
	|	Таблица.Склад                        КАК Склад,
	|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
	|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
	|	&ЗаказНаВнутреннееПотребление_ТоварыЛокализация
	|ИЗ
	|	Документ.ЗаказНаРемонт.МатериалыИРаботы КАК Таблица
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаРемонт.Ремонты КАК ТаблицаРемонты
	|	ПО Таблица.Ссылка = ТаблицаРемонты.Ссылка
	|		И Таблица.КодРемонта = ТаблицаРемонты.КодРемонта
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
	|	ПО Таблица.Ссылка = ДанныеУчета.ЗаказНаВнутреннееПотребление
	|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
	|ГДЕ
	|	НЕ ДанныеУчета.ЗаказНаВнутреннееПотребление ЕСТЬ NULL
	|//&Отбор";
	
	ЗаказНаВнутреннееПотреблениеЛокализация.ДобавитьВТекстЗапросаРеквизитыТаблицыТовары(ТекстЗапроса, Неопределено);
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			ИначеЕсли Ключ = "Склад" Тогда
				Ключ = "Таблица.Склад";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов - 
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Серия");
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказНаРемонт") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТоварыКПоступлению.ЗаказНаВнутреннееПотребление КАК Заказ,
		|	ТоварыКПоступлению.Номенклатура                 КАК Номенклатура,
		|	ТоварыКПоступлению.Характеристика               КАК Характеристика,
		|	ТоварыКПоступлению.Серия                        КАК Серия,
		|	СУММА(ТоварыКПоступлению.КОформлениюПриход
		|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Обороты(&НачПериод,&КонПериод,, 
		|		ЗаказНаВнутреннееПотребление В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
		|ГДЕ
		|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
		|СГРУППИРОВАТЬ ПО
		|	ТоварыКПоступлению.ЗаказНаВнутреннееПотребление,
		|	ТоварыКПоступлению.Номенклатура,
		|	ТоварыКПоступлению.Характеристика,
		|	ТоварыКПоступлению.Серия");
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыНаВнутреннееПотребление",
		"ЗаказНаВнутреннееПотребление В (&МассивРаспоряжений)", Запрос.Параметры);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область Назначения

// Возврашает шаблон для генерации назначения товаров в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказНаРемонт, ДанныеФормыСтруктура - заказ на ремонт, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВРемонтах.Получить();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВРемонтах.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
