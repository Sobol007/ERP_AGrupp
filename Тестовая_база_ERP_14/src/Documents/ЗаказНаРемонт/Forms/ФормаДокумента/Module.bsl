#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем СтрокаДоРедактирования;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СопоставитьКлючиРемонтовВТабличнойЧасти(ТекущийОбъект.МатериалыИРаботы);
	ТекущийОбъект.СопоставитьКлючиРемонтовВТабличнойЧасти(ТекущийОбъект.Трудозатраты);

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, ПараметрыЗаполненияСлужебныхРеквизитов());
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ПараметрыЗаполнения);
	
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	ОбновитьСпискиВыбораРемонта();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("ПодборРемонтов") Тогда
			
			ОбработкаПодбораРемонтов(ВыбранноеЗначение.Таблицы);
			
		КонецЕсли;
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		РезультатОтмены = СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
											|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказНаРемонт");

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	ХозяйственнаяОперацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()
	УстановитьВидимость();
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектЭксплуатацииПриИзменении(Элемент)
	ОбъектЭксплуатацииПриИзмененииНаСервере()
КонецПроцедуры

&НаСервере
Процедура ОбъектЭксплуатацииПриИзмененииНаСервере()
	
	Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ОбъектЭксплуатации, "ЭксплуатирующееПодразделение");
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Объект.Подразделение = Подразделение;
	КонецЕсли;
	
	ЗаполнитьПараметрыОтображения();
	ОбновитьСпискиВыбораРемонта();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	СтатусПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	Если Объект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Выполняется
		И Не ЗначениеЗаполнено(Объект.ДатаНачалаФактическая) Тогда
		
		Объект.ДатаНачалаФактическая = ТекущаяДатаСеанса();
		
	ИначеЕсли Объект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт
		И Не ЗначениеЗаполнено(Объект.ДатаЗавершенияФактическая)Тогда
		
		Объект.ДатаЗавершенияФактическая = ТекущаяДатаСеанса();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТребуетсяОбновитьСпискиВыбораРемонта Тогда
		ОбновитьСпискиВыбораРемонта();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ЭтотОбъект.ПараметрыСвойств.Свойство(ТекущаяСтраница.Имя)
			И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПотреблениеДляДеятельностиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

&НаКлиенте
Процедура РемонтыПриИзменении(Элемент)
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыУзелПриИзменении(Элемент)
	ЗаполнитьСтатьюЗатрат(Элементы.Ремонты.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыВидРемонтаПриИзменении(Элемент)
	
	РемонтыВидРемонтаПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Элемент.МатериалыИРаботы.Выбор");
	
	Если Элемент.ТекущийЭлемент = Элементы.МатериалыИРаботыВариантОбеспечения И Не ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
					"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
					ПараметрыФормы,
					ЭтаФорма,
					,
					,
					,
					Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Иначе
			
			ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("МатериалыИРаботы",
				НСтр("ru = 'Материалы и работы';
					|en = 'Materials and works'"));
			ПараметрыПроверки.Поля.Вставить("Склад", "МатериалыИРаботы[%1].Склад");
			ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Материалы и работы""';
															|en = 'The ""Warehouse"" column is not populated in line %1 of the ""Materials and works"" list'"));
			
			ПараметрыПроверки.Поля.Удалить("Подразделение");
			
			Если ОбеспечениеКлиент.ПроверитьЗаполнение(
				Объект, Объект.МатериалыИРаботы, Элементы.МатериалыИРаботы.ТекущаяСтрока, ПараметрыПроверки) Тогда
				
				ПараметрыФормы = ПараметрыВыбораОбеспечения();
				Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
					ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы,
						ЭтаФорма, УникальныйИдентификатор);
				Иначе
					Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
						ПараметрыФормы, "МатериалыИРаботы", НСтр("ru = 'Материалы и работы';
																|en = 'Materials and works'"));
					ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные.КодСтроки = 0;
		
	КонецЕсли;
	
	Если Копирование Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь)); 
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущиеДанные.Склад, ПараметрыУказанияСерий));
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИРаботы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "МатериалыИРаботы"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКодРемонтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		СтруктураРемонта = Ремонты.Получить(ТекущиеДанные.КодРемонта);
		Если СтруктураРемонта = Неопределено Тогда
			СтруктураРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.МатериалыИРаботы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.МатериалыИРаботы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСкладПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь)); 
	СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
		Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ТекущаяСтрока.Склад, ПараметрыУказанияСерий));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКодРемонтаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КодРемонта", ТекущиеДанные.КодРемонта);
	СписокСтрок = Объект.Ремонты.НайтиСтроки(СтруктураПоиска);
	Если СписокСтрок.Количество() <> 0 И ЗначениеЗаполнено(СписокСтрок[0].ВидРемонта) Тогда
		ПоказатьЗначение(, СписокСтрок[0].ВидРемонта);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыКодРемонтаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.КодРемонта) Тогда
		СтруктураРемонта = Ремонты.Получить(ТекущиеДанные.КодРемонта);
		Если СтруктураРемонта = Неопределено Тогда
			СтруктураРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтруктураРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРабочиеЦентры

&НаКлиенте
Процедура РабочиеЦентрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РабочиеЦентры.ТекущиеДанные;
	
	СтрокаДоРедактирования = Новый Структура("РабочийЦентр, ДатаНачала, ДатаЗавершения");
	ЗаполнитьЗначенияСвойств(СтрокаДоРедактирования, ТекущиеДанные);
	
	Если НоваяСтрока Тогда
		// При добавлении строки заполнить реквизиты "Дата начала" и "Дата завершения" по данным шапки документа.
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Объект, "ДатаНачала, ДатаЗавершения");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.РабочиеЦентры.ТекущиеДанные;
	Если Не ОтменаРедактирования
		И Не (СтрокаДоРедактирования.РабочийЦентр = ТекущиеДанные.РабочийЦентр
		И СтрокаДоРедактирования.ДатаНачала = ТекущиеДанные.ДатаНачала
		И СтрокаДоРедактирования.ДатаЗавершения = ТекущиеДанные.ДатаЗавершения) Тогда
		
		ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров(Элементы.РабочиеЦентры.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбранныеДанные = Объект.РабочиеЦентры.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле.Имя = "РабочиеЦентрыКартинкаДоступности"
		И ЗначениеЗаполнено(ВыбранныеДанные.РабочийЦентр) Тогда
		
		Если ВыбранныеДанные.КартинкаДоступности = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для рабочего центра ""%РЦ%"" на указанный период указана доступность.
			|Необходимо согласовать ремонтные работы с графиком доступности рабочего центра';
			|en = 'Availability is specified for the ""%РЦ%"" work center for the given period.
			|Reconcile repair works with the work center availability schedule'");
		ИначеЕсли ВыбранныеДанные.КартинкаДоступности = 2 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для рабочего центра ""%РЦ%"" на указанный период запланированы работы.
			|Необходимо согласовать ремонтные работы с графиком производства';
			|en = 'Works are planned for the ""%РЦ%"" work center for the specified period.
			|Reconcile repair works with the production schedule'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Рабочий центр ""%РЦ%"" на указанный период доступен для ремонтных работ';
										|en = 'Operation center ""%РЦ%"" is available for repair activities within the specified period'");
		КонецЕсли;
		
		ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%РЦ%", ВыбранныеДанные.РабочийЦентр);
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Обеспечение

&НаКлиенте
Процедура ЗаполнитьОбеспечение(Команда)

	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("МатериалыИРаботы",
		НСтр("ru = 'Материалы и работы';
			|en = 'Materials and works'"));
	ПараметрыПроверки.Поля.Вставить("Склад", "МатериалыИРаботы[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Материалы и работы""';
													|en = 'The ""Warehouse"" column is not populated in line %1 of the ""Materials and works"" list'"));
	ПараметрыПроверки.Поля.Удалить("Подразделение");

	Если ОбеспечениеКлиент.ПроверитьЗаполнение(
		Объект, Объект.МатериалыИРаботы, Элементы.МатериалыИРаботы.ВыделенныеСтроки, ПараметрыПроверки) Тогда

		ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыИсполнениеЗаказа(ТипЗнч(Объект.Ссылка));
		ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа", ПараметрыФормы,
			ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЗаказНаРемонт.Форма.ФормаДокумента.СостояниеОбеспечения");
	
	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Материалы и работы"".
		|Просмотр состояния обеспечения списка материалов и работ невозможен.';
		|en = 'No line is entered into the ""Materials and services"" list. 
		|Cannot view the supply state of list of materials and works.'");
		
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(ЭтаФорма, "МатериалыИРаботы", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.КВыполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Истина);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'To reserve for assignment, it is required to post the document first. Post the document and continue?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(Объект.Ссылка);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.КВыполнению");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, Строка(МинимальныйСтатус));
	ИначеЕсли Не Объект.Проведен Или Модифицированность Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Резервирование", Ложь);
		ДополнительныеПараметры.Вставить("ОписаниеКоманды", ОписаниеКоманды);
		
		ТекстВопроса = НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ. Выполнить проведение документа и продолжить?';
							|en = 'To remove the reserve for assignment, post the document first. Post the document and continue?  '");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СоздатьКорректировкуНазначенияЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
				ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура РемонтыПодобрать(Команда)
	
	ПараметрыФормы = ПараметрыФормыПодбораРемонтов();
	
	ОткрытьФорму("Документ.ЗаказНаРемонт.Форма.ФормаПодбораРемонтов", 
		ПараметрыФормы, 
		ЭтаФорма,,,, 
		Неопределено, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров", Истина);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры", Новый ФиксированныйМассив(НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь)));
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены", Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры", Истина);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Подбор материалов и работ';
												|en = 'Select materials and works'"));
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Назначение", Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ПодборВариантовОбеспечения", Истина);
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьПоРемонтам(Команда)
	
	Если Объект.МатериалыИРаботы.Количество() = 0 Тогда
		ЗаполнитьМатериалыРаботыПоРемонтам();
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В табличной части имеются заполненные строки';
							|en = 'There are populated rows in the table'");
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перезаполнить таблицу';
															|en = 'Refill table'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
																|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("МатериалыИРаботыЗаполнитьПоРемонтамЗавершение", ЭтотОбъект), ТекстВопроса, ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьПоРемонтамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьМатериалыРаботыПоРемонтам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.МатериалыИРаботы;
	ДанныеТаблицы = Объект.МатериалыИРаботы;
	
	Оповещение = Новый ОписаниеОповещения("МатериалыИРаботыРазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		НоваяСтрока.КодСтроки = 0;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтрокиСтрокиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОтменитьНеотработанные(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЗаказНаРемонт.Форма.ФормаДокумента.Команда.МатериалыИРаботыОтменитьНеотработанные");
	
	РезультатОтмены = ОтменитьНеотработанныеСервер();
	ПоказатьОповещениеПользователя(НСтр("ru = 'Отмена неотработанных строк';
										|en = 'Cancel unfulfilled lines'"), , РезультатОтмены.Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьСклад(Команда)
	
	ЗаполнитьСкладПоНастройкамПередачиМатериалов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПоРемонтам(Команда)
	
	Если Объект.Трудозатраты.Количество() = 0 Тогда
		
		ЗаполнитьТрудозатратыПоРемонтам();
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В табличной части имеются заполненные строки';
							|en = 'There are populated rows in the table'");
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перезаполнить таблицу';
															|en = 'Refill table'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
																|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТрудозатратыЗаполнитьПоРемонтамЗавершение", ЭтотОбъект), ТекстВопроса, ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПоРемонтамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьТрудозатратыПоРемонтам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьВыделенныеСтроки(Команда)
	
	СтруктураОтмененнойСтроки = Новый Структура("Отменено", Истина);
	
	Для Каждого ИдентификаторСтроки Из Элементы.Трудозатраты.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураОтмененнойСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтроки(Команда)
	
	ПроверятьОстатки = Истина;
	
	Если Не Объект.Проведен Тогда
		
		ОтветНаВопрос = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТрудозатратыОтменитьНевыполненныеСтрокиПослеВопроса", ЭтотОбъект), НСтр("ru = 'Заказ не проведен, оформление работ сотрудников по заказу не запланировано. Будут отменены все строки. Продолжить?';
																														|en = 'The order has not been posted, employees'' works have not been scheduled. All lines will be canceled. Continue?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаРемонт.Создан") Тогда
		
		ТекстВопроса = НСтр("ru = 'Заказ проведен в статусе %Статус%, оформление работ сотрудников по заказу не запланировано. Будут отменены все строки. Продолжить?';
							|en = 'The order is posted with status %Статус%, works for employees have not been planned for this order. All lines will be canceled. Continue?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Статус%", Объект.Статус);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТрудозатратыОтменитьНевыполненныеСтрокиЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    ПроверятьОстатки = Ложь;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    ПроверятьОстатки = Ложь;
    
    Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(ПроверятьОстатки);

КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыОтменитьНевыполненныеСтрокиФрагмент(Знач ПроверятьОстатки)
    
    Перем КоличествоСтрокОтменено;
    
    КоличествоСтрокОтменено = ОтменитьНевыполненныеСтрокиТрудозатратСервер(ПроверятьОстатки);
    
    Если КоличествоСтрокОтменено = 0 Тогда
        
        ПоказатьОповещениеПользователя(
        НСтр("ru = 'Строки не отменены';
			|en = 'Lines were not canceled'"),
        ,
        НСтр("ru = 'По всем строкам оформлены документы. Строки не могут быть отменены';
			|en = 'The documents are registered for all rows. Rows cannot be canceled'"),
        БиблиотекаКартинок.Информация32);
        
    Иначе
        
        Если ПроверятьОстатки Тогда
            
            ПоказатьОповещениеПользователя(
            НСтр("ru = 'Строки отменены';
				|en = 'Lines were canceled'"),
            ,
            НСтр("ru = 'Все неоформленные строки отменены';
				|en = 'All pending lines are canceled'"),
            БиблиотекаКартинок.Информация32);
            
        Иначе
            
            ПоказатьОповещениеПользователя(
            НСтр("ru = 'Строки отменены';
				|en = 'Lines were canceled'"),
            ,
            НСтр("ru = 'Все строки отменены.';
				|en = 'All lines are canceled.'"),
            БиблиотекаКартинок.Информация32);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыЗаполнить(Команда)
	
	Если Объект.РабочиеЦентры.Количество() = 0 Тогда
		
		РабочиеЦентрыЗаполнитьНаСервере();
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'В табличной части имеются заполненные строки';
							|en = 'There are populated rows in the table'");
		ВариантыОтветов = Новый СписокЗначений;
		ВариантыОтветов.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Перезаполнить таблицу';
															|en = 'Refill table'"));
		ВариантыОтветов.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отменить';
																|en = 'Cancel'"));
		
		ПоказатьВопрос(Новый ОписаниеОповещения("РабочиеЦентрыЗаполнитьЗавершение", ЭтотОбъект), ТекстВопроса, ВариантыОтветов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РабочиеЦентрыЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		РабочиеЦентрыЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказ(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЗаказЗавершение", ЭтотОбъект),
			НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
				|en = 'Post the document to perform the operation. Post the document?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказФрагмент()
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЗаказФрагмент();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	АктуализироватьПотреблениеДляДеятельности();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеСвойствПоСтатистикеСервер.ЗаполнитьПодчиненныеСвойства(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура, Характеристика, ХарактеристикиИспользуются, Упаковка, КоличествоУпаковок, Склад, ВариантОбеспечения, Серия");
		
		Если Не ЗначениеЗаполнено(СтрокаТовара.ВариантОбеспечения) Тогда
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьОбеспечение", Новый Структура("ЗаполнитьОбособленно", Ложь));
			СтруктураДействий.Вставить("ЗаполнитьВариантОбеспеченияПоДатеОтгрузки",
				ОбеспечениеКлиентСервер.СтруктураЗаполненияВариантаОбеспечения(Объект, ТекущаяСтрока.ДатаОтгрузки));
			СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
				Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
			
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, ПараметрыЗаполненияСлужебныхРеквизитов());
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьПотреблениеДляДеятельности(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЗаказНаРемонт.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ПотреблениеДляДеятельности, 
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ПотреблениеДляДеятельности,
		Объект.ПотреблениеДляДеятельности,
		ПараметрыЗаполнения, 
		УчетНДСКэшированныеЗначенияПараметров);
		
КонецПроцедуры

#Область Обеспечение

&НаСервере
Функция ПараметрыВыбораОбеспечения()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаНачала");
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаЗавершения");

	ПараметрыЗаполнения = Новый Структура("МенеджерРегистра", РегистрыНакопления.ЗаказыНаВнутреннееПотребление);

	Результат = ОбеспечениеСервер.ПараметрыВыбораОбеспечения(
		Элементы.МатериалыИРаботы.ТекущаяСтрока,
		Объект,
		Объект.МатериалыИРаботы,
		ПутиКДанным,
		ПараметрыЗаполнения);

	// В строках ТЧ нет поля Назначения, поэтому оно копируется из шапки документа.
	// Необходимо очистить поле Назначение для тех строк, где выбран не обособленный вариант обеспечения.
	Для Каждого Строка Из Результат.ТаблицаНевыделенныеСтроки Цикл
		Если Не (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			Или Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно) Тогда
			Строка.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения("МатериалыИРаботы",
			НСтр("ru = 'Материалы и работы';
				|en = 'Materials and works'"));
	ПараметрыПроверки.Поля.Вставить("Склад", "МатериалыИРаботы[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Материалы и работы""';
													|en = 'The ""Warehouse"" column is not populated in line %1 of the ""Materials and works"" list'"));
	
	ПараметрыПроверки.Поля.Удалить("Подразделение");
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
			Объект, Объект.МатериалыИРаботы, Элементы.МатериалыИРаботы.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения(); // получен, в том числе, параметр "АдресТаблицыПодобраноРанее".
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
			ПараметрыФормы, "МатериалыИРаботы", НСтр("ru = 'Материалы и работы';
													|en = 'Materials and works'"));
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             Неопределено);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);
	
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияЗавершение",
		Ложь);// Всегда Ложь, для данного документа, вопрос используется фиктивно.
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	// Ответ всегда равен КодВозвратаДиалога.Нет, для данного документа.
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаНачала");
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаЗавершения");

	РеквизитыЗаказа = Новый Структура("ЖелаемаяДатаОтгрузки, Ссылка, НеОтгружатьЧастями, Статус, Дата, Партнер, Менеджер");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	РеквизитыЗаказа.ЖелаемаяДатаОтгрузки = '00010101'; //пустая дата.
	РеквизитыЗаказа.НеОтгружатьЧастями = Истина;

	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.МатериалыИРаботы, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("ИмяМенеджераРегистра",
		"ЗаказыНаВнутреннееПотребление");

	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.МатериалыИРаботы.ТекущаяСтрока);
	КонецЦикла;
	ТекстОповещения = Документы.ЗаказНаРемонт.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокаТовары", ВыбранноеЗначение, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	ПутиКДанным = Новый Соответствие;
	ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаНачала");
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаЗавершения");
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыНаВнутреннееПотребление);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		Элементы.МатериалыИРаботы.ВыделенныеСтроки,
		Объект,
		Объект.МатериалыИРаботы,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "МатериалыИРаботы", НСтр("ru = 'Материалы и работы';
													|en = 'Materials and works'")));
	КонецЕсли;
	
	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЗаказНаРемонт.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыУказанияСерий);
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЗаказа(ВыбранноеЗначение)

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	ТекстОповещения    = Документы.ЗаказНаРемонт.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "Заказ", ТаблицаОбеспечения, ПараметрыУказанияСерий);

	Возврат ТекстОповещения;

КонецФункции

&НаКлиенте
Процедура СоздатьКорректировкуНазначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ЕстьТоварыКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
	
	Если ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен И Не Модифицированность Тогда
		
		// Если документ записан впервые, в ОбъектыОснований находится пустая ссылка, нужно актуализировать.
		ОбъектыОснований = Новый Массив();
		ОбъектыОснований.Добавить(Объект.Ссылка);
		
		ДополнительныеПараметры.ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
		
		Если ДополнительныеПараметры.Резервирование Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ДополнительныеПараметры.ОписаниеКоманды);
		Иначе
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ДополнительныеПараметры.ОписаниеКоманды);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьТоварыКОбособленномуОбеспечению И Объект.Проведен Тогда
		ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "МатериалыИРаботыСклад", "Склад", "МатериалыИРаботы", "СкладОбязателен");
	
#Область ПериодВыполненияРемонта
	
	// Незаполненая дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачала");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачала.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Создан;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Незаполненая дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Создан;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	#Область ФактическийПериодВыполненияРемонта
	
	// Незаполненая дата начала ремонта фактическая.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Выполняется);
	СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Закрыт);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата начала ремонта фактическая.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Незаполненная дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершенияФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершенияФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Заполненная дата завершения ремонта.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаЗавершенияФактическая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаЗавершенияФактическая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьРемонты
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыУзел.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВозможнаДетализацияПоУзлам");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыУзел.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ремонты.Узел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Объект.ОбъектЭксплуатации);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыВидРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Ремонты.ВидРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПредставлениеПроизвольногоРемонта);
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьМатериалыИРаботы
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>';
																|en = '<characteristics are not used>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтаФорма,
		"МатериалыИРаботыНоменклатураЕдиницаИзмерения",
		"Объект.МатериалыИРаботы.Упаковка");
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНомерСтроки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатура.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыХарактеристика.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКоличествоУпаковок.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыУпаковка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыНоменклатураЕдиницаИзмерения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыВариантОбеспечения.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКодРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>';
																|en = '<not required>'"));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыКодРемонта.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.КодРемонта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ПредставлениеРемонта"));
	
	#КонецОбласти
	
	#Область ТабличнаяЧастьТрудозатраты
	
	Если Не ЗначениеЗаполнено(ЕстьПравоДоступаТрудозатраты) Тогда
		ЕстьПравоДоступаТрудозатраты = ЕстьПравоДоступаТрудозатраты();
	КонецЕсли;
	
	Если ЕстьПравоДоступаТрудозатраты Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыБригада.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.Создан);
		СписокЗначений.Добавить(Перечисления.СтатусыЗаказовНаРемонт.КВыполнению);
		ОтборЭлемента.ПравоеЗначение = СписокЗначений;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыНомерСтроки.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыБригада.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыВидРабот.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыЕдиницаИзмерения.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКоличество.Имя);
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКодРемонта.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Отменено");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		//
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыКодРемонта.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.КодРемонта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.ПредставлениеРемонта"));
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Серии
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтаФорма,
		"СерииВсегдаВТЧТовары",
		"МатериалыИРаботыСерия",
		"Объект.МатериалыИРаботы.СтатусУказанияСерий",
		"Объект.МатериалыИРаботы.ТипНоменклатуры");
	
	#КонецОбласти
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
КонецПроцедуры

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "")
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	Если НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(ЭтаФорма, ПараметрыУказанияСерий, Текст) Тогда
		ТекстИсключения = НСтр("ru = 'Ошибка при попытке указать серии - в этом документе для указания серий не нужен серверный вызов.';
								|en = 'An error occurred when attempting to specify series. No server call is required to specify series in this document.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(ЕстьПравоДоступаТрудозатраты) Тогда
		ЕстьПравоДоступаТрудозатраты = ЕстьПравоДоступаТрудозатраты();
	КонецЕсли;
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ПредставлениеПроизвольногоРемонта = НСтр("ru = '<произвольный ремонт>';
											|en = '<any repair>'");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, ПараметрыЗаполненияСлужебныхРеквизитов());
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ПараметрыЗаполнения);
	
	ЗаполнитьПараметрыОтображения();
	УстановитьВидимость();
	
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	ОбновитьСпискиВыбораРемонта();
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказНаРемонт));
	Элементы.МатериалыИРаботыЗаполнитьОбеспечение.Доступность = Не ТолькоПросмотр;
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Объект.ХозяйственнаяОперация);
	
	АктуализироватьПотреблениеДляДеятельности(Ложь);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказНаРемонт.ИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	УстановитьВидимостьОбеспечения();
	
	Элементы.Трудозатраты.Видимость = ЕстьПравоДоступаТрудозатраты;
	
	Если Не Объект.ДоступныТрудозатраты И Объект.Трудозатраты.Количество() = 0 Тогда
		Элементы.Трудозатраты.Видимость = Ложь;
		Элементы.РемонтыСпособОтраженияЗарплаты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбеспечения()
	
	Элементы.МатериалыИРаботыСостояниеОбеспечения.Видимость = ПравоДоступа("Просмотр", Метаданные.Обработки.СостояниеОбеспечения);
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов") Тогда
		Элементы.СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыОтображения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	Запрос.Текст=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Узлы.Ссылка
	|ИЗ
	|	Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|ГДЕ
	|	Узлы.Владелец = &ОбъектЭксплуатации";
	
	ИспользоватьУзлыОбъектовЭксплуатации = ПолучитьФункциональнуюОпцию("ИспользоватьУзлыОбъектовЭксплуатации");
	
	ВозможнаДетализацияПоУзлам =
		ИспользоватьУзлыОбъектовЭксплуатации
		И ЗначениеЗаполнено(Объект.ОбъектЭксплуатации)
		И Не Запрос.Выполнить().Пустой()
	
КонецПроцедуры

// Обновляет списки выбора ремонта в табличных частях материалов/работ и трудозатрат
// 		по данным табличной части ремонтов.
//
&НаСервере
Процедура ОбновитьСпискиВыбораРемонта()
	
	ШаблонПредставленияРемонта = НСтр("ru = '%НомерСтроки%. %ВидРемонта%';
										|en = '%НомерСтроки%. %ВидРемонта%'");
	Если ВозможнаДетализацияПоУзлам Тогда
		ШаблонПредставленияРемонта = НСтр("ru = '%НомерСтроки%. %ОбъектИлиУзел%, %ВидРемонта%';
											|en = '%НомерСтроки%. %ОбъектИлиУзел%, %ВидРемонта%'");
	КонецЕсли;
	
	СоответствиеРемонтов = Новый Соответствие;
	Элементы.МатериалыИРаботыКодРемонта.СписокВыбора.Очистить();
	Элементы.ТрудозатратыКодРемонта.СписокВыбора.Очистить();
	Для Каждого СтрокаРемонта Из Объект.Ремонты Цикл
		
		Если СтрокаРемонта.КодРемонта = 0 Тогда
			Объект.МаксимальныйКодРемонта = Объект.МаксимальныйКодРемонта + 1;
			СтрокаРемонта.КодРемонта = Объект.МаксимальныйКодРемонта;
		КонецЕсли;
		
		СтруктураРемонта = Новый Структура("ПредставлениеРемонта");
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(ШаблонПредставленияРемонта, "%НомерСтроки%", СтрокаРемонта.НомерСтроки);
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(СтруктураРемонта.ПредставлениеРемонта, "%ОбъектИлиУзел%", ?(ЗначениеЗаполнено(СтрокаРемонта.Узел),СтрокаРемонта.Узел, Объект.ОбъектЭксплуатации));
		СтруктураРемонта.ПредставлениеРемонта = СтрЗаменить(СтруктураРемонта.ПредставлениеРемонта, "%ВидРемонта%", ?(ЗначениеЗаполнено(СтрокаРемонта.ВидРемонта),СтрокаРемонта.ВидРемонта, ПредставлениеПроизвольногоРемонта));
		СоответствиеРемонтов.Вставить(СтрокаРемонта.КодРемонта, СтруктураРемонта);
		
		Элементы.МатериалыИРаботыКодРемонта.СписокВыбора.Добавить(СтрокаРемонта.КодРемонта, СтруктураРемонта.ПредставлениеРемонта);
		Элементы.ТрудозатратыКодРемонта.СписокВыбора.Добавить(СтрокаРемонта.КодРемонта, СтруктураРемонта.ПредставлениеРемонта);
	КонецЦикла;
	
	Ремонты = Новый ФиксированноеСоответствие(СоответствиеРемонтов);
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("Трудозатраты");
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиСтрокиСервер()
	
	СтруктураОтмененнойСтроки = Новый Структура("Отменено", Истина);
	
	Для Каждого ИдентификаторСтроки Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураОтмененнойСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция ОтменитьНевыполненныеСтрокиТрудозатратСервер(Знач ПроверятьОстатки = Ложь)
	
	КоличествоОтмененныхСтрок = Документы.ЗаказНаРемонт.ОтменитьНевыполненныеСтрокиТрудозатрат(Объект, ПроверятьОстатки);
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСкладПоНастройкамПередачиМатериалов()
	
	МассивСтрок = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.МатериалыИРаботы.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.МатериалыИРаботы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЦикла;
	
	Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(Объект, МассивСтрок);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров(ИдентификаторСтроки=Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	(ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО)) - 1 КАК ИндексСтроки,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.РабочийЦентр КАК Справочник.РабочиеЦентры) КАК РабочийЦентр,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ДатаНачала КАК ДАТА) КАК ДатаНачала,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ДатаЗавершения КАК ДАТА) КАК ДатаЗавершения
		|ПОМЕСТИТЬ РабочиеЦентры
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеЦентры.ИндексСтроки КАК ИндексСтроки,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ДоступностьВидовРабочихЦентров.ЭтоДвижениеВводаДоступности
		|				ТОГДА 2
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КартинкаДоступности
		|ИЗ
		|	РабочиеЦентры КАК РабочиеЦентры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДоступностьВидовРабочихЦентров КАК ДоступностьВидовРабочихЦентров
		|		ПО РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра = ДоступностьВидовРабочихЦентров.ВидРабочегоЦентра
		|			И (ДоступностьВидовРабочихЦентров.ДатаИнтервала МЕЖДУ ВЫБОР
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, ДЕНЬ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, НЕДЕЛЯ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаНачала, ЧАС)
		|			КОНЕЦ И ВЫБОР
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.День)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, ДЕНЬ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Неделя)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, НЕДЕЛЯ)
		|				КОГДА РабочиеЦентры.РабочийЦентр.ВидРабочегоЦентра.Подразделение.ИнтервалПланирования = ЗНАЧЕНИЕ(Перечисление.ТочностьГрафикаПроизводства.Месяц)
		|					ТОГДА НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, МЕСЯЦ)
		|				ИНАЧЕ НАЧАЛОПЕРИОДА(РабочиеЦентры.ДатаЗавершения, ЧАС)
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	РабочиеЦентры.ИндексСтроки");
	
	МассивСтрок = Неопределено;
	Если ИдентификаторСтроки <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Объект.РабочиеЦентры.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.РабочиеЦентры.Выгрузить(МассивСтрок));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Объект.РабочиеЦентры[Выборка.ИндексСтроки];
		СтрокаТаблицы.КартинкаДоступности = Выборка.КартинкаДоступности;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПодбораРемонтов()
	
	Если ТребуетсяОбновитьСпискиВыбораРемонта Тогда
		ОбновитьСпискиВыбораРемонта();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	ПараметрыФормы.Вставить("Таблицы", Новый Структура);
	
	ПараметрыФормы.Таблицы.Вставить("Ремонты", ПоместитьВоВременноеХранилище(Объект.Ремонты.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ОбработкаПодбораРемонтов(СтруктураТаблиц)
	
	РемонтыИзПодбора = ПолучитьИзВременногоХранилища(СтруктураТаблиц.Ремонты);
	
	Объект.Ремонты.Загрузить(РемонтыИзПодбора);
	
	ЗаполнитьСтатьюЗатрат(Новый Структура("КодРемонта", 0));
	
	ТребуетсяОбновитьСпискиВыбораРемонта = Истина;
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыРаботыПоРемонтам()
	
	Объект.МатериалыИРаботы.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.КодРемонта КАК ЧИСЛО) КАК КодРемонта
		|ПОМЕСТИТЬ ДанныеЗаполнения
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРемонтовМатериалыИРаботы.Номенклатура,
		|	ВидыРемонтовМатериалыИРаботы.Характеристика,
		|	ВидыРемонтовМатериалыИРаботы.Упаковка,
		|	ВидыРемонтовМатериалыИРаботы.КоличествоУпаковок,
		|	ВидыРемонтовМатериалыИРаботы.Количество,
		|	ДанныеЗаполнения.КодРемонта КАК КодРемонта
		|ИЗ
		|	ДанныеЗаполнения КАК ДанныеЗаполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов.МатериалыИРаботы КАК ВидыРемонтовМатериалыИРаботы
		|		ПО ДанныеЗаполнения.ВидРемонта = ВидыРемонтовМатериалыИРаботы.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеЗаполнения.НомерСтроки");
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.Ремонты.Выгрузить( ,"НомерСтроки, ВидРемонта, КодРемонта"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.МатериалыИРаботы.Загрузить(Результат.Выгрузить());
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	
	Документы.ЗаказНаРемонт.ЗаполнитьСкладПоНастройкамПередачиМатериалов(Объект);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, ПараметрыЗаполненияСлужебныхРеквизитов());
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Истина);
	ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(Объект.МатериалыИРаботы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТрудозатратыПоРемонтам()
	
	Объект.Трудозатраты.Очистить();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта,
		|	ВЫРАЗИТЬ(ДанныеЗаполнения.КодРемонта КАК ЧИСЛО) КАК КодРемонта
		|ПОМЕСТИТЬ ДанныеЗаполнения
		|ИЗ
		|	&ДанныеЗаполнения КАК ДанныеЗаполнения
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыРемонтовТрудозатраты.ВидРабот,
		|	ВидыРемонтовТрудозатраты.Количество,
		|	ДанныеЗаполнения.КодРемонта КАК КодРемонта
		|ИЗ
		|	ДанныеЗаполнения КАК ДанныеЗаполнения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыРемонтов.Трудозатраты КАК ВидыРемонтовТрудозатраты
		|		ПО ДанныеЗаполнения.ВидРемонта = ВидыРемонтовТрудозатраты.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеЗаполнения.НомерСтроки");
	
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.Ремонты.Выгрузить( ,"НомерСтроки, ВидРемонта, КодРемонта"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Трудозатраты.Загрузить(Результат.Выгрузить());
	
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("Трудозатраты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставленияРемонтовВТабличнойЧасти(ИмяТабличнойЧасти)
	
	СтруктураНеУказанногоРемонта = Новый Структура("КодРемонта, ПредставлениеРемонта", 0, "");
	
	Для Каждого Строка Из Объект[ИмяТабличнойЧасти] Цикл
		Если ЗначениеЗаполнено(Строка.КодРемонта) Тогда
			
			СтруктураРемонта = Ремонты.Получить(Строка.КодРемонта);
			Если СтруктураРемонта = Неопределено Тогда
				СтруктураРемонта = СтруктураНеУказанногоРемонта;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Строка, СтруктураРемонта);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РемонтыВидРемонтаПриИзмененииНаСервере()

	ЗаполнитьСтатьюЗатрат(Элементы.Ремонты.ТекущаяСтрока);

	НастроитьЗависимыеЭлементыФормыНаСервере("Ремонты");
	
КонецПроцедуры
 
// Заполняет статью затрат табличной части "Ремонты" по настройкам отражения расходов.
//
// Параметры:
// 		ОтборСтрок - Число, Структура - Числовой идентификатор строки к заполнению или структура, по которой должны быть отобраны строки к заполнению.
//
&НаСервере
Процедура ЗаполнитьСтатьюЗатрат(Знач ОтборСтрок = Неопределено)
	
	Если ОтборСтрок <> Неопределено
		И ТипЗнч(ОтборСтрок) = Тип("Число") Тогда
		
		ИдентификаторСтроки = ОтборСтрок;
		
		ОтборСтрок = Новый Массив;
		ОтборСтрок.Добавить(Объект.Ремонты.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(&ОбъектЭксплуатации КАК Справочник.ОбъектыЭксплуатации) КАК ОбъектЭксплуатации,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.Узел КАК Справочник.УзлыОбъектовЭксплуатации) КАК Узел,
	|	ВЫРАЗИТЬ(ДанныеЗаполнения.ВидРемонта КАК Справочник.ВидыРемонтов) КАК ВидРемонта
	|ПОМЕСТИТЬ ДанныеЗаполнения
	|ИЗ
	|	&ДанныеЗаполнения КАК ДанныеЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаполнения.НомерСтроки - 1 КАК ИндексСтроки,
	|	СтатьиРасходов.Ссылка КАК СтатьяРасходов
	|ИЗ
	|	ДанныеЗаполнения КАК ДанныеЗаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбщиеВидыРемонтов КАК ОбщиеВидыРемонтов
	|		ПО ДанныеЗаполнения.ВидРемонта.ОбщийВидРемонта = ОбщиеВидыРемонтов.Ссылка
	|			И (ОбщиеВидыРемонтов.ЗаданаСтатьяРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыОбъектовЭксплуатации КАК Узлы
	|		ПО ДанныеЗаполнения.Узел = Узлы.Ссылка
	|			И (Узлы.СтатьяРасходов <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|		ПО (СтатьиРасходов.Ссылка = ЕСТЬNULL(ОбщиеВидыРемонтов.СтатьяРасходов, ЕСТЬNULL(Узлы.СтатьяРасходов, ДанныеЗаполнения.ОбъектЭксплуатации.СтатьяРасходов)))
	|ГДЕ
	|	СтатьиРасходов.РасходыНаЗаказыНаРемонт";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеЗаполнения", Объект.Ремонты.Выгрузить(ОтборСтрок));
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.Ремонты[Выборка.ИндексСтроки], Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РабочиеЦентрыЗаполнитьНаСервере()
	
	Объект.РабочиеЦентры.Очистить();
	
	Если Объект.Ремонты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьРемонтыОбъектаЭксплуатации = Объект.Ремонты.НайтиСтроки(Новый Структура("Узел", Справочники.УзлыОбъектовЭксплуатации.ПустаяСсылка())).Количество()<>0;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	УзлыОбъектовЭксплуатации.Владелец КАК ОбъектЭксплуатации
		|ПОМЕСТИТЬ ОбъектПоУзлам
		|ИЗ
		|	Справочник.УзлыОбъектовЭксплуатации КАК УзлыОбъектовЭксплуатации
		|ГДЕ
		|	УзлыОбъектовЭксплуатации.Ссылка В(&МассивУзлов)
		|	И УзлыОбъектовЭксплуатации.ВлияетНаДоступностьРЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РабочиеЦентры.РабочийЦентр,
		|	&ДатаНачала КАК ДатаНачала,
		|	&ДатаЗавершения КАК ДатаЗавершения
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации.РабочиеЦентры КАК РабочиеЦентры
		|ГДЕ
		|	(РабочиеЦентры.Ссылка = &ОбъектЭксплуатации
		|				И &ЕстьРемонтыОбъектаЭксплуатации
		|			ИЛИ РабочиеЦентры.Ссылка В
		|				(ВЫБРАТЬ
		|					ОбъектПоУзлам.ОбъектЭксплуатации
		|				ИЗ
		|					ОбъектПоУзлам КАК ОбъектПоУзлам))");
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаЗавершения", Объект.ДатаЗавершения);
	
	Запрос.УстановитьПараметр("ОбъектЭксплуатации", Объект.ОбъектЭксплуатации);
	Запрос.УстановитьПараметр("МассивУзлов", ?(ЕстьРемонтыОбъектаЭксплуатации, Новый Массив, Объект.Ремонты.Выгрузить(, "Узел").ВыгрузитьКолонку("Узел")));
	Запрос.УстановитьПараметр("ЕстьРемонтыОбъектаЭксплуатации", ЕстьРемонтыОбъектаЭксплуатации);
	
	Объект.РабочиеЦентры.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьДанныеИнформацииТаблицыРабочихЦентров();
	
КонецПроцедуры

// Дополняет структуру действиями при изменении количества упаковок
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

// Возвращает параметры заполнения служебных реквизитов по номенклатуре,
// 		требуемые как параметр процедуры "НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции".
//
&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияСлужебныхРеквизитов()
	
	Параметры = Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры");
	
	Параметры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	Параметры.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	Возврат Параметры;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПравоДоступаТрудозатраты()
	
	Возврат (
		ПравоДоступа("Чтение", Метаданные.Справочники.Бригады)
		И ПравоДоступа("Чтение", Метаданные.Справочники.ВидыРаботСотрудников));
	
КонецФункции

&НаСервере
Функция ОтменитьНеотработанныеСервер()
	
	СтруктураКорректировкиСтрокЗаказа = ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа();
	СтруктураКорректировкиСтрокЗаказа.ОтменитьНеотработанныеСтроки = Истина;
	СтруктураКорректировкиСтрокЗаказа.ИмяТабличнойЧасти = "МатериалыИРаботы";
	
	Возврат СкорректироватьСтрокиЗаказа(СтруктураКорректировкиСтрокЗаказа);
	
КонецФункции

&НаСервере
Функция СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ЗаказОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки = ЗаказОбъект.Статус <> Перечисления.СтатусыЗаказовНаРемонт.Создан;
	
	СтруктураРезультата = ЗаказОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовНаРемонт.Закрыт;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаказОбъект, "Объект");
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы, ПараметрыЗаполненияСлужебныхРеквизитов());
	ЗаполнитьПредставленияРемонтовВТабличнойЧасти("МатериалыИРаботы");
	
	Модифицированность = Истина;
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Ремонты")
		ИЛИ ОбновитьВсе Тогда
		
		СписокВидовРемонтов = Новый Массив;
		Для каждого ДанныеСтроки Из Объект.Ремонты Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ВидРемонта)
				И СписокВидовРемонтов.Найти(ДанныеСтроки.ВидРемонта) = Неопределено Тогда
				СписокВидовРемонтов.Добавить(ДанныеСтроки.ВидРемонта);
			КонецЕсли; 
		КонецЦикла;
		
		Если СписокВидовРемонтов.Количество() <> 0 Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВидыРемонтов.ОбщийВидРемонта КАК ОбщийВидРемонта
			|ИЗ
			|	Справочник.ВидыРемонтов КАК ВидыРемонтов
			|ГДЕ
			|	ВидыРемонтов.Ссылка В (&СписокВидовРемонтов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВидыРемонтов.ОбщийВидРемонта.Наименование";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("СписокВидовРемонтов", СписокВидовРемонтов);
			
			ДоступныеОбщиеВидыРемонтов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбщийВидРемонта");
			Элементы.ОбщийВидРемонта.СписокВыбора.ЗагрузитьЗначения(ДоступныеОбщиеВидыРемонтов);
			Элементы.ОбщийВидРемонта.РежимВыбораИзСписка = Истина;
			
			Если НЕ ОбновитьВсе
				И ДоступныеОбщиеВидыРемонтов.Найти(Объект.ОбщийВидРемонта) = Неопределено Тогда
				Если ДоступныеОбщиеВидыРемонтов.Количество() = 1 Тогда
					Объект.ОбщийВидРемонта = ДоступныеОбщиеВидыРемонтов[0];
				Иначе
					Объект.ОбщийВидРемонта = Неопределено;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе
			Элементы.ОбщийВидРемонта.СписокВыбора.Очистить();
			Элементы.ОбщийВидРемонта.РежимВыбораИзСписка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
