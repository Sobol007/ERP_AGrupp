#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Заполнение

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.КИсполнению);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПереработчикам.Закрыт);
	
	Возврат МассивДопустимыхСтатусов;
	
КонецФункции

// Заполняет возвратные отходы, сырье и материалы по спецификациям продукции
//
// Параметры:
//  СписокПродукции	 - Массив, ТабличнаяЧасть - список строк продукции
//  Объект			 - ДокументОбъект, ДанныеФормыСтруктура - заказ.
//
Процедура ЗаполнитьВозвратныеОтходыИМатериалыПоСпецификации(СписокПродукции, Объект) Экспорт
	
	СписокНоменклатуры = Новый Массив;
	
	Для каждого ТекущиеДанные Из СписокПродукции Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Спецификация) ИЛИ ТекущиеДанные.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
		
		ДанныеПоНоменклатуре.Номенклатура    = ТекущиеДанные.Номенклатура;
		ДанныеПоНоменклатуре.Характеристика  = ТекущиеДанные.Характеристика;
		ДанныеПоНоменклатуре.Спецификация    = ТекущиеДанные.Спецификация;
		ДанныеПоНоменклатуре.Количество      = ТекущиеДанные.Количество;
		ДанныеПоНоменклатуре.ПоляГруппировки = Новый Структура("НомерГруппыЗатрат", ТекущиеДанные.НомерГруппыЗатрат);
		
		СписокНоменклатуры.Добавить(ДанныеПоНоменклатуре);
		
	КонецЦикла;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Ложь);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата",
		ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС"), Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	СтруктураПараметровДействия = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
	СтруктураПараметровДействия.Вставить("ВидЦены", Объект.ВидЦены);
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия);
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		,
		,
		ОбеспечениеПроизводства.ВариантЗаполненияОбеспеченияПоВерсииПроизводства());
	
	ПараметрыВыборки.ПолучитьСведенияАвтовыбора = Ложь;
	ПараметрыВыборки.ПолучитьПредставления      = Ложь;
	ПараметрыВыборки.ДоступныРаботы             = Ложь;
	ПараметрыВыборки.ГруппироватьДанные         = Истина;
	ПараметрыВыборки.ПоляГруппировки            = Новый Структура("НомерГруппыЗатрат");
	
	ДанныеСпецификаций = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(СписокНоменклатуры, ПараметрыВыборки);
	
	ИмяПоляГруппаЗатрат = ПереработкаНаСторонеКлиентСервер.ИмяПоляГруппаЗатратВЗаказеПереработчику(Объект);
	
	ТаблицаВозвратныеОтходы = Объект.ВозвратныеОтходы.Выгрузить();
	ТаблицаМатериалы        = Объект.Материалы.Выгрузить();
	
	Для каждого СтруктураДанных Из ДанныеСпецификаций Цикл
		
		Если СтруктураДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Справочники.РесурсныеСпецификации.ИсключитьПроизводимыеНаЭтапеПолуфабрикаты(СтруктураДанных.МатериалыИУслуги, СтруктураДанных.ВозвратныеОтходы);
		
		// ВозвратныеОтходы
		ЗаполнитьПоНормативам(
				ТаблицаВозвратныеОтходы,
				СтруктураДанных.ВозвратныеОтходы,
				1,
				СтруктураДанных.ПоляГруппировки.НомерГруппыЗатрат,
				ИмяПоляГруппаЗатрат);
				
		// Материалы
		ЗаполнитьПоНормативам(
				ТаблицаМатериалы,
				СтруктураДанных.МатериалыИУслуги,
				1,
				СтруктураДанных.ПоляГруппировки.НомерГруппыЗатрат,
				ИмяПоляГруппаЗатрат);
				
		// Услуги
		Если НЕ СтруктураДанных.МногоэтапныйПроизводственныйПроцесс И СтруктураДанных.Этапы[0].ПроизводствоНаСтороне Тогда
			ДаннныеЭтапа = СтруктураДанных.Этапы[0];
			Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки Тогда
				Объект.Номенклатура = ДаннныеЭтапа.УслугаПереработчика;
				Объект.Характеристика = ДаннныеЭтапа.ХарактеристикаУслугиПереработчика;
				Объект.СтатьяКалькуляции = ДаннныеЭтапа.СтатьяКалькуляции;
			Иначе
				СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтруктураДанных.ПоляГруппировки.НомерГруппыЗатрат);
				СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
				Если СписокСтрок.Количество() <> 0 Тогда
					СтрокаУслуга = СписокСтрок[0];
					СтрокаУслуга.Номенклатура = ДаннныеЭтапа.УслугаПереработчика;
					СтрокаУслуга.Характеристика = ДаннныеЭтапа.ХарактеристикаУслугиПереработчика;
					СтрокаУслуга.СтатьяКалькуляции = ДаннныеЭтапа.СтатьяКалькуляции;
					
					Если ЗначениеЗаполнено(СтрокаУслуга.Номенклатура) Тогда
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаУслуга, СтруктураДействий, КэшированныеЗначения);
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
	КонецЦикла;
	
	// Сворачивание таблиц
	КолонкиСуммированияВозвратныеОтходы = КолонкиСуммирования(Объект , "ВозвратныеОтходы");
	КолонкиСуммированияМатериалы        = КолонкиСуммирования(Объект , "Материалы");
	КолонкиГруппировокВозвратныеОтходы  = КолонкиГруппировок(ТаблицаВозвратныеОтходы.Колонки , КолонкиСуммированияВозвратныеОтходы);
	КолонкиГруппировокМатериалы         = КолонкиГруппировок(ТаблицаМатериалы.Колонки        , КолонкиСуммированияМатериалы);
	
	ОбщегоНазначенияУТ.СвернутьТаблицуЗначений(
		ТаблицаВозвратныеОтходы, КолонкиГруппировокВозвратныеОтходы, КолонкиСуммированияВозвратныеОтходы, Истина);
		
	ОбщегоНазначенияУТ.СвернутьТаблицуЗначений(
		ТаблицаМатериалы, КолонкиГруппировокМатериалы, КолонкиСуммированияМатериалы, Истина);
		
	Объект.ВозвратныеОтходы.Загрузить(ТаблицаВозвратныеОтходы);
	Объект.Материалы.Загрузить(ТаблицаМатериалы);
	
	// Заполнение даты отгрузки
	ОбеспечениеСервер.ЗаполнитьДатыОтгрузкиПоСпособуОбеспечения(Объект.Материалы);
	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = ОбеспечениеСервер.МаксимальноеЗначениеВКоллекции(Объект.Материалы, "ДатаОтгрузки", '00010101');
	КонецЕсли; 
	
КонецПроцедуры

//++ НЕ УТКА

// Заполняет документ по этапам заказа на производство
//
// Параметры:
//  ВыбранныеЭтапыГрафика	- Массив - содержит структуру описывающую этапы графика, по которым нужно заполнить документ
//  Объект					- ДокументОбъект, ДанныеФормыСтруктура - документ который нужно заполнить
//  НомераГруппыЗатрат		- Массив - можно передать номера группы затрат, чтобы заполнить только возвратные отходы, сырье и материалы по продукции.
//
Процедура ЗаполнитьПоЗаказуНаПроизводство(ВыбранныеЭтапыГрафика, Объект, НомераГруппыЗатрат = Неопределено) Экспорт
	
	Если ВыбранныеЭтапыГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПоляГруппаЗатрат = ПереработкаНаСторонеКлиентСервер.ИмяПоляГруппаЗатратВЗаказеПереработчику(Объект);
	
	// Запрос
	#Область Запрос
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// 0
	"ВЫБРАТЬ
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|	ЭтапыГрафика.Распоряжение          КАК Распоряжение
	|ПОМЕСТИТЬ ЭтапыГрафика
	|ИЗ
	|	&ЭтапыГрафика КАК ЭтапыГрафика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	КодСтрокиЭтапыГрафик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1. ПродукцияКЗаказу
	|ВЫБРАТЬ
	|	ЭтапыГрафика.ЗаказНаПроизводство   КАК ЗаказНаПроизводство,
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|	ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|	ЭтапыГрафика.Характеристика        КАК Характеристика,
	|	СУММА(ЭтапыГрафика.Количество)     КАК Количество
	|ПОМЕСТИТЬ ПродукцияКЗаказу
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЭтапыГрафика.ЗаказНаПроизводство   КАК ЗаказНаПроизводство,
	|		ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|		ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|		ЭтапыГрафика.Характеристика        КАК Характеристика,
	|		ЭтапыГрафика.КЗаказуОстаток        КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПереработкаПоГрафикуПроизводства.Остатки(
	|			,
	|			(ЗаказНаПроизводство, КодСтрокиЭтапыГрафик) В
	|				(ВЫБРАТЬ
	|					ЭтапыГрафика.Распоряжение,
	|					ЭтапыГрафика.КодСтрокиЭтапыГрафик
	|				ИЗ
	|					ЭтапыГрафика)) КАК ЭтапыГрафика
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЭтапыГрафика.ЗаказНаПроизводство   КАК ЗаказНаПроизводство,
	|		ЭтапыГрафика.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|		ЭтапыГрафика.Номенклатура          КАК Номенклатура,
	|		ЭтапыГрафика.Характеристика        КАК Характеристика,
	|		ЭтапыГрафика.КЗаказу               КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПереработкаПоГрафикуПроизводства КАК ЭтапыГрафика
	|	ГДЕ
	|		ЭтапыГрафика.Регистратор = &Ссылка
	|		И ЭтапыГрафика.Активность
	|		И (ЭтапыГрафика.ЗаказНаПроизводство, ЭтапыГрафика.КодСтрокиЭтапыГрафик) В
	|					(ВЫБРАТЬ
	|						ЭтапыГрафика.Распоряжение,
	|						ЭтапыГрафика.КодСтрокиЭтапыГрафик
	|					ИЗ
	|						ЭтапыГрафика)
	|	) КАК ЭтапыГрафика
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафика.ЗаказНаПроизводство,
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик,
	|	ЭтапыГрафика.Номенклатура,
	|	ЭтапыГрафика.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЭтапыГрафика.Количество) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2. ЭтапыГрафика
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыГрафика.Распоряжение                         КАК ЗаказНаПроизводство,
	|	ЭтапыГрафика.КодСтрокиЭтапыГрафик                 КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаПродукция.КодСтроки                        КАК КодСтрокиПродукция,
	|	ТаблицаЭтапы.Партнер                              КАК Партнер,
	|	ТаблицаЭтапы.УслугаПереработчика                  КАК Номенклатура,
	|	ТаблицаЭтапы.ХарактеристикаУслугиПереработчика    КАК Характеристика,
	|	ТаблицаЭтапы.СтатьяКалькуляции                    КАК СтатьяКалькуляции,
	|	ТаблицаЭтапы.Этап                                 КАК Этап,
	|	ТаблицаЭтапыГрафик.НачалоПредварительногоБуфера   КАК Начало
	|ПОМЕСТИТЬ ЭтапыПродукцииКЗаказу
	|ИЗ
	|	ЭтапыГрафика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ЭтапыГрафика.Распоряжение)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ЭтапыГрафика.КодСтрокиЭтапыГрафик)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Этапы КАК ТаблицаЭтапы
	|		ПО ТаблицаЭтапыГрафик.Ссылка = ТаблицаЭтапы.Ссылка
	|			И ТаблицаЭтапыГрафик.КлючСвязиЭтапы = ТаблицаЭтапы.КлючСвязи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ТаблицаПродукция
	|		ПО ТаблицаПродукция.Ссылка = ТаблицаЭтапы.Ссылка
	|			И ТаблицаПродукция.КлючСвязи = ТаблицаЭтапы.КлючСвязиПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3. Услуги
	|ВЫБРАТЬ
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство       КАК Распоряжение,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик      КАК КодСтрокиЭтапыГрафик,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиПродукция        КАК КодСтрокиПродукция,
	|	ЭтапыПродукцииКЗаказу.Партнер                   КАК Партнер,
	|	ЭтапыПродукцииКЗаказу.Номенклатура              КАК Номенклатура,
	|	ЭтапыПродукцииКЗаказу.Характеристика            КАК Характеристика,
	|	ЭтапыПродукцииКЗаказу.СтатьяКалькуляции         КАК СтатьяКалькуляции,
	|	ЭтапыПродукцииКЗаказу.Этап                      КАК Этап,
	|	ЭтапыПродукцииКЗаказу.Этап.Владелец             КАК Спецификация,
	|	ЭтапыПродукцииКЗаказу.Начало                    КАК Начало
	|ИЗ
	|	ЭтапыПродукцииКЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4. ПродукцияКЗаказу
	|ВЫБРАТЬ
	|	ПродукцияКЗаказу.ЗаказНаПроизводство   КАК Распоряжение,
	|	ПродукцияКЗаказу.КодСтрокиЭтапыГрафик  КАК КодСтрокиЭтапыГрафик,
	|	ПродукцияКЗаказу.Номенклатура          КАК Номенклатура,
	|	ПродукцияКЗаказу.Характеристика        КАК Характеристика,
	|	ПродукцияКЗаказу.Количество            КАК Количество
	|ИЗ
	|	ПродукцияКЗаказу КАК ПродукцияКЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5. ВыходныеИзделия
	|ВЫБРАТЬ
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство                 КАК Распоряжение,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик                КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаВыходныеИзделия.Номенклатура                       КАК Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика                     КАК Характеристика,
	|	ТаблицаВыходныеИзделия.Назначение                         КАК Назначение,
	|	ТаблицаВыходныеИзделия.Упаковка                           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1)    КАК КоэффициентУпаковки,
	|	ТаблицаВыходныеИзделия.Склад                              КАК Получатель,
	|	ТаблицаВыходныеИзделия.ДоляСтоимости                      КАК ДоляСтоимости,
	|	СУММА(ТаблицаВыходныеИзделияГрафик.КоличествоУпаковок)    КАК КоличествоУпаковок,
	|	СУММА(ТаблицаВыходныеИзделияГрафик.Количество)            КАК Количество
	|ИЗ
	|	ЭтапыПродукцииКЗаказу КАК ЭтапыПродукцииКЗаказу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделияГрафик КАК ТаблицаВыходныеИзделияГрафик
	|		ПО (ТаблицаВыходныеИзделияГрафик.Ссылка = ТаблицаЭтапыГрафик.Ссылка)
	|			И (ТаблицаВыходныеИзделияГрафик.КлючСвязиЭтапыГрафик = ТаблицаЭтапыГрафик.КлючСвязи)
	|			И (ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВыходныеИзделия КАК ТаблицаВыходныеИзделия
	|		ПО (ТаблицаВыходныеИзделия.Ссылка = ТаблицаВыходныеИзделияГрафик.Ссылка)
	|			И (ТаблицаВыходныеИзделия.КлючСвязи = ТаблицаВыходныеИзделияГрафик.КлючСвязиВыходныеИзделия)
	|			И (ТаблицаВыходныеИзделия.КлючСвязиПродукция = ТаблицаВыходныеИзделияГрафик.КлючСвязиПродукция)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик,
	|	ТаблицаВыходныеИзделия.Номенклатура,
	|	ТаблицаВыходныеИзделия.Характеристика,
	|	ТаблицаВыходныеИзделия.Назначение,
	|	ТаблицаВыходныеИзделия.Упаковка,
	|	ТаблицаВыходныеИзделия.ДоляСтоимости,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиПродукция, 1),
	|	ТаблицаВыходныеИзделия.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 6. ВозвратныеОтходы
	|ВЫБРАТЬ
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство                  КАК Распоряжение,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик                 КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаВозвратныеОтходы.Номенклатура                       КАК Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика                     КАК Характеристика,
	|	ТаблицаВозвратныеОтходы.Назначение                         КАК Назначение,
	|	ТаблицаВозвратныеОтходы.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
	|	ТаблицаВозвратныеОтходы.Упаковка                           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиОтходы, 1)        КАК КоэффициентУпаковки,
	|	ТаблицаВозвратныеОтходы.Склад                              КАК Получатель,
	|	СУММА(ТаблицаВозвратныеОтходыГрафик.КоличествоУпаковок)    КАК КоличествоУпаковок,
	|	СУММА(ТаблицаВозвратныеОтходыГрафик.Количество)            КАК Количество
	|ИЗ
	|	ЭтапыПродукцииКЗаказу КАК ЭтапыПродукцииКЗаказу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходыГрафик КАК ТаблицаВозвратныеОтходыГрафик
	|		ПО (ТаблицаВозвратныеОтходыГрафик.Ссылка = ТаблицаЭтапыГрафик.Ссылка)
	|			И (ТаблицаВозвратныеОтходыГрафик.КлючСвязиЭтапыГрафик = ТаблицаЭтапыГрафик.КлючСвязи)
	|			И (ТаблицаВозвратныеОтходыГрафик.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО (ТаблицаВозвратныеОтходы.Ссылка = ТаблицаВозвратныеОтходыГрафик.Ссылка)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязи = ТаблицаВозвратныеОтходыГрафик.КлючСвязиВозвратныеОтходы)
	|			И (ТаблицаВозвратныеОтходы.КлючСвязиПродукция = ТаблицаВозвратныеОтходыГрафик.КлючСвязиПродукция)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик,
	|	ТаблицаВозвратныеОтходы.Номенклатура,
	|	ТаблицаВозвратныеОтходы.Характеристика,
	|	ТаблицаВозвратныеОтходы.Назначение,
	|	ТаблицаВозвратныеОтходы.СтатьяКалькуляции,
	|	ТаблицаВозвратныеОтходы.Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиОтходы, 1),
	|	ТаблицаВозвратныеОтходы.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 7. МатериалыИУслуги
	|ВЫБРАТЬ
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство                  КАК Распоряжение,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик                 КАК КодСтрокиЭтапыГрафик,
	|	ТаблицаМатериалыИУслуги.Номенклатура                       КАК Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика                     КАК Характеристика,
	|	ТаблицаМатериалыИУслуги.Назначение                         КАК Назначение,
	|	ТаблицаМатериалыИУслуги.Упаковка                           КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиМатериалы, 1)     КАК КоэффициентУпаковки,
	|	ТаблицаМатериалыИУслуги.Склад                              КАК Склад,
	|	ТаблицаМатериалыИУслуги.СтатьяКалькуляции                  КАК СтатьяКалькуляции,
	|	ТаблицаМатериалыИУслуги.ВариантОбеспечения                 КАК ВариантОбеспечения,
	|	МАКСИМУМ(
	|		ВЫБОР 
	|			КОГДА ТаблицаМатериалыИУслуги.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|					И ТаблицаМатериалыИУслуги.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|					И ТаблицаМатериалыИУслуги.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	|					И ТаблицаМатериалыИУслуги.Упаковка.ТипИзмеряемойВеличины В (ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес),
	|																				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем),
	|																				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь),
	|																				ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ)                                                 КАК КоличествоОкруглено,
	|	СУММА(ТаблицаМатериалыИУслугиГрафик.КоличествоУпаковок)    КАК КоличествоУпаковок,
	|	СУММА(ТаблицаМатериалыИУслугиГрафик.Количество)            КАК Количество
	|ИЗ
	|	ЭтапыПродукцииКЗаказу КАК ЭтапыПродукцииКЗаказу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.ЭтапыГрафик КАК ТаблицаЭтапыГрафик
	|		ПО (ТаблицаЭтапыГрафик.Ссылка = ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство)
	|			И (ТаблицаЭтапыГрафик.КодСтроки = ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслугиГрафик КАК ТаблицаМатериалыИУслугиГрафик
	|		ПО (ТаблицаМатериалыИУслугиГрафик.Ссылка = ТаблицаЭтапыГрафик.Ссылка)
	|			И (ТаблицаМатериалыИУслугиГрафик.КлючСвязиЭтапыГрафик = ТаблицаЭтапыГрафик.КлючСвязи)
	|			И (ТаблицаМатериалыИУслугиГрафик.КлючСвязиПродукция = ТаблицаЭтапыГрафик.КлючСвязиПродукция)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.МатериалыИУслуги КАК ТаблицаМатериалыИУслуги
	|		ПО (ТаблицаМатериалыИУслуги.Ссылка = ТаблицаМатериалыИУслугиГрафик.Ссылка)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязи = ТаблицаМатериалыИУслугиГрафик.КлючСвязиМатериалыИУслуги)
	|			И (ТаблицаМатериалыИУслуги.КлючСвязиПродукция = ТаблицаМатериалыИУслугиГрафик.КлючСвязиПродукция)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПродукцииКЗаказу.ЗаказНаПроизводство,
	|	ЭтапыПродукцииКЗаказу.КодСтрокиЭтапыГрафик,
	|	ТаблицаМатериалыИУслуги.Номенклатура,
	|	ТаблицаМатериалыИУслуги.Характеристика,
	|	ТаблицаМатериалыИУслуги.Назначение,
	|	ТаблицаМатериалыИУслуги.ВариантОбеспечения,
	|	ТаблицаМатериалыИУслуги.СтатьяКалькуляции,
	|	ТаблицаМатериалыИУслуги.Упаковка,
	|	ТаблицаМатериалыИУслуги.Склад,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковкиМатериалы, 1)";
	#КонецОбласти
	
	ЭтапыГрафика = Новый ТаблицаЗначений;
	ЭтапыГрафика.Колонки.Добавить("Распоряжение", Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство"));
	ЭтапыГрафика.Колонки.Добавить("КодСтрокиЭтапыГрафик", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	Для каждого ДанныеЭтапа Из ВыбранныеЭтапыГрафика Цикл
		ЗаполнитьЗначенияСвойств(ЭтапыГрафика.Добавить(), ДанныеЭтапа);
	КонецЦикла;
	ЭтапыГрафика.Свернуть("Распоряжение,КодСтрокиЭтапыГрафик");
	Запрос.УстановитьПараметр("ЭтапыГрафика", ЭтапыГрафика);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиПродукция",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаВыходныеИзделия.Упаковка",
		"ТаблицаВыходныеИзделия.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиОтходы",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаВозвратныеОтходы.Упаковка",
		"ТаблицаВозвратныеОтходы.Номенклатура"));
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковкиМатериалы",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТаблицаМатериалыИУслуги.Упаковка",
		"ТаблицаМатериалыИУслуги.Номенклатура"));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыходныеИзделияЗаказов = Результат[5].Выгрузить();
	
	ВозвратныеОтходыЗаказов = Результат[6].Выгрузить();
	ВозвратныеОтходыЗаказов.Индексы.Добавить("Распоряжение,КодСтрокиЭтапыГрафик");
	
	МатериалыЗаказов = Результат[7].Выгрузить();
	МатериалыЗаказов.Индексы.Добавить("Распоряжение,КодСтрокиЭтапыГрафик");
	
	Если НомераГруппыЗатрат = Неопределено Тогда
		
		НомераГруппыЗатрат = Новый Массив;
		
		// Услуги
		СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС",Ложь);
		НалогообложениеНДС = ?(ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность),
			Объект.ЗакупкаПодДеятельность, Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Объект.Дата));
		
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		
		Выборка = Результат[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект.МаксимальныйНомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
			
			СтрокаУслуга = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаУслуга, Выборка);
			
			СтрокаУслуга.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаУслуга, СтруктураДействий, Неопределено);
			НомераГруппыЗатрат.Добавить(СтрокаУслуга.НомерГруппыЗатрат);
		КонецЦикла;
		
		// Продукция заполняется по остаткам к заказу
		ВыборкаПродукция = Результат[4].Выбрать();
		Пока ВыборкаПродукция.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
	  		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПродукция);
			СписокСтрок = Объект.Услуги.НайтиСтроки(СтруктураПоиска);
			НомерГруппыЗатрат = СписокСтрок[0].НомерГруппыЗатрат;
			
			// Нужно взять выходные изделя заказа, чтобы строки были как в заказе
			// И распределить остаток к заказу между этими строками.
			МассивКоэффициентов = Новый Массив;
			
			СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик,Номенклатура,Характеристика");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаПродукция);
	  		СписокСтрок = ВыходныеИзделияЗаказов.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаИзделиеЗаказа Из СписокСтрок Цикл
				МассивКоэффициентов.Добавить(СтрокаИзделиеЗаказа.Количество);
			КонецЦикла; 
			
			РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ВыборкаПродукция.Количество, 
												МассивКоэффициентов);
												
			Если РезультатРаспределения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Для Сч = 0 По РезультатРаспределения.ВГраница() Цикл
				КоличествоИзделия = РезультатРаспределения[Сч];
				СтрокаИзделиеЗаказа = СписокСтрок[Сч];
				
				СтрокаПродукция = Объект.Продукция.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПродукция, СтрокаИзделиеЗаказа);
				СтрокаПродукция.НомерГруппыЗатрат = НомерГруппыЗатрат;
				
				СтрокаПродукция.Количество = КоличествоИзделия;
				СтрокаПродукция.КоличествоУпаковок = СтрокаПродукция.Количество / СтрокаИзделиеЗаказа.КоэффициентУпаковки;
			КонецЦикла; 
			
		КонецЦикла;
	
	КонецЕсли; 

	// ВозвратныеОтходы, Материалы
	
	ВыходныеИзделияЗаказовКопия = ВыходныеИзделияЗаказов.Скопировать();
	ВыходныеИзделияЗаказовКопия.Свернуть("Распоряжение,КодСтрокиЭтапыГрафик,Номенклатура,Характеристика", "Количество");
	Для каждого СтрокаУслуга Из Объект.Услуги Цикл
		Если НомераГруппыЗатрат <> Неопределено И НомераГруппыЗатрат.Найти(СтрокаУслуга.НомерГруппыЗатрат) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", СтрокаУслуга.НомерГруппыЗатрат);
  		ФактическаяПродукция = Объект.Продукция.Выгрузить(СтруктураПоиска, "Номенклатура,Характеристика,Количество");
		ФактическаяПродукция.Свернуть("Номенклатура,Характеристика", "Количество");
		
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
	  	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
  		НормативнаяПродукция = ВыходныеИзделияЗаказовКопия.Скопировать(СтруктураПоиска);
		КоэффициентНормативов = КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция);
		
		// ВозвратныеОтходы
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
	   	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
		Нормативы = ВозвратныеОтходыЗаказов.НайтиСтроки(СтруктураПоиска);
		ЗаполнитьПоНормативам(
			Объект.ВозвратныеОтходы, 
			Нормативы, 
			КоэффициентНормативов, 
			СтрокаУслуга[ИмяПоляГруппаЗатрат], 
			ИмяПоляГруппаЗатрат);
				
		//Материалы
		СтруктураПоиска = Новый Структура("Распоряжение,КодСтрокиЭтапыГрафик");
	   	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУслуга);
		Нормативы = МатериалыЗаказов.НайтиСтроки(СтруктураПоиска);
		ЗаполнитьПоНормативам(
			Объект.Материалы, 
			Нормативы, 
			КоэффициентНормативов, 
			СтрокаУслуга[ИмяПоляГруппаЗатрат], 
			ИмяПоляГруппаЗатрат,, 
			Истина);
				
	КонецЦикла; 
	
КонецПроцедуры

// Заполняет документ по этапам производства
//
// Параметры:
//  СписокЭтапов			- Массив - содержит список этапов
//  Объект					- ДокументОбъект, ДанныеФормыСтруктура - документ который нужно заполнить.
//
// Возвращаемое значение:
// 		Массив - Массив строк таблицы добавленных при заполнении по этапам производства.
//
Функция ЗаполнитьПоЭтапамПроизводства(СписокЭтапов, Объект) Экспорт
	
	Если СписокЭтапов.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                 КАК Распоряжение,
	|	ДанныеДокумента.Этап.УслугаПереработчика               КАК Номенклатура,
	|	ДанныеДокумента.Этап.ХарактеристикаУслугиПереработчика КАК Характеристика,
	|	ДанныеДокумента.СтатьяКалькуляции                      КАК СтатьяКалькуляции,
	|	ДанныеДокумента.Этап                                   КАК Этап,
	|	ДанныеДокумента.Этап.Владелец                          КАК Спецификация,
	|	ДанныеДокумента.Назначение                             КАК Назначение,
	|	ДанныеДокумента.ЖелаемаяДатаОбеспечения                КАК ЖелаемаяДатаОбеспечения,
	|	ДанныеДокумента.ПроизводствоОднойДатой                 КАК ПроизводствоОднойДатой,
	|	ДанныеДокумента.ДатаПроизводства                       КАК ДатаПроизводства,
	|	ДанныеДокумента.НеОтгружатьЧастями                     КАК НеОтгружатьЧастями,
	|	ДанныеДокумента.ДатаОтгрузки                           КАК ДатаОтгрузки,
	|	ДанныеДокумента.ВариантПриемкиТоваров                  КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&СписокЭтапов)
	|	И (ДанныеДокумента.ЗаказПереработчику = ЗНАЧЕНИЕ(Документ.ЗаказПереработчику.ПустаяСсылка)
	|		ИЛИ ДанныеДокумента.ЗаказПереработчику = &Ссылка)";
	
	СписокЭтаповЗаказа = Объект.Услуги.Выгрузить(, "Распоряжение").ВыгрузитьКолонку("Распоряжение");
	СписокНовыхЭтапов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокЭтапов, СписокЭтаповЗаказа);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("СписокЭтапов", СписокНовыхЭтапов);
	
	Результат = Запрос.Выполнить();
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС",Ложь);
	НалогообложениеНДС = ?(ЗначениеЗаполнено(Объект.ЗакупкаПодДеятельность),
		Объект.ЗакупкаПодДеятельность, Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
		Новый Структура("НалогообложениеНДС, Дата", НалогообложениеНДС, Объект.Дата));
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	КоличествоУслугДоЗаполнения = Объект.Услуги.Количество();
	ПроизводствоОднойДатой = Истина;
	ДатаПроизводства = '000101010000';
	НеОтгружатьЧастями = Истина;
	ДатаОтгрузки = '000101010000';
	ЖелаемаяДатаОтгрузки = '000101010000';
	СписокНовыхУслуг = Новый Массив;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект.МаксимальныйНомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат + 1;
		
		СтрокаУслуга = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУслуга, Выборка);
		СтрокаУслуга.НомерГруппыЗатрат = Объект.МаксимальныйНомерГруппыЗатрат;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаУслуга, СтруктураДействий, Неопределено);
		
		Если Выборка.ДатаПроизводства = '000101010000' Тогда
			ДатаПроизводстваЭтапа = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Выборка.Распоряжение);
		Иначе
			ДатаПроизводстваЭтапа = Выборка.ДатаПроизводства;
		КонецЕсли;
		
		Если НЕ Выборка.ПроизводствоОднойДатой 
			ИЛИ ДатаПроизводства <> '000101010000'
				И ДатаПроизводства <> ДатаПроизводстваЭтапа Тогда
			ПроизводствоОднойДатой = Ложь;
		Иначе
			ДатаПроизводства = ДатаПроизводстваЭтапа;
		КонецЕсли;
		
		Если НЕ Выборка.НеОтгружатьЧастями
			ИЛИ ДатаОтгрузки <> '000101010000'
				И ДатаОтгрузки <> Выборка.ДатаОтгрузки Тогда
			НеОтгружатьЧастями = Ложь;
		Иначе
			ДатаОтгрузки = Выборка.ДатаОтгрузки;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОбеспечения) Тогда
			ЖелаемаяДатаОтгрузки = ?(ЖелаемаяДатаОтгрузки <> '000101010000',
										Мин(ЖелаемаяДатаОтгрузки, Выборка.ЖелаемаяДатаОбеспечения),
										Выборка.ЖелаемаяДатаОбеспечения);
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(Объект.ВариантПриемкиТоваров) Тогда
			Объект.ВариантПриемкиТоваров = Выборка.ВариантПриемкиТоваров;
		ИначеЕсли Объект.ВариантПриемкиТоваров <> Выборка.ВариантПриемкиТоваров Тогда
			ВызватьИсключение НСтр("ru = 'Ошибка. Попытка создания заказа переработчику по этапам производства, имеющим разные варианты приемки на ордерный склад';
									|en = 'Error. An attempt to create a tolling order by production stages which have different options of receiving to advanced warehouse.'");
		КонецЕсли;
		
		СписокНовыхУслуг.Добавить(СтрокаУслуга);
		
	КонецЦикла;
	
	Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПустаяСсылка();
	
	Если КоличествоУслугДоЗаполнения = 0 Тогда
		Объект.ПоступлениеОднойДатой = ПроизводствоОднойДатой;
		Объект.ДатаПоступления = ДатаПроизводства;
		Объект.НеОтгружатьЧастями = НеОтгружатьЧастями;
		Объект.ДатаОтгрузки = ДатаОтгрузки;
		Объект.ЖелаемаяДатаОтгрузки = ЖелаемаяДатаОтгрузки;
	КонецЕсли; 
	
	ЗаказыСервер.ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(Объект.Распоряжение, Объект.Услуги, "Распоряжение");
	
	Возврат СписокНовыхУслуг;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#Область Статус

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовПереработчикам[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка					КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка)		КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус)		КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус)						КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ										КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен					КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления			КАК ПометкаУдаления,
	|	ВЫБОР КОГДА НЕ &ИспользоватьСтатусы
	|			И НЕ ТаблицаДокументов.ПереработкаПоЗаказу 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ										КАК ЗапрещеноМенятьСтатус,
	|	ИСТИНА										КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы", ИспользоватьСтатусы);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при автосмене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка					КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка)		КАК Представление,
	|	ТаблицаДокументов.Проведен					КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления			КАК ПометкаУдаления,
	|	ВЫБОР КОГДА НЕ &ИспользоватьСтатусы
	|			И НЕ ТаблицаДокументов.ПереработкаПоЗаказу
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ										КАК ЗапрещеноМенятьСтатус,
	|	ИСТИНА										КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	ИспользоватьСтатусы = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ИспользоватьСтатусы", ИспользоватьСтатусы);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ВыборкаПроверки.ЗапрещеноМенятьСтатус Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ переработчику создан не на основании заказа на производство.';
							|en = 'The ""%Статус%"" status is not set for document %Документ% as the tolling order is generated not based on the production order.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт 
	
	Возврат "Дата";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры:
//		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение:
//		Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт 
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = ПолноеИмяОбъекта();
	ПараметрыУказанияСерий.ИмяТЧТовары = "Материалы";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Материалы";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад", Новый Структура());
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	ПараметрыУказанияСерий.РегистрироватьСерии = Ложь;
	
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|	Шапка.АдресДоставки     КАК Адрес,
	|	Шапка.АдресДоставкиЗначенияПолей
	|		                    КАК АдресЗначенияПолей,
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказПереработчику.Материалы КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад
	|
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	//++ НЕ УТКА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументЗаказ.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказПереработчику КАК ДокументЗаказ
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 ТаблицаЭтап
	|			ПО ТаблицаЭтап.ЗаказПереработчику = ДокументЗаказ.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Т
	|			ПО Т.Ссылка = ТаблицаЭтап.Ссылка
	|	ГДЕ
	|		ДокументЗаказ.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДокументЗаказ.Ссылка,
	|		Т.Склад
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	//-- НЕ УТКА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказПереработчику - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                  КАК Дата,
	|	ДанныеДокумента.Организация           КАК Организация,
	|	ДанныеДокумента.Партнер               КАК Партнер,
	|	ДанныеДокумента.Контрагент            КАК Контрагент,
	|	ДанныеДокумента.Валюта                КАК Валюта,
	|	ДанныеДокумента.Валюта                КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СуммаДокумента        КАК СуммаДокумента,
	|	ДанныеДокумента.Проведен              КАК Проведен,
	|	ДанныеДокумента.Договор               КАК Договор,
	|	ДанныеДокумента.ПорядокРасчетов       КАК ПорядокРасчетов,
	|	ДанныеДокумента.СуммаДокумента        КАК СуммаВзаиморасчетов
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Дата                  = Выборка.Дата;
		Организация           = Выборка.Организация;
		Партнер               = Выборка.Партнер;
		Контрагент            = Выборка.Контрагент;
		Договор               = Выборка.Договор;
		ПорядокРасчетов       = Выборка.ПорядокРасчетов;
		Валюта                = Выборка.Валюта;
		ВалютаВзаиморасчетов  = Выборка.ВалютаВзаиморасчетов;
		ХозяйственнаяОперация = ?(ЗначениеЗаполнено(Выборка.ХозяйственнаяОперация), 
													Выборка.ХозяйственнаяОперация, 
													Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика);
		СуммаДокумента        = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов   = Выборка.СуммаВзаиморасчетов;
	Иначе
		Дата                  = Дата(1,1,1);
		Организация           = Справочники.Организации.ПустаяСсылка();
		Партнер               = Справочники.Партнеры.ПустаяСсылка();
		Контрагент            = Справочники.Контрагенты.ПустаяСсылка();
		Договор               = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ПорядокРасчетов       = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		Валюта                = Справочники.Валюты.ПустаяСсылка();
		ВалютаВзаиморасчетов  = Справочники.Валюты.ПустаяСсылка();
		ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
		СуммаДокумента        = 0;
		СуммаВзаиморасчетов   = 0;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("Валюта", Валюта);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперация);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществялет вычисление текущего состояния заказа переработчику
//
// Параметры:
//	ЗаказПереработчику      - ДокументСсылка.ЗаказПереработчику - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов - Договор с поставщиком
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач ЗаказПереработчику,
	                          Знач Договор,
	                          СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказПереработчику) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА НЕ Заказ.Проведен ТОГДА
		|		НЕОПРЕДЕЛЕНО
		// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяСогласование)
		// ОЖИДАЕТСЯ АВАНС ДО ПОДТВЕРЖДЕНИЯ /////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И Заказ.СуммаАвансаДоПодтверждения > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < Заказ.СуммаАвансаДоПодтверждения ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяАвансДоПодтверждения)
		// ОЖИДАЕТСЯ ПОДТВЕРЖДЕНИЕ //////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|			И Заказ.СуммаДокумента > 0
		|			И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаАвансаДоПодтверждения
		|				ИЛИ Заказ.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПодтверждение)
		// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ //////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (&НеИспользоватьСтатусыЗаказов
		|				ИЛИ Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|				ИЛИ Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению))
		|			И Заказ.СуммаПредоплатыДоПоступления > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПредоплатаДоПоступления)
		// ГОТОВ К ПОСТУПЛЕНИЮ //////////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению)
		|			И Заказ.СуммаДокумента > 0
		|			И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения
		|				ИЛИ Заказ.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКПоступлению)
		// ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ //////////////////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И Заказ.СуммаДокумента > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюКонечныйОстаток, 0) > 0 ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяПоступление)
		// ОЖИДАЕТСЯ ОПЛАТА ////////////////////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И Заказ.СуммаДокумента - Заказ.СуммаАвансаДоПодтверждения - Заказ.СуммаПредоплатыДоПоступления > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0 ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ОжидаетсяОплатаПослеПоступления)
		// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт) ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.ГотовКЗакрытию)
		// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт) ИЛИ &НеИспользоватьСтатусыЗаказов ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт)
		|	КОНЕЦ КАК Состояние,
		// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА НЕ Заказ.Проведен ТОГДА
		|		ЛОЖЬ
		// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт) И НЕ &НеИспользоватьСтатусыЗаказов ТОГДА
		|		ЛОЖЬ
		// ПРОСРОЧЕНО СОГЛАСОВАНИЕ /////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован) ТОГДА
		|		ЛОЖЬ
		// ПРОСРОЧЕН АВАНС ДО ПОДТВЕРЖДЕНИЯ ////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И Заказ.СуммаАвансаДоПодтверждения > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < Заказ.СуммаАвансаДоПодтверждения
		|			И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0 ТОГДА
		|		ИСТИНА
		// ПРОСРОЧЕНО ПОДТВЕРЖДЕНИЕ ////////////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|			И Заказ.СуммаДокумента > 0
		|			И Заказ.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1,1,1)
		|			И Заказ.ДатаПервогоПоступления  < &ТекущаяДата
		|			И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаАвансаДоПодтверждения
		|				ИЛИ Заказ.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) ТОГДА
		|		ИСТИНА
		// ПРОСРОЧЕНА ПРЕДОПЛАТА ДО ПОСТУПЛЕНИЯ ////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (&НеИспользоватьСтатусыЗаказов
		|				ИЛИ Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|				ИЛИ Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению))
		|			И Заказ.СуммаПредоплатыДоПоступления > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) < Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения
		|			И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0 ТОГДА
		|		ИСТИНА
		// ПРОСРОЧЕНО ОЖИДАЕТСЯ ПОСТУПЛЕНИЕ ////////////////////////////////////////
		|	КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению)
		|			И Заказ.ДатаПервогоПоступления <> ДАТАВРЕМЯ(1,1,1)
		|			И Заказ.ДатаПервогоПоступления  < &ТекущаяДата
		|			И (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения
		|				ИЛИ Заказ.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) ТОГДА
		|		ИСТИНА
		// ПРОСРОЧЕНО ПОСТУПЛЕНИЕ //////////////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) >= Заказ.СуммаПредоплатыДоПоступления + Заказ.СуммаАвансаДоПодтверждения
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КПоступлениюОстаток, 0) > 0 ТОГДА
		|		ИСТИНА
		// ПРОСРОЧЕНА ОПЛАТА ///////////////////////////////////////////////////////
		|	КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И (Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению) ИЛИ &НеИспользоватьСтатусыЗаказов)
		|			И Заказ.СуммаДокумента - Заказ.СуммаАвансаДоПодтверждения - Заказ.СуммаПредоплатыДоПоступления > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток, 0) < 0
		|			И РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток < 0 ТОГДА
		|		ИСТИНА
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК СостояниеПросрочено,
		// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.СуммаДокумента > 0 ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаОплаты,
		// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПриемНаКомиссию)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.СуммаДокумента > 0 ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КОплатеПриход, 0) * 100 / Заказ.СуммаДокумента КАК ЧИСЛО(15, 0))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентОплаты,
		// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.СуммаДокумента > 0
		|			И ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) < 0 ТОГДА
		|		ВЫРАЗИТЬ (-ЕСТЬNULL(РасчетыСПоставщикамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаПросроченнойОплаты,
		// СУММА ПОСТУПЛЕНИЯ ////////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|			И Заказ.СуммаДокумента > 0 ТОГДА
		|		ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0)
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаПоступления,
		// ПРОЦЕНТ ПОСТУПЛЕНИЯ //////////////////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)
		|			И Заказ.СуммаДокумента > 0 ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(РасчетыСПоставщикамиОстатки.КПоступлениюРасход, 0) * 100 / Заказ.СуммаДокумента КАК ЧИСЛО(15, 0))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентПоступления,
		// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|	ВЫБОР КОГДА Заказ.Проведен
		|			И ((Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.СуммаДокумента > 0)
		|				ИЛИ Заказ.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)) ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК СуммаДолга,
		|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|			И Заказ.Проведен
		|			И Заказ.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И Заказ.СуммаДокумента > 0 ТОГДА
		|		ВЫРАЗИТЬ( (	ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|						ЕСТЬNULL(РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|					ИНАЧЕ
		|						ЕСТЬNULL(-РасчетыСПоставщикамиОстатки.СуммаКонечныйОстаток, 0)
		|					КОНЕЦ * 100 / Заказ.СуммаДокумента ) КАК ЧИСЛО(15, 0))
		|	ИНАЧЕ
		|		0
		|	КОНЕЦ КАК ПроцентДолга,
		|ВЫБОР
		|	КОГДА
		|		Заказ.Проведен И
		|		Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|	ТОГДА
		|		-РасчетыСПоставщикамиОстатки.КОплатеКонечныйОстаток
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаКОплате
		|ИЗ
		|	Документ.ЗаказПереработчику КАК Заказ
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(,,,,ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстатки
		|	ПО
		|		ИСТИНА
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрНакопления.РасчетыСПоставщиками.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказПоставщику = &РасчетныйДокумент) КАК РасчетыСПоставщикамиОстаткиНаДатуАктуальности
		|	ПО
		|		ИСТИНА
		|ГДЕ
		|	Заказ.Ссылка = &ЗаказПереработчику
		|
		|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказПереработчику, "ПорядокРасчетов");
		РасчетныйДокумент = ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказПереработчику);
		
		Запрос.УстановитьПараметр("ЗаказПереработчику",				ЗаказПереработчику);
		Запрос.УстановитьПараметр("РасчетныйДокумент",				РасчетныйДокумент);
		Запрос.УстановитьПараметр("ТекущаяДата",					НачалоДня(ТекущаяДатаСеанса()));
		Запрос.УстановитьПараметр("НеИспользоватьСтатусыЗаказов",	НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовПереработчикам"));
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
// 		Структура - Структура состояния выполнения документа.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСПоставщиками", 1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение", 2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка", 3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление", 4);
	СтруктураСостояние.Вставить("ВыводитьТаблицуПродукцияКОформлениюВОтчетеПереработчику", 5);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка", 6);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоПоступление", 7);
	СтруктураСостояние.Вставить("ВыводитьТаблицуСырьеУПереработчика", 8);
	СтруктураСостояние.Вставить("ЭтоЗаказ", Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки", Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыПоступления", ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам"));
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка", "Материалы");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление", "Продукция");
	СтруктураСостояние.Вставить("ИмяПоляСумма", "Сумма");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка", НСтр("ru = 'Сырье и материалы';
																|en = 'Materials '"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление", НСтр("ru = 'Продукция и возвратные отходы';
																	|en = 'Products and recyclable waste'"));
	СтруктураСостояние.Вставить("ТекстОтмененоОтгрузка", НСтр("ru = 'Отменена отгрузка сырья и материалов (%Кол-во%)';
																|en = 'Shipment of materials is canceled (%Кол-во%) '"));
	СтруктураСостояние.Вставить("ТекстОтмененоПоступление", НСтр("ru = 'Отменен выпуск (%Кол-во%)';
																|en = 'Release is canceled (%Кол-во%)'"));

	СтруктураДопЗапросов = Новый Структура;
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ());
	СтруктураДопЗапросов.Вставить("ТекстЗапросаТаблицаОтмененоПоступление", ТекстЗапросаТаблицаОтмененоПоступление());
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоОтгружено", "ПоказатьДокументыПередачиСырьяПереработчику");
	СтруктураСостояние.Вставить("ДействиеРасшифровкаКоличествоПоступило", "ПоказатьДокументыПоступленияОтПереработчика");
	
	Возврат СтруктураСостояние
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВозвратСырьяОтПереработчика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаказПоставщику.ДобавитьКомандуСоздатьНаОснованииПоГруппеСкладов(КомандыСозданияНаОсновании);
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ОтчетПереработчика.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПередачаСырьяПереработчику.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.ПоступлениеОтПереработчика.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПриобретениеУслугПрочихАктивов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ переработчику".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказПереработчику) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказПереработчику.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказПереработчику);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоНаСтороне";

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСПоставщиками.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	
	Отчеты.КонтрольПередачиСырьяИМатериаловПереработчику.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	Отчеты.КонтрольПоставкиПродукцииПереработчиком.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСПоставщиками.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	
	// Рабочее место
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияЗаказПереработчику(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСПоставщиками.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "РабочееМесто";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСПоставщиками.ДобавитьКомандуКарточкаРасчетовСПоставщикомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "РабочееМесто";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает заказы переработчикам, чтение и изменение которых заблокировано отложенными обработчиками обновления.
// Блокировка контролируется по заданному перечню таблиц.
//
// Параметры:
//  СписокИменТаблиц - Массив - имена объектов метаданных, по которым необходимо проверить наличие блокировок.
//		Например: "РегистрНакопления.ТоварыПолученныеОтПереработчика".
//  СписокСсылок - Массив - ссылки на заказы переработчикам, по которым будет выполнена проверка.
//		Если параметр не передан, проверка будет выполнена по всем заказам.
// 
// Возвращаемое значение:
//  Массив - массив, содержащий ссылки на заблокированные заказы.
//
Функция ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки(СписокИменТаблиц, СписокСсылок = Неопределено) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ОтложенноеОбновлениеЗавершеноУспешно") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = "";
	
	Для каждого ИмяТаблицы Из СписокИменТаблиц Цикл
		
		Если ИмяТаблицы = "РегистрНакопления.ЗаказыПоставщикам" Тогда
			
			ТекстЗапросаТаблица = 
			"ВЫБРАТЬ
			|	ТаблицаОбъекта.ЗаказПоставщику КАК СсылкаНаОбъект
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Изменения КАК ТаблицаИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикам КАК ТаблицаОбъекта
			|		ПО (ТаблицаОбъекта.Регистратор = ТаблицаИзменений.Регистратор)
			|			И (ТаблицаОбъекта.ЗаказПоставщику ССЫЛКА Документ.ЗаказПереработчику)
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И (НЕ &ОтборПоСсылкам
			|		ИЛИ ТаблицаОбъекта.ЗаказПоставщику В (&СписокСсылок))";
			
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ТоварыПолученныеОтПереработчика" Тогда	
			
			ТекстЗапросаТаблица = 
			"ВЫБРАТЬ
			|	ТаблицаОбъекта.Распоряжение КАК СсылкаНаОбъект
			|ИЗ
			|	РегистрНакопления.ТоварыПолученныеОтПереработчика.Изменения КАК ТаблицаИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПолученныеОтПереработчика КАК ТаблицаОбъекта
			|		ПО (ТаблицаОбъекта.Регистратор = ТаблицаИзменений.Регистратор)
			|			И (ТаблицаОбъекта.Распоряжение ССЫЛКА Документ.ЗаказПереработчику)
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И (НЕ &ОтборПоСсылкам
			|		ИЛИ ТаблицаОбъекта.Распоряжение В (&СписокСсылок))";
			
		ИначеЕсли ИмяТаблицы = "РегистрНакопления.ТоварыКОтгрузке" Тогда	
			
			ТекстЗапросаТаблица = 
			"ВЫБРАТЬ
			|	ТаблицаОбъекта.ДокументОтгрузки КАК СсылкаНаОбъект
			|ИЗ
			|	РегистрНакопления.ТоварыКОтгрузке.Изменения КАК ТаблицаИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКОтгрузке КАК ТаблицаОбъекта
			|		ПО (ТаблицаОбъекта.Регистратор = ТаблицаИзменений.Регистратор)
			|			И (ТаблицаОбъекта.ДокументОтгрузки ССЫЛКА Документ.ЗаказПереработчику)
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И (НЕ &ОтборПоСсылкам
			|		ИЛИ ТаблицаОбъекта.ДокументОтгрузки В (&СписокСсылок))";
			
		ИначеЕсли ИмяТаблицы = "Документ.ЗаказПереработчику" Тогда	
			
			ТекстЗапросаТаблица = 
			"ВЫБРАТЬ
			|	ТаблицаИзменений.Ссылка КАК СсылкаНаОбъект
			|ИЗ
			|	Документ.ЗаказПереработчику.Изменения КАК ТаблицаИзменений
			|ГДЕ
			|	ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы
			|	И (НЕ &ОтборПоСсылкам
			|		ИЛИ ТаблицаИзменений.Ссылка В (&СписокСсылок))";
			
		Иначе
			
			ТекстИсключения = НСтр("ru = 'В функции ""ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки"" не реализовано получение заблокированных распоряжений для таблицы %ИмяТаблицы%.';
									|en = 'Receipt of locked references for table %ИмяТаблицы% is not implemented in the ""ВыбратьЗаблокированныеДляЧтенияИИзмененияСсылки"" function.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяТаблицы%", ИмяТаблицы);
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС
			+ ?(ТекстЗапроса <> "", "ОБЪЕДИНИТЬ ВСЕ", "") + Символы.ПС
			+ ТекстЗапросаТаблица;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&УсловиеОтбораУзла",
		"ТаблицаИзменений.Узел ССЫЛКА ПланОбмена.ОбновлениеИнформационнойБазы");
		
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.СсылкаНаОбъект
	|ИЗ 
	|	(" + ТекстЗапроса + ") КАК ВложенныйЗапрос";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ОтборПоСсылкам", ЗначениеЗаполнено(СписокСсылок));
	Запрос.УстановитьПараметр("СписокСсылок", СписокСсылок);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНаОбъект");
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.УсловиеИспользования    = "&Объект.ГруппировкаЗатрат <> ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)";
	ШаблонНазначения.НаправлениеДеятельности = "&Объект.НаправлениеДеятельности";
	//++ НЕ УТКА
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	//-- НЕ УТКА
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Продукция.Получатель";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&Объект.Продукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Продукция.Получатель";
	
	// Потребности в возвратных отходах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.ВозвратныеОтходы.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&Объект.ВозвратныеОтходы.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВозвратныеОтходы.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВозвратныеОтходы.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.ВозвратныеОтходы.Получатель";
	
	// Потребности в возвратных работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.ВозвратныеОтходы.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&Объект.ВозвратныеОтходы.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.ВозвратныеОтходы.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.ВозвратныеОтходы.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.ВозвратныеОтходы.Получатель";
	
	// шаблон для выходных изделий этапа производства по рассчитываемой стоимости
	#Область РедактированиеЭтапов_ВыходныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "РедактированиеЭтапов.ВыходныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования    = "&Объект.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)";
	ШаблонНазначения.НаправлениеДеятельности = "&Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "РедактированиеЭтапов.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "РедактированиеЭтапов.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ВыходныеИзделия.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "РедактированиеЭтапов.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ВыходныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "РедактированиеЭтапов.ВыходныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ВыходныеИзделия.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "РедактированиеЭтапов.ВыходныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ВыходныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ВыходныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ВыходныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ВыходныеИзделия.Распоряжение";
	
	#КонецОбласти
	
	// шаблон для побочных изделий этапа производства по фиксированной стоимости
	#Область РедактированиеЭтапов_ПобочныеИзделия
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "РедактированиеЭтапов.ПобочныеИзделия.Назначение");
	ШаблонНазначения.УсловиеИспользования    = "&Объект.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)";
	ШаблонНазначения.НаправлениеДеятельности = "&Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить("НаправлениеДеятельности", НСтр("ru = 'Только назначения направления деятельности ""%1""';
																					|en = 'The ""%1"" line of business assignments only'"));
	
	// Потребности в выпущенной продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "РедактированиеЭтапов.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "РедактированиеЭтапов.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ПобочныеИзделия.Распоряжение";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "РедактированиеЭтапов.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ПобочныеИзделия.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "РедактированиеЭтапов.ПобочныеИзделия.Получатель";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ПобочныеИзделия.Распоряжение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "РедактированиеЭтапов.ПобочныеИзделия.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "&РедактированиеЭтапов.ПобочныеИзделия.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "РедактированиеЭтапов.ПобочныеИзделия.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "РедактированиеЭтапов.ПобочныеИзделия.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Регистратор      = "РедактированиеЭтапов.ПобочныеИзделия.Распоряжение";
	
	#КонецОбласти
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия(
		"Продукция",
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
		
		ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено = Истина;
		
		ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
		ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
		ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям
			Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство Тогда
			
			ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат = "НомерГруппыЗатрат";
			ПараметрыРаспределенияЗатрат.ПолеПредставленияГруппировкиЗатрат = "ГруппаЗатрат";
			
		ИначеЕсли Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства Тогда
			
			ПараметрыРаспределенияЗатрат.ИмяТЧ = "ВыходныеИзделия";
			ПараметрыРаспределенияЗатрат.ИмяПоляСпособРаспределенияЗатратНаВыходныеИзделия = "СпособРаспределенияЗатратНаВыходныеИзделия";
			
			ПараметрыРаспределенияЗатрат.ПолеГруппировкиЗатрат = "Распоряжение";
			ПараметрыРаспределенияЗатрат.ПолеПредставленияГруппировкиЗатрат = "Распоряжение";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

Функция КолонкиГруппировок(КоллекцияКолонок, КолонкиСуммирования)
	
	МассивИсключаемыхКолонок = СтрРазделить(КолонкиСуммирования, ",");
	МассивИсключаемыхКолонок.Добавить("НомерСтроки");
	
	КолонкиГруппировок = "";
	
	Для каждого Колонка Из КоллекцияКолонок Цикл
		Если МассивИсключаемыхКолонок.Найти(Колонка.Имя) = Неопределено Тогда
			КолонкиГруппировок = КолонкиГруппировок + Колонка.Имя + ",";		
		КонецЕсли;	
	КонецЦикла;
	
	КолонкиГруппировок = Лев(КолонкиГруппировок, СтрДлина(КолонкиГруппировок) - 1);
	
	Возврат КолонкиГруппировок;
	
КонецФункции	

Функция КолонкиСуммирования(Объект, ИмяТаблицы)
	
	КолонкиСуммирования = "КоличествоУпаковок,Количество,Сумма";
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		КолонкиСуммирования = КолонкиСуммирования + ",СуммаОтменено" 
							  + ?(ИмяТаблицы = "ВозвратныеОтходы", ",СуммаСНДСОтменено,СуммаНДСОтменено", ""); 	
	КонецЕсли;	
	
	Возврат КолонкиСуммирования;
	
КонецФункции	

#КонецОбласти

#Область УчетНДС

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказПереработчику, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация							= Объект.Организация;
	ПараметрыЗаполнения.Дата								= Объект.Дата;
	ПараметрыЗаполнения.Договор								= Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности				= Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.ПриобретениеРабот					= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)
	|	И (ЗначениеРазрешено(Продукция.Получатель)
	|		ИЛИ ЗначениеРазрешено(ВозвратныеОтходы.Получатель)
	|		ИЛИ Продукция.Получатель ЕСТЬ NULL
	|		И ВозвратныеОтходы.Получатель ЕСТЬ NULL)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

//++ НЕ УТКА

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		Если ПроизводствоВызовСервера.ДоступноРабочееМестоЗаказыПереработчикам() Тогда
			ВыбраннаяФорма = "РабочееМесто";
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ТекстЗапросаТоварыДокумента(Отбор, Ресурс) Экспорт
	
	Если Ресурс = "Продукция" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказПереработчику,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	Таблица.Назначение                   КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА Таблица.Ссылка.ПереработкаПоЗаказу
		|			ТОГДА ЗаказУслуги.Распоряжение
		|		ИНАЧЕ Таблица.Ссылка
		|	КОНЕЦ                                КАК Распоряжение,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	0                                    КАК Цена,
		|	0                                    КАК Сумма,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаПоступления              КАК ДатаПоступления,
		|	0                                    КАК СтатусУказанияСерий,
		|	Таблица.Получатель                   КАК Склад,
		|	Таблица.Ссылка.Сделка                КАК Сделка,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
		|	ИСТИНА                               КАК ЭтоПродукция
		|ИЗ
		|	Документ.ЗаказПереработчику.Продукция КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
		|			И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказУслуги
		|		ПО ЗаказУслуги.Ссылка = Таблица.Ссылка
		|			И ЗаказУслуги.НомерГруппыЗатрат = Таблица.НомерГруппыЗатрат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
		|		ПО Таблица.Номенклатура = ДанныеНоменклатуры.Ссылка
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|//&Отбор
		|
		//++ НЕ УТКА
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказПереработчику,
		|	ТаблицаПродукция.Номенклатура        КАК Номенклатура,
		|	ТаблицаПродукция.Характеристика      КАК Характеристика,
		|	ТаблицаПродукция.Назначение          КАК Назначение,
		|	ТаблицаПродукция.КодСтроки           КАК КодСтроки,
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	ТаблицаПродукция.Серия               КАК Серия,
		|	ТаблицаПродукция.Количество          КАК Количество,
		|	0                                    КАК Цена,
		|	0                                    КАК Сумма,
		|	ТаблицаПродукция.Упаковка            КАК Упаковка,
		|	ТаблицаПродукция.ДатаПроизводства    КАК ДатаПоступления,
		|	ТаблицаПродукция.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ТаблицаПродукция.Получатель          КАК Склад,
		|	Таблица.Сделка                       КАК Сделка,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
		|	ИСТИНА                               КАК ЭтоПродукция
		|ИЗ
		|	Документ.ЗаказПереработчику КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТаблицаПродукция
		|		ПО ТаблицаПродукция.Ссылка = ТаблицаУслуги.Распоряжение
		|			И НЕ ТаблицаПродукция.Отменено
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО ТаблицаУслуги.Ссылка = ДанныеУчета.ЗаказПоставщику
		|			И ТаблицаПродукция.КодСтроки = ДанныеУчета.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
		|		ПО ТаблицаПродукция.Номенклатура = ДанныеНоменклатуры.Ссылка
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|	И Таблица.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
		|//&Отбор
		//-- НЕ УТКА
		|";
		
	ИначеЕсли Ресурс = "ВозвратныеОтходы" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказПереработчику,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	Таблица.Назначение                   КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	ВЫБОР
		|		КОГДА Таблица.Ссылка.ПереработкаПоЗаказу
		|			ТОГДА ЗаказУслуги.Распоряжение
		|		ИНАЧЕ Таблица.Ссылка
		|	КОНЕЦ                                КАК Распоряжение,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Цена                         КАК Цена,
		|	Таблица.Сумма                        КАК Сумма,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаПоступления              КАК ДатаПоступления,
		|	0                                    КАК СтатусУказанияСерий,
		|	Таблица.Получатель                   КАК Склад,
		|	Таблица.Ссылка.Сделка                КАК Сделка,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
		|	ЛОЖЬ                                 КАК ЭтоПродукция
		|ИЗ
		|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
		|			И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ЗаказУслуги
		|		ПО ЗаказУслуги.Ссылка = Таблица.Ссылка
		|			И ЗаказУслуги.НомерГруппыЗатрат = Таблица.НомерГруппыЗатрат
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
		|		ПО Таблица.Номенклатура = ДанныеНоменклатуры.Ссылка
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|//&Отбор
		|
		//++ НЕ УТКА
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказПереработчику,
		|	ТаблицаОтходы.Номенклатура           КАК Номенклатура,
		|	ТаблицаОтходы.Характеристика         КАК Характеристика,
		|	ТаблицаОтходы.Назначение             КАК Назначение,
		|	ТаблицаОтходы.КодСтроки              КАК КодСтроки,
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	ТаблицаОтходы.Серия                  КАК Серия,
		|	ТаблицаОтходы.Количество             КАК Количество,
		|	ТаблицаОтходы.Цена                   КАК Цена,
		|	ТаблицаОтходы.Сумма                  КАК Сумма,
		|	ТаблицаОтходы.Упаковка               КАК Упаковка,
		|	ТаблицаОтходы.ДатаПроизводства       КАК ДатаПоступления,
		|	ТаблицаОтходы.СтатусУказанияСерий    КАК СтатусУказанияСерий,
		|	ТаблицаОтходы.Получатель             КАК Склад,
		|	Таблица.Сделка                       КАК Сделка,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано,
		|	ЛОЖЬ                                 КАК ЭтоПродукция
		|ИЗ
		|	Документ.ЗаказПереработчику КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ТаблицаЭтап
		|		ПО ТаблицаЭтап.Ссылка = ТаблицаУслуги.Распоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТаблицаОтходы
		|		ПО ТаблицаОтходы.Ссылка = ТаблицаЭтап.Ссылка
		|			И НЕ ТаблицаОтходы.Отменено
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
		|			И ТаблицаОтходы.КодСтроки = ДанныеУчета.КодСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
		|		ПО ТаблицаОтходы.Номенклатура = ДанныеНоменклатуры.Ссылка
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|	И Таблица.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
		|//&Отбор
		//-- НЕ УТКА
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК ЗаказПереработчику,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|				Таблица.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                            КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Цена                         КАК Цена,
		|	Таблица.Сумма                        КАК Сумма,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|//&Отбор
		|
		//++ НЕ УТКА
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                  КАК ЗаказПереработчику,
		|	ТаблицаОбеспечение.Номенклатура                 КАК Номенклатура,
		|	ТаблицаОбеспечение.Характеристика               КАК Характеристика,
		|	ВЫБОР КОГДА ТаблицаОбеспечение.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|				ТаблицаОбеспечение.Назначение
		|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                                       КАК Назначение,
		|	ТаблицаОбеспечение.КодСтроки                    КАК КодСтроки,
		|	ТаблицаОбеспечение.Серия                        КАК Серия,
		|	ТаблицаОбеспечение.Количество                   КАК Количество,
		|	0                                               КАК Цена,
		|	0                                               КАК Сумма,
		|	ТаблицаОбеспечение.Упаковка                     КАК Упаковка,
		|	ТаблицаОбеспечение.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	ТаблицаОбеспечение.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	ТаблицаОбеспечение.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0)            КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)               КАК Заказано
		|ИЗ
		|	Документ.ЗаказПереработчику КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = Таблица.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТаблицаОбеспечение
		|		ПО ТаблицаОбеспечение.Ссылка = ТаблицаУслуги.Распоряжение
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.Распоряжение
		|			И ТаблицаОбеспечение.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|	И Таблица.ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЭтапамПроизводства)
		|//&Отбор
		//-- НЕ УТКА
		|";
		
	КонецЕсли;	

	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#Область Обеспечение

// Возвращает текст запроса материалов к обеспечению
//
// Возвращаемое значение:
// 		Строка - Текст запроса материалов к обеспечению.
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                                  КАК Заказ,
	|	Т.КодСтроки                               КАК КодСтроки,
	|	Т.НомерСтроки                             КАК НомерСтроки,
	|	0                                         КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО                              КАК Продукция,
	|	НЕОПРЕДЕЛЕНО                              КАК Этап,
	|	0                                         КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура                            КАК Номенклатура,
	|	Т.Характеристика                          КАК Характеристика,
	|	Т.Склад                                   КАК Склад,
	|	ТаблицаДокумента.Назначение               КАК Назначение,
	|	ТаблицаДокумента.Подразделение            КАК Подразделение,
	|	
	|	Т.ВариантОбеспечения                      КАК ВариантОбеспечения,
	|	Т.ДатаОтгрузки                            КАК ДатаОтгрузки,
	|	Т.Упаковка                                КАК Упаковка,
	|	
	|	Т.Количество                              КАК Количество,
	|	
	|	ТаблицаДокумента.ЖелаемаяДатаОтгрузки     КАК ЖелаемаяДатаОтгрузки,
	|	ТаблицаДокумента.НеОтгружатьЧастями       КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата                     КАК Дата,
	|	ТаблицаДокумента.Партнер                  КАК Партнер,
	|	ТаблицаДокумента.Менеджер                 КАК Менеджер,
	|	ТаблицаДокумента.Статус                   КАК Статус,
	|	&ИспользоватьСтатусыЗаказовПереработчикам КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И ТаблицаДокумента.ГруппировкаЗатрат В (
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.БезГруппировки),
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоПродукции),
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоСпецификациям),
	|		ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство)
	|	)
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено, ЗависимыеРеквизиты = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
		
	НазначенияРаспоряжений = Неопределено;
	
	//++ НЕ УТКА
	
	Если Объект.ПереработкаПоЗаказу Тогда
		
		Для каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл
			Если СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно
				ИЛИ СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно Тогда
				СписокРаспоряжений = Объект.Услуги.Выгрузить(,"Распоряжение").ВыгрузитьКолонку("Распоряжение");
				НазначенияРаспоряжений = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(СписокРаспоряжений, "Назначение");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//-- НЕ УТКА
	
	НазначениеПоУмолчанию = Объект.Назначение;
	НазначенияПродукции = Новый Соответствие;
	Если Объект.ОбосабливатьПоНазначениюПродукции
		Или Объект.ПереработкаПоЗаказу Тогда
		Для Каждого Строка Из Объект.Продукция Цикл
			НазначенияПродукции.Вставить(Строка.НомерГруппыЗатрат, Строка.Назначение);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаМатериалы = Объект.Материалы;
	
	Реквизиты = "КоличествоУпаковок, Сумма";
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты);

	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ЗаполнитьДатыОтгрузки = Ложь;
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Объект.НеОтгружатьЧастями;
	ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = Объект.ЖелаемаяДатаОтгрузки;
	ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.ДатаОтгрузки;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = ТаблицаМатериалы.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = ТаблицаМатериалы[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;

			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = ТаблицаМатериалы.Вставить(ТаблицаМатериалы.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		// Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);

		Если СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
			ИЛИ СтрокаОбеспечения.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаТовары.Назначение) Тогда
				Если Объект.ПереработкаПоЗаказу Тогда
					// Если по заказу на производство, то берется назначение продукции или сам заказ на производство.
					Если ТекСтрокаТовары.НомерГруппыЗатрат <> 0 Тогда
						СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекСтрокаТовары.НомерГруппыЗатрат);
						СтрокаУслуга = Объект.Услуги.НайтиСтроки(СтруктураПоиска)[0];
						
						НазначениеПродукции = НазначенияПродукции.Получить(СтрокаУслуга.НомерГруппыЗатрат);
						ТекСтрокаТовары.Назначение = ?(
							ЗначениеЗаполнено(НазначениеПродукции),
							НазначениеПродукции,
							НазначенияРаспоряжений.Получить(СтрокаУслуга.Распоряжение));
					КонецЕсли;
				Иначе
					НазначениеПродукции = НазначенияПродукции.Получить(ТекСтрокаТовары.НомерГруппыЗатрат);
					ТекСтрокаТовары.Назначение = ?(ЗначениеЗаполнено(НазначениеПродукции), НазначениеПродукции, НазначениеПоУмолчанию);
				КонецЕсли;
			КонецЕсли; 
		Иначе
			ТекСтрокаТовары.Назначение = Справочники.Назначения.ПустаяСсылка();
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");

		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		Если Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок" 
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки 
					И СтрокаОбеспечения.Отгружено = 0 Тогда
				
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;

	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);

	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(ТаблицаМатериалы, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;

	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказПереработчику));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);

	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Истина;
КонецФункции

Функция ПараметрыВыбораОбеспечения(Статус) Экспорт

	Параметры = Новый Структура;
	Параметры.Вставить("ПутиКДанным", Новый Соответствие());
	Параметры.Вставить("ИмяТабличнойЧасти", "Материалы");
	Параметры.Вставить("СтатусКВыполнению", Статус <> Перечисления.СтатусыЗаказовПереработчикам.НеСогласован);
	Параметры.Вставить("ИмяМенеджераРегистра", "ЗаказыКлиентов");
	Параметры.ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");

	Возврат Параметры;

КонецФункции

// Создает в менеджере временных таблиц таблицы обособленной и необособленной потребности по табличной части документа.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер
//	Заказ - ДокументСсылка.ЗаказПереработчику - документ, по которому создаются временные таблицы
// 		Отбор - Структура - Структура отборов
// 			* Склад - СправочникСсылка.Склады - Склад, по-которому требуется установить отбор.
//
Процедура ВременныеТаблицыТоваровЗаказа(МенеджерВременныхТаблиц, Заказ, Отбор = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ТоварыДокумента.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(ТоварыДокумента.Упаковка) КАК Упаковка2,
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение, // Подразделение предназначено только для работ, которых в ТЧ Товары заказа переработчику не должно быть
	|	ТоварыДокумента.Назначение КАК Назначение,
	|	
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(ТоварыДокумента.НомерСтроки) КАК НомерСтроки
	|	
	|ПОМЕСТИТЬ ВТНоменклатураЗаказаОбособленная
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|		,
	|		ЗаказКлиента = &Заказ
	|		//&Склад
	|		) КАК Заказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику КАК ТаблицаЗаказПереработчику
	|	ПО Заказы.ЗаказКлиента = ТаблицаЗаказПереработчику.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Материалы КАК ТоварыДокумента
	|	ПО Заказы.ЗаказКлиента = ТоварыДокумента.Ссылка
	|		И Заказы.КодСтроки = ТоварыДокумента.КодСтроки
	|		И ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|		И НЕ ТоварыДокумента.Отменено
	|	
	|ГДЕ
	|	НЕ ТоварыДокумента.Ссылка ЕСТЬ NULL
	|	//&ТоварыДокументаСклад
	|	
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	ТаблицаЗаказПереработчику.Подразделение,
	|	ТоварыДокумента.Назначение
	|	
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТоварыДокумента.Упаковка) КАК Упаковка1,
	|	МИНИМУМ(ТоварыДокумента.Упаковка) КАК Упаковка2,
	|	Заказы.Номенклатура КАК Номенклатура,
	|	Заказы.Характеристика КАК Характеристика,
	|	Заказы.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение, // Подразделение предназначено только для работ, которых в ТЧ ОбеспечениеМатериаламиИРаботами этапа по заказу переработчику не должно быть
	|	ТоварыДокумента.Назначение КАК Назначение,
	|	
	|	СУММА(Заказы.ЗаказаноОстаток) КАК Заказано,
	|	МАКСИМУМ(ТоварыДокумента.НомерСтроки) КАК НомерСтроки
	|	
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов.Остатки(
	|		,
	|		ЗаказКлиента = &Заказ
	|		//&Склад
	|		) КАК Заказы
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ТаблицаЭтап
	|	ПО ТаблицаЭтап.ЗаказПереработчику = Заказы.ЗаказКлиента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТоварыДокумента
	|	ПО ТаблицаЭтап.Ссылка = ТоварыДокумента.Ссылка
	|		И Заказы.КодСтроки = ТоварыДокумента.КодСтроки
	|		И ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|
	|ГДЕ
	|	НЕ ТоварыДокумента.Ссылка ЕСТЬ NULL
	|	//&ТоварыДокументаСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказы.Номенклатура,
	|	Заказы.Характеристика,
	|	Заказы.Склад,
	|	ТаблицаЭтап.Подразделение,
	|	ТоварыДокумента.Назначение
	//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.Упаковка1 <> Товары.Упаковка2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ Товары.Упаковка1
	|	КОНЕЦ								КАК Упаковка,
	|	Товары.Номенклатура					КАК Номенклатура,
	|	Товары.Характеристика				КАК Характеристика,
	|	Товары.Склад						КАК Склад,
	|	Товары.Подразделение				КАК Подразделение,
	|	Товары.Назначение					КАК Назначение,
	|	Товары.Заказано						КАК Заказано,
	|	Товары.НомерСтроки					КАК НомерСтроки
	|	
	|ПОМЕСТИТЬ НоменклатураЗаказаОбособленная
	|ИЗ
	|	ВТНоменклатураЗаказаОбособленная КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыДокумента.Упаковка КАК Упаковка,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ТоварыДокумента.Ссылка.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(ТоварыДокумента.Количество) КАК Заказано,
	|	ТоварыДокумента.Серия КАК Серия,
	|	МАКСИМУМ(ТоварыДокумента.НомерСтроки) КАК НомерСтроки
	|
	|ПОМЕСТИТЬ НоменклатураЗаказаНеОбособленная
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТоварыДокумента
	|
	|ГДЕ
	|	ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ТоварыДокумента.Ссылка = &Заказ
	|	И НЕ ТоварыДокумента.Отменено
	|	//&ТоварыДокументаСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Упаковка,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Склад,
	|	ТоварыДокумента.Ссылка.Подразделение,
	|	ТоварыДокумента.Серия
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыДокумента.Упаковка КАК Упаковка,
	|	ТоварыДокумента.Номенклатура КАК Номенклатура,
	|	ТоварыДокумента.Характеристика КАК Характеристика,
	|	ТоварыДокумента.Склад КАК Склад,
	|	ДокументЗаказ.Подразделение КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	СУММА(ТоварыДокумента.Количество) КАК Заказано,
	|	ТоварыДокумента.Серия КАК Серия,
	|	МАКСИМУМ(ТоварыДокумента.НомерСтроки) КАК НомерСтроки
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДокументЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 ТаблицаЭтап
	|		ПО ТаблицаЭтап.ЗаказПереработчику = ДокументЗаказ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТоварыДокумента
	|		ПО ТаблицаЭтап.Ссылка = ТоварыДокумента.Ссылка
	|ГДЕ
	|	ТоварыДокумента.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется)
	|	И ДокументЗаказ.Ссылка = &Заказ
	|	//&ТоварыДокументаСклад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыДокумента.Упаковка,
	|	ТоварыДокумента.Номенклатура,
	|	ТоварыДокумента.Характеристика,
	|	ТоварыДокумента.Склад,
	|	ДокументЗаказ.Подразделение,
	|	ТоварыДокумента.Серия
	//-- НЕ УТКА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад";
	#КонецОбласти
	
	Если ЗначениеЗаполнено(Отбор) И Отбор.Свойство("Склад") И ЗначениеЗаполнено(Отбор.Склад) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Склад", "И Склад В(&Склад)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&ТоварыДокументаСклад", "И ТоварыДокумента.Склад В(&Склад)");
		Запрос.УстановитьПараметр("Склад", Отбор.Склад);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Истина);
	
	ТабЧасти = Новый Структура();
	ТабЧасти.Вставить("Продукция", ОписаниеТабЧасти);
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ФильтрХозОперация.Добавить("ВОЗВРАТНЫЕОТХОДЫ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Истина);
	
	ТабЧасти.Вставить("ВозвратныеОтходы", ОписаниеТабЧасти);
	
	СтруктураОбъекта = Новый Структура();
	СтруктураОбъекта.Вставить("ТабЧасти", ТабЧасти);
	СтруктураОбъекта.Вставить("ОформляетсяПоЗаказу", Ложь);
	
	СтруктураОбъекта.Вставить("ЭтоИсточникПотребности", Истина);
	СтруктураОбъекта.Вставить("ЕстьНазначениеВТЧ", Истина);
	СтруктураОбъекта.Вставить("ВТЧНазначениеОтгрузки", Ложь);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

Функция ТабличныеЧастиДляОформленияОтчетаПереработчика() Экспорт
	
	Результат = Новый Структура("Продукция,ВозвратныеОтходы,Услуги,Материалы");
	
	Результат.Продукция =
		"ВЫБРАТЬ
		|	ПродукцияЗаказа.НомерСтроки              КАК НомерСтроки,
		|	ПродукцияЗаказа.НомерГруппыЗатрат        КАК НомерГруппыЗатрат,
		|	ПродукцияЗаказа.КодСтроки                КАК КодСтроки,
		|	ПродукцияЗаказа.Номенклатура             КАК Номенклатура,
		|	ПродукцияЗаказа.Характеристика           КАК Характеристика,
		|	ПродукцияЗаказа.Назначение               КАК Назначение,
		|	ПродукцияЗаказа.Получатель               КАК Получатель,
		|	ПродукцияЗаказа.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	ПродукцияЗаказа.СтатьяРасходов           КАК СтатьяРасходов,
		|	ПродукцияЗаказа.АналитикаРасходов        КАК АналитикаРасходов,
		|	ПродукцияЗаказа.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ПродукцияЗаказа.Упаковка                 КАК Упаковка,
		|	ПродукцияЗаказа.Спецификация             КАК Спецификация,
		|	ПродукцияЗаказа.ДоляСтоимости            КАК ДоляСтоимости,
		|	ПродукцияЗаказа.ДоляСтоимостиНаЕдиницу   КАК ДоляСтоимостиНаЕдиницу,
		|	ПродукцияЗаказа.Количество               КАК Количество,
		|	ПродукцияЗаказа.КоличествоУпаковок       КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЗаказПереработчику.Продукция КАК ПродукцияЗаказа
		|ГДЕ
		|	ПродукцияЗаказа.Ссылка = &Заказ";
		
	Результат.ВозвратныеОтходы =
		"ВЫБРАТЬ
		|	ВозвратныеОтходыЗаказа.НомерСтроки               КАК НомерСтроки,
		|	ВозвратныеОтходыЗаказа.НомерГруппыЗатрат         КАК НомерГруппыЗатрат,
		|	ВозвратныеОтходыЗаказа.КодСтроки                 КАК КодСтроки,
		|	ВозвратныеОтходыЗаказа.Номенклатура              КАК Номенклатура,
		|	ВозвратныеОтходыЗаказа.Характеристика            КАК Характеристика,
		|	ВозвратныеОтходыЗаказа.Назначение                КАК Назначение,
		|	ВозвратныеОтходыЗаказа.Получатель                КАК Получатель,
		|	ВозвратныеОтходыЗаказа.СписатьНаРасходы          КАК СписатьНаРасходы,
		|	ВозвратныеОтходыЗаказа.СтатьяРасходов            КАК СтатьяРасходов,
		|	ВозвратныеОтходыЗаказа.АналитикаРасходов         КАК АналитикаРасходов,
		|	ВозвратныеОтходыЗаказа.АналитикаАктивовПассивов  КАК АналитикаАктивовПассивов,
		|	ВозвратныеОтходыЗаказа.Упаковка                  КАК Упаковка,
		|	ВозвратныеОтходыЗаказа.СтатьяКалькуляции         КАК СтатьяКалькуляции,
		|	ВозвратныеОтходыЗаказа.ВидЦены                   КАК ВидЦены,
		|	ВозвратныеОтходыЗаказа.Цена                      КАК Цена,
		|	ВозвратныеОтходыЗаказа.Количество                КАК Количество,
		|	ВозвратныеОтходыЗаказа.КоличествоУпаковок        КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ВозвратныеОтходыЗаказа
		|ГДЕ
		|	ВозвратныеОтходыЗаказа.Ссылка = &Заказ";
	
	Результат.Услуги =
		"ВЫБРАТЬ
		|	Услуги.НомерСтроки          КАК НомерСтроки,
		|	Услуги.Номенклатура         КАК Номенклатура,
		|	Услуги.Характеристика       КАК Характеристика,
		|	Услуги.Спецификация         КАК Спецификация,
		|	Услуги.Сумма                КАК Сумма,
		|	Услуги.СуммаНДС             КАК СуммаНДС,
		|	Услуги.СтавкаНДС            КАК СтавкаНДС,
		|	Услуги.СтатьяКалькуляции    КАК СтатьяКалькуляции,
		|	Услуги.НомерГруппыЗатрат    КАК НомерГруппыЗатрат,
		|	Услуги.Распоряжение         КАК Распоряжение
		|ИЗ
		|	Документ.ЗаказПереработчику.Услуги КАК Услуги
		|ГДЕ
		|	Услуги.Ссылка = &Заказ";
	
	Результат.Материалы =
		"ВЫБРАТЬ
		|	Материалы.НомерСтроки               КАК НомерСтроки,
		|	Материалы.НомерГруппыЗатрат         КАК НомерГруппыЗатрат,
		|	Материалы.Номенклатура              КАК Номенклатура,
		|	Материалы.Характеристика            КАК Характеристика,
		|	Материалы.Назначение                КАК Назначение,
		|	Материалы.Упаковка                  КАК Упаковка,
		|	Материалы.СтатьяКалькуляции         КАК СтатьяКалькуляции,
		|	Материалы.Количество                КАК Количество,
		|	Материалы.КоличествоУпаковок        КАК КоличествоУпаковок
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК Материалы
		|ГДЕ
		|	(Материалы.Ссылка = &Заказ И НЕ Материалы.Отменено)";
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = ПолноеИмяОбъекта();
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ГруппировкаЗатрат", "ТабличнаяЧасть.Ссылка.ГруппировкаЗатрат");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",  """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерПоДаннымПартнера", """""");
	ПереопределениеРасчетаПараметров.Вставить("ПодразделениеЭтапа",    "ТабличнаяЧасть.Ссылка.Подразделение");
	ПереопределениеРасчетаПараметров.Вставить("СрокПоставки",          "ТабличнаяЧасть.Ссылка.Начало");
	ПереопределениеРасчетаПараметров.Вставить("НалогообложениеНДС",
		"ТабличнаяЧасть.Ссылка.Распоряжение.ЗаказПодДеятельность");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ТабличнаяЧасть.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ДвижениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	//++ НЕ УТКА	
	ИначеЕсли ИмяРегистра = "ЗаказыНаПроизводствоСпецификации" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
		
	ИначеЕсли ИмяРегистра = "ПереработкаПоГрафикуПроизводства" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТабличнаяЧасть";
	//-- НЕ УТКА
	
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаУслугиПереработчиковКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТКА
	ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТКА
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПереработчику.Ссылка                           КАК ЗаказПереработчику,
	|	ЗаказПереработчику.Дата                             КАК Период,
	|	ЗаказПереработчику.Валюта                           КАК Валюта,
	|	ЛОЖЬ                                                КАК ЦенаВключаетНДС,
	|	ЗаказПереработчику.Статус                           КАК Статус,
	|	ЗаказПереработчику.Партнер                          КАК Партнер,
	|	ЗаказПереработчику.Контрагент                       КАК Контрагент,
	|	ЗаказПереработчику.Организация                      КАК Организация,
	|	ЗаказПереработчику.Подразделение                    КАК Подразделение,
	|	ЗаказПереработчику.ХозяйственнаяОперация            КАК ХозяйственнаяОперация,
	|	ЗаказПереработчику.Договор                          КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(ЗаказПереработчику.Договор)           КАК ДоговорПредставление,
	|	ЗаказПереработчику.ГруппировкаЗатрат                КАК ГруппировкаЗатрат,
	|	ЗаказПереработчику.Назначение                       КАК Назначение,
	|	ЗаказПереработчику.ПереработкаПоЗаказу              КАК ПереработкаПоЗаказу,
	|	ЗаказПереработчику.Менеджер                         КАК Менеджер,
	|	ЗаказПереработчику.Номер                            КАК Номер,
	|	ЗаказПереработчику.Комментарий                      КАК Комментарий,
	|	ЗаказПереработчику.СуммаДокумента                   КАК СуммаДокумента,
	|	ЗаказПереработчику.Проведен                         КАК Проведен,
	|	ЗаказПереработчику.ПометкаУдаления                  КАК ПометкаУдаления,
	|	ЗаказПереработчику.ДатаПоДаннымПартнера             КАК ДатаПоДаннымПартнера,
	|	ЗаказПереработчику.НомерПоДаннымПартнера            КАК НомерПоДаннымПартнера,
	|	
	|	ВЫБОР КОГДА ЗаказПереработчику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ЗаказПереработчику.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоНакладным,
	|	ЗаказПереработчику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	ЕСТЬNULL(ЗаказПереработчику.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) КАК ГрафикИсполненияВДоговоре,
	|	ЗаказПереработчику.ВариантПриемкиТоваров            КАК ВариантПриемкиТоваров
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ЗаказПереработчику
	|ГДЕ
	|	ЗаказПереработчику.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	ИнформацияПоСделке = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ШаблонСтроки = НСтр("ru = 'По договору ""%1""';
							|en = 'Under the ""%1"" contract'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.ДоговорПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|						(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|						 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	ВЫБОР КОГДА (НЕ ТаблицаТовары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|						 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|						(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|						 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	0                                                                 КАК КОформлению,
	|	-ТаблицаТовары.Количество                                         КАК Заказано,
	|	ТаблицаТовары.ПричинаОтмены                                       КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|						(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|						 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	ВЫБОР КОГДА (НЕ ТаблицаТовары.Отменено)
	|			И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|						 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)) ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры В
	|						(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|						 ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ТаблицаТовары.Получатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                             КАК Склад,
	|	0                                                                 КАК КОформлению,
	|	-ТаблицаТовары.Количество                                         КАК Заказано,
	|	ТаблицаТовары.ПричинаОтмены                                       КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК Период,
	|	КонецПериода(ЭтапыГрафикаОплаты.ДатаПлатежа, ДЕНЬ) КАК ДатаПлатежа,
	|	&Период                                            КАК ДатаРегистратора,
	|	&Номер                                             КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.Ссылка
	|	КОНЕЦ                                              КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	ЭтапыГрафикаОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа                    КАК КОплате,
	|	0                                                  КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация,
	|	&Валюта                                            КАК ВалютаДокумента,
	|	ЭтапыГрафикаОплаты.ВариантОплаты                   КАК ВариантОплаты
	|ИЗ
	|	Документ.ЗаказПереработчику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
	|	И НЕ &РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0                                                  КАК НомерСтроки,
	|	КонецПериода(Заказ.Дата, ДЕНЬ)                     КАК Период,
	|	Неопределено                                       КАК ДатаПлатежа,
	|	&Период                                            КАК ДатаРегистратора,
	|	&Номер                                             КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)             КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                              КАК ЗаказПоставщику,
	|
	|	&Валюта                                            КАК Валюта,
	|	Неопределено                                       КАК ФормаОплаты,
	|	0                                                  КАК Сумма,
	|	0                                                  КАК КОплате,
	|	Заказ.СуммаДокумента                               КАК КПоступлению,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику) КАК ХозяйственнаяОперация,
	|	&Валюта                                            КАК ВалютаДокумента,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.ПустаяСсылка) КАК ВариантОплаты
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|	И НЕ &РасчетыПоНакладным
	|	И Заказ.СуммаДокумента <> 0
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"
	//++ НЕ УТКА
	|// Сторно движений заказа на производство
	|ВЫБРАТЬ
	|	ТаблицаУслуги.Начало                        КАК Период,
	|	ТаблицаУслуги.Распоряжение                  КАК Распоряжение,
	|	
	|	ТабличнаяЧасть.Склад              КАК Склад,
	|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
	|	
	|	ТабличнаяЧасть.Назначение         КАК Назначение,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				-ТабличнаяЧасть.КоличествоПоЗаказу
	|			ИНАЧЕ
	|				0
	|	КОНЕЦ КАК ПланируемоеПоступление,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				-ТабличнаяЧасть.КоличествоПоЗаказу
	|			ИНАЧЕ
	|				0
	|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказ,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				-ТабличнаяЧасть.КоличествоПоЗаказу
	|			ИНАЧЕ
	|				0
	|	КОНЕЦ КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				-ТабличнаяЧасть.КоличествоПоЗаказу
	|			ИНАЧЕ
	|				0
	|	КОНЕЦ КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
	|	
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаРаспоряжения,
	|	ЛОЖЬ КАК Корректировка
	|	
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
	|		 И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт)
	|	)
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	//-- НЕ УТКА
	|
	|// Заказ переработчику на продукцию
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА &ПереработкаПоЗаказу ТОГДА
	|				ТаблицаУслуги.Начало
	|			ИНАЧЕ
	|				ТабличнаяЧасть.ДатаПоступления
	|		КОНЕЦ                        КАК Период,
	|	
	|	ВЫБОР КОГДА &ПереработкаПоЗаказу ТОГДА
	|			ТаблицаУслуги.Распоряжение
	|		ИНАЧЕ
	|			ТабличнаяЧасть.Ссылка
	|		КОНЕЦ                        КАК Распоряжение,
	|		
	|	ТабличнаяЧасть.Получатель         КАК Склад,
	|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
	|	
	|	ТабличнаяЧасть.Назначение         КАК Назначение,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                        КАК ПланируемоеПоступление,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ                    КАК ПланируемоеПоступлениеПодЗаказ,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                        КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ                    КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
	|	
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаРаспоряжения,
	|	ЛОЖЬ КАК Корректировка
	|	
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ТабличнаяЧасть
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
	|		 И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|	
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Заказ переработчику на возвратные отходы
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА &ПереработкаПоЗаказу ТОГДА
	|			ТаблицаУслуги.Начало
	|		ИНАЧЕ
	|			ТабличнаяЧасть.ДатаПоступления
	|		КОНЕЦ                        КАК Период,
	|	
	|	ВЫБОР КОГДА &ПереработкаПоЗаказу ТОГДА
	|			ТаблицаУслуги.Распоряжение
	|		ИНАЧЕ
	|			ТабличнаяЧасть.Ссылка
	|		КОНЕЦ                        КАК Распоряжение,
	|	
	|	ТабличнаяЧасть.Получатель         КАК Склад,
	|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
	|	
	|	ТабличнаяЧасть.Назначение         КАК Назначение,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                         КАК ПланируемоеПоступление,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                         КАК ПланируемоеПоступлениеПодЗаказ,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                         КАК ПланируемоеПоступлениеСНеподтвержденными,
	|	
	|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
	|				ТабличнаяЧасть.Количество
	|			ИНАЧЕ
	|				0
	|		КОНЕЦ                         КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
	|	
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаРаспоряжения,
	|	ЛОЖЬ КАК Корректировка
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТабличнаяЧасть
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
	|		 И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Получатель               КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ПереработкаПоЗаказу
	|			ТОГДА ТаблицаУслуги.Распоряжение
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	ВЫБОР
	|		КОГДА (НЕ &НакладнаяЯвляетсяРаспоряжением
	|				И ВЫРАЗИТЬ(ТаблицаТовары.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ТаблицаТовары.ДатаПоступления >= ВЫРАЗИТЬ(ТаблицаТовары.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлениюОрдеров,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаУслуги.НомерГруппыЗатрат = ТаблицаТовары.НомерГруппыЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Получатель               КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаТовары.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА &ПереработкаПоЗаказу
	|			ТОГДА ТаблицаУслуги.Распоряжение
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ                                  КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	ВЫБОР
	|		КОГДА (НЕ &НакладнаяЯвляетсяРаспоряжением
	|				И ВЫРАЗИТЬ(ТаблицаТовары.Получатель КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ТаблицаТовары.ДатаПоступления >= ВЫРАЗИТЬ(ТаблицаТовары.Получатель КАК Справочник.Склады).ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлениюОрдеров,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтПереработчика) КАК ХозяйственнаяОперация
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТаблицаТовары.Ссылка
	|			И ТаблицаУслуги.НомерГруппыЗатрат = ТаблицаТовары.НомерГруппыЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТаблицаТовары.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	// Заказ переработчику на продукцию
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|
	|	0                                      КАК Потребность,
	|	-ТабличнаяЧасть.Количество             КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (&Статус В(
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|		ИЛИ &ПереработкаПоЗаказу
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Заказ переработчику на возвратные отходы
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Получатель              КАК Склад,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|
	|	0                                      КАК Потребность,
	|	-ТабличнаяЧасть.Количество             КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ДанныеНоменклатуры
	|		ПО ТабличнаяЧасть.Номенклатура = ДанныеНоменклатуры.Ссылка 
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И НЕ ДанныеНоменклатуры.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (&Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|		ИЛИ &ПереработкаПоЗаказу
	|			И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Формирование потребности на сырье и материалы
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|	ТабличнаяЧасть.Количество              КАК Потребность,
	|	ТабличнаяЧасть.Количество              КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Закрытие потребности сырья и материалов
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|	ТабличнаяЧасть.Количество              КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	ТабличнаяЧасть.Количество              КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	//++ НЕ УТКА
	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Корректировка обеспечения заказа на производство
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТабличнаяЧасть.Склад                    КАК Склад,
	|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
	|	ТабличнаяЧасть.Назначение               КАК Назначение,
	|
	|	0                                       КАК Потребность,
	|	ТабличнаяЧасть.КоличествоПоЗаказу       КАК КЗаказу,
	|	0                                       КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоПоЗаказу > 0
	|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Склад                   КАК Склад,
	|	ТабличнаяЧасть.Номенклатура            КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика          КАК Характеристика,
	|	ТабличнаяЧасть.Назначение              КАК Назначение,
	|	-ТабличнаяЧасть.КоличествоПоЗаказу     КАК Потребность,
	|	-ТабличнаяЧасть.КоличествоПоЗаказу     КАК КЗаказу,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	
	//-- НЕ УТКА
	
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	НачалоПериода(&Период, День)            КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	ТаблицаТовары.Количество                КАК Заказано,
	|	0                                       КАК КОформлению,
	|	0                                       КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки              КАК Период,
	|	ТаблицаТовары.Ссылка                    КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Серия                     КАК Серия,
	|	ТаблицаТовары.КодСтроки                 КАК КодСтроки,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|	0                                       КАК Заказано,
	|	ТаблицаТовары.Количество                КАК КОформлению,
	|	0                                       КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                            КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено 
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	ТаблицаТовары.Ссылка                     КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.Серия                      КАК Серия,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТаблицаТовары.Склад                      КАК Склад,
	|	-ТаблицаТовары.Количество                КАК Заказано,
	|	0                                        КАК КОформлению,
	|	0                                        КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                             КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ВариантОбеспечения <> ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.НеТребуется)
	|	И ТаблицаТовары.Отменено
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	// Резерв материалов по варианту обеспечения "со склада"
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Склад                    КАК Склад,
	|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
	|	ТабличнаяЧасть.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ,
	|	0                                      КАК ВНаличии
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|	И (ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|		ИЛИ ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И &Статус В(
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка материалов ПО варианту обеспечения "отгрузить" и "отгрузить обособленно".
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТабличнаяЧасть.Склад                    КАК Склад,
	|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТабличнаяЧасть.Количество
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ,
	|
	|	ТабличнаяЧасть.Количество               КАК ВНаличии
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И НЕ ТабличнаяЧасть.Отменено
	|
	|	И ТабличнаяЧасть.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|	И &Статус В(
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Высвобождаем остатки, закрытые заказом на производство
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	ТабличнаяЧасть.Склад              КАК Склад,
	|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
	|	ТабличнаяЧасть.КоличествоПоЗаказу КАК ВРезервеСоСклада,
	|	0                                           КАК ВРезервеПодЗаказ,
	|	0                                           КАК ВНаличии
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	И ТабличнаяЧасть.ВариантОбеспечения = Значение(Перечисление.ВариантыОбеспечения.СоСклада)
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиПереработчиковКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиПереработчиковКОформлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	Заказ.Ссылка                           КАК ЗаказПереработчику,
	|	Заказ.СуммаДокумента                   КАК Сумма
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|	И Заказ.СуммаДокумента <> 0
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
	|				 ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Запросы = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки КАК Период,
	|	ТабличнаяЧасть.Склад КАК Склад,
	|	&Партнер КАК Получатель,
	|	&Ссылка КАК ДокументОтгрузки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК ВРезерве,
	|	0 КАК КОтгрузке,
	|	0 КАК КОформлению
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Количество <> 0
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И (ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|			ИЛИ ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|				И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению)))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТабличнаяЧасть.ДатаОтгрузки,
	|	ТабличнаяЧасть.Склад,
	|	&Партнер,
	|	&Ссылка,
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.Характеристика,
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|			И ЕСТЬNULL(ТабличнаяЧасть.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|		ТОГДА ТабличнаяЧасть.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|	ТабличнаяЧасть.Серия,
	|	0,
	|	ТабличнаяЧасть.Количество,
	|	ТабличнаяЧасть.Количество
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.Количество <> 0
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
	|	И НЕ ТабличнаяЧасть.Отменено
	|	И ТабличнаяЧасть.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	Запросы.Добавить(ТекстЗапроса);
	
	//++ НЕ УТКА
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабличнаяЧасть.ДатаОтгрузки КАК Период,
	|	ТабличнаяЧасть.Склад КАК Склад,
	|	&Подразделение КАК Получатель,
	|	ТаблицаУслуги.Распоряжение КАК ДокументОтгрузки,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	-ТабличнаяЧасть.КоличествоПоЗаказу КАК ВРезерве,
	|	0 КАК КОтгрузке,
	|	0 КАК КОформлению
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО (ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка)
	|			И (ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат)
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
	|	И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)";
	Запросы.Добавить(ТекстЗапроса);
	//-- НЕ УТКА
	
	Разделитель = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";

	ТекстЗапроса = СтрСоединить(Запросы, Разделитель);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		// Заказ переработчика на сырье и материалы
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаОтгрузки       КАК Период,
		|	ТабличнаяЧасть.ДатаОтгрузки       КАК ДатаОтгрузки,
		|	
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	ТабличнаяЧасть.Склад              КАК Склад,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|
		|			ТабличнаяЧасть.Назначение
		|
		|		КОНЕЦ                                               КАК Назначение,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		КОНЕЦ                                               КАК КоличествоИзЗаказов,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		КОНЕЦ                                               КАК КоличествоПодЗаказ,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
		|			ТабличнаяЧасть.Количество
		|		КОНЕЦ                                               КАК КоличествоНеобеспечено,
		|
		|	ВЫБОР КОГДА &ПереработкаПоЗаказу ТОГДА
		|			ТаблицаУслуги.Распоряжение
		|		КОНЕЦ                        КАК Распоряжение
		|ИЗ
		|	Документ.ЗаказПереработчику.Материалы КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
		|			И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
		|	
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|	И(&Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|
		|		И ТабличнаяЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
		|
		|		ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))
//++ НЕ УТКА
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// Сторно движений заказа на производство
		|ВЫБРАТЬ
		|	ТабличнаяЧасть.ДатаОтгрузки       КАК Период,
		|	ТабличнаяЧасть.ДатаОтгрузки       КАК ДатаОтгрузки,
		|
		|	ТабличнаяЧасть.Номенклатура       КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика     КАК Характеристика,
		|	ТабличнаяЧасть.Склад              КАК Склад,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			ТабличнаяЧасть.Назначение
		|		КОНЕЦ                                   КАК Назначение,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
		|			-ТабличнаяЧасть.КоличествоПоЗаказу
		|		КОНЕЦ                                                         КАК КоличествоИзЗаказов,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
		|			-ТабличнаяЧасть.КоличествоПоЗаказу
		|		КОНЕЦ                                                         КАК КоличествоПодЗаказ,
		|
		|	ВЫБОР КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
		|			-ТабличнаяЧасть.КоличествоПоЗаказу
		|		КОНЕЦ                                                         КАК КоличествоНеобеспечено,
		|
		|	ТаблицаУслуги.Распоряжение                  КАК Распоряжение
		|ИЗ
		|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
		|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
		|			И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0
		|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Отгрузка)
		|
		|	И(&Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КОбеспечению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.КИсполнению),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.Закрыт))
		|
		|		И ТабличнаяЧасть.ВариантОбеспечения В(
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|			ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется))
		|
		|		ИЛИ &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПереработчикам.НеСогласован)
		|			И ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))
//-- НЕ УТКА
		|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТКА

Функция ТекстЗапросаТаблицаЗаказыНаПроизводствоСпецификации(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "ЗаказыНаПроизводствоСпецификации";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	ТаблицаУслуги.Начало                        КАК Период,
	|	ТаблицаУслуги.Распоряжение                  КАК ЗаказНаПроизводство,
	|	ТабличнаяЧасть.Склад                        КАК Склад,
	|	ТабличнаяЧасть.Назначение                   КАК Назначение,
	|	ТабличнаяЧасть.ВариантОбеспечения           КАК ВариантОбеспечения,
	|	ТаблицаУслуги.Этап                          КАК Этап,
	|	&Подразделение                              КАК Подразделение,
	|	ТабличнаяЧасть.Номенклатура                 КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика               КАК Характеристика,
	|	ТаблицаУслуги.КодСтрокиПродукция            КАК КодСтрокиПродукция,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик          КАК КодСтрокиЭтапыГрафик,
	|	ТабличнаяЧасть.ТипДвиженияЗапасов           КАК ТипДвиженияЗапасов,
	|	ТабличнаяЧасть.УказыватьСерии               КАК УказыватьСерии,
	|	ТабличнаяЧасть.Серия                        КАК Серия,
	|	ТабличнаяЧасть.ДатаОтгрузки                 КАК ДатаПотребности,
	|	ТабличнаяЧасть.КоличествоПоЗаказу           КАК Заказано
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТаблицаУслуги.Ссылка = ТабличнаяЧасть.Ссылка
	|			И ТаблицаУслуги.НомерГруппыЗатрат = ТабличнаяЧасть.НомерГруппыЗатрат
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И ТабличнаяЧасть.КоличествоПоЗаказу <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПереработкаПоГрафикуПроизводства(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПереработкаПоГрафикуПроизводства";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаУслуги.Распоряжение КАК ЗаказНаПроизводство,
	|	ТаблицаУслуги.КодСтрокиЭтапыГрафик КАК КодСтрокиЭтапыГрафик,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Склад КАК Склад,
	|	ТабличнаяЧасть.КоличествоПоЗаказу КАК КЗаказу
	|ИЗ
	|	Документ.ЗаказПереработчику.РаспоряжениеСпецификация КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.Услуги КАК ТаблицаУслуги
	|		ПО ТабличнаяЧасть.Ссылка = ТаблицаУслуги.Ссылка
	|			И ТабличнаяЧасть.НомерГруппыЗатрат = ТаблицаУслуги.НомерГруппыЗатрат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ТаблицаВозвратныеОтходы
	|		ПО ТабличнаяЧасть.Ссылка = ТаблицаВозвратныеОтходы.Ссылка
	|			И ТабличнаяЧасть.Номенклатура = ТаблицаВозвратныеОтходы.Номенклатура
	|			И ТабличнаяЧасть.Характеристика = ТаблицаВозвратныеОтходы.Характеристика
	|			И ТабличнаяЧасть.НомерГруппыЗатрат = ТаблицаВозвратныеОтходы.НомерГруппыЗатрат
	|
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &ГруппировкаЗатрат = ЗНАЧЕНИЕ(Перечисление.ГруппировкиЗатратВЗаказеПереработчику.ПоЗаказамНаПроизводство)
	|	И ТабличнаяЧасть.ТипДвиженияЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыДвиженияЗапасов.Поступление)
	|	И ТабличнаяЧасть.КоличествоПоЗаказу > 0
	|	И ТаблицаВозвратныеОтходы.Ссылка ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТКА

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос)

	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАналитики = Новый Структура;
	ПараметрыАналитики.Вставить("Организация", Запрос.Параметры.Организация); 
	ПараметрыАналитики.Вставить("Партнер", Запрос.Параметры.Партнер); 
	ПараметрыАналитики.Вставить("Контрагент", Запрос.Параметры.Контрагент); 
	ПараметрыАналитики.Вставить("Договор", Запрос.Параметры.Договор); 
	ПараметрыАналитики.Вставить("НаправлениеДеятельности", Запрос.Параметры.НаправлениеДеятельности);
			
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики));
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	Если ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПереработчику) Тогда
		
		// Заказ переработчику на продукцию
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПереработчикуНаУслуги";
		КомандаПечати.Представление = НСтр("ru = 'Заказ переработчику на услуги по выпуску продукции';
											|en = 'Tolling order for product release services'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Заказ переработчика на сырье
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
		КомандаПечати.Идентификатор = "ЗаказПереработчикаНаСырье";
		КомандаПечати.Представление = НСтр("ru = 'Заказ переработчика на сырье и материалы';
											|en = 'Tolling order for materials'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаСырьеИМатериалы(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Исполнитель,
	|
	|	ЛОЖЬ													КАК УчитыватьНДС,
	|	ЛОЖЬ													КАК ЦенаВключаетНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Заказчик,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	Документы.АдресДоставки									КАК АдресДоставки,
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Документы
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументЗаказ.Ссылка									КАК Ссылка,
	|	ДокументЗаказ.Дата                                      КАК Дата,
	|	ДокументЗаказ.Валюта                                    КАК Валюта,
	|	ДокументЗаказ.ВидЦены                                   КАК ВидЦены,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.ДатаОтгрузки										КАК ДатаОтгрузки,
	|	Товары.Характеристика				                    КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.Количество								        КАК Количество,
	|	Товары.КоличествоУпаковок								КАК КоличествоУпаковок,
	|	Товары.Упаковка								            КАК Упаковка,
	|
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|	0														КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА ДокументЗаказ.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ПОМЕСТИТЬ МатериалыЭтапов
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДокументЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 ТаблицаЭтап
	|		ПО ТаблицаЭтап.ЗаказПереработчику = ДокументЗаказ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Товары
	|		ПО Товары.Ссылка = ТаблицаЭтап.Ссылка
	|
	|ГДЕ
	|	ДокументЗаказ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыЦенНоменклатуры.Ссылка,
	|	ПериодыЦенНоменклатуры.НомерСтроки,
	|	ПериодыЦенНоменклатуры.Дата,
	|	ЦеныНоменклатуры.Валюта,
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Упаковка
	|ПОМЕСТИТЬ Цены
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.Ссылка КАК Ссылка,
	|		Товары.НомерСтроки КАК НомерСтроки,
	|		Товары.Дата КАК Дата,
	|		ЦеныНоменклатуры.ВидЦены КАК ВидЦены,
	|		ЦеныНоменклатуры.Валюта КАК Валюта,
	|		ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|		ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|		МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|	ИЗ
	|		МатериалыЭтапов КАК Товары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|			ПО Товары.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|				И Товары.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|				И Товары.Характеристика = ЦеныНоменклатуры.Характеристика
	|				И Товары.Дата >= ЦеныНоменклатуры.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Товары.Ссылка,
	|		Товары.НомерСтроки,
	|		Товары.Дата,
	|		ЦеныНоменклатуры.ВидЦены,
	|		ЦеныНоменклатуры.Валюта,
	|		ЦеныНоменклатуры.Номенклатура,
	|		ЦеныНоменклатуры.Характеристика
	|	) КАК ПериодыЦенНоменклатуры
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО ПериодыЦенНоменклатуры.Период = ЦеныНоменклатуры.Период
	|			И ПериодыЦенНоменклатуры.ВидЦены = ЦеныНоменклатуры.ВидЦены
	|			И ПериодыЦенНоменклатуры.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И ПериодыЦенНоменклатуры.Характеристика = ЦеныНоменклатуры.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсыВалют.Ссылка,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.Курс
	|ПОМЕСТИТЬ КурсыВалютыЦены
	|ИЗ
	|	(ВЫБРАТЬ
	|		Цены.Ссылка КАК Ссылка,
	|		Цены.Валюта КАК Валюта,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		Цены КАК Цены
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО Цены.Валюта = КурсыВалют.Валюта
	|				И Цены.Дата >= КурсыВалют.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Цены.Ссылка,
	|		Цены.Валюта
	|	) КАК ПериодыКурсыВалют
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсыВалют.Период = КурсыВалют.Период
	|			И ПериодыКурсыВалют.Валюта = КурсыВалют.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсыВалют.Ссылка,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.Курс
	|ПОМЕСТИТЬ КурсыВалюты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МатериалыЭтапов.Ссылка КАК Ссылка,
	|		МатериалыЭтапов.Валюта КАК Валюта,
	|		МАКСИМУМ(КурсыВалют.Период) КАК Период
	|	ИЗ
	|		МатериалыЭтапов КАК МатериалыЭтапов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|			ПО МатериалыЭтапов.Валюта = КурсыВалют.Валюта
	|				И МатериалыЭтапов.Дата >= КурсыВалют.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		МатериалыЭтапов.Ссылка,
	|		МатериалыЭтапов.Валюта
	|	) КАК ПериодыКурсыВалют
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсыВалют.Период = КурсыВалют.Период
	|			И ПериодыКурсыВалют.Валюта = КурсыВалют.Валюта
	//-- НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаОтгрузки										КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|	Товары.Сумма											КАК Сумма,
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|	0														КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ВЫБОР КОГДА Товары.Ссылка.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказПереработчику.Материалы КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|	И Товары.Отменено = ЛОЖЬ
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Ссылка									        КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаОтгрузки										КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок                               КАК Количество,
	|
	|	ВЫБОР
	|		КОГДА Товары.Валюта <> Цены.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ * ЕСТЬNULL(Цены.Цена,0)                           КАК Цена,
	|	0														КАК СуммаСкидки,
	|	0														КАК СуммаБезСкидки,
	|	ВЫБОР
	|		КОГДА Товары.Валюта <> Цены.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ * Товары.Количество * ЕСТЬNULL(Цены.Цена,0)       КАК Сумма,
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|	0														КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	Товары.ЭтоВозвратнаяТара								КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	МатериалыЭтапов КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Цены КАК Цены
	|		ПО Товары.Ссылка = Цены.Ссылка
	|			И Товары.НомерСтроки = Цены.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютыЦены КАК КурсыВалютыЦены
	|		ПО КурсыВалютыЦены.Ссылка = Цены.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалюты КАК КурсыВалюты
	|		ПО Товары.Ссылка = КурсыВалюты.Ссылка
	|
	//-- НЕ УТКА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Заказ переработчика на сырье и материалы';
																|en = 'Tolling order for materials'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа переработчика';
																|en = 'tolling order '"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.ВГраница()]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаУслуги(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Заказчик,
	|
	|	ЛОЖЬ													КАК УчитыватьНДС,
	|	ЛОЖЬ													КАК ЦенаВключаетНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Исполнитель,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	""""													КАК АдресДоставки,
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	0														КАК Цена,
	|	0														КАК Сумма,
	|	0														КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	0														КАК СуммаБезСкидки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПереработчику.Продукция КАК Товары
	|	ПО
	|		Заказ.Ссылка В(&МассивОбъектов)
	|		И Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	Товары.Сумма											КАК Сумма,
	|	0														КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказПереработчику КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказПереработчику.ВозвратныеОтходы КАК Товары
	|	ПО
	|		Заказ.Ссылка В(&МассивОбъектов)
	|		И Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеквизитыЭтапа.ЗаказПереработчику						КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПроизводства									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	0														КАК Цена,
	|	0														КАК Сумма,
	|	0														КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	0														КАК СуммаБезСкидки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Товары
	|	ПО
	|		РеквизитыЭтапа.Ссылка = Товары.Ссылка
	|ГДЕ
	|	РеквизитыЭтапа.ЗаказПереработчику В(&МассивОбъектов)
	|	И НЕ Товары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|	РеквизитыЭтапа.ЗаказПереработчику						КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПроизводства									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	0												        КАК Цена,
	|	0											            КАК Сумма,
	|	0														КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	0											            КАК СуммаБезСкидки,
	|
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Товары
	|	ПО
	|		РеквизитыЭтапа.Ссылка = Товары.Ссылка
	|ГДЕ
	|	РеквизитыЭтапа.ЗаказПереработчику В(&МассивОбъектов)
	|	И НЕ Товары.Отменено
	//-- НЕ УТКА
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Заказ переработчику на услуги по выпуску продукции';
																|en = 'Tolling order for product release services'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа переработчику';
																|en = 'tolling order'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ()

	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапросДанные.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапросДанные.Характеристика КАК Характеристика,
	|	ВложенныйЗапросДанные.Упаковка КАК Упаковка,
	|	СУММА(ВложенныйЗапросДанные.Количество) КАК Количество,
	|	СУММА(ВложенныйЗапросДанные.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ВложенныйЗапросДанные.СуммаСНДС) КАК СуммаСНДС,
	|	ВложенныйЗапросДанные.Склад КАК Склад,
	|	ВложенныйЗапросДанные.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|		0 КАК СуммаСНДС,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ КАК Склад,
	|		ВтДокументы.ДокументСсылка КАК Ссылка
	|	ИЗ
	|		Документ.ЗаказПереработчику.Продукция КАК ДокументТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|			ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|	ГДЕ
	|		НЕ ДокументТовары.Отменено
	|		И ВтДокументы.Проведен
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ДокументТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ,
	|		ВтДокументы.ДокументСсылка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ,
	|		СУММА(ДокументТовары.Количество),
	|		СУММА(ДокументТовары.КоличествоУпаковок),
	|		СУММА(ДокументТовары.Сумма),
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ КАК Склад,
	|		ВтДокументы.ДокументСсылка
	|	ИЗ
	|		Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ДокументТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|			ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|	ГДЕ
	|		НЕ ДокументТовары.Отменено
	|		И ВтДокументы.Проведен
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ДокументТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ,
	|		ВтДокументы.ДокументСсылка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	|	
	//++ НЕ УТКА
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументТовары.Номенклатура КАК Номенклатура,
	|		ДокументТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ КАК Упаковка,
	|		СУММА(ДокументТовары.Количество) КАК Количество,
	|		СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|		0 КАК СуммаСНДС,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ КАК Склад,
	|		ВтДокументы.ДокументСсылка КАК Ссылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|			ПО (ВтДокументы.ДокументСсылка = РеквизитыЭтапа.ЗаказПереработчику)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ДокументТовары
	|			ПО ДокументТовары.Ссылка = РеквизитыЭтапа.Ссылка
	|	ГДЕ
	|		ВтДокументы.Проведен
	|		И НЕ ДокументТовары.Отменено
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ДокументТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ,
	|		ВтДокументы.ДокументСсылка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ,
	|		СУММА(ДокументТовары.Количество),
	|		СУММА(ДокументТовары.КоличествоУпаковок),
	|		СУММА(ДокументТовары.Сумма),
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ КАК Склад,
	|		ВтДокументы.ДокументСсылка
	|	ИЗ
	|		Документ.ЭтапПроизводства2_2 КАК РеквизитыЭтапа
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|			ПО (ВтДокументы.ДокументСсылка = РеквизитыЭтапа.ЗаказПереработчику)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ДокументТовары
	|			ПО ДокументТовары.Ссылка = РеквизитыЭтапа.Ссылка
	|	ГДЕ
	|		ВтДокументы.Проведен
	|		И НЕ ДокументТовары.Отменено
	|
	|	СГРУППИРОВАТЬ ПО
	|		ДокументТовары.Номенклатура,
	|		ДокументТовары.Характеристика,
	|		ДокументТовары.Упаковка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИНАЧЕ ДокументТовары.Получатель
	|		КОНЕЦ,
	|		ВтДокументы.ДокументСсылка,
	|		ВЫБОР
	|			КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|				ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|			ИНАЧЕ ДокументТовары.Упаковка
	|		КОНЕЦ
	//-- НЕ УТКА
	|) КАК ВложенныйЗапросДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапросДанные.Номенклатура,
	|	ВложенныйЗапросДанные.Характеристика,
	|	ВложенныйЗапросДанные.Упаковка,
	|	ВложенныйЗапросДанные.Склад,
	|	ВложенныйЗапросДанные.Ссылка
	|
	|;";

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОтмененоПоступление()

	ТекстЗапроса =  "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ДокументТовары.ПричинаОтмены КАК ПричинаОтмены,
	|	0 КАК Сумма
	|ИЗ
	|	Документ.ЗаказПереработчику.Продукция КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВтДокументы.ДокументСсылка КАК Документ,
	|	ДокументТовары.НомерСтроки КАК НомерСтроки,
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ДокументТовары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР 
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) 
	|	ТОГДА
	|		ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	ДокументТовары.ПричинаОтмены КАК ПричинаОтмены,
	|	0 КАК Сумма
	|ИЗ
	|	Документ.ЗаказПереработчику.ВозвратныеОтходы КАК ДокументТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка
	|ГДЕ
	|	ДокументТовары.Отменено
	|
	|ИТОГИ ПО
	|	Документ
	|;";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция КоэффициентНормативов(ФактическаяПродукция, НормативнаяПродукция, Наибольший = Истина) Экспорт

	Коэффициент = Неопределено;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
	Для каждого СтрокаФакт Из ФактическаяПродукция Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаФакт);
  		СписокСтрок = НормативнаяПродукция.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНорматив Из СписокСтрок Цикл
			НовыйКоэффициент = СтрокаФакт.Количество / СтрокаНорматив.Количество;
			Если Наибольший Тогда
				Коэффициент = ?(Коэффициент <> Неопределено, Макс(НовыйКоэффициент, Коэффициент), НовыйКоэффициент);
			Иначе
				Коэффициент = ?(Коэффициент <> Неопределено, Мин(НовыйКоэффициент, Коэффициент),  НовыйКоэффициент);
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	
	Возврат ?(Коэффициент = Неопределено, 0, Коэффициент);

КонецФункции

Процедура ЗаполнитьПоНормативам(Приемник, Нормативы, КоэффициентНормативов, НомерГруппыЗатрат, ИмяПоляГруппаЗатрат, ДопЗначения = Неопределено, ПроверитьОкруглениеНормативов = Ложь) Экспорт

	// Добавление новых данных
	Для каждого СтрокаЗаказа Из Нормативы Цикл
		СтрокаДокумента = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаЗаказа);
		Если ПроверитьОкруглениеНормативов И СтрокаЗаказа.КоличествоОкруглено Тогда
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.КоличествоУпаковок * КоэффициентНормативов;
			СтрокаДокумента.Количество = Окр(СтрокаЗаказа.КоличествоУпаковок * СтрокаЗаказа.КоэффициентУпаковки, 0);
		Иначе
			СтрокаДокумента.Количество = СтрокаЗаказа.Количество * КоэффициентНормативов;
			СтрокаДокумента.КоличествоУпаковок = СтрокаДокумента.Количество / СтрокаЗаказа.КоэффициентУпаковки;
		КонецЕсли; 
		СтрокаДокумента[ИмяПоляГруппаЗатрат] = НомерГруппыЗатрат;
		Если ДопЗначения <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, ДопЗначения);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры 

Процедура УстановитьУсловноеОформлениеСписка(Список) Экспорт

	// Условное оформление динамического списка "Список"
	СписокУсловноеОформление = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
	СписокУсловноеОформление.Элементы.Очистить();
	
	// Документ имеет высокий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет высокий приоритет';
								|en = 'The document is in high priority'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьВысшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ВысокийПриоритетДокумента);
	
	// Документ имеет низкий приоритет
	Элемент = СписокУсловноеОформление.Элементы.Добавить();
	Элемент.Представление = НСтр("ru = 'Документ имеет низкий приоритет';
								|en = 'The document is in low priority'");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Приоритет");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Приоритеты.ПолучитьНизшийПриоритет();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НизкийПриоритетДокумента);

КонецПроцедуры

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ЗаказПереработчику";
КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние",               Перечисления.СостоянияЗаказовПереработчикам.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено",     Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты",             0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты",           0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПоступления",        0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентПоступления",      0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга",              0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга",            0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате",            0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

//++ НЕ УТКА

Процедура ЗаполнитьКодСтрокиВТабличнойЧасти(ТабличнаяЧасть, ВоВсехСтроках, МаксимальныйКодСтроки) Экспорт

	Для каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		Если ВоВсехСтроках ИЛИ ДанныеСтроки.КодСтроки = 0 Тогда
			МаксимальныйКодСтроки = МаксимальныйКодСтроки + 1;
			ДанныеСтроки.КодСтроки = МаксимальныйКодСтроки;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти

//++ НЕ УТКА

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ЗаказПереработчику.Форма.РабочееМесто";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или Пользователи.РолиДоступны("ИспользованиеРабочегоМестаЗаказыПереработчикам"))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДетальныйЗапрос.КОформлениюВсего) КАК ЗаказыПереработчикамКОформлению
	|	ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК КОформлениюВсего
	|	ИЗ
	|		РегистрСведений.ГрафикЭтаповПроизводства КАК ДанныеГрафикаПроизводства
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|		ПО
	|			ДанныеГрафикаПроизводства.Распоряжение				= ЭтапыПроизводства.Распоряжение
	|			И ДанныеГрафикаПроизводства.КодСтрокиПродукция		= ЭтапыПроизводства.КодСтрокиПродукция
	|			И ДанныеГрафикаПроизводства.КодСтрокиЭтапыГрафик	= ЭтапыПроизводства.КодСтрокиЭтапыГрафик
	|			И ДанныеГрафикаПроизводства.Этап					= ЭтапыПроизводства.Этап
	|			И ДанныеГрафикаПроизводства.Подразделение			= ЭтапыПроизводства.Подразделение
	|			И (ЭтапыПроизводства.Регистратор ССЫЛКА Документ.ЗаказНаПроизводство)
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|	
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|				Документ.ЗаказНаПроизводство.Этапы КАК ЗаказНаПроизводствоЭтапы
	|			ПО
	|				(ЗаказНаПроизводствоЭтапы.Ссылка = ЗаказНаПроизводствоПродукция.Ссылка)
	|				И (ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция = ЗаказНаПроизводствоПродукция.КлючСвязи)
	|		ПО
	|			(ЗаказНаПроизводствоЭтапы.Ссылка			= ДанныеГрафикаПроизводства.Распоряжение)
	|			И (ЗаказНаПроизводствоПродукция.КодСтроки	= ДанныеГрафикаПроизводства.КодСтрокиПродукция)
	|			И (ЗаказНаПроизводствоЭтапы.Этап			= ДанныеГрафикаПроизводства.Этап)
	|	ГДЕ
	|		ЕСТЬNULL(ЗаказНаПроизводствоЭтапы.ПроизводствоНаСтороне, ЛОЖЬ)	
	|		
	|	СГРУППИРОВАТЬ ПО
	|		ЭтапыПроизводства.Распоряжение,
	|		ЭтапыПроизводства.КодСтрокиПродукция,
	|		ЭтапыПроизводства.КодСтрокиЭтапыГрафик,
	|		ЭтапыПроизводства.Этап,
	|		ЭтапыПроизводства.Подразделение,
	|		ЭтапыПроизводства.Регистратор,
	|		ЗаказНаПроизводствоЭтапы.Ссылка,
	|		ЗаказНаПроизводствоЭтапы.КлючСвязиПродукция,
	|		ЗаказНаПроизводствоЭтапы.Этап) КАК ДетальныйЗапрос
	|";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ПроизводствоНаСтороне
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ПроизводствоНаСтороне";
	ДелоРодитель.Представление  = НСтр("ru = 'Производство на стороне';
										|en = 'Production by third party'");
	ДелоРодитель.ЕстьДела       = Результат.ЗаказыПереработчикамКОформлению > 0;
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Производство;
	
	// ЗаказыПереработчикамКОформлению
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ОтборПериод", Новый СтандартныйПериод);
	ПараметрыОтбора.Вставить("СписокРаспоряжений", Новый СписокЗначений);
	ПараметрыОтбора.Вставить("ОтборПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Менеджер", ОбщиеПараметрыЗапросов.Пользователь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаказыПереработчикамКОформлению";
	Дело.ЕстьДела       = Результат.ЗаказыПереработчикамКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Заказы переработчикам к оформлению';
								|en = 'Tolling orders for registration'");
	Дело.Количество     = Результат.ЗаказыПереработчикамКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПроизводствоНаСтороне";
	
КонецПроцедуры

#КонецОбласти

//-- НЕ УТКА

#Область КорректировкаЗаказа

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов - 
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда
			Таблица.Колонки.Добавить("Серия");
		КонецЕсли;
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказПереработчику") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Поступление Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКПоступлению.ЗаказПоставщику КАК Заказ,
			|	ТоварыКПоступлению.Номенклатура    КАК Номенклатура,
			|	ТоварыКПоступлению.Характеристика  КАК Характеристика,
			|	ТоварыКПоступлению.Склад           КАК Склад,
			|	СУММА(ТоварыКПоступлению.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Обороты(&НачПериод, &КонПериод,
			|		, ЗаказПоставщику В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
			|ГДЕ
			|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКПоступлению.Номенклатура,
			|	ТоварыКПоступлению.Характеристика,
			|	ТоварыКПоступлению.ЗаказПоставщику,
			|	ТоварыКПоступлению.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыПоставщикам",
			"ЗаказПоставщику В (&МассивРаспоряжений)", Запрос.Параметры);
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКОтгрузке.ЗаказКлиента   КАК Заказ,
			|	ТоварыКОтгрузке.Номенклатура   КАК Номенклатура,
			|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
			|	ТоварыКОтгрузке.Серия          КАК Серия,
			|	ТоварыКОтгрузке.Склад          КАК Склад,
			|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Обороты(&НачПериод,&КонПериод,,
			|		ЗаказКлиента В (&МассивРаспоряжений)) КАК ТоварыКОтгрузке
			|ГДЕ
			|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКОтгрузке.ЗаказКлиента,
			|	ТоварыКОтгрузке.Номенклатура,
			|	ТоварыКОтгрузке.Характеристика,
			|	ТоварыКОтгрузке.Серия,
			|	ТоварыКОтгрузке.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
			"ЗаказКлиента В (&МассивРаспоряжений)", Запрос.Параметры);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

Функция ТаблицаРаспоряжениеСпецификацияДляОбеспечения(Объект, Отбор = Неопределено) Экспорт

	ТаблицаРаспоряжениеСпецификация = ОбеспечениеСервер.ТаблицаПотребностей();
	Если Объект.ПереработкаПоЗаказу Тогда

		Для Каждого СтрокаТаблицы Из Объект.РаспоряжениеСпецификация Цикл

			Если СтрокаТаблицы.КоличествоПоЗаказу <> 0
				И (ТипЗнч(СтрокаТаблицы.Склад) = Тип("СправочникСсылка.Склады")
					Или ТипЗнч(СтрокаТаблицы.Склад) <> Тип("СправочникСсылка.Склады")
						И СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно) Тогда

				Если СтрокаТаблицы.ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда

					Если СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется
						Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
							И (СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Требуется
								Или СтрокаТаблицы.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно) Тогда

						Продолжить;

					Иначе

						НоваяСтрока = ТаблицаРаспоряжениеСпецификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "НомерСтроки");
						НоваяСтрока.Количество = - СтрокаТаблицы.КоличествоПоЗаказу;

					КонецЕсли;

				Иначе

					Если Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.НеСогласован
						Или Объект.Статус = Перечисления.СтатусыЗаказовПереработчикам.КОбеспечению Тогда

						Продолжить;

					Иначе

						НоваяСтрока = ТаблицаРаспоряжениеСпецификация.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "НомерСтроки");
						НоваяСтрока.ВариантОбеспечения = ?(ЗначениеЗаполнено(НоваяСтрока.Назначение),
							Перечисления.ВариантыОбеспечения.Обособленно,
							Перечисления.ВариантыОбеспечения.ИзЗаказов);
						НоваяСтрока.Назначение = Объект.Назначение;
						НоваяСтрока.Количество = СтрокаТаблицы.КоличествоПоЗаказу;

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		МассивНоменклатуры = ТаблицаРаспоряжениеСпецификация.Скопировать(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ТипыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивНоменклатуры, "ТипНоменклатуры");

		Для Каждого СтрокаТовары Из ТаблицаРаспоряжениеСпецификация Цикл
			СтрокаТовары.ТипНоменклатуры = ТипыНоменклатуры.Получить(СтрокаТовары.Номенклатура).ТипНоменклатуры;
		КонецЦикла;

	КонецЕсли;

	Возврат ТаблицаРаспоряжениеСпецификация;

КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	&Статус                                 КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&ДатаПоДаннымПартнера                   КАК ДатаПервичногоДокумента,
	|	&НомерПоДаннымПартнера                  КАК НомерПервичногоДокумента,
	|	&Период    КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурналеДокументыПродажи

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Изменение", Метаданные.Документы.ЗаказПереработчику)
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Заказы переработчикам';
							|en = 'Tolling orders'");
	
	Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ИмяФормыРабочееМесто());
	
КонецФункции

Функция ИмяФормыРабочееМесто() Экспорт
	
	Возврат "Документ.ЗаказПереработчику.Форма.РабочееМесто";
	
КонецФункции

#КонецОбласти

#Область Назначения

// Возврашает шаблон для генерации назначения продукции в документе.
//
// Параметры:
// 		Объект - ДокументОбъект.ЗаказПереработчику, ДанныеФормыСтруктура - заказ переработчику, по которому необходимо получить шаблон назначения.
//
// Возвращаемое значение:
// 		Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	ВариантОбособления = Константы.ВариантОбособленияМатериаловВПереработке.Получить();
	
	Если ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПереработке.ДоговорСПереработчиком Тогда
		
		ШаблонНазначения.Партнер = Объект.Партнер;
		ШаблонНазначения.Договор = Объект.Договор;
		
	ИначеЕсли ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПереработке.НаправлениеДеятельности
		Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
		
		ШаблонНазначения.Заказ = Объект.Ссылка;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

