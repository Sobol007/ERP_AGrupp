#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.СтатусДокумента = Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе;
		
		ЗначенияДляЗаполнения = Новый Структура("Организация, Ответственный", "Объект.Организация", "Объект.Ответственный");
		ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтотОбъект, ЗначенияДляЗаполнения);
		
		ДополнитьФорму();
		
		ОбновитьВторичныеДанныеДокумента(Истина, Ложь);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	// РегламентированнаяОтчетность
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ОтметитьКакПрочтенное(Объект.Ссылка);
	// Конец РегламентированнаяОтчетность
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ДополнитьФорму();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Если Не ДокументОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбработатьСообщенияПользователю(ДокументОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Перед записью переадресуем сообщения с полей объекта на поля формы
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	Для Каждого Сообщение Из Сообщения Цикл
		Если Найти(Сообщение.Поле, "].ЛистокНетрудоспособности") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НачалоНомераСтроки = Найти(Сообщение.Поле, "[");
		ОкончаниеНомераСтроки = Найти(Сообщение.Поле, "]");
		Если НачалоНомераСтроки > 0
			И ОкончаниеНомераСтроки > 0 Тогда
			НачалоНомераСтроки = НачалоНомераСтроки + 1;
			НомерСтроки = Сред(Сообщение.Поле, НачалоНомераСтроки, ОкончаниеНомераСтроки - НачалоНомераСтроки);
			ЛистокНетрудоспособности = Объект.ДанныеЭЛН[Число(НомерСтроки)].ЛистокНетрудоспособности;
			Если ЗначениеЗаполнено(ЛистокНетрудоспособности) Тогда
				Сообщение.КлючДанных = ЛистокНетрудоспособности;
				Сообщение.Поле = Прав(Сообщение.Поле, СтрДлина(Сообщение.Поле) - (ОкончаниеНомераСтроки + 1));
				Сообщение.ПутьКДанным = "Объект";
			Иначе
				Сообщение.Поле = Лев(Сообщение.Поле, Найти(Сообщение.Поле, "]")) + ".ЛистокНетрудоспособности";
			КонецЕсли;
		КонецЕсли;
		Отказ = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// РегламентированнаяОтчетность
	СохранитьСтатусОтправки(ЭтотОбъект, Объект.Ссылка);
	// Конец РегламентированнаяОтчетность
	// ЗарплатаКадрыПодсистемы.ПодписиДокументов
	ПодписиДокументов.ПослеЗаписиНаСервере(ЭтотОбъект);
	// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_РеестрДанныхЭЛНЗаполняемыхРаботодателем", ПараметрыЗаписи, Объект.Ссылка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗарплатаКадрыКлиент.КлючевыеРеквизитыЗаполненияФормыОчиститьТаблицы(ЭтотОбъект);
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ЗарплатаКадрыКлиент.КомментарийНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка)
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеЭЛН

&НаКлиенте
Процедура ДанныеЭЛНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	// Стандартные реквизиты формы выбора (см. Расширение управляемой формы для динамического списка).
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Документ.БольничныйЛист.ФормаВыбора", ПараметрыФормыВыбора, Элементы.ДанныеЭЛН, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Или ТипЗнч(ВыбранноеЗначение) <> Тип("ДокументСсылка.БольничныйЛист") Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Найденные = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("ЛистокНетрудоспособности", ВыбранноеЗначение));
	Если Найденные.Количество() > 0 Тогда
		Элементы.ДанныеЭЛН.ТекущаяСтрока = Найденные[0].ПолучитьИдентификатор();
	Иначе
		СтрокаТаблицы = Объект.ДанныеЭЛН.Добавить();
		СтрокаТаблицы.ЛистокНетрудоспособности = ВыбранноеЗначение;
		ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
		Элементы.ДанныеЭЛН.ТекущаяСтрока = ИдентификаторСтроки;
		ЗаполнитьСтрокуСведений(ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНПослеУдаления(Элемент)
	ДанныеЭЛНПослеУдаленияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ДанныеЭЛНПриОкончанииРедактированияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокРеквизитов = ИменаРеквизитовСтрокиНаФорме();
	СписокРеквизитов.Добавить("НомерСтроки");
	СписокРеквизитов.Добавить("ЛистокНетрудоспособности");
	СтруктураДанныеЭЛН = Новый Структура;
	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		СтруктураДанныеЭЛН.Вставить(ЭлементСписка.Значение, ТекущиеДанные[ЭлементСписка.Значение]);
	КонецЦикла;
	
	ИнформацияОДокументе = Новый Структура;
	ИнформацияОДокументе.Вставить("ЭтоНовый", Объект.Ссылка.Пустая());
	ИнформацияОДокументе.Вставить("Номер", Объект.Номер);
	ИнформацияОДокументе.Вставить("Дата", Объект.Дата);
	ИнформацияОДокументе.Вставить("Организация", Объект.Организация);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДанныеЭЛН", СтруктураДанныеЭЛН);
	ПараметрыФормы.Вставить("ИнформацияОДокументе", ИнформацияОДокументе);
	
	Оповещение = Новый ОписаниеОповещения("ДанныеЭЛНВыборЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.Форма.СведенияОЛисткеНетрудоспособности", ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНЛистокНетрудоспособностиПриИзменении(Элемент)
	ИдентификаторСтроки = Элементы.ДанныеЭЛН.ТекущаяСтрока;
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьСтрокуСведений(ИдентификаторСтроки);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьДокумент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВторичныеДанные(Команда)
	ОбновитьВторичныеДанныеДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРеестрВФСС(Команда)
	Обработчик = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ЗаписатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестра(Команда)
	Обработчик = Новый ОписаниеОповещения("ПоказатьФайлРеестраПослеПроверки", ЭтотОбъект);
	ЗаписатьИПроверитьПоРегламентуФСС(Обработчик, РежимЗаписиДокумента.Проведение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с формой.

&НаСервере
Функция ОбъектЗафиксирован() Экспорт
	Возврат РеквизитФормыВЗначение("Объект").ОбъектЗафиксирован();
КонецФункции

&НаСервере
Процедура ДополнитьФорму()
	ЗарплатаКадры.КлючевыеРеквизитыЗаполненияФормыЗаполнитьПредупреждения(ЭтотОбъект);
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации = Истина, ДанныеОПособиях = Истина)
	Если ДанныеОрганизации Тогда
		// ЗарплатаКадрыПодсистемы.ПодписиДокументов
		ПодписиДокументов.ЗаполнитьПодписиПоОрганизации(ЭтотОбъект);
		// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов
	КонецЕсли;
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ОбновитьВторичныеДанныеДокумента(ДанныеОрганизации, ДанныеОПособиях);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание элементов шапки.

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ОбновитьВторичныеДанныеДокумента(Истина, Ложь);
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтотОбъект, "ФСС");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание команд.

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	// Формирование параметров запроса к сервису отправки Реестров ЭЛН.
	РезультатВыгрузки = ВыгрузитьРеестрЭЛН(Ложь);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подписание и отправка запроса, расшифровка ответа.
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ЭлектронныйДокументооборотСФССКлиент.ОтправитьВыгрузкуРеестраДанныхЭЛНВСервисФСС(Оповещение, РезультатВыгрузки);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ПустойПараметр) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Загрузка ответа ФСС.
	РезультатОбмена = ЗагрузитьОтветСервисаФСС(Результат.АдресРасшифрованногоОтветаSOAP);
	РезультатОбмена.Вставить("ИндексБольничного", РезультатОбмена.БольничныеТребующиеАктуализацииХэша.Количество());
	АктуализироватьХэшБольничных(РезультатОбмена);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиОтветаФССИАктуализацииХэшаБольничных(РезультатОбмена)
	Если Не РезультатОбмена.Отказ Тогда
		Если РезультатОбмена.БольничныеТребующиеАктуализацииХэша.Количество() > 0 Тогда
			// Произведена актуализации хэшей, других ошибок небыло, требуется повторный обмен.
			ОтправитьРеестрВФСС(Неопределено);
		Иначе
			// Обмен произведен без ошибок, требуется запись документа.
			Объект.СтатусДокумента = ПредопределенноеЗначение("Перечисление.СтатусыЗаявленийИРеестровНаВыплатуПособий.ПринятФСС");
			ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Записать(ПараметрыЗаписи);
			ПоказатьОповещениеПользователя(, , НСтр("ru = 'Реестр ЭЛН отправлен в ФСС.';
													|en = 'ESLR registry is sent to SSF.'"), БиблиотекаКартинок.Успешно32);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#Область АктуализацияХэшаБольничных

&НаКлиенте
Процедура АктуализироватьХэшБольничных(РезультатОбмена)
	РезультатОбмена.ИндексБольничного = РезультатОбмена.ИндексБольничного - 1;
	Если РезультатОбмена.ИндексБольничного < 0 Тогда
		ПослеЗагрузкиОтветаФССИАктуализацииХэшаБольничных(РезультатОбмена);
		Возврат;
	КонецЕсли;
	
	// Формирование параметров запроса к сервису получения ЭЛН.
	НомерСтроки = РезультатОбмена.БольничныеТребующиеАктуализацииХэша[РезультатОбмена.ИндексБольничного];
	Если Не ЗначениеЗаполнено(НомерСтроки) Тогда // Переход к следующему больничному.
		АктуализироватьХэшБольничных(РезультатОбмена);
		Возврат;
	КонецЕсли;
	ЗапросДляПолученияЭЛН = ВыгрузитьЗапросДляПолученияЭЛН(НомерСтроки);
	Если ЗапросДляПолученияЭЛН = Неопределено Тогда // Переход к следующему больничному.
		АктуализироватьХэшБольничных(РезультатОбмена);
		Возврат;
	КонецЕсли;
	
	// Подписание и отправка запроса, расшифровка ответа.
	Оповещение = Новый ОписаниеОповещения("ПродолжитьАктуализациюХэшаБольничного", ЭтотОбъект, РезультатОбмена);
	ЭлектронныйДокументооборотСФССКлиент.ПолучитьДанныеЭЛНИзФСС(Оповещение, ЗапросДляПолученияЭЛН);
КонецПроцедуры

&НаСервере
Функция ВыгрузитьЗапросДляПолученияЭЛН(НомерСтроки)
	Документ = СтруктураДляПолученияХэшаЭЛН(НомерСтроки);
	Возврат ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляПолученияЭЛН(Документ);
КонецФункции

&НаСервере
Функция СтруктураДляПолученияХэшаЭЛН(НомерСтроки)
	Документ = Новый Структура("Организация, Дата, Сотрудник, НомерЛисткаНетрудоспособности");
	ЗаполнитьЗначенияСвойств(Документ, Объект, "Организация, Дата");
	ЗаполнитьЗначенияСвойств(Документ, Объект.ДанныеЭЛН[НомерСтроки-1], "Сотрудник, НомерЛисткаНетрудоспособности");
	Возврат Документ;
КонецФункции

&НаКлиенте
Процедура ПродолжитьАктуализациюХэшаБольничного(Результат, РезультатОбмена) Экспорт
	Если Результат <> Неопределено Тогда
		НомерСтроки = РезультатОбмена.БольничныеТребующиеАктуализацииХэша[РезультатОбмена.ИндексБольничного];
		Если Не ЗагрузитьХэшЭЛН(Результат.АдресРасшифрованногоОтветаSOAP, НомерСтроки) Тогда
			РезультатОбмена.Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	АктуализироватьХэшБольничных(РезультатОбмена); // Переход к следующему больничному.
КонецПроцедуры

&НаСервере
Функция ЗагрузитьХэшЭЛН(Знач АдресРасшифрованногоОтветаSOAP, НомерСтроки)
	Документ = СтруктураДляПолученияХэшаЭЛН(НомерСтроки);
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(Документ, "getPrivateLNData", АдресРасшифрованногоОтветаSOAP);
	Возврат Не РезультатОбмена.Отказ;
КонецФункции

#КонецОбласти

&НаСервере
Функция ВыгрузитьРеестрЭЛН(ПомещатьВФайл)
	// Регистрационный номер ФСС организации (страхователя).
	Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомерФСС) Тогда
		Текст = НСтр("ru = 'У организации не заполнен регистрационный номер ФСС';
					|en = 'Company SSF registration number is required'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , "РегистрационныйНомерФСС", "Объект");
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатВыгрузки = ОбменЛисткамиНетрудоспособностиФСС.ВыгрузитьЗапросДляОтправкиРеестраЭЛН(Объект, ПомещатьВФайл, УникальныйИдентификатор);
	
	ИмяБезРасширения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'ReestrLN_%1_%2_%3';
			|en = 'ReestrLN_%1_%2_%3'"),
		Объект.РегистрационныйНомерФСС,
		Формат(Объект.Дата, "ДФ=yyyy-MM-dd"),
		СокрЛП(Объект.Номер));
	РезультатВыгрузки.Вставить("ИмяБезРасширения", ИмяБезРасширения);
	
	Возврат РезультатВыгрузки;
КонецФункции

&НаСервере
Функция ЗагрузитьОтветСервисаФСС(Знач АдресРасшифрованногоОтветаSOAP)
	Документ = РеквизитФормыВЗначение("Объект");
	
	РезультатОбмена = ОбменЛисткамиНетрудоспособностиФСС.ЗагрузитьОтветСервисаФСС(
		Документ,
		"prParseReestrFile",
		АдресРасшифрованногоОтветаSOAP);
	
	Возврат РезультатОбмена;
КонецФункции

&НаКлиенте
Процедура ЗаписатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	ОписаниеФайла = ВыгрузитьРеестрЭЛН(Истина);
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок      = НСтр("ru = 'Укажите файл';
								|en = 'Specify file'");
	Диалог.Фильтр         = НСтр("ru = 'Файлы XML (*.xml)|*.xml';
								|en = 'Files XML (*.xml)|*.xml'");
	Диалог.ПолноеИмяФайла = ОписаниеФайла.ИмяБезРасширения;
	Диалог.МножественныйВыбор = Ложь;
	
	ОписаниеФайла.Вставить("ДиалогСохранения", Диалог);
	
	СохранитьФайлНаКлиенте(ОписаниеФайла);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФайлРеестраПослеПроверки(ЕстьОшибки, ПустойПараметр) Экспорт
	РезультатВыгрузки = ВыгрузитьРеестрЭЛН(Ложь);
	Если РезультатВыгрузки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РезультатВыгрузки.ТекстXML);
	ТекстовыйДокумент.Показать(, РезультатВыгрузки.ИмяБезРасширения + ".xml");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с файлами.

&НаКлиенте
Процедура СохранитьФайлНаКлиенте(ОписаниеФайла)
	ТекстСообщения = НСтр("ru = 'Для выгрузки файла рекомендуется установить расширение для веб-клиента 1С:Предприятие.';
							|en = 'To export the file, install 1C:Enterprise web client extension.'");
	Обработчик = Новый ОписаниеОповещения("СохранитьФайлНаКлиентеПослеУстановкиРасширенияРаботыСФайлами", ЭтотОбъект, ОписаниеФайла);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения, Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНаКлиентеПослеУстановкиРасширенияРаботыСФайлами(Подключено, ОписаниеФайла) Экспорт
	Если Подключено Тогда
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ОписаниеФайла.ИмяБезРасширения, ОписаниеФайла.Адрес));
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаНеТребуется", ЭтотОбъект);
		НачатьПолучениеФайлов(Обработчик, ПолучаемыеФайлы, ОписаниеФайла.ДиалогСохранения, Истина);
	Иначе
		ПолучитьФайл(ОписаниеФайла.Адрес, ОписаниеФайла.ИмяБезРасширения + ".xml");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаНеТребуется(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	Возврат; // Обработка результата не требуется.
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обслуживание табличной части ДанныеЭЛН.

&НаСервере
Процедура ДанныеЭЛНПослеУдаленияНаСервере()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ДанныеЭЛНПриОкончанииРедактированияНаСервере()
	ЗарплатаКадрыКлиентСервер.КлючевыеРеквизитыЗаполненияФормыУстановитьОтображениеПредупреждения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЭЛНВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтобранныеСтроки = Объект.ДанныеЭЛН.НайтиСтроки(Новый Структура("НомерСтроки", Результат.НомерСтроки));
	Результат.Удалить("НомерСтроки");
	Если ОтобранныеСтроки.Количество() = 1 Тогда
		ЗаполнитьЗначенияСвойств(ОтобранныеСтроки[0], Результат);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение документа.

&НаСервере
Процедура ЗаполнитьДокумент()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаЗначений = Документы.БольничныйЛист.ДанныеДляРеестраЭЛН(, ДокументОбъект);
	ДокументОбъект.ДанныеЭЛН.Загрузить(ТаблицаЗначений);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуСведений(Идентификатор)
	ТекущаяСтрока = Объект.ДанныеЭЛН.НайтиПоИдентификатору(Идентификатор);
	
	СписокРеквизитов = ИменаРеквизитовСтрокиНаФорме();
	Для Каждого Реквизит Из СписокРеквизитов Цикл
		ТекущаяСтрока[Реквизит.Значение] = Неопределено;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ЛистокНетрудоспособности) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначений = Документы.БольничныйЛист.ДанныеДляРеестраЭЛН(ТекущаяСтрока.ЛистокНетрудоспособности);
	Если ТаблицаЗначений.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТаблицаЗначений[0]);
	КонецЕсли;
	
	ТекущаяСтрока.Исправление = БольничныйОтправлялсяРанее(ТекущаяСтрока.НомерЛисткаНетрудоспособности, Объект.Дата, Объект.Ссылка);
КонецПроцедуры

&НаСервереБезКонтекста
Функция БольничныйОтправлялсяРанее(НомерЛисткаНетрудоспособности, Дата, Ссылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЭЛН.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеестрДанныхЭЛНЗаполняемыхРаботодателем.ДанныеЭЛН КАК ДанныеЭЛН
	|ГДЕ
	|	ДанныеЭЛН.НомерЛисткаНетрудоспособности = &НомерЛисткаНетрудоспособности
	|	И ДанныеЭЛН.Ссылка.Дата <= &Дата
	|	И ДанныеЭЛН.Ссылка.МоментВремени < &МоментВремени
	|	И ДанныеЭЛН.Ссылка.Проведен";
	Запрос.УстановитьПараметр("НомерЛисткаНетрудоспособности", НомерЛисткаНетрудоспособности);
	
	Если Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Дата", КонецДня(Дата));
		НайтиИУдалитьСтроку(Запрос.Текст, "&МоментВремени");
	Иначе
		Запрос.УстановитьПараметр("МоментВремени", Новый МоментВремени(Дата, Ссылка));
		НайтиИУдалитьСтроку(Запрос.Текст, "&Дата");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

&НаСервереБезКонтекста
Функция НайтиИУдалитьСтроку(Текст, ФрагментУдаляемойСтроки)
	НачалоФрагмента = СтрНайти(Текст, ФрагментУдаляемойСтроки);
	Если НачалоФрагмента = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	ОкончаниеФрагмента = НачалоФрагмента + СтрДлина(ФрагментУдаляемойСтроки);
	
	НачалоСтроки = СтрНайти(Текст, Символы.ПС, НаправлениеПоиска.СКонца, НачалоФрагмента);
	ОкончаниеСтроки = СтрНайти(Текст, Символы.ПС, НаправлениеПоиска.СНачала, ОкончаниеФрагмента - 1);
	
	Текст = ?(НачалоСтроки = 0, "", СокрП(Лев(Текст, НачалоСтроки))) + ?(ОкончаниеСтроки = 0, "", Сред(Текст, ОкончаниеСтроки));
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРеквизитовСтрокиНаФорме()
	СписокРеквизитов = Новый СписокЗначений;
	
	СписокРеквизитов.Добавить("НомерЛисткаНетрудоспособности");
	СписокРеквизитов.Добавить("Сотрудник");
	СписокРеквизитов.Добавить("ВидЗанятости");
	СписокРеквизитов.Добавить("СНИЛС");
	СписокРеквизитов.Добавить("ИНН");
	СписокРеквизитов.Добавить("СтажЛет");
	СписокРеквизитов.Добавить("СтажМесяцев");
	СписокРеквизитов.Добавить("СтажРасширенныйЛет");
	СписокРеквизитов.Добавить("СтажРасширенныйМесяцев");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод1");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод2");
	СписокРеквизитов.Добавить("УсловияИсчисленияКод3");
	СписокРеквизитов.Добавить("ДатаАктаН1");
	СписокРеквизитов.Добавить("ДатаНачалаРаботы");
	СписокРеквизитов.Добавить("ПриступитьКРаботеС");
	СписокРеквизитов.Добавить("ДатаНачалаОплаты");
	СписокРеквизитов.Добавить("ДатаОкончанияОплаты");
	СписокРеквизитов.Добавить("ДатаНачалаОплатыФСС");
	СписокРеквизитов.Добавить("ДатаОкончанияОплатыФСС");
	СписокРеквизитов.Добавить("БазаДляРасчетаСреднегоЗаработка");
	СписокРеквизитов.Добавить("СреднийДневнойЗаработок");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетРаботодателя");
	СписокРеквизитов.Добавить("СуммаОплатыЗаСчетФСС");
	СписокРеквизитов.Добавить("ФинансированиеФедеральнымБюджетом");
	СписокРеквизитов.Добавить("Исправление");
	СписокРеквизитов.Добавить("КодПричиныИсправления");
	СписокРеквизитов.Добавить("ОписаниеПричиныИсправления");
	СписокРеквизитов.Добавить("ИдентификаторСтрокиФикс");
	
	Возврат СписокРеквизитов;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения

&НаСервере
Процедура ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения = Неопределено)
	Если Сообщения = Неопределено Тогда
		Сообщения = ПолучитьСообщенияПользователю(Ложь);
	КонецЕсли;
	// В сообщениях есть следующие поля:
	//   ИдентификаторНазначения - Идентификатор формы, в которой необходимо вывести сообщение.
	//   КлючДанных - Ссылка объекта, который необходимо открыть для обработки сообщения.
	//   Поле - Путь от объекта к ошибочному полю.
	//   ПутьКДанным - Путь от формы к объекту.
	//   Текст - Текст сообщения.
	// Как правило, на сервере заполняются только "Поле" и "Текст".
	// Задача процедуры в том, чтобы заполнить "ПутьКДанным" и адаптировать "Поле" к специфике формы.
	
	Для Каждого Сообщение Из Сообщения Цикл
		// Привязка сообщений к объекту.
		Если Не ЗначениеЗаполнено(Сообщение.КлючДанных)
			И Не ЗначениеЗаполнено(Сообщение.ПутьКДанным)
			И Не СтрНачинаетсяС(Сообщение.Поле, "Объект.") Тогда
			Сообщение.ПутьКДанным = "Объект";
		КонецЕсли;
		// Адаптация к специфике редактирования данных в форме.
		НачалоСкобки = СтрНайти(Сообщение.Поле, "[");
		Если НачалоСкобки = 0 Тогда
			Продолжить;
		КонецЕсли;
		ОкончаниеСкобки = СтрНайти(Сообщение.Поле, "].");
		Если НачалоСкобки > ОкончаниеСкобки Тогда
			Продолжить;
		КонецЕсли;
		ИмяТаблицы   = Лев(Сообщение.Поле, НачалоСкобки - 1);
		ИндексСтроки = Сред(Сообщение.Поле, НачалоСкобки + 1, ОкончаниеСкобки - НачалоСкобки - 1);
		ИмяРеквизита = Сред(Сообщение.Поле, ОкончаниеСкобки + 2);
		Если ИмяТаблицы = "ДанныеЭЛН"
			И ИмяРеквизита <> "ЛистокНетрудоспособности"
			И ИмяРеквизита <> "НомерЛисткаНетрудоспособности"
			И ИмяРеквизита <> "Сотрудник" Тогда
			Сообщение.Поле = ИмяТаблицы + "[" + ИндексСтроки + "].НомерЛисткаНетрудоспособности";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИПроверитьПоРегламентуФСС(ОбработчикЗавершения, РежимЗаписи)
	ОчиститьСообщения();
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписи);
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ПроверитьЗаполнениеПоРегламентуФСС();
	
	Если РезультатПроверки.Успех Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Ложь);
	Иначе
		Обработчик = Новый ОписаниеОповещения("ПроверитьПослеОтветаНаВопрос", ЭтотОбъект, ОбработчикЗавершения);
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'В документе обнаружены ошибки (%1).
				|Продолжить (не рекомендуется)?';
				|en = 'Errors were found in the document (%1).
				|Continue (not recommended)?'"),
			РезультатПроверки.КоличествоОшибок);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru = 'Предупреждение';
																										|en = 'Warning'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеПоРегламентуФСС()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Успех = ДокументОбъект.ПроверитьЗаполнениеПоРегламентуФСС();
	Сообщения = ПолучитьСообщенияПользователю(Ложь);
	ОбработатьСообщенияПользователю(ДокументОбъект, Сообщения);
	Возврат Новый Структура("Успех, КоличествоОшибок", Успех, Сообщения.Количество());
КонецФункции

&НаКлиенте
Процедура ПроверитьПослеОтветаНаВопрос(Ответ, ОбработчикЗавершения) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(ОбработчикЗавершения, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ключевые реквизиты заполнения формы.

// Функция возвращает описание таблиц формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыТаблицыОчищаемыеПриИзменении() Экспорт
	Массив = Новый Массив;
	Массив.Добавить("Объект.ДанныеЭЛН");
	Возврат Массив
КонецФункции

// Функция возвращает массив реквизитов формы подключенных к механизму ключевых реквизитов формы.
&НаСервере
Функция КлючевыеРеквизитыЗаполненияФормыОписаниеКлючевыхРеквизитов() Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Новый Структура("ЭлементФормы, Представление", "Организация", НСтр("ru = 'организации';
																						|en = 'companies'")));
	Возврат Массив
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интеграция с другими подсистемами.

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// РегламентированнаяОтчетность
&НаКлиенте
Процедура ОбновитьОтправку(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОбновитьОтправкуИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПротоколНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьПротоколИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНеотправленноеИзвещение(Команда)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОтправитьНеотправленноеИзвещениеИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыОтправкиНажатие(Элемент)
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьСостояниеОтправкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура КритическиеОшибкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьКритическиеОшибкиИзПанелиОтправки(ЭтотОбъект, "ФСС");
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНаименованиеЭтапаНажатие(Элемент)
	ПараметрыИзменения = Новый Структура;
	ПараметрыИзменения.Вставить("Форма", ЭтотОбъект);
	ПараметрыИзменения.Вставить("Организация", Объект.Организация);
	ПараметрыИзменения.Вставить("КонтролирующийОрган", ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФСС"));
	ПараметрыИзменения.Вставить("ТекстВопроса", НСтр("ru = 'Вы уверены, что реестр уже сдан?';
													|en = 'Are you sure the registry is already submitted? '"));
	
	ИнтерфейсыВзаимодействияБРОКлиент.ИзменитьСтатусОтправки(ПараметрыИзменения);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСтатусОтправки(Форма, Ссылка)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Форма", Форма);
	СтруктураПараметров.Вставить("СсылкаНаОбъект", Ссылка);
	
	ИнтерфейсыВзаимодействияБРО.СохранитьСтатусОтправки(СтруктураПараметров);
КонецПроцедуры
// Конец РегламентированнаяОтчетность

// ЗарплатаКадрыПодсистемы.ПодписиДокументов
&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементПриИзменении(Элемент)
	ПодписиДокументовКлиент.ПриИзмененииПодписывающегоЛица(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодписиДокументовЭлементНажатие(Элемент)
	ПодписиДокументовКлиент.РасширеннаяПодсказкаНажатие(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры
// Конец ЗарплатаКадрыПодсистемы.ПодписиДокументов

#КонецОбласти
