
#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ.

&НаСервере
Процедура ЗаполнитьНаОснованииУчастника(ДанныеУчастника)
	
	Объект.АбонентКонтакт = ДанныеУчастника.Контакт;
	Если ПустаяСтрока(ДанныеУчастника.КакСвязаться) Тогда
		
		Объект.АбонентКакСвязаться = "";
		Взаимодействия.ДозаполнитьПоляКонтактов(Объект.АбонентКонтакт,
			Объект.АбонентПредставление,
			Объект.АбонентКакСвязаться,
			Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	Иначе
		
		Объект.АбонентКакСвязаться = ДанныеУчастника.КакСвязаться;
		
	КонецЕсли;
	
	Объект.АбонентПредставление = ДанныеУчастника.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()

	Если НЕ Объект.Ссылка.Пустая() Тогда
		Взаимодействия.УстановитьРеквизитыФормыВзаимодействияПоДаннымРегистра(ЭтотОбъект);

	Иначе
		ИзменилисьКонтакты = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
// Процедура пытается найти контакт по ID CoMagic и заполнить в Событии.
//
// Параметры:
//	Нет.
//
Процедура сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()
	Контакт = сфпСофтФонПроСервер.сфпНайтиКонтактПоIDИзCoMagic(сфпСтруктураВнешнихДанных.comagic_context.visitor_id);
	Если ЗначениеЗаполнено(Контакт) Тогда
		Объект.АбонентКонтакт = Контакт.Ссылка;
	КонецЕсли;
КонецПроцедуры // сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic()	

&НаСервере
// Процедура вычисляет владельца контакта и отображает его в форме документа
//
Процедура сфпЗаполнитьВладельцаКонтакта()
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		ИмяМетаданных = Объект.АбонентКонтакт.Метаданные().Имя;
		Если ИмяМетаданных = "КонтактныеЛица" ИЛИ ИмяМетаданных = "КонтактныеЛицаПартнеров" Тогда
			//Элементы.сфпВладелец.Видимость = Истина;
			//Элементы.сфпБизнесРегион_GMT.Видимость = Истина;
			
			УстановитьПривилегированныйРежим(Истина);
			сфпВладелец = Объект.АбонентКонтакт.Владелец;
			УстановитьПривилегированныйРежим(Ложь);		
		КонецЕсли;
	КонецЕсли;

	ОтображатьКаналИсточник = ЗначениеЗаполнено(сфпВладелец);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура добавляет номер телефона из поля "Как связаться" в объект из поля "Контакт"
//
//   Параметры:
//    СсылкаКИ 		- СправочникСсылка 	- Объект, к которому добавляется телефон
//	  НомерТелефона - Строка			- Добавляемый номер телефона
//
Процедура ДобавитьТелефонНаСервер(СсылкаКИ, НомерТелефона)
	ОбъектКИ = СсылкаКИ.ПолучитьОбъект();
	НомерТелефона = СокрЛП(НомерТелефона);
	Если ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если ОбъектКИ.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
		ИначеЕсли Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.CRM_МобильныйТелефонЧастногоЛица;
		Иначе	
			НоваяКИ.Вид	= Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
		КонецЕсли;	
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;		
		ОбъектКИ.Записать();
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда		
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица");
		КонецЕсли;			
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда				
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПотенциальногоКлиента");
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.ФизическиеЛица") Тогда						
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);	
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица");
		КонецЕсли;			
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	ИначеЕсли ТипЗнч(СсылкаКИ) = Тип("СправочникСсылка.Пользователи") Тогда								
		СтруктураНомера	= сфпСофтФонПроСервер.сфпЗаполнитьСтруктуруПолейПоПредставлениюТелефон(НомерТелефона);		
		Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(НомерТелефона);
		НоваяКИ = ОбъектКИ.КонтактнаяИнформация.Добавить();
		НоваяКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Если Найти(СтруктураНомера.КодГорода, "9") = 1 Тогда
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПользователя");
		Иначе	
			НоваяКИ.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.CRM_ТелефонПользователяРабочий");
		КонецЕсли;		
		НоваяКИ.НомерТелефонаБезКодов	= СтруктураНомера.НомерТелефона;		
		Если ЗначениеЗаполнено(СтруктураНомера.КодГорода) Тогда
			НоваяКИ.Представление	= ?(ЗначениеЗаполнено(СтруктураНомера.КодСтраны),СтруктураНомера.КодСтраны + " (", "(") + СтруктураНомера.КодГорода + ") " + СтруктураНомера.НомерТелефона;
		Иначе	
			НоваяКИ.Представление	= Телефон;
		КонецЕсли;	
		НоваяКИ.НомерТелефона = Телефон;		
		ЗначенияПолей	= Новый СписокЗначений;
		ЗначенияПолей.Добавить(СтруктураНомера.КодСтраны,		"КодСтраны");
		ЗначенияПолей.Добавить(СтруктураНомера.КодГорода,		"КодГорода");
		ЗначенияПолей.Добавить(СтруктураНомера.НомерТелефона,	"НомерТелефона");
		НоваяКИ.ЗначенияПолей	= ЗначенияПолей;				
		ОбъектКИ.Записать();		
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Процедура сфпРазрешеныИзмененияВДокументе()
	ТекПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Если ТекПользователь <> Объект.Ответственный И Не Пользователи.РолиДоступны("ПолныеПрава, сфпУправлениеМаршрутизацией") Тогда
		ТолькоПросмотр = Истина;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

// +CRM
&НаСервере
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	
	// Определить канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
			
			Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,Объект.Ссылка,сфпВладелец);
			
			КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
			ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
			
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПервичногоИнтереса()
	
	Актуальность = Ложь;
	ПредыдущийИсточник = Неопределено;
	Попытка
		ПредыдущийИсточник = ПервичныйИнтерес.Получить(0);
	Исключение КонецПопытки;
	Если ПредыдущийИсточник <> Неопределено Тогда
		
		Актуальность = ПредыдущийИсточник.Актуальность;
		
	КонецЕсли;
	
	пПартнер = сфпВладелец;
	
	НаличиеУчастников = ?(ЗначениеЗаполнено(пПартнер),Истина,Ложь);
	
	Если НаличиеУчастников Тогда
		Элементы.КаналПервичногоИнтереса.Доступность = Истина;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.КаналПервичногоИнтереса.Доступность = Ложь;
		Элементы.КаналПервичногоИнтереса.ТолькоПросмотр = Истина;
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.Доступность = Истина;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ИсточникПервичногоИнтереса.Доступность = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Отметки незаполненного
	Если Актуальность = Истина И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	ИначеЕсли Актуальность = Ложь 
		И Не ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если обязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал актуального источника
		// привлечения.
		Если ЗаполнятьПервичныйИнтерес Тогда
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Истина;
			
		Иначе
			
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ИсточникПервичногоИнтереса.Доступность = Истина 
		// И ЗаполнятьПервичныйИнтерес 
		И Не ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) 
		И ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции

&НаСервере
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	//пПартнер = Неопределено;
	//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
	//	пПартнер = Партнер;
	//Иначе
	//	пПартнер = Объект.Партнер;
	//КонецЕсли;
	Если ЗначениеЗаполнено(сфпВладелец) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,,сфпВладелец);
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
			
			СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
			ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса,Интерес);
			СтрокаПервичногоИнтереса.Актуальность = Истина;
			
			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("СправочникСсылка.МаркетинговыеМероприятия") 
			   И ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(ИзмененКлиентКонтакт = Ложь)
	
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, , ИзмененКлиентКонтакт, ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	
КонецПроцедуры

#Область ОбработчикиИнтереса

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	Если ЗначениеЗаполнено(сфпВладелец) Тогда
		СтруктураОтбора.Вставить("Партнер", сфпВладелец);
	Иначе
		СтруктураОтбора.Вставить("ПотенциальныйКлиент", Объект.АбонентКонтакт);
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);	
	
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда Возврат; КонецЕсли;
	//CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение, Истина);
	ЗаменитьОсновное = (ТекущийЭлемент.Имя = "CRM_ИнтересСтрокой");
	CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение, ЗаменитьОсновное, Истина);
	
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ВыбранноеЗначение);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов[0].ВведенНаОсновании Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(0);
	КонецЕсли;
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)

	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура CRM_ЗаменитьИнтересНаСервере(ВыбранноеЗначение,ЗаменитьОсновное = Истина, ВНачало = Ложь)
	Если ВыбранноеЗначение <> Неопределено Тогда		
		Если ЗаменитьОсновное И ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
			СтрокаДляУдаления = ЭтотОбъект.CRM_ТаблицаИнтересов[0];
			ЭтотОбъект.CRM_ТаблицаИнтересов.Удалить(СтрокаДляУдаления);
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
		Иначе
			CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало)
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактПриИзменении(Элемент = Неопределено)

	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		
	Иначе
		Объект.АбонентПредставление = "!!!Не определен!!!";
	КонецЕсли;
	
	сфпЗаполнитьВладельцаКонтакта();
	УстановитьВидимостьКонтакта();
	УстановитьЗаголовокФормы();

	ЗаполнитьГруппуИнтересаВФормеДокументаНаСервере(Истина);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПринятьОбращение(Команда)

	Если Модифицированность Тогда
		Записать();
	КонецЕсли;

	ПараметрыФормы = Новый Структура();

	МассивСсылок = Новый Массив();
	ПараметрыФормы.Вставить("ТелефонныйЗвонок", Объект.Ссылка);
	ПараметрыФормы.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыФормы.Вставить("НомерТелефона", Объект.АбонентКакСвязаться);
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		МассивСсылок.Добавить(Объект.АбонентКонтакт);
	КонецЕсли;

	ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма", ПараметрыФормы, ЭтотОбъект, Объект.АбонентКакСвязаться);

КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращение(Команда)
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Если УказыватьПричинуОтклонения(Объект.Ссылка) Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьОбращениеЗавершение", ЭтотОбъект, Объект.Ссылка);
			ОткрытьФорму("Обработка.CRM_МастерРегистрацииОбращения.Форма.ФормаПотериОбращения", , ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе	
			ОтклонитьОбращениеЗавершение(Истина, Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОбращениеЗавершение(Результат, Ссылка) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли ТипЗнч(Результат) = Тип("Структура") 
			И Результат.Свойство("ПричинаОтказа")
			И ТипЗнч(Результат.ПричинаОтказа) = Тип("СправочникСсылка.CRM_ПричиныОтказаПоИнтересам") Тогда
		ОтклонитьОбращениеНаСервере(Ссылка, Результат.ПричинаОтказа, Результат.Комментарий);
	Иначе
		ОтклонитьОбращениеНаСервере(Ссылка, Неопределено, "");
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура ОтклонитьОбращениеНаСервере(Ссылка, ПричинаОтказа, Комментарий)
	Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка) Тогда
		РегистрыСведений.CRM_СостоянияЛидов.ЗаписатьСостояниеЛида(Ссылка, Справочники.CRM_СостоянияЛидов.Отклонен,, ПричинаОтказа, Комментарий); 
	КонецЕсли;
	
	Об = Ссылка.ПолучитьОбъект();
	Об.CRM_СкрытьВАРМ = Истина;
	Об.Записать();
КонецПроцедуры

&НаСервере
Функция УказыватьПричинуОтклонения(Ссылка)
	Возврат РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Ссылка, Истина);
КонецФункции

&НаСервере
Процедура СформироватьОписаниеКаналаИсточника()
	
	//Надпись = "";
	//Интерес = Неопределено;
	//КаналПервичногоИнтереса = Неопределено;
	//ИсточникПервичногоИнтереса = Неопределено;
	//
	//Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
	//	Если ЗначениеЗаполнено(пПартнер) Тогда
	//		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата,, пПартнер);
	//		Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
	//			Надпись = "Канал: " + Интерес.КаналПервичногоИнтереса;
	//			Если ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
	//				Надпись = Надпись + Символы.ПС + "Источник: " + Интерес.ИсточникПервичногоИнтереса;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;

	//Элементы.ДекорацияИсточникПривлечения.Заголовок = Надпись;
	//  Элементы.ГруппаИсточникПривлечения.Видимость = ЗначениеЗаполнено(Надпись);

	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		
		КаналПервичногоИнтереса = Неопределено;
		ИсточникПервичногоИнтереса = Неопределено;
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(сфпВладелец);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		//пПартнер = Неопределено;
		//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
		//	пПартнер = Партнер;
		//Иначе
		//	пПартнер = Объект.Партнер;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(сфпВладелец) Тогда
			
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			
			Интерес = Неопределено;
			Попытка
				
				Интерес = ПервичныйИнтерес.Получить(0);
				
			Исключение	КонецПопытки;
			
			РанееНеЗарегистровано = Ложь;
			Если Интерес <> Неопределено И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// -CRM

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ.

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Рассмотрено".
//
Процедура РассмотреноПриИзменении(Элемент)
	Элементы.РассмотретьПосле.Доступность = НЕ Рассмотрено;
КонецПроцедуры // РассмотреноПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" элемента формы "РассмотретьПосле".
//
Процедура РассмотретьПослеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ВзаимодействияКлиент.ОбработатьВыборВПолеРассмотретьПосле(РассмотретьПосле, ВыбранноеЗначение, СтандартнаяОбработка,
		Модифицированность);
КонецПроцедуры // РассмотретьПослеОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ КОМАНД ФОРМЫ.

&НаКлиенте
// Процедура - обработчик команды формы "ПрослушатьЗаписьРазговора".
//
Процедура ПрослушатьЗаписьРазговора(Команда)
	
	ПараметрыЗвонка = Новый Структура("ИдентификаторЗвонка, ИдентификаторЗаписи, Ответственный, Входящий, НомерТелефона, ВнутреннийНомер, ДатаНачала, ДатаОкончания, Звонок",
		Объект.сфпИдентификаторЗвонка, Объект.сфпИдентификаторЗаписи, Объект.Ответственный, Объект.Входящий, Объект.АбонентКакСвязаться, сфпВнутреннийНомер, сфпДатаНачала, сфпДатаОкончания, Объект.Ссылка);
	сфпСофтФонПроКлиент.НачатьПрослушиваниеЗаписиРазговора(ПараметрыЗвонка, ЭтаФорма, Элементы.ФормаПрослушатьЗаписьРазговора);

КонецПроцедуры // ПрослушатьЗаписьРазговора()

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если Результат.Значение = "КонтактныеЛицаПартнеров" Тогда
		ПараметрыФормы = Новый Структура("Основание", Новый Структура("НомерТелефона", Объект.АбонентКакСвязаться));
		ИмяФормыВыбора = ".Форма.CRM_ФормаБыстрогоВвода";
				
	Иначе
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		ИмяФормыВыбора = ".ФормаОбъекта";
	КонецЕсли;
	ОткрытьФорму("Справочник." + Результат.Значение + ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ДобавитьТелефон".
//
Процедура ДобавитьТелефон(Команда)
	ДобавитьТелефонНаСервер(Объект.АбонентКонтакт, Объект.АбонентКакСвязаться);
	//Элементы.ДобавитьТелефон.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьКонтактВыполнить".
//
Процедура СоздатьКонтактВыполнить()
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьКонтактПослеВыбораТипаКонтакта", ЭтотОбъект);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элементы.СоздатьКонтакт);
	
КонецПроцедуры // СоздатьКонтактВыполнить()

&НаКлиенте
// Процедура - обработчик команды формы "СвязанныеВзаимодействияВыполнить".
//
Процедура СвязанныеВзаимодействияВыполнить()
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Предмет", Объект.Предмет);
	ОткрытьФорму("ЖурналДокументов.Взаимодействия.ФормаСписка", ПараметрыОтбора, ЭтотОбъект, , Окно);
КонецПроцедуры // СвязанныеВзаимодействияВыполнить()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ.

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере"
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Ответственный = сфпСофтФонПроСервер.сфпТекущийПользователь();
		Объект.Дата = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
		Объект.Важность = Перечисления.ВариантыВажностиВзаимодействия.Обычная;
		Взаимодействия.УстановитьПредметПоДаннымЗаполнения(Параметры, Предмет);
	КонецЕсли;
	
	Если Параметры.Свойство("СпозиционироватьсяНаРеквизите") И ЗначениеЗаполнено(Параметры.СпозиционироватьсяНаРеквизите) Тогда
		СпозиционироватьсяНаРеквизите = Параметры.СпозиционироватьсяНаРеквизите;
	КонецЕсли;	
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Входящий = НЕ (Параметры.Свойство("Основание") И НЕ (Параметры.Основание = Ложь ИЛИ Параметры.Основание = Неопределено));
	КонецЕсли;
	
	Если Параметры.Свойство("АбонентКонтакт") И ЗначениеЗаполнено(Параметры.АбонентКонтакт) Тогда
		Объект.АбонентКонтакт = Параметры.АбонентКонтакт;
		Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
		
		Модифицированность = Истина;				
	КонецЕсли;
	
	// Подготовить оповещения взаимодействий.
	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект,Параметры);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "СтраницаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Свойство("ДанныеУчастника") И Объект.АбонентКонтакт <> Параметры.ДанныеУчастника.Контакт Тогда
		ЗаполнитьНаОснованииУчастника(Параметры.ДанныеУчастника);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	сфпЗаполнитьВладельцаКонтакта();
	
	ПриСозданииИПриЧтенииНаСервере();
	//ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Объект, ЭтотОбъект, "ТелефонныйЗвонок");
	
	// +CRM
	CRM_ОбщегоНазначенияСервер.СоздатьНеобходимыеРеквизитыИЭлементыДляГруппыИнтерес(ЭтотОбъект, Объект, "ГруппаИнтерес", ТипЗнч(Объект.Ссылка));
	CRM_ОбщегоНазначенияСервер.ЗаполнитьГруппуИнтересаВФормеДокумента(Объект, ЭтотОбъект, Истина, , ТипЗнч(Объект.Ссылка), Объект.Ссылка.Пустая());
	CRM_ОбщегоНазначенияСервер.ЗаполнитьНадписьВСтрокеИнтереса(ЭтотОбъект, Объект);
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) И
		(ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.Партнеры") ИЛИ ТипЗнч(Объект.АбонентКонтакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
		ОтображатьКаналИсточник = Истина;
	КонецЕсли;
	
	СформироватьОписаниеКаналаИсточника();
	
	НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
	
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = Ложь;
	КонецЕсли;
	// -CRM
	
	//Если Элементы.Найти("СкрытьПоказатьИнтересы") <> Неопределено Тогда
		//Элементы.СкрытьПоказатьИнтересы.Видимость = Ложь;
	//КонецЕсли;
	
	// Лиды
	//Если РегистрыСведений.CRM_СостоянияЛидов.СсылкаЯвляетсяЛидом(Объект.Ссылка) Тогда
	//	СтруктураСостоянияЛида = РегистрыСведений.CRM_СостоянияЛидов.ПолучитьТекущееСостояниеЛида(Объект.Ссылка);
	//	Если СтруктураСостоянияЛида = Неопределено Тогда
	//		Элементы.ГруппаСостояниеЛида.Видимость = Ложь;

	//	Иначе
	//		СостояниеЛида = СтруктураСостоянияЛида.Состояние;
	//		Если СостояниеЛида = Справочники.CRM_СостоянияЛидов.Отклонен Тогда
	//			ПричинаОтклоненияЛида = СтруктураСостоянияЛида.ПричинаОтклонения;
	//			КомментарийСостоянияЛида = СтруктураСостоянияЛида.Комментарий;

	//		Иначе
	//			ЛидСконвертированВОбъект = СтруктураСостоянияЛида.СконвертированВОбъект;
	//			Элементы.ЛидСконвертированВОбъект.Видимость = ЗначениеЗаполнено(ЛидСконвертированВОбъект);
	//			Элементы.ПричинаОтклонения.Видимость = Ложь;
	//			Элементы.КомментарийСостоянияЛида.Видимость = Ложь;
	//		КонецЕсли;
	//	КонецЕсли;

	//Иначе
	//	Элементы.ГруппаСостояниеЛида.Видимость = Ложь;
	//КонецЕсли;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ВнутреннийНомер, ДатаНачала, ДатаОтвета, ДатаОкончания
		|ИЗ РегистрСведений.сфпИсторияЗвонков
		|ГДЕ Звонок = &Звонок И ИдентификаторЗвонка = &ИдентификаторЗвонка");
		Запрос.УстановитьПараметр("Звонок", Объект.Ссылка);
		Запрос.УстановитьПараметр("ИдентификаторЗвонка", Объект.сфпИдентификаторЗвонка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			сфпВнутреннийНомер = Выборка.ВнутреннийНомер;
			сфпДатаНачала = Выборка.ДатаНачала;
			сфпДатаОтвета = Выборка.ДатаОтвета;
			сфпДатаОкончания = Выборка.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	СписокВидовКонтактовДляВыбора = Новый СписокЗначений();
	СписокВидовКонтактовДляВыбора.Добавить("КонтактныеЛицаПартнеров", Нстр("ru='Контактное лицо';en='Contact person of customer'"));
	СписокВидовКонтактовДляВыбора.Добавить("CRM_ПотенциальныеКлиенты", Нстр("ru='Потенциальный клиент';en='Potential customer'"));	
	СписокВидовКонтактовДляВыбора.Добавить("ФизическиеЛица", Нстр("ru='Физическое лицо';en='Individual'"));	
	СписокВидовКонтактовДляВыбора.Добавить("Пользователи", Нстр("ru='Пользователь';en='User'"));
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	сфпДлительность = Дата('00010101') + Объект.сфпДлительностьЗвонка;
	
	УстановитьЗаголовокФормы();
	
	Если Объект.Входящий Тогда
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Элементы.СостояниеЗвонка.Заголовок = "Пропущенный";
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Элементы.СостояниеЗвонка.Заголовок = "Отвеченный";
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;			
		КонецЕсли;

		Элементы.ДекорацияЗаголовокЛево.Заголовок = "Кто звонил";
		Элементы.ДекорацияЗаголовокПраво.Заголовок = "Кто ответил";

	Иначе
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			Элементы.СостояниеЗвонка.Заголовок = "Не дозвонились";
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Красный;

		Иначе	
			Элементы.СостояниеЗвонка.Заголовок = "Отвеченный";
			Элементы.СостояниеЗвонка.ЦветТекста = WebЦвета.Зеленый;						
		КонецЕсли;	
		
		Элементы.ДекорацияЗаголовокЛево.Заголовок = "Кому звонили";
		Элементы.ДекорацияЗаголовокПраво.Заголовок = "Кто звонил";
	КонецЕсли;
			
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// +CRM
	ДоступностьПервичногоИнтереса();
	
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваГруппыИнтересВФормеДокумента(ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиент.УстановитьСвойстваКоманднойПанелиИнтересовВФормеДокумента(ЭтотОбъект);
	// -CRM
	
	Попытка
		Если ЗначениеЗаполнено(СпозиционироватьсяНаРеквизите) Тогда
			ТекущийЭлемент = Элементы[СпозиционироватьсяНаРеквизите];
		КонецЕсли;
	Исключение КонецПопытки;
	
	сфпРазрешеныИзмененияВДокументе();

	УстановитьВидимостьКонтакта();

КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура УстановитьВидимостьКонтакта()
	
	Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
		Элементы.ГруппаАбонентПредставление.Видимость = Ложь;
		Элементы.АбонентКонтакт.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаАбонентПредставление.Видимость = Истина;
		Элементы.АбонентКонтакт.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СоздатьКонтакт.Видимость = Элементы.ГруппаАбонентПредставление.Видимость;
	Элементы.сфпВладелец.Видимость = ЗначениеЗаполнено(сфпВладелец);
	Элементы.ГруппаПервичныйИнтерес.Видимость = ОтображатьКаналИсточник;

КонецПроцедуры	
	
&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "СофтФон_КонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Объект.сфпДлительностьЗвонка = сфпСофтФонПроСервер.сфпТекущаяДата() - Объект.Дата;
			Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Отвеченный");
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание	= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);
			Если Параметр.Свойство("НовыйОтветственный") Тогда
				Объект.Ответственный = Параметр.НовыйОтветственный;
			КонецЕсли;
			
			Модифицированность = Истина;
			
			Попытка
				ЭтаФорма.Записать();
			Исключение КонецПопытки;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли (ИмяСобытия = "сфпКонецРазговора") И Параметр.Свойство("Звонок") Тогда
		Если (Параметр.Звонок = Объект.Ссылка) Тогда
			Если Параметр.Свойство("СостояниеЗвонка") И (Объект.сфпСостояниеЗвонка <> Параметр.СостояниеЗвонка) Тогда
				Объект.сфпСостояниеЗвонка = Параметр.СостояниеЗвонка;
				Модифицированность = Истина;
			КонецЕсли;
			
			Если Параметр.Свойство("ДлительностьЗвонка") И (Объект.сфпДлительностьЗвонка <> Параметр.ДлительностьЗвонка) Тогда
				Объект.сфпДлительностьЗвонка = Параметр.ДлительностьЗвонка;
				Модифицированность = Истина;
			КонецЕсли;	
			
			Если Параметр.Свойство("ИдентификаторЗаписи") И НЕ ЗначениеЗаполнено(Объект.сфпИдентификаторЗаписи) Тогда
				Объект.сфпИдентификаторЗаписи = Параметр.ИдентификаторЗаписи;
				Модифицированность = Истина;
			КонецЕсли;
			
			сфпДлительность	= Дата('00010101') + Объект.сфпДлительностьЗвонка;
			Объект.Описание	= сфпСофтФонПроСервер.сфпЗаполнитьОписаниеТелефонногоЗвонка(Объект.сфпДлительностьЗвонка);																		
			Если ЗначениеЗаполнено(Элементы.Комментарий.ТекстРедактирования) Тогда
				Объект.Комментарий = Элементы.Комментарий.ТекстРедактирования;
			КонецЕсли;
			
			Попытка
				ЭтаФорма.Записать();
			Исключение КонецПопытки;
		КонецЕсли;

	 	Возврат;

	ИначеЕсли (ИмяСобытия = "Софтфон_CoMagic") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Если (Объект.сфпДлительностьЗвонка = 0) И (сфпСтруктураВнешнихДанных = Неопределено) Тогда
				// Заполняем документ данными из CoMagic
				сфпСтруктураВнешнихДанных	= Параметр.СтруктураCoMagic;
				Объект.сфпCoMagicID			= сфпСтруктураВнешнихДанных.comagic_context.visitor_id;
				Объект.Комментарий = Объект.Комментарий + ?(ПустаяСтрока(Объект.Комментарий), "", Символы.ПС) 
					+ НСтр("ru='Кампания: '") + сфпСтруктураВнешнихДанных.comagic_context.campaign + Символы.ПС 
					+ НСтр("ru='Сайт: '") + сфпСтруктураВнешнихДанных.comagic_context.site + Символы.ПС
					+ НСтр("ru='Ключевые слова: '") + сфпСтруктураВнешнихДанных.comagic_context.search_query; 
				Если НЕ ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
					сфпЗаполнитьПартнераИКонтактноеЛицоИзCoMagic();
				КонецЕсли;			
				
				Модифицированность	= Истина;
				
				Попытка
					ЭтаФорма.Записать();
				Исключение КонецПопытки;
			КонецЕсли;	
		КонецЕсли;	
		
		Возврат;

	ИначеЕсли (ИмяСобытия = "ЗаполнитьКонтактВТелефонномЗвонке") И Параметр.Свойство("Звонок") Тогда
		Если Параметр.Звонок = Объект.Ссылка Тогда
			Объект.АбонентКонтакт = Параметр.Контакт;
			Объект.АбонентПредставление = Строка(Объект.АбонентКонтакт);
			Элементы.СоздатьКонтакт.Видимость = Ложь;
			
			Модифицированность = Истина;
			
			Попытка
				ЭтаФорма.Записать();
			Исключение КонецПопытки;
			
			сфпЗаполнитьВладельцаКонтакта();
			УстановитьВидимостьКонтакта();
		КонецЕсли;			
		
		Возврат;
		
	ИначеЕсли ИмяСобытия = "Создано новое контактное лицо" Тогда
		ПриВыбореКонтакта(Параметр);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	ВзаимодействияКлиент.ОтработатьОповещение(ЭтотОбъект,ИмяСобытия, Параметр, Источник);

КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПриСозданииИПриЧтенииНаСервере();

КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПередЗаписьюНаСервере".
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Взаимодействия.ПередЗаписьюВзаимодействияИзФормы(ЭтотОбъект, ТекущийОбъект, ИзменилисьКонтакты);
	
	CRM_ТаблицаИнтересовЗнач = РеквизитФормыВЗначение("CRM_ТаблицаИнтересов", Тип("ТаблицаЗначений"));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("CRM_ТаблицаИнтересов",CRM_ТаблицаИнтересовЗнач);
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Взаимодействия.ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект, ЭтотОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		// Зафиксировать актуальный источник привлечения.
		НаборРегистра = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборРегистра.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборРегистра.Прочитать();
		НаборРегистра.Очистить();
		
		Если ЗначениеЗаполнено(сфпВладелец) И (ЗначениеЗаполнено(КаналПервичногоИнтереса) ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)) Тогда
			Запись								= НаборРегистра.Добавить();
			Запись.Период						= ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаПолучения), ТекущийОбъект.ДатаПолучения, CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
			Запись.Партнер						= сфпВладелец;
			Запись.Сделка						= ТекущийОбъект.Ссылка;
			Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
			Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
		КонецЕсли;
		
		НаборРегистра.Записать();
	КонецЕсли;

КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПослеЗаписи".
//
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "ТелефонныйЗвонок");
	
	Если НЕ ПустаяСтрока(Объект.сфпCoMagicID) Тогда
		Если ЗначениеЗаполнено(Объект.АбонентКонтакт) Тогда
			Если сфпСофтФонПроСервер.сфпРеквизитСуществует(Объект.АбонентКонтакт, "сфпCoMagicID") Тогда
				сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.АбонентКонтакт, Объект.сфпCoMagicID);
				Объект.сфпCoMagicID = "";
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Оповестить("ОбновленыДанныеТелефонногоЗвонка", Объект.Ссылка);

КонецПроцедуры // ПослеЗаписи()

&НаСервере
// Процедура - обработчик события формы "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ПриВыбореКонтакта(ВыбранныйКонтакт)
	
	ИмяМетаданных = сфпСофтФонПроСервер.сфпПолучитьИмяМетаданных(ВыбранныйКонтакт);
	Если СписокВидовКонтактовДляВыбора.НайтиПоЗначению(ИмяМетаданных) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АбонентКонтакт = ВыбранныйКонтакт;
	АбонентКонтактПриИзменении();

КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Источник.ВладелецФормы <> ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	
	ПриВыбореКонтакта(НовыйОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыбратьКонтактПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник." + Результат.Значение + ".ФормаВыбора",, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура АбонентПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НовоеОповещение = Новый ОписаниеОповещения("ВыбратьКонтактПослеВыбораТипаКонтакта", ЭтаФорма);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ВладелецФормы <> ЭтаФорма Тогда
		Возврат;
	КонецЕсли;
	
	ПриВыбореКонтакта(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура АбонентКонтактНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НовоеОповещение = Новый ОписаниеОповещения("ВыбратьКонтактПослеВыбораТипаКонтакта", ЭтаФорма);
	ПоказатьВыборИзМеню(НовоеОповещение, СписокВидовКонтактовДляВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Заголовок = "Звонок";
	
	Если Объект.Входящий Тогда
		Заголовок = Заголовок + " входящий ";
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			  Заголовок = Заголовок + "(пропущенный)";
		Иначе Заголовок = Заголовок + "(отвеченный)";
		КонецЕсли;

	Иначе
		Заголовок = Заголовок + " исходящий ";
		Если Объект.сфпСостояниеЗвонка = ПредопределенноеЗначение("Перечисление.сфпСостоянияЗвонков.Пропущенный") Тогда
			  Заголовок = Заголовок + "(не дозвонились)";
		Иначе Заголовок = Заголовок + "(отвеченный)";
		КонецЕсли;	
	КонецЕсли;
	
	Заголовок = Заголовок + ", " + Объект.АбонентПредставление + ", " + Формат(Объект.Дата, "ДЛФ=D") + "/" + Формат(Объект.Дата, "ДЛФ=T; ДП=0:00:00") + "/" + Формат(сфпДлительность, "ДЛФ=T; ДП=0:00:00");
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти