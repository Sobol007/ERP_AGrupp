#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ОперацияПоПлатежнойКарте.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуОтчетДавальцу(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	ОтчетДавальцуЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Отчет давальцу".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ОтчетДавальцу.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ОтчетДавальцу);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСКлиентами.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСКлиентами.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаДокумента";
	КонецЕсли;
	
	// ФормаСпискаДокументов
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияРеализацииАкта(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСКлиентами.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСКлиентами.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.ВидимостьВФормах = "ФормаСпискаДокументов";
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	// ++ НЕ УТКА
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ФактическаяСебестоимостьПродукции) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер			= Метаданные.Отчеты.ФактическаяСебестоимостьПродукции.ПолноеИмя();
		КомандаОтчет.Представление		= НСтр("ru = 'Фактическая себестоимость продукции';
												|en = 'Actual product cost'");
		КомандаОтчет.КлючВарианта		= "ФактическаяСебестоимостьПродукцииКонтекстОтчетДавальцу";
		КомандаОтчет.Порядок			= 50;
		КомандаОтчет.МножественныйВыбор = Ложь;
		КомандаОтчет.Важность			= "Важное";
				
	КонецЕсли;
	// -- НЕ УТКА
	
	ОтчетДавальцуЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры


#Область Заполнение

// Возвращает структуру необходимую для дальнейшего использования при заполнении документа.
//
// Возвращаемое значение:
//   Структура - структура параметров заполнения документа.
//
Функция ПараметрыЗаполненияДокумента() Экспорт
	
	ПараметрыЗаполнения = Новый Структура();
	
	ПараметрыЗаполнения.Вставить("МассивЗаказов",         Неопределено);
	
	ПараметрыЗаполнения.Вставить("РеквизитыШапки",        Неопределено);
	
	ПараметрыЗаполнения.Вставить("ИмяДокумента",          "ОтчетПереработчика");
	ПараметрыЗаполнения.Вставить("ИмяРегистраЗаказ",      "ЗаказыКлиентов");
	ПараметрыЗаполнения.Вставить("ИмяПоляЗаказ",          "ЗаказПереработчику");
	
	ПараметрыЗаполнения.Вставить("КлючевыеПоля",          "Номенклатура, Характеристика");
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Производит инициализацию структуры параметров заполнения по реквизитам шапки и по заказам.
//
// Параметры:
//  ПараметрыЗаполнения	 - Структура - Параметры по умолчанию получаемые в методе ПараметрыЗаполненияДокумента()
//  РеквизитыШапки		 - Структура - Содержит ключи на основании которых будет происходить заполнение
//  МассивЗаказов		 - Массив - Ссылки на заказы по которым будет происходить заполнение.
//
Процедура ИнициализироватьПараметрыЗаполнения(ПараметрыЗаполнения, РеквизитыШапки, МассивЗаказов) Экспорт
	
	ПараметрыЗаполнения.МассивЗаказов	= МассивЗаказов;
	
	ПараметрыЗаполнения.РеквизитыШапки	= РеквизитыШапки;
	
КонецПроцедуры

// Формирует структуру для создания документа по заказам
//  Если в переданных заказах отличаются реквизиты шапки, выдается сообщение об ошибке.
//
// Параметры:
//  МассивСсылок - Массив - заказы на внутреннее потребление, по которым необходимо ввести накладную.
//
// Возвращаемое значение:
//  Структура - структура, в которую будут помещены реквизиты шапки из массива заказов.
//
Функция ДанныеЗаполненияНакладной(МассивСсылок, СвойстваЗаказов = Неопределено) Экспорт
	
	РеквизитыШапки = Новый Структура();
	Если ПродажиВызовСервера.СформироватьДанныеЗаполненияОтчетаДавальцу(МассивСсылок, РеквизитыШапки) Тогда
		Возврат РеквизитыШапки
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Заполняет таблицы услуг и скидок по данным отбора или массиву заказов
//
// Параметры:
//	ДанныеОтбора            - Структура - поля, по которым будут отобраны остатки заказов для заполнения документа
//	Продукция               - ДанныеФормыКоллекция - таблица продукции, в которую будут помещены остатки заказов
//	МассивЗаказов           - Массив - заказы, по которым будут отобраны остатки
//	ЗаполнятьНаДатуОказанияУслуг - Булево - указывает на необходимость заполнения по остаткам на дату, переданную в качестве поля в ДанныеОтбора
//	ПодборПоОстаткам        - Булево - рассчитывать количество к оформлению по остаткам к оформлению
//	                                   или по заказанному количеству.
//
Процедура ЗаполнитьПоОстаткамУслугДавальцаКОформлению(ДанныеОтбора,
	                                 Продукция,
	                                 МассивЗаказов = Неопределено,
	                                 ЗаполнятьНаДатуОказанияУслуг = Ложь,
	                                 ПодборПоОстаткам = Ложь) Экспорт
	
	ДатаЗаполнения = ?(ЗаполнятьНаДатуОказанияУслуг, ДанныеОтбора.Дата, Неопределено);
	
	// Данные по остаткам услуг заказа
	ВыборкаУслуги = ПолучитьРезультатЗапросаПоОстаткамУслугДавальцуКОформлению(
		ДанныеОтбора,
		ДатаЗаполнения,
		МассивЗаказов,
		ПодборПоОстаткам).Выбрать();
	
	МассивЗаказовКлиентов = Новый Массив();
	
	Пока ВыборкаУслуги.Следующий() Цикл
		Если МассивЗаказовКлиентов.Найти(ВыборкаУслуги.ЗаказДавальца) = Неопределено Тогда
			МассивЗаказовКлиентов.Добавить(ВыборкаУслуги.ЗаказДавальца);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивЗаказовКлиентов", МассивЗаказовКлиентов);
	Запрос.УстановитьПараметр("ВалютаДокумента",       ДанныеОтбора.Валюта);
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Ссылка                    КАК ЗаказДавальца,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта,
	|	ТаблицаЗаказов.ЦенаВключаетНДС           КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА
	|			ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ КАК ПересчитатьВВалютуДокумента
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|";
	РеквизитыЗаказов = Запрос.Выполнить().Выбрать();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(ТаблицаЗаказов.Дата, ДЕНЬ) КАК Дата,
	|	ТаблицаЗаказов.Валюта                    КАК Валюта
	|ПОМЕСТИТЬ ДанныеЗаказов
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаЗаказов
	|ГДЕ
	|	ТаблицаЗаказов.Ссылка В (&МассивЗаказовКлиентов)
	|	И ТаблицаЗаказов.Валюта <> &ВалютаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата,
	|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|	ПО
	|		ДанныеЗаказов.Валюта = ЦеныНоменклатуры.Валюта
	|		И ДанныеЗаказов.Дата >= ЦеныНоменклатуры.Период 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата
	|;
	|
	|////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказов.Валюта,
	|	ДанныеЗаказов.Дата,
	|	ЕСТЬNULL(КурсыВалют.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(КурсыВалют.Кратность, 1) КАК Кратность
	|ИЗ
	|	ДанныеЗаказов КАК ДанныеЗаказов
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПериодыКурсовВалют КАК ПериодыКурсовВалют 
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|			РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО
	|			ПериодыКурсовВалют.Период = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|	ПО
	|		ДанныеЗаказов.Валюта = ПериодыКурсовВалют.Валюта
	|		И ДанныеЗаказов.Дата = ПериодыКурсовВалют.Дата
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	Если ТаблицаКурсовВалют.Количество() > 0 Тогда
		СтруктураКурсовНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеОтбора.Валюта, ТекущаяДатаСеанса());
	КонецЕсли;
	
	ВыборкаУслуги.Сбросить();
	Пока ВыборкаУслуги.Следующий() Цикл
		
		СтрокаТаб = Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаУслуги);
		
		СтрокаТаб.КоличествоУпаковок = ВыборкаУслуги.Количество / ВыборкаУслуги.Коэффициент;
		
		РеквизитыЗаказов.Сбросить();
		ЗаказНайден = РеквизитыЗаказов.НайтиСледующий(СтрокаТаб.ЗаказДавальца, "ЗаказДавальца");
		
		ПараметрыОтбора = Новый Структура("Валюта,Дата", РеквизитыЗаказов.Валюта, РеквизитыЗаказов.Дата);
		КурсВалюты = ТаблицаКурсовВалют.НайтиСтроки(ПараметрыОтбора);
		
		// Расчет суммы взаиморасчетов
		Если ВыборкаУслуги.Количество = ВыборкаУслуги.Заказано Тогда
			СтрокаТаб.СуммаВзаиморасчетов = СтрокаТаб.СуммаВзаиморасчетов;
		ИначеЕсли Не ВыборкаУслуги.Заказано = 0 Тогда
			СтрокаТаб.СуммаВзаиморасчетов = СтрокаТаб.СуммаВзаиморасчетов * ВыборкаУслуги.Количество / ВыборкаУслуги.Заказано;
		КонецЕсли;
		
		Ценообразование.ПересчитатьСуммыВСтроке(
			СтрокаТаб,
			Ложь,
			Ложь,
			Ложь,
			РеквизитыЗаказов.ЦенаВключаетНДС,
			"КоличествоУпаковок");
		
		Если ЗаказНайден И РеквизитыЗаказов.ПересчитатьВВалютуДокумента И КурсВалюты.Количество() = 1 Тогда
			
			СтрокаТаб.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.Цена,
				РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
				КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
				КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
			
			СтрокаТаб.СуммаСНДС = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТаб.СуммаСНДС,
				РеквизитыЗаказов.Валюта, ДанныеОтбора.Валюта,
				КурсВалюты[0].Курс,СтруктураКурсовНовойВалюты.Курс,
				КурсВалюты[0].Кратность,СтруктураКурсовНовойВалюты.Кратность);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список реквизитов, по которым можно сгруппировать распоряжения в пределах одного отчета.
//
// Возвращаемое значение:
//  Строка - имена реквизитов, разделенные запятыми.
//
Функция КлючевыеПоляШапкиРаспоряжения() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтчетДавальцуПоНесколькимЗаказам") Тогда
		Возврат "Партнер, Контрагент, Договор, Организация, Сделка, Валюта,
			|НаправлениеДеятельности, Подразделение, НалогообложениеНДС, ЦенаВключаетНДС, ПорядокРасчетов,
			|СтавкаНДС, Номенклатура, Характеристика";
	Иначе
		Возврат "Ссылка";
	КонецЕсли;
	
КонецФункции

#Конецобласти

#Область ПроводкиПоРеглУчету

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти


// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцуЛокализация.ТекстОтраженияВРеглУчете();

КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса временной таблицы.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт

	Возврат ОтчетДавальцуЛокализация.ТекстЗапросаВТОтраженияВРеглУчете();

КонецФункции

#Конецобласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ОтчетДавальцу - Ссылка на документа.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ИСТИНА КАК ОтчетПоЗаказам,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
	|	ДанныеДокумента.Курс КАК Курс,
	|	ДанныеДокумента.Кратность КАК Кратность
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Дата = Выборка.Дата;
		Организация = Выборка.Организация;
		Партнер = Выборка.Партнер;
		Контрагент = Выборка.Контрагент;
		Договор = Выборка.Договор;
		НаправлениеДеятельности = Выборка.НаправлениеДеятельности;
		ПорядокРасчетов = Выборка.ПорядокРасчетов;
		ВалютаВзаиморасчетов = Выборка.ВалютаВзаиморасчетов;
		ПоЗаказу = Выборка.ОтчетПоЗаказам;
		СуммаДокумента = Выборка.СуммаДокумента;
		СуммаВзаиморасчетов = ?(Выборка.Проведен, Выборка.СуммаВзаиморасчетов, 0);
		Курс = Выборка.Курс;
		Кратность = Выборка.Кратность;
		
	Иначе
		
		Дата = Дата(1,1,1);
		Организация = Справочники.Организации.ПустаяСсылка();
		Партнер = Справочники.Партнеры.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
		ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПустаяСсылка();
		ВалютаВзаиморасчетов = Справочники.Валюты.ПустаяСсылка();
		ПоЗаказу = Истина;
		СуммаДокумента = 0;
		СуммаВзаиморасчетов = 0;
		Курс = 1;
		Кратность = 1;
		
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата", Дата);
	СтруктураРеквизитов.Вставить("Организация", Организация);
	СтруктураРеквизитов.Вставить("Партнер", Партнер);
	СтруктураРеквизитов.Вставить("Контрагент", Контрагент);
	СтруктураРеквизитов.Вставить("Договор", Договор);
	СтруктураРеквизитов.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	СтруктураРеквизитов.Вставить("ПорядокРасчетов", ПорядокРасчетов);
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ПоЗаказу", ПоЗаказу);
	СтруктураРеквизитов.Вставить("СуммаДокумента", СуммаДокумента);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов", СуммаВзаиморасчетов);
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	СтруктураРеквизитов.Вставить("Курс", Курс);
	СтруктураРеквизитов.Вставить("Кратность", Кратность);
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Осуществляет вычисление текущего состояния отчета давальцу без заказа
//
// Параметры:
//	ОтчетДавальцу     - ДокументСсылка.ОтчетДавальцу - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач ОтчетДавальцу, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если  ЗначениеЗаполнено(ОтчетДавальцу) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос("
			|ВЫБРАТЬ 
			|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ДокументОтчетДавальцу.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(31,2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОплаты,
			|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументОтчетДавальцу.СуммаВзаиморасчетов - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОплаты,
			|// СУММА ПРОСРОЧЕННОЙ ОПЛАТЫ ////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстаткиНаДатуАктуальности.КОплатеОстаток, 0) КАК ЧИСЛО(31,2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаПросроченнойОплаты,
			|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаОтгрузки,
			|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫРАЗИТЬ ((ДокументОтчетДавальцу.СуммаВзаиморасчетов + ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОтгрузкеОстаток, 0)) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов КАК ЧИСЛО(15, 0))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.Проведен И
			|		(ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0 ИЛИ
			|		ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов))
			|	ТОГДА
			|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) КАК ЧИСЛО(31,2))
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) И
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.СуммаВзаиморасчетов > 0
			|	ТОГДА
			|		ВЫБОР
			|			КОГДА
			|				ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) > 0
			|			ТОГДА
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|			ИНАЧЕ
			|				ВЫРАЗИТЬ ((ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаОстаток, 0) * 100 / ДокументОтчетДавальцу.СуммаВзаиморасчетов) КАК ЧИСЛО(15, 0))
			|		КОНЕЦ
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК ПроцентДолга,
			|ВЫБОР
			|	КОГДА
			|		ДокументОтчетДавальцу.Проведен И
			|		ДокументОтчетДавальцу.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|	ТОГДА
			|		РасчетыСКлиентамиОстатки.КОплатеОстаток
			|	ИНАЧЕ
			|		0
			|КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ОтчетДавальцу КАК ДокументОтчетДавальцу
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	ИСТИНА
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ), ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
			|ПО
			|	ИСТИНА
			|ГДЕ
			|	ДокументОтчетДавальцу.Ссылка = &ОтчетДавальцу
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтчетДавальцу, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ОтчетДавальцу", ОтчетДавальцу);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ОтчетДавальцу));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//	Структура - Структура параметров отчета.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",        1);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 2);
	СтруктураСостояние.Вставить("ЭтоНакладная",                            Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",          Истина);
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",                     "Продукция");
	СтруктураСостояние.Вставить("ИмяРегистраОтгрузкаУслуг",                "ЗаказыКлиентов");
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", Новый Структура("ТаблицаГрафикОплатыПоНакладной",
                                                                   ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()));
	
	Возврат СтруктураСостояние
	
КонецФункции

#Конецобласти

#Область УчетНДС

// Инициализирует параметры заполнения налогооблажения НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ОтчетДавальцу, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
//
Функция ПараметрыЗаполненияНалогооблаженияНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	ПараметрыЗаполнения.Организация				= Объект.Организация;
	ПараметрыЗаполнения.Дата					= Объект.Дата;
	ПараметрыЗаполнения.Договор					= Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.ОтчетДавальцу			= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Инициализирует параметры регистрации счетов-фактур (выданных)
//
// Параметры:
//  Объект		- ДокументОбъект.ОтчетДавальцу, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурПолученных().
//
Функция ПараметрыРегистрацииСчетовФактурВыданных(Объект) Экспорт
	
	ПараметрыРегистрации = УчетНДСУПКлиентСервер.ПараметрыРегистрацииСчетовФактурВыданных();
	ПараметрыРегистрации.Ссылка					= Объект.Ссылка;
	ПараметрыРегистрации.Дата					= Объект.Дата;
	ПараметрыРегистрации.Организация			= Объект.Организация;
	ПараметрыРегистрации.Контрагент				= Объект.Контрагент;
	ПараметрыРегистрации.НалогообложениеНДС		= Объект.НалогообложениеНДС;
	ПараметрыРегистрации.РеализацияРаботУслуг	= Истина;
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ОтчетДавальцуЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса) Экспорт
	
	ТекстДанныеДокумента = 
	"ВЫБРАТЬ
	|	Услуги.Ссылка							КАК Ссылка,
	|	Услуги.Ссылка.Дата						КАК Дата,
	|	Услуги.Ссылка.Валюта					КАК ВалютаДокумента,
	|	Услуги.Ссылка.ВалютаВзаиморасчетов		КАК ВалютаВзаиморасчетов,
	|	Услуги.ИдентификаторСтроки				КАК ИдентификаторСтроки,
	|	Услуги.Ссылка.СтавкаНДС					КАК СтавкаНДС,
	|	Услуги.СуммаСНДС						КАК СуммаСНДС,
	|	Услуги.СуммаНДС							КАК СуммаНДС,
	|	(Услуги.СуммаСНДС - Услуги.СуммаНДС)	КАК СуммаБезНДС,
	|	Услуги.СуммаВзаиморасчетов				КАК СуммаВзаиморасчетов,
	|	0										КАК СуммаНДСВзаиморасчетов
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В (&Ссылка)
	|";
	ПроведениеСерверУТ.ИнициализироватьВтСуммыДокументовВВалютахУчета(Запрос, ТекстыЗапроса, ТекстДанныеДокумента);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка 					КАК Ссылка,
	|	ДанныеДокумента.Организация 			КАК Организация,
	|	ДанныеДокумента.Партнер 				КАК Партнер,
	|	ДанныеДокумента.Контрагент 				КАК Контрагент,
	|	ДанныеДокумента.Дата 					КАК Период,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.ЗаказДавальца 			КАК ЗаказДавальца,
	|	ДанныеДокумента.Валюта 					КАК Валюта,
	|	ДанныеДокумента.Подразделение 			КАК Подразделение,
	|	ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров 		   КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.Сделка 					КАК Сделка,
	|	ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ) КАК ОбособленныйУчетТоваровПоСделке,
	|	ДанныеДокумента.ЦенаВключаетНДС 		КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ИСТИНА 									КАК ОтчетПоЗаказам,
	|	ДанныеДокумента.ФормаОплаты 			КАК ФормаОплаты,
	|	ДанныеДокумента.Договор 				КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеДокумента.Договор)	КАК ДоговорПредставление,
	|	ДанныеДокумента.Менеджер 				КАК Менеджер,
	|	ДанныеДокумента.Комментарий 			КАК Комментарий,
	|	ДанныеДокумента.НалогообложениеНДС 		КАК НалогообложениеНДС,
	|	ДанныеДокумента.ГруппаФинансовогоУчета	КАК ГруппаФинансовогоУчета,
	|	ДанныеДокумента.СтавкаНДС				КАК СтавкаНДС,
	|	ДанныеДокумента.Содержание				КАК Содержание,
	|	ДанныеДокумента.Номенклатура			КАК Номенклатура,
	|	ДанныеДокумента.Характеристика			КАК Характеристика,
	|	ДанныеДокумента.СуммаДокумента			КАК СуммаДокумента,
	|	ДанныеДокумента.Проведен				КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления			КАК ПометкаУдаления,
	|	
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 									КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 									КАК РасчетыПоНакладным,
	|	
	|	ДанныеДокумента.Договор.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	ВЫБОР КОГДА ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(ДанныеДокумента.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ГрафикИсполненияВДоговоре
	|	
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Реквизиты.Валюта, Реквизиты.ВалютаВзаиморасчетов, Реквизиты.Период);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУПР",   Коэффициенты.КоэффициентПересчетаВВалютуУПР);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",  Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",        РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Реквизиты));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",            Перечисления.ХозяйственныеОперации.РеализацияКлиенту);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",   Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",       Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ИспользуетсяНазначение",           ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоВидамЗапасов"));
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",          ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НомерНаПечать",                    ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru = 'По договору ""%Договор%""';
									|en = 'Under the ""%Договор%"" contract'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.ДоговорПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	УниверсальныеМеханизмыПартийИСебестоимости.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиНоменклатуры(Реквизиты)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Серия		 							КАК Серия,
	|	&Подразделение 							КАК Склад,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ТаблицаУслуги.ЗаказДавальца.Назначение  КАК Назначение
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		&Серия							= Аналитика.Серия
	|		И &Подразделение				= Аналитика.МестоХранения
	|		И ТаблицаУслуги.Номенклатура	= Аналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= Аналитика.Характеристика
	|		И ТаблицаУслуги.ЗаказДавальца.Назначение = Аналитика.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Серия		 							КАК Серия,
	|	&Подразделение 							КАК Склад,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО
	|		&Серия							= Аналитика.Серия
	|		И &Подразделение				= Аналитика.МестоХранения
	|		И ТаблицаУслуги.Номенклатура	= Аналитика.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= Аналитика.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = Аналитика.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитика.СтатьяКалькуляции
	|ГДЕ
	|	Аналитика.Номенклатура ЕСТЬ NULL 
	|	И ТаблицаУслуги.Ссылка = &Ссылка
	|	И НЕ &ИспользуетсяНазначение
	|");
	
	Запрос.УстановитьПараметр("Ссылка",					Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Подразделение",			Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Серия",					Реквизиты.Серия);
	Запрос.УстановитьПараметр("ИспользуетсяНазначение", Реквизиты.ИспользуетсяНазначение);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка)
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтУслуги";
	
	ИнициализироватьКлючиАналитикиНоменклатуры(Запрос.Параметры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.Ссылка					КАК Ссылка,
	|	ТаблицаУслуги.НомерСтроки				КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО							КАК ВидЗапасов,
	|	ТаблицаУслуги.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ТаблицаУслуги.КодСтроки					КАК КодСтроки,
	|	ТаблицаУслуги.ИдентификаторСтроки		КАК ИдентификаторСтроки,
	|	ТаблицаУслуги.Количество				КАК Количество,
	|	ТаблицаУслуги.Сумма						КАК Сумма,
	|	ТаблицаУслуги.СуммаНДС					КАК СуммаНДС,
	|	ТаблицаУслуги.СуммаСНДС					КАК СуммаСНДС,
	|	&СтавкаНДС								КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаВзаиморасчетов		КАК СуммаВзаиморасчетов,
	|	0										КАК СуммаРучнойСкидки,
	|	0										КАК СуммаАвтоматическойСкидки,
	|	Аналитики.КлючАналитики					КАК АналитикаУчетаНоменклатуры,
	|	АналитикиБезНазначения.КлючАналитики	КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	Аналитики.МестоХранения					КАК Склад,
	|	(ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоСделкам И &ОбособленныйУчетТоваровПоСделке
	|			ТОГДА &Сделка
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			ТОГДА &Менеджер
	|		КОГДА &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|		 И &ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			ТОГДА &Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ) КАК АналитикаФинансовогоУчета
	|
	|ПОМЕСТИТЬ ВтУслуги
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитики
	|	ПО
	|		&Серия							= Аналитики.Серия
	|		И &Подразделение				= Аналитики.МестоХранения
	|		И ТаблицаУслуги.Номенклатура	= Аналитики.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= Аналитики.Характеристика
	|		И ТаблицаУслуги.ЗаказДавальца.Назначение = Аналитики.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = Аналитики.СтатьяКалькуляции
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикиБезНазначения
	|	ПО
	|		&Серия							= АналитикиБезНазначения.Серия
	|		И &Подразделение				= АналитикиБезНазначения.МестоХранения
	|		И ТаблицаУслуги.Номенклатура	= АналитикиБезНазначения.Номенклатура
	|		И ТаблицаУслуги.Характеристика	= АналитикиБезНазначения.Характеристика
	|		И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикиБезНазначения.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикиБезНазначения.СтатьяКалькуляции
	|
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	ТаблицаУслуги.ЗаказДавальца				КАК ЗаказДавальца,
	|	ТаблицаУслуги.Номенклатура				КАК Номенклатура,
	|	ТаблицаУслуги.Характеристика			КАК Характеристика,
	|	ТаблицаУслуги.Количество				КАК Заказано,
	|	ТаблицаУслуги.Количество				КАК КОформлению,
	|	ТаблицаУслуги.СуммаВзаиморасчетов		КАК Сумма,
	|	&НалогообложениеНДС						КАК НалогообложениеНДС
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыручкаИСебестоимостьПродаж";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки						КАК НомерСтроки,
	|	&Период											КАК Период,
	|	&Подразделение									КАК Подразделение,
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаУслуги.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаУслуги.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&АналитикаУчетаПоПартнерам						КАК АналитикаУчетаПоПартнерам,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	&НалогообложениеНДС								КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)		КАК ТипЗапасов,
	|	
	|	НЕОПРЕДЕЛЕНО									КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|	ТаблицаУслуги.АналитикаФинансовогоУчета			КАК АналитикаФинансовогоУчета,
	|	&НалогообложениеНДС								КАК ВидДеятельностиНДС,
	|
	|	&Менеджер										КАК Менеджер,
	|	0												КАК Стоимость,
	|	ТаблицаУслуги.Количество						КАК Количество,
	|
	|	ВЫБОР КОГДА &ОтчетПоЗаказам ТОГДА
	|		ТаблицаУслуги.ЗаказДавальца
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ 											КАК ЗаказКлиента,
	|
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС) 							* &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(31,2)) КАК СуммаВыручки,
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуУпр  КАК ЧИСЛО(31,2)) КАК СуммаВыручкиБезНДС,
	|	ВЫРАЗИТЬ((ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаВыручкиРегл,
	|	ВЫРАЗИТЬ(ТаблицаУслуги.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаВыручкиСНДСРегл,
	|	0 КАК СуммаРучнойСкидки,
	|	0 КАК СуммаАвтоматическойСкидки,
	|
	|	&Подразделение КАК Склад,
	|	&Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельностиНоменклатуры,
	|
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВВалютеВзаиморасчетов,
	|
	|	ТаблицаУслуги.СуммаВзаиморасчетов - 
	|	ВЫБОР КОГДА ТаблицаУслуги.СуммаСНДС <> 0 ТОГДА
	|		ВЫРАЗИТЬ(ТаблицаУслуги.СуммаВзаиморасчетов * ТаблицаУслуги.СуммаНДС / ТаблицаУслуги.СуммаСНДС КАК ЧИСЛО(31,2))
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	&Валюта КАК ВалютаДокумента,
	|	ТаблицаУслуги.СуммаСНДС КАК СуммаВВалютеДокумента,
	|	ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС КАК СуммаБезНДСВВалютеДокумента,
	|
	|	ТаблицаУслуги.Номенклатура КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &РасчетыПоДоговорам
	|			ТОГДА &Договор
	|		ИНАЧЕ
	|			ТаблицаУслуги.ЗаказДавальца
	|	КОНЕЦ КАК ИсточникГФУРасчетов
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	//Порядок и состав полей запроса проведения
	ШаблонПолей = "
	|ВЫБРАТЬ
	|	Шаблон.Период КАК Период,
	|	Шаблон.ДатаРегистратора КАК ДатаРегистратора,
	|	Шаблон.НомерРегистратора КАК НомерРегистратора,
	|	Шаблон.ДатаПлатежа КАК ДатаПлатежа,
	|	Шаблон.ВидДвижения КАК ВидДвижения,
	|	Шаблон.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаблон.ЗаказКлиента КАК ЗаказКлиента,
	|	Шаблон.ПродажаПоЗаказу КАК ПродажаПоЗаказу,
	|	Шаблон.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Шаблон.Валюта КАК Валюта,
	|	Шаблон.ИсключатьПриКонтроле КАК ИсключатьПриКонтроле,
	|	Шаблон.ФормаОплаты КАК ФормаОплаты,
	|	Шаблон.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	Шаблон.Сумма КАК Сумма,
	|	Шаблон.СуммаРегл КАК СуммаРегл,
	|	Шаблон.СуммаУпр КАК СуммаУпр,
	|	Шаблон.КОплате КАК КОплате,
	|	Шаблон.КОтгрузке КАК КОтгрузке,
	|	Шаблон.Организация КАК Организация,
	|	Шаблон.ВалютаДокумента КАК ВалютаДокумента,
	|	Шаблон.КорОбъектРасчетов КАК КорОбъектРасчетов,
	|	Шаблон.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	#Шаблон КАК Шаблон
	|ГДЕ
	|	&ОтборШаблон";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период 									КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&Номер 										КАК НомерРегистратора,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа				КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		ЭтапыГрафикаОплаты.Заказ
	|	КОНЕЦ 										КАК ЗаказКлиента,
	|
	|	ЭтапыГрафикаОплаты.Заказ					КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	ИСТИНА 										КАК ИсключатьПриКонтроле,
	|	Неопределено 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|
	|	СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов) 	КАК Сумма,
	|	ВЫБОР 
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета 
	|			ТОГДА СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ЭтапыГрафикаОплаты.СуммаПлатежа) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР 
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета 
	|			ТОГДА СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов)
	|		ИНАЧЕ ВЫРАЗИТЬ(СУММА(ЭтапыГрафикаОплаты.СуммаПлатежа) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаУпр,
	|	0 											КАК КОплате,
	|	ВЫБОР КОГДА НЕ &ГрафикИсполненияВДоговоре ТОГДА
	|		СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ 										КАК КОтгрузке,
	|	&Организация								КАК Организация,
	|	&Валюта										КАК ВалютаДокумента,
	|	Неопределено								КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам
	|
	|ИЗ
	|	Документ.ОтчетДавальцу.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|
	|ГДЕ
	|	НЕ &РасчетыПоНакладным
	|	И ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.Заказ,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период 									КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&Номер 										КАК НомерРегистратора,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа				КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ 										КАК ЗаказКлиента,
	|
	|	Неопределено 								КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	ИСТИНА 										КАК ИсключатьПриКонтроле,
	|	Неопределено 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|
	|	СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов) 	КАК Сумма,
	|	
	|	ВЫРАЗИТЬ(СУММА(ЭтапыГрафикаОплаты.СуммаПлатежа) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(СУММА(ЭтапыГрафикаОплаты.СуммаПлатежа) * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаУпр,
	|	0 											КАК КОплате,
	|	0 											КАК КОтгрузке,
	|	&Организация								КАК Организация,
	|	&Валюта										КАК ВалютаДокумента,
	|	Неопределено								КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	Документ.ОтчетДавальцу.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	&РасчетыПоНакладным
	|	И ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.ДатаПлатежа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ЭтапыГрафикаОплаты.ДатаПлатежа, День)	КАК Период,
	|	&Период 									КАК ДатаРегистратора,
	|	&Номер 										КАК НомерРегистратора,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа 				КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ										КАК ЗаказКлиента,
	|
	|	Неопределено 								КАК ПродажаПоЗаказу,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&ВалютаВзаиморасчетов 						КАК Валюта,
	|	ИСТИНА 										КАК ИсключатьПриКонтроле,
	|	&ФормаОплаты 								КАК ФормаОплаты,
	|	&ДопустимаяСуммаЗадолженности 				КАК ДопустимаяСуммаЗадолженности,
	|	0 											КАК Сумма,
	|	0 											КАК СуммаРегл,
	|	0 											КАК СуммаУпр,
	|	СУММА(ЭтапыГрафикаОплаты.СуммаВзаиморасчетов)	КАК КОплате,
	|	0 											КАК КОтгрузке,
	|	&Организация								КАК Организация,
	|	&Валюта										КАК ВалютаДокумента,
	|	Неопределено								КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка)	КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	Документ.ОтчетДавальцу.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	&РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|	И ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыГрафикаОплаты.ДатаПлатежа
	|
	|//ЗачетАвансовКлиентаПоНакладной
	|
	|";
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"//ЗачетАвансовКлиентаПоНакладной",
		ВзаиморасчетыСервер.ТекстПроведенияЗачетАвансовКлиентаПоНакладной("ОтчетДавальцу", ШаблонПолей));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период												КАК Период,
	|	&Валюта												КАК Валюта,
	|	ТаблицаУслуги.ИдентификаторСтроки					КАК ИдентификаторСтроки,
	|	ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС	КАК СуммаБезНДС,
	|	ТаблицаУслуги.СтавкаНДС								КАК СтавкаНДС,
	|	ТаблицаУслуги.СуммаНДС								КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА &Валюта = &ВалютаРегламентированногоУчета ТОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС
	|	КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР КОГДА &Валюта = &ВалютаРегламентированногоУчета ТОГДА ТаблицаУслуги.СуммаНДС
	|	КОГДА ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСРегл,
	|
	|	ВЫБОР КОГДА &Валюта = &ВалютаРегламентированногоУчета ТОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС
	|	КОГДА ЕСТЬNULL(ДанныеРегистра.БазаНДСРегл, 0) <> 0 ТОГДА
	|		ДанныеРегистра.БазаНДСРегл
	|	КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСРегл, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК БазаНДСРегл,
	|
	|	ВЫБОР КОГДА &Валюта = &ВалютаУправленческогоУчета ТОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС
	|	КОГДА ЕСТЬNULL(ДанныеРегистра.БазаНДСУпр, 0) <> 0 ТОГДА
	|		ДанныеРегистра.БазаНДСУпр
	|	КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСУпр, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК БазаНДСУпр,
	|
	|	ВЫБОР КОГДА &Валюта = &ВалютаУправленческогоУчета ТОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС
	|	КОГДА ТаблицаУслуги.СуммаСНДС - ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаБезНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаБезНДСУпр, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|	ВЫБОР КОГДА &Валюта = &ВалютаУправленческогоУчета ТОГДА ТаблицаУслуги.СуммаНДС
	|	КОГДА ТаблицаУслуги.СуммаНДС = ЕСТЬNULL(ДанныеРегистра.СуммаНДС, 0) ТОГДА
	|		ЕСТЬNULL(ДанныеРегистра.СуммаНДСУпр, 0)
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ КАК СуммаНДСУпр,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) КАК ТипРасчетов,
	|	
	|	ТаблицаУслуги.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютеРегл КАК ДанныеРегистра
	|	ПО
	|		ДанныеРегистра.Регистратор = &Ссылка
	|		И ТаблицаУслуги.ИдентификаторСтроки = ДанныеРегистра.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаУслуги.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВыпускПродукции(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыпускПродукции";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|	&Подразделение 								КАК Подразделение,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУслуги.КодСтроки 					КАК КодСтроки,
	|	ТаблицаУслуги.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаУслуги.ЗаказДавальца 				КАК Заказ,
	|	ТаблицаУслуги.Количество 					КАК Количество
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	НЕ &ПартионныйУчетВерсии22
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСебестоимостьТоваров(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	ИмяРегистра = "СебестоимостьТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУТ.ЕстьТаблицаЗапроса("ВтУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки 					КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 		КАК ВидДвижения,
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаУслуги.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаУслуги.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ТаблицаУслуги.Количество 					КАК Количество,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение 								КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаУслуги.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК ВидЗапасов,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО												КАК Партия,
	|	НЕОПРЕДЕЛЕНО												КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО												КАК ВидДеятельностиНДС,
	|	ТаблицаУслуги.АналитикаФинансовогоУчета						КАК КорАналитикаФинансовогоУчета,
	|	&НалогообложениеНДС 										КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.Потребление) 		КАК ТипЗаписи,
	|
	|	НЕОПРЕДЕЛЕНО 								КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО 								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 								КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ТаблицаУслуги.ЗаказДавальца 				КАК ЗаказКлиента
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУслуги.НомерСтроки 					КАК НомерСтрокиДокумента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) 		КАК ВидДвижения,
	|	&Период 									КАК Период,
	|	&Организация 								КАК Организация,
	|
	|	ВЫБОР КОГДА &ИспользуетсяНазначение
	|		ТОГДА ТаблицаУслуги.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ТаблицаУслуги.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ										КАК АналитикаУчетаНоменклатуры,
	|
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты) КАК РазделУчета,
	|
	|	ТаблицаУслуги.Количество 					КАК Количество,
	|
	|	&ХозяйственнаяОперация 						КАК ХозяйственнаяОперация,
	|	&АналитикаУчетаПоПартнерам 					КАК АналитикаУчетаПоПартнерам,
	|	&Подразделение 								КАК Подразделение,
	|
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоВидамЗапасов ТОГДА
	|		ТаблицаУслуги.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ										КАК ВидЗапасов,
	|
	//	партионный учет версии 2.2
	|	НЕОПРЕДЕЛЕНО								КАК Партия,
	|	НЕОПРЕДЕЛЕНО								КАК АналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО								КАК ВидДеятельностиНДС,
	|	НЕОПРЕДЕЛЕНО 								КАК КорАналитикаФинансовогоУчета,
	|	НЕОПРЕДЕЛЕНО 								КАК КорВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейПартий.ПустаяСсылка) КАК ТипЗаписи,
	|
	|	НЕОПРЕДЕЛЕНО 								КАК КорРазделУчета,
	|	НЕОПРЕДЕЛЕНО 								КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО 								КАК КорАналитикаУчетаНоменклатуры,
	|
	|	ТаблицаУслуги.ЗаказДавальца 				КАК ЗаказКлиента
	|
	|ИЗ
	|	ВтУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	НЕ &ПартионныйУчетВерсии22
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтрокиДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                    КАК Ссылка,
	|	&Период                    КАК ДатаДокументаИБ,
	|	&Номер                     КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных   КАК ТипСсылки,
	|	&Организация               КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу) КАК ХозяйственнаяОперация,
	|	&Партнер                   КАК Партнер,
	|	&Контрагент                КАК Контрагент,
	|	&Договор                   КАК Договор,
	|	&НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО               КАК МестоХранения,
	|	&Подразделение             КАК Подразделение,
	|	&Менеджер                  КАК Ответственный,
	|	&Комментарий               КАК Комментарий,
	|	&Валюта                    КАК Валюта,
	|	&СуммаДокумента            КАК Сумма,
	|	НЕОПРЕДЕЛЕНО               КАК Статус,
	|	&Проведен                  КАК Проведен,
	|	&ПометкаУдаления           КАК ПометкаУдаления,
	|	ЛОЖЬ                       КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору      КАК Дополнительно,
	|	&Период                    КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать             КАК НомерПервичногоДокумента,
	|	&Период    КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ОтчетДавальцу";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#Область ОтражениеНДС

Процедура ОтразитьВУчетеНДС(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЦенности =
	"ВЫБРАТЬ
	|	Услуги.Ссылка.Дата												КАК Период,
	|	Услуги.Ссылка													КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)  КАК ХозяйственнаяОперация,
	|	Услуги.Ссылка.Контрагент										КАК Контрагент,
	|	Услуги.Ссылка.Договор											КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)					КАК Грузоотправитель,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)					КАК Грузополучатель,
	|	Услуги.Ссылка.Организация										КАК Организация,
	|	Услуги.Ссылка.Подразделение										КАК Подразделение,
	|	Услуги.Ссылка													КАК ДокументРеализации,
	|	НЕОПРЕДЕЛЕНО													КАК ДокументКорректировкиРеализации,
	|	ЛОЖЬ															КАК ИсправлениеОшибок,
	|	ЛОЖЬ															КАК КорректировкаПоСогласованиюСторон,
	|	ЛОЖЬ															КАК РеализацияВРозницу,
	|	Услуги.Ссылка.НалогообложениеНДС								КАК НалогообложениеНДС,
	|	Услуги.Ссылка.СтавкаНДС											КАК СтавкаНДС,
	|	Услуги.Ссылка.Номенклатура										КАК Номенклатура,
	|	Услуги.Ссылка.Характеристика									КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО													КАК КодТНВЭД,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)					КАК ВидЗапасов,
	|	Услуги.ИдентификаторСтроки										КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ОтчетДавальцу.Продукция КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка В (&Ссылка)
	|";
	УчетНДСУП.ОтразитьРеализациюКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЦенности);
	
КонецПроцедуры

#Конецобласти

#Конецобласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу) Тогда
		
		// Акт выполненных работ
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "Акт";
		КомандаПечати.Представление = НСтр("ru = 'Акт выполненных работ';
											|en = 'Acceptance note'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Акт выполненных работ (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУПКлиент.ПечатьАктаОтчетДавальцуMicrosoftWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "АктОтчетДавальцуMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Акт выполненных работ (Microsoft Word)';
											|en = 'Acceptance note (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		
		// Отчет о материалах
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ОтчетОМатериалах";
		КомандаПечати.Представление = НСтр("ru = 'Отчет о материалах';
											|en = 'Report on materials'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
		 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
			
			// Счет на оплату
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru = 'Счет на оплату';
												|en = 'Proforma invoice'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			
			// Счет на оплату с факсимиле
			КомандаПечати = КомандыПечати.Добавить();
			КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
			КомандаПечати.Идентификатор = "СчетНаОплату";
			КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с факсимиле';
												|en = 'Proforma invoice with facsimile'");
			КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
			КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПраваПользователяПовтИсп.ЭтоПартнер() Тогда
		
		// Комплект документов на принтер
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументов";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументов";
		КомандаПечати.СразуНаПринтер = Истина;
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов на принтер';
											|en = 'Document set for printing'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 1;
		
		// Комплект документов с настройкой...
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьКомплектаДокументовСНастройкой";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "КомплектДокументовСНастройкой";
		КомандаПечати.Представление = НСтр("ru = 'Комплект документов с настройкой...';
											|en = 'Document set with setting...'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.Порядок = 2;
		
	КонецЕсли;

	ОтчетДавальцуЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"Акт",
			НСтр("ru = 'Акт выполненных работ';
				|en = 'Acceptance note'"),
			СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОтчетОМатериалах") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ОтчетОМатериалах",
			НСтр("ru = 'Отчет о материалах';
				|en = 'Report on materials'"),
			СформироватьПечатнуюФормуОтчетОМатериалах(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;

	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КомплектДокументов") Тогда
		
		КоллекцияПечатныхФорм.Очистить();
		
		СформироватьКомплектПечатныхФорм(
			МассивОбъектов,
			ПараметрыПечати,
			КоллекцияПечатныхФорм,
			ОбъектыПечати);
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	ОтчетДавальцуЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
КонецПроцедуры

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	Возврат Новый Структура("Данные,Макеты",
				ПолучитьДанныеОбъектаПоМакетам(МассивДокументов, МассивИменМакетов),
				ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	СтруктураРезультатов = ПолучитьДанныеДляПечати(МассивДокументов, Неопределено);
		
	ДанныеПечати			= СтруктураРезультатов["РезультатПоШапке"].Выбрать();
	ВыборкаПоДокументам 	= СтруктураРезультатов["РезультатПоТабличнойЧасти"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ДанныеПечати.Следующий() Цикл
		ДанныеОбъектаПоМакетам = Новый Структура;
		// Найдем в выборке услуги по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в документе пустая табличная часть услуги - перейдем к следующему документу
		Если НайденСледующий Тогда
			ВыборкаПоУслугам = ВыборкаПоДокументам.Выбрать();
		Иначе
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют услуги. Печать акта выполненных работ (услуг) не требуется.';
					|en = 'Services are missing in document %1. Printing of completion (rendered services) certificate is not required.'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			Продолжить;
		КонецЕсли;

		ДанныеОбъекта = ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, ВыборкаПоУслугам);
		Для Каждого ИмяМакета Из МассивИменМакетов Цикл
			ДанныеОбъектаПоМакетам.Вставить(ИмяМакета, ДанныеОбъекта);
		КонецЦикла;
		ДанныеПоВсемОбъектам.Вставить(ДанныеПечати.Ссылка, ДанныеОбъектаПоМакетам);
	КонецЦикла;
	
	Возврат ДанныеПоВсемОбъектам;
	
КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_Акт" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейОтчетДавальцу();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу.ПФ_DOC_Акт");
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура(
						"ОписаниеСекций,ДвоичныеДанныеМакетов",
						ОписаниеСекций,
						ДвоичныеДанныеМакетов);
	
КонецФункции

Функция ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОтчетДавальцу.Ссылка						КАК Ссылка,
	|	ОтчетДавальцу.Номер							КАК Номер,
	|	ОтчетДавальцу.Дата							КАК Дата,
	|	ОтчетДавальцу.Партнер						КАК Партнер,
	|	ОтчетДавальцу.Контрагент					КАК Контрагент,
	|	ОтчетДавальцу.Организация					КАК Организация,
	|	ОтчетДавальцу.Организация.Префикс			КАК Префикс,
	|	ОтчетДавальцу.Валюта						КАК Валюта,
	|	ОтчетДавальцу.ЦенаВключаетНДС				КАК ЦенаВключаетНДС,
	|	ВЫБОР КОГДА ОтчетДавальцу.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ										КАК УчитыватьНДС,
	|	ОтчетДавальцу.ДополнительнаяИнформация		КАК ДополнительнаяИнформация,
	|	ОтчетДавальцу.ДополнительнаяИнформацияШапки	КАК ДополнительнаяИнформацияШапки,
	|	ОтчетДавальцу.БанковскийСчетОрганизации		КАК СчетОрганизации,
	|	ОтчетДавальцу.БанковскийСчетКонтрагента		КАК СчетКонтрагента
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|ГДЕ
	|	ОтчетДавальцу.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка								КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура						КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание							КАК УслугаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.Код					КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул				КАК Артикул,
	|	ВложенныйЗапрос.Характеристика						КАК Характеристика,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное	КАК ХарактеристикаНаименованиеПолное,
	|	ВложенныйЗапрос.СтавкаНДС							КАК СтавкаНДС,
	|	ВложенныйЗапрос.Сумма								КАК Цена,
	|	1													КАК Количество,
	|	ВложенныйЗапрос.Сумма								КАК Сумма,
	|	ВложенныйЗапрос.СуммаНДС							КАК СуммаНДС,
	|	ВложенныйЗапрос.СуммаСНДС							КАК СуммаСНДС,
	|	1													КАК НомерСтроки,
	|	ВложенныйЗапрос.ЕдиницаИзмерения					КАК ЕдиницаИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтчетДавальцу.Ссылка								КАК Ссылка,
	|		ОтчетДавальцу.Ссылка.Номенклатура					КАК Номенклатура,
	|		ОтчетДавальцу.Ссылка.Содержание						КАК Содержание,
	|		ОтчетДавальцу.Ссылка.Характеристика					КАК Характеристика,
	|		ОтчетДавальцу.Ссылка.СтавкаНДС						КАК СтавкаНДС,
	|		СУММА(ОтчетДавальцу.Сумма)							КАК Сумма,
	|		СУММА(ОтчетДавальцу.СуммаНДС)						КАК СуммаНДС,
	|		СУММА(ОтчетДавальцу.СуммаСНДС)						КАК СуммаСНДС,
	|		ОтчетДавальцу.Ссылка.Номенклатура.ЕдиницаИзмерения	КАК ЕдиницаИзмерения
	|	ИЗ
	|		Документ.ОтчетДавальцу.Продукция КАК ОтчетДавальцу
	|	ГДЕ
	|		ОтчетДавальцу.Ссылка В(&МассивДокументов)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтчетДавальцу.Ссылка,
	|		ОтчетДавальцу.Ссылка.СтавкаНДС,
	|		ОтчетДавальцу.Ссылка.Номенклатура,
	|		ОтчетДавальцу.Ссылка.Содержание,
	|		ОтчетДавальцу.Ссылка.Номенклатура.ЕдиницаИзмерения,
	|		ОтчетДавальцу.Ссылка.Характеристика) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|ИТОГИ ПО
	|	Ссылка");
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов         = Запрос.ВыполнитьПакет();
	РезультатПоШапке          = МассивРезультатов[0];
	РезультатПоТабличнойЧасти = МассивРезультатов[1];
	
	СтруктураДанныхДляПечати = Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти",
	                                            РезультатПоШапке, РезультатПоТабличнойЧасти);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеОбъектаПоВыборке(ДанныеПечати, ВыборкаПоУслугам)
	
	ДанныеОбъекта = Новый Структура;
	
	ДанныеОбъекта.Вставить("ТекстЗаголовка", ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru = 'Акт';
																																|en = 'Certificate'")));
	ДанныеОбъекта.Вставить("ДополнительнаяИнформацияШапки", ДанныеПечати.ДополнительнаяИнформацияШапки);
	
	СведенияОИсполнителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Организация, 
		ДанныеПечати.Дата,
		,
		ДанныеПечати.СчетОрганизации);
	
	СведенияОЗаказчике = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
		ДанныеПечати.Контрагент,
		ДанныеПечати.Дата,
		,
		ДанныеПечати.СчетКонтрагента);
	
	ДанныеОбъекта.Вставить("ПредставлениеИсполнителя", СведенияОИсполнителе.ОфициальноеНаименование);
	ДанныеОбъекта.Вставить("ПредставлениеЗаказчика",   СведенияОЗаказчике.ОфициальноеНаименование);
	ДанныеОбъекта.Вставить("ЮрАдресИсполнителя",       СведенияОИсполнителе.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("ЮрАдресЗаказчика",         СведенияОЗаказчике.ЮридическийАдрес);
	ДанныеОбъекта.Вставить("ИННИсполнителя",           СведенияОИсполнителе.ИНН);
	ДанныеОбъекта.Вставить("ИННЗаказчика",             СведенияОЗаказчике.ИНН);
	ДанныеОбъекта.Вставить("КППИсполнителя",           СведенияОИсполнителе.КПП);
	ДанныеОбъекта.Вставить("КППЗаказчика",             СведенияОЗаказчике.КПП);
	ДанныеОбъекта.Вставить("РасчетныйСчетИсполнителя", СведенияОИсполнителе.НомерСчета);
	ДанныеОбъекта.Вставить("РасчетныйСчетЗаказчика",   СведенияОЗаказчике.НомерСчета);
	ДанныеОбъекта.Вставить("КорСчетИсполнителя",       СведенияОИсполнителе.КоррСчет);
	ДанныеОбъекта.Вставить("КорСчетЗаказчика",         СведенияОЗаказчике.КоррСчет);
	ДанныеОбъекта.Вставить("БанкИсполнителя",          СведенияОИсполнителе.Банк);
	ДанныеОбъекта.Вставить("БанкЗаказчика",            СведенияОЗаказчике.Банк);
	ДанныеОбъекта.Вставить("БИКИсполнителя",           СведенияОИсполнителе.БИК);
	ДанныеОбъекта.Вставить("БИКЗаказчика",             СведенияОИсполнителе.БИК);
	ДанныеОбъекта.Вставить("ДополнительнаяИнформация", ДанныеПечати.ДополнительнаяИнформация);
	ДанныеОбъекта.Вставить("УчитыватьНДС",             ДанныеПечати.УчитыватьНДС);
	ДанныеОбъекта.Вставить("ПоказыватьНДС",            Константы.ВыводитьДопКолонкиНДС.Получить());

	Если ДанныеПечати.УчитыватьНДС Тогда
		ДанныеОбъекта.Вставить("НДС", ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС';
																			|en = 'VAT inclusive'"), НСтр("ru = 'Сумма НДС';
																											|en = 'VAT amount'")));
	Иначе
		ДанныеОбъекта.Вставить("НДС", НСтр("ru = 'Без налога (НДС)';
											|en = 'Without tax (VAT)'"));
	КонецЕсли;

	ДанныеОбъекта.Вставить("Услуги", Новый Массив);
	
	Сумма       = 0;
	СуммаНДС    = 0;
	НомерСтроки = 0;
	
	ВыборкаПоУслугам.Сбросить();
	
	Пока ВыборкаПоУслугам.Следующий() Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицыУслуги = Новый Структура;
		СтрокаТаблицыУслуги.Вставить("НомерСтроки",      НомерСтроки);
		СтрокаТаблицыУслуги.Вставить("Товар",            ВыборкаПоУслугам.УслугаНаименованиеПолное);
		СтрокаТаблицыУслуги.Вставить("Количество",       ВыборкаПоУслугам.Количество);
		СтрокаТаблицыУслуги.Вставить("ЕдиницаИзмерения", ВыборкаПоУслугам.ЕдиницаИзмерения);
		СтрокаТаблицыУслуги.Вставить("Цена",             Формат(ВыборкаПоУслугам.Цена,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("Сумма",            Формат(ВыборкаПоУслугам.Сумма,"ЧДЦ=2; ЧРД=,"));
		СтрокаТаблицыУслуги.Вставить("СтавкаНДС",        ВыборкаПоУслугам.СтавкаНДС);
		СтрокаТаблицыУслуги.Вставить("СуммаНДС",         Формат(ВыборкаПоУслугам.СуммаНДС,"ЧДЦ=2; ЧРД=,"));
		
		ДанныеОбъекта.Услуги.Добавить(СтрокаТаблицыУслуги);
		
		Сумма    = Сумма + ВыборкаПоУслугам.Сумма;
		СуммаНДС = СуммаНДС + ВыборкаПоУслугам.СуммаНДС;
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("Всего",    Сумма);
	ДанныеОбъекта.Вставить("ВсегоНДС", СуммаНДС);
	
	СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
	
	ИтоговаяСтрока = СтрШаблон(
		НСтр("ru = 'Всего выполнено работ (оказано услуг) %1, на сумму %2';
			|en = 'Total executed works (rendered services) %1 for the amount of %2'"),
		НомерСтроки,
		ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
	
	ДанныеОбъекта.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	ДанныеОбъекта.Вставить("СуммаПрописью",  РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПолучитьОписаниеОбластейОтчетДавальцу()

	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул",				"ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул",				"НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Заголовок",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ЗаголовокШапки",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформацияШапки",	"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Предложение",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицы",					"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Строка",							"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаТаблицыСНДС",				"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СтрокаСНДС",						"СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Итого",							"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ИтогоНДС",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "СуммаПрописью",					"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подписи",						"Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ДополнительнаяИнформация",		"Общая");
		
	Возврат Секции;

КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчетОрганизации.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчетОрганизации КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.ИностранныйБанк
	|				ИЛИ Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|				ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчетОрганизации.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчетОрганизации.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчетОрганизации.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.АдресБанка КАК АдресБанка,
	|	Документы.БанковскийСчетОрганизации.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчетОрганизации.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчетОрганизации.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	Документы.БанковскийСчетОрганизации.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	"""" КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА Документы.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)
	|			ТОГДА Документы.ЗаказДавальца.ИдентификаторПлатежа
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИдентификаторПлатежа,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.ОтчетДавальцу КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО Документы.БанковскийСчетОрганизации.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчетОрганизации.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы КАК Константы
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетДавальцуЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару,
	|	ОтчетДавальцуЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ОтчетДавальцуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетДавальцуЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ОтчетДавальцуЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу.ЭтапыГрафикаОплаты КАК ОтчетДавальцуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетДавальцуЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК НомерСтроки,
	|	Отчет.Ссылка КАК Ссылка,
	|	Отчет.Номенклатура КАК Номенклатура,
	|	Отчет.Номенклатура.Код КАК Код,
	|	Отчет.Номенклатура.Артикул КАК Артикул,
	|	Отчет.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Отчет.СтавкаНДС КАК СтавкаНДС,
	|	Отчет.Характеристика.НаименованиеПолное КАК Характеристика,
	|	Отчет.Содержание КАК Содержание,
	|	СУММА(Товары.Сумма) КАК Цена,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(Товары.Сумма) КАК СуммаБезСкидки,
	|	0 КАК СуммаСкидки,
	|	1 КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	ПРЕДСТАВЛЕНИЕ(Отчет.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ОтчетДавальцу КАК Отчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетДавальцу.Продукция КАК Товары
	|		ПО Отчет.Ссылка = Товары.Ссылка
	|ГДЕ
	|	Отчет.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Отчет.Ссылка,
	|	Отчет.Номенклатура,
	|	Отчет.СтавкаНДС,
	|	Отчет.Содержание,
	|	Отчет.Номенклатура.Код,
	|	Отчет.Номенклатура.Артикул,
	|	Отчет.Номенклатура.НаименованиеПолное,
	|	Отчет.Характеристика.НаименованиеПолное,
	|	ПРЕДСТАВЛЕНИЕ(Отчет.Номенклатура.ЕдиницаИзмерения)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт

	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");

КонецПроцедуры 

Функция СформироватьПечатнуюФормуАктОбОказанииУслуг(МассивОбъектов, ОбъектыПечати, ПараметрыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	ПоказыватьНДС = Константы.ВыводитьДопКолонкиНДС.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу_Акт";
	
	СтруктураРезультатов = ПолучитьДанныеДляПечати(МассивОбъектов, ПараметрыПечати);
		
	ДанныеПечати			= СтруктураРезультатов["РезультатПоШапке"].Выбрать();
	ВыборкаПоДокументам 	= СтруктураРезультатов["РезультатПоТабличнойЧасти"].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке услуги по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		
		// Если в документе пустая табличная часть услуги - перейдем к следующему документу
		Если НайденСледующий Тогда
			ВыборкаПоУслугам = ВыборкаПоДокументам.Выбрать();
			ЕстьНДС = ДанныеПечати.УчитыватьНДС;
			ВыборкаПоУслугам.Сбросить();
		Иначе
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В документе %1 отсутствуют услуги. Печать акта выполненных работ (услуг) не требуется.';
					|en = 'Services are missing in document %1. Printing of completion (rendered services) certificate is not required.'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			
			Продолжить;
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу.ПФ_MXL_Акт");
		
		// Выводим шапку акта
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru = 'Акт';
																											|en = 'Certificate'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ДанныеПечати.ДополнительнаяИнформацияШапки="" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформацияШапки");
			ОбластьМакета.Параметры.ДополнительнаяИнформацияШапки= ДанныеПечати.ДополнительнаяИнформацияШапки;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ТекстШапки");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		// Выводим заголовок таблицы Услуги
		
		СуффиксОбласти = ?(ЕстьНДС И ПоказыватьНДС, "СНДС", "");
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Сумма       = 0;
		СуммаНДС    = 0;
		СуммаСНДС   = 0;
		НомерСтроки = 0;
		
		// Выводим строки таблицы Услуги
		
		Пока ВыборкаПоУслугам.Следующий() Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(ВыборкаПоУслугам);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтроки.Параметры.Товар = ВыборкаПоУслугам.УслугаНаименованиеПолное;
			
			Сумма    = Сумма    + ВыборкаПоУслугам.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаПоУслугам.СуммаНДС;
			СуммаСНДС = СуммаСНДС + ВыборкаПоУслугам.СуммаСНДС;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = ФормированиеПечатныхФорм.ФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;
		Если ЕстьНДС Тогда
			ОбластьМакета.Параметры.НДС = ?(ДанныеПечати.ЦенаВключаетНДС, НСтр("ru = 'В том числе НДС:';
																				|en = 'VAT inclusive:'"), НСтр("ru = 'Сумма НДС:';
																												|en = 'VAT amount:'"));
		Иначе
			ОбластьМакета.Параметры.НДС = НСтр("ru = 'Без налога (НДС)';
												|en = 'Without tax (VAT)'");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоСНДС");
		Если ЕстьНДС Тогда
			
			ОбластьМакета.Параметры.ВсегоСНДС = СуммаСНДС;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(ДанныеПечати.ЦенаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		
		ИтоговаяСтрока = НСтр("ru = 'Всего выполнено работ (оказано услуг) %КоличествоНаименований%, на сумму %СуммаДокумента%';
								|en = 'Total work performed (services rendered) %КоличествоНаименований%, to the amount of %СуммаДокумента%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, ДанныеПечати.Валюта));
		
		ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
		ОбластьМакета.Параметры.СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаКПрописи, ДанныеПечати.Валюта);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Не ДанныеПечати.ДополнительнаяИнформация="" Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");
			ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.ДополнительнаяИнформация;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СведенияОИсполнителе = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Организация,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.СчетОрганизации);
		СведенияОЗаказчике 	 = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(
			ДанныеПечати.Контрагент,
			ДанныеПечати.Дата,
			,
			ДанныеПечати.СчетКонтрагента);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.ПредставлениеИсполнителя = СведенияОИсполнителе.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ПредставлениеЗаказчика 	 = СведенияОЗаказчике.ОфициальноеНаименование;
		ОбластьМакета.Параметры.ЮрАдресИсполнителя 		 = СведенияОИсполнителе.ЮридическийАдрес;
		ОбластьМакета.Параметры.ЮрАдресЗаказчика 		 = СведенияОЗаказчике.ЮридическийАдрес;
		ОбластьМакета.Параметры.ИННИсполнителя			 = СведенияОИсполнителе.ИНН;
		ОбластьМакета.Параметры.ИННЗаказчика			 = СведенияОЗаказчике.ИНН;
		ОбластьМакета.Параметры.КППИсполнителя			 = СведенияОИсполнителе.КПП;
		ОбластьМакета.Параметры.КППЗаказчика			 = СведенияОЗаказчике.КПП;
		ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = СведенияОИсполнителе.НомерСчета;
		ОбластьМакета.Параметры.РасчетныйСчетЗаказчика	 = СведенияОЗаказчике.НомерСчета;
		ОбластьМакета.Параметры.КорСчетИсполнителя		 = СведенияОИсполнителе.КоррСчет;
		ОбластьМакета.Параметры.КорСчетЗаказчика		 = СведенияОЗаказчике.КоррСчет;
		ОбластьМакета.Параметры.БанкИсполнителя			 = СведенияОИсполнителе.Банк;
		ОбластьМакета.Параметры.БанкЗаказчика			 = СведенияОЗаказчике.Банк;
		ОбластьМакета.Параметры.БИКИсполнителя			 = СведенияОИсполнителе.БИК;
		ОбластьМакета.Параметры.БИКЗаказчика			 = СведенияОЗаказчике.БИК;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуОтчетОМатериалах(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Колонка = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	ВыводитьКоды = ЗначениеЗаполнено(Колонка);
	
	ИспользоватьУпаковкиНоменклатуры = Ложь;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОтчетДавальцу_ОтчетОМатериалах";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ОтчетДавальцу.ПФ_MXL_ОтчетОМатериалах");
	
	ОбластьЗаголовка  = Макет.ПолучитьОбласть("Заголовок");
	
	Если ВыводитьКоды Тогда
		ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьКодовШапка.Параметры.ИмяКолонкиКодов = Колонка;
		
		ОбластьКодовСтрока = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьКодовПодвал = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки + Макет.Область("КолонкаКодов").ШиринаКолонки;
	КонецЕсли;
	
	Если ИспользоватьУпаковкиНоменклатуры Тогда
		ОбластьУпаковокШапка  =  Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаУпаковок");
		ОбластьУпаковокСтрока =  Макет.ПолучитьОбласть("Строка|КолонкаУпаковок");
		ОбластьУпаковокПодвал =  Макет.ПолучитьОбласть("Подвал|КолонкаУпаковок");
	Иначе
		ОбластьТовары = Макет.Область("Товар");
		ОбластьТовары.ШиринаКолонки = ОбластьТовары.ШиринаКолонки 
									  + Макет.Область("КолонкаУпаковокКоличество").ШиринаКолонки
									  + Макет.Область("КолонкаУпаковокПредставление").ШиринаКолонки;
	КонецЕсли;
	
	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьДанныхШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьКонецСтрокиШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|КонецСтроки");
	
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьКонецСтрокиСтрока = Макет.ПолучитьОбласть("Строка|КонецСтроки");
	
	ОбластьНомераПодвал = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
	ОбластьДанныхПодвал = Макет.ПолучитьОбласть("Подвал|Товар");
	ОбластьКонецСтрокиПодвал = Макет.ПолучитьОбласть("Подвал|КонецСтроки");
	
	ОбластьПодписей = Макет.ПолучитьОбласть("Подписи");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетДавальцу.Ссылка КАК Ссылка,
	|	ОтчетДавальцу.Номер КАК Номер,
	|	ОтчетДавальцу.Дата КАК Дата,
	|	ОтчетДавальцу.Партнер КАК Партнер,
	|	ОтчетДавальцу.Контрагент КАК Контрагент,
	|	ОтчетДавальцу.Организация КАК Организация,
	|	ОтчетДавальцу.Организация.Префикс КАК Префикс
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ОтчетДавальцу
	|ГДЕ
	|	ОтчетДавальцу.Ссылка В (&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|/////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка                            КАК Ссылка,
	|	ВложенныйЗапрос.Номенклатура                      КАК Товар,
	|	ВложенныйЗапрос.Номенклатура.НаименованиеПолное   КАК ТоварНаименование,
	|	ВложенныйЗапрос.Номенклатура.Код                  КАК Код,
	|	ВложенныйЗапрос.Номенклатура.Артикул              КАК Артикул,
	|	ВложенныйЗапрос.Характеристика.НаименованиеПолное КАК Характеристика,
	|	СУММА(ВложенныйЗапрос.Количество)                 КАК Количество,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПартииНезавершенногоПроизводства.Регистратор  КАК Ссылка,
	|		ПартииНезавершенногоПроизводства.АналитикаУчетаНоменклатуры.Номенклатура       КАК Номенклатура,
	|		ПартииНезавершенногоПроизводства.АналитикаУчетаНоменклатуры.Характеристика     КАК Характеристика,
	|		ПартииНезавершенногоПроизводства.Количество   КАК Количество
	|	ИЗ
	|		РегистрНакопления.ПартииНезавершенногоПроизводства КАК ПартииНезавершенногоПроизводства
	|	ГДЕ
	|		ПартииНезавершенногоПроизводства.Регистратор В (&МассивДокументов)
	|		И ПартииНезавершенногоПроизводства.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.МатериалДавальца)) ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.Ссылка
	|
	|ИТОГИ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	
	МассивРезультатов 	= Запрос.ВыполнитьПакет();
	
	ДанныеПечати		= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам = МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		Если УниверсальныеМеханизмыПартийИСебестоимостиПовтИсп.ПартионныйУчетВерсии22(НачалоМесяца(ДанныеПечати.Дата)) Тогда
			
			ПараметрыУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПараметрыУчетнойПолитики(
				ДанныеПечати.Организация,
				ДанныеПечати.Дата);
			
			Если ПараметрыУчетнойПолитики.МетодОценкиСтоимостиТоваров = Перечисления.МетодыОценкиСтоимостиТоваров.ФИФОСкользящаяОценка Тогда
					
				МенеджерВТ = Новый МенеджерВременныхТаблиц;
				ПараметрыДереваСебестоимости = СтруктураСебестоимости.ПараметрыДереваСебестоимости();
				ПараметрыДереваСебестоимости.ДинамическоеСчитывание = Ложь;
				ПараметрыДереваСебестоимости.ТипРезультата = "МенеджерВременныхТаблиц";
				ПараметрыДереваСебестоимости.Результат = МенеджерВТ;
				
				ПараметрыУзлаДереваСебестоимости = СтруктураСебестоимости.ПараметрыУзлаДереваСебестоимости();
				ПараметрыУзлаДереваСебестоимости.Отборы.ДанныеПоСебестоимости = 3;
				ПараметрыУзлаДереваСебестоимости.Отборы.Регистраторы.Добавить(ДанныеПечати.Ссылка);
				
				СтруктураСебестоимости.ПостроитьДеревоСебестоимости(ПараметрыДереваСебестоимости, ПараметрыУзлаДереваСебестоимости);
				
				ЗапросЗатрат = Новый Запрос;
				ЗапросЗатрат.МенеджерВременныхТаблиц = МенеджерВТ;
				
				ЗапросЗатрат.Текст =
					"ВЫБРАТЬ
					|	Затраты.Номенклатура 				 КАК Товар,
					|	СпрНоменклатура.НаименованиеПолное   КАК ТоварНаименование,
					|	СпрНоменклатура.Код                  КАК Код,
					|	СпрНоменклатура.Артикул              КАК Артикул,
					|	ЕСТЬNULL(СпрХарактеристики.НаименованиеПолное, """") КАК Характеристика,
					|	ВЫРАЗИТЬ(СУММА(Затраты.Количество) КАК ЧИСЛО(31,2)) КАК Количество,
					|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Затраты.ЕдиницаИзмерения) КАК ПредставлениеБазовойЕдиницыИзмерения
					|ИЗ
					|	Результат КАК Затраты
					|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
					|	ПО Затраты.Номенклатура = СпрНоменклатура.Ссылка
					|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК СпрХарактеристики
					|	ПО Затраты.Характеристика = СпрХарактеристики.Ссылка
					|
					|ГДЕ
					|	(Затраты.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.ВидыСтрокДереваСебестоимости.ПартияЗатраты))
					|	И (ТИПЗНАЧЕНИЯ(Затраты.ПартияЗатрата) = ТИП(Документ.ПоступлениеСырьяОтДавальца))
					|
					|СГРУППИРОВАТЬ ПО
					|	Затраты.Номенклатура,
					|	СпрНоменклатура.НаименованиеПолное,
					|	СпрНоменклатура.Код,
					|	СпрНоменклатура.Артикул,
					|	ЕСТЬNULL(СпрХарактеристики.НаименованиеПолное, """"),
					|	ПРЕДСТАВЛЕНИЕССЫЛКИ(Затраты.ЕдиницаИзмерения)
					|";
				
				ВыборкаПоТоварам = ЗапросЗатрат.Выполнить().Выбрать();
				ЕстьМатериалыДавальца = ВыборкаПоТоварам.Количество() > 0;
				
			Иначе
				
				ЗапросЗатрат = Новый Запрос;
				ЗапросЗатрат.УстановитьПараметр("Регистратор", ДанныеПечати.Ссылка);
				
				ЗапросЗатрат.Текст =
				"ВЫБРАТЬ
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Товар,
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.НаименованиеПолное, """") КАК ТоварНаименование,
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.Код, """") КАК Код,
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.Артикул, """") КАК Артикул,
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Характеристика.НаименованиеПолное, """") КАК Характеристика,
				|	СУММА(ЕСТЬNULL(ЗатратыНаПродукцию.Количество, 0)) КАК Количество,
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование, """") КАК ПредставлениеБазовойЕдиницыИзмерения
				|ИЗ
				|	РегистрНакопления.СебестоимостьТоваров КАК ДвиженияОтчетаДавальца
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
				|		ПО ДвиженияОтчетаДавальца.АналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
				|			И ДвиженияОтчетаДавальца.РазделУчета = СебестоимостьТоваров.РазделУчета
				|			И ДвиженияОтчетаДавальца.ВидЗапасов = СебестоимостьТоваров.ВидЗапасов
				|			И ДвиженияОтчетаДавальца.Организация = СебестоимостьТоваров.Организация
				|			И ДвиженияОтчетаДавальца.Партия = СебестоимостьТоваров.Партия
				|			И ДвиженияОтчетаДавальца.АналитикаУчетаПартий = СебестоимостьТоваров.АналитикаУчетаПартий
				|			И ДвиженияОтчетаДавальца.АналитикаФинансовогоУчета = СебестоимостьТоваров.АналитикаФинансовогоУчета
				|			И ДвиженияОтчетаДавальца.ВидДеятельностиНДС = СебестоимостьТоваров.ВидДеятельностиНДС
				|			И (СебестоимостьТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
				|			И (НЕ СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры = ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка))
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров КАК ЗатратыНаПродукцию
				|		ПО (СебестоимостьТоваров.КорАналитикаУчетаНоменклатуры = ЗатратыНаПродукцию.КорАналитикаУчетаНоменклатуры)
				|			И (СебестоимостьТоваров.КорВидЗапасов = ЗатратыНаПродукцию.КорВидЗапасов)
				|			И (ЗатратыНаПродукцию.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
				|ГДЕ
				|	ДвиженияОтчетаДавальца.Регистратор = &Регистратор
				|	И НЕ ДвиженияОтчетаДавальца.Количество = 0
				|	И НЕ СебестоимостьТоваров.Количество = 0
				|	И ЗатратыНаПродукцию.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.МатериалыПринятыеВПереработку)
				|
				|СГРУППИРОВАТЬ ПО
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.Код, """"),
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Характеристика.НаименованиеПолное, """"),
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.НаименованиеПолное, """"),
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.ЕдиницаИзмерения.Наименование, """"),
				|	ЕСТЬNULL(ЗатратыНаПродукцию.АналитикаУчетаНоменклатуры.Номенклатура.Артикул, """")
				|
				|ИМЕЮЩИЕ
				|	НЕ СУММА(ЕСТЬNULL(ЗатратыНаПродукцию.Количество, 0)) = 0";
				
				ВыборкаПоТоварам = ЗапросЗатрат.Выполнить().Выбрать();
				ЕстьМатериалыДавальца = ВыборкаПоТоварам.Количество() > 0;
				
			КонецЕсли;
						
		Иначе
			
			// Найдем в выборке товары по текущему документу
			СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
			ЕстьМатериалыДавальца = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
			
			Если ЕстьМатериалыДавальца Тогда
				
				ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
				ВыборкаПоТоварам.Сбросить();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ЕстьМатериалыДавальца Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1: при производстве продукции не использовались материалы давальца, либо не рассчитана себестоимость. Печать отчета не требуется';
					|en = 'Document %1: materials of the material provider were not used during production or cost was not calculated.  It is not necessary to print a report.'"),
				ДанныеПечати.Ссылка);
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
				
			Продолжить;
			
		КонецЕсли;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеПечати, НСтр("ru = 'Отчет об израсходованных материалах';
																											|en = 'Report on consumed materials'"));
		
		ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		ОбластьМакета.Параметры.ИсполнительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Организация, ДанныеПечати.Дата), 
				"ПолноеНаименование");
		ОбластьМакета.Параметры.ЗаказчикПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
				ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Контрагент, ДанныеПечати.Дата), 
				"ПолноеНаименование");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТабличныйДокумент.Вывести(ОбластьНомераШапка);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхШапка);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ТабличныйДокумент.Присоединить(ОбластьУпаковокШапка);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиШапка);
		
		НомерСтроки = 1;
		
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ОбластьНомераСтрока.Параметры.НомерСтроки = НомерСтроки;
			ТабличныйДокумент.Вывести(ОбластьНомераСтрока);
			
			Если ВыводитьКоды Тогда
				ОбластьКодовСтрока.Параметры.Артикул = ВыборкаПоТоварам[Колонка];
				ТабличныйДокумент.Присоединить(ОбластьКодовСтрока);
			КонецЕсли;
			
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
			ОбластьДанныхСтрока.Параметры.Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СокрЛП(ВыборкаПоТоварам.ТоварНаименование),
				СокрЛП(ВыборкаПоТоварам.Характеристика),);
			
			ТабличныйДокумент.Присоединить(ОбластьДанныхСтрока);
			
			Если ИспользоватьУпаковкиНоменклатуры Тогда
				ОбластьУпаковокСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьУпаковокСтрока);
			КонецЕсли;
			
			ОбластьКонецСтрокиСтрока.Параметры.Заполнить(ВыборкаПоТоварам);
			ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиСтрока);
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьНомераПодвал);
		
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодовПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьДанныхПодвал);
		
		Если ИспользоватьУпаковкиНоменклатуры Тогда
			ТабличныйДокумент.Присоединить(ОбластьУпаковокПодвал);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьКонецСтрокиПодвал);
		
		// Вывести подписи.
		ТабличныйДокумент.Вывести(ОбластьПодписей);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьКомплектПечатныхФорм(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати) Экспорт
	
	Перем АдресКомплектаПечатныхФорм;
	
	Если ТипЗнч(ПараметрыПечати) = Тип("Структура") И ПараметрыПечати.Свойство("АдресКомплектаПечатныхФорм", АдресКомплектаПечатныхФорм) Тогда
		
		КомплектПечатныхФорм = ПолучитьИзВременногоХранилища(АдресКомплектаПечатныхФорм);
		
	Иначе
		
		КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.КомплектПечатныхФорм(
			Метаданные.Документы.ОтчетДавальцу.ПолноеИмя(),
			МассивОбъектов, Неопределено);
		
	КонецЕсли;
		
	Если КомплектПечатныхФорм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	

	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"АктВыполненныхРабот");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуАктОбОказанииУслуг(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"ОтчетОМатериалах");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			СформироватьПечатнуюФормуОтчетОМатериалах(КомплектПечати.Объекты, ОбъектыПечати));
	КонецЦикла;
	
	КомплектыПечатиПоОбъектам = РегистрыСведений.НастройкиПечатиОбъектов.КомплектыПечатиПоОбъектам(КоллекцияПечатныхФорм,
		КомплектПечатныхФорм,
		МассивОбъектов,
		"СчетНаОплату");
	Для Каждого КомплектПечати Из КомплектыПечатиПоОбъектам Цикл
		СтруктураТипов = Новый Соответствие;
		СтруктураТипов.Вставить("Документ.ОтчетДавальцу", КомплектПечати.Объекты);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			КомплектПечати.Имя,
			КомплектПечати.Представление,
			Обработки.ПечатьСчетовНаОплату.СформироватьПечатнуюФормуСчетНаОплату(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	КонецЦикла;
	
	ОтчетДавальцуЛокализация.СформироватьКомплектПечатныхФорм(МассивОбъектов, 
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		КомплектПечатныхФорм);
		
	РегистрыСведений.НастройкиПечатиОбъектов.СформироватьКомплектВнешнихПечатныхФорм(
		"Документ.ОтчетДавальцу",
		МассивОбъектов,
		ПараметрыПечати,
		КоллекцияПечатныхФорм,
		ОбъектыПечати);
	
КонецФункции

Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "АктВыполненныхРабот",  НСтр("ru = 'Акт выполненных работ';
																																|en = 'Acceptance note'"), 1);

	РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "ОтчетОМатериалах", НСтр("ru = 'Отчет о материалах';
																															|en = 'Report on materials'"), 1);
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		РегистрыСведений.НастройкиПечатиОбъектов.ДобавитьПечатнуюФормуВКомплект(КомплектПечатныхФорм, "СчетНаОплату", НСтр("ru = 'Счет на оплату';
																															|en = 'Proforma invoice'"), 1);
	КонецЕсли;
	
	ОтчетДавальцуЛокализация.КомплектПечатныхФорм(КомплектПечатныхФорм);
		
	Возврат КомплектПечатныхФорм;
	
КонецФункции

#Конецобласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Описание параметров процедуры см. в ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПриемаКОформлению";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетДавальцу))
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказДавальца)
		И (ПравоДоступа("Добавление", Метаданные.Документы.ОтчетДавальцу)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ОтчетДавальцу))
		И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(НакладныеСервер.ТекстЗапросаСостояний("СостоянияОтчетовДавальцам", НакладныеСервер.ПараметрыОтбораРаспоряжений(), Неопределено)
		+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете() +
		"ВЫБРАТЬ
		|	ОстаткиСостояния.Распоряжение КАК Ссылка
		|ИЗ
		|	ВтСостоянияОтчетовДавальцам КАК ОстаткиСостояния");
	
	ОтчетыДавальцамКОформлению = Запрос.Выполнить().Выбрать().Количество();
	
	// Заполнение дел.
	// ПереработкаДавальческогоСырья
	ДелоРодитель = ТекущиеДела.Найти("ПереработкаДавальческогоСырья", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПереработкаДавальческогоСырья";
		ДелоРодитель.Представление  = НСтр("ru = 'Переработка давальческого сырья';
											|en = 'Processing of provided materials'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Продажи;
	КонецЕсли;
	ДелоРодитель.ЕстьДела = ДелоРодитель.ЕстьДела Или ОтчетыДавальцамКОформлению > 0;
	
	// ОтчетыДавальцамКОформлению
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаОтчеты");
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", Новый Структура);
	ПараметрыФормы.Вставить("КлючНазначенияФормы", "ТекущиеДела");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ОтчетыДавальцамКОформлению";
	Дело.ЕстьДела       = ОтчетыДавальцамКОформлению > 0;
	Дело.Представление  = НСтр("ru = 'Отчеты давальцам к оформлению';
								|en = 'Reports to material providers for registration'");
	Дело.Количество     = ОтчетыДавальцамКОформлению;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ПереработкаДавальческогоСырья";
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует текст запроса, получающий график оплаты по документу
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса.
//
Функция ТекстЗапросаТаблицаРасчетыСКлиентамиСостояниеДокументов()

	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументНакладная.Ссылка КАК Документ,
	|	ДокументНакладная.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументНакладная.ВариантОплаты)  КАК ВариантОплаты,
	|	ДокументНакладная.ДатаПлатежа КАК ДатаПлатежа,
	|	ДокументНакладная.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетДавальцу.ЭтапыГрафикаОплаты КАК ДокументНакладная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументНакладная.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументЭтапыГрафикаОплаты.Ссылка КАК Документ,
	|	ДокументЭтапыГрафикаОплаты.НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ДокументЭтапыГрафикаОплаты.ВариантОплаты) КАК ВариантОплаты,
	|	ДокументЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ДокументЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ДокументЭтапыГрафикаОплаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (ОбъектыРасчетов.ОбъектРасчетов = ДокументЭтапыГрафикаОплаты.Ссылка)
	|		И ОбъектыРасчетов.ТребуетсяГрафик";
	
КонецФункции 

// Осуществляет инициализацию структуры состояния расчетов
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаПросроченнойОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ДанныеОтбора     - Структура - поля, по которым будут отобраны остатки заказов
//	Дата             - Дата      - дата, на которую будут отобраны остатки заказов
//	МассивЗаказов    - Массив    - заказы, по которым будут отобраны остатки
//	ПодборПоОстаткам - Булево    - рассчитывать количество к оформлению по остаткам к оформлению
//	                               или по заказанному количеству.
//
// Вовращаемое значение:
//	Результат запроса - результат запроса по неотгруженной части заказов\заявок.
//
Функция ПолучитьРезультатЗапросаПоОстаткамУслугДавальцуКОформлению(ДанныеОтбора,
	                                              Дата,
	                                              МассивЗаказов = Неопределено,
	                                              ПодборПоОстаткам = Истина)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивЗаказов",         МассивЗаказов);
	Запрос.УстановитьПараметр("Партнер",               ДанныеОтбора.Партнер);
	Запрос.УстановитьПараметр("Контрагент",            ДанныеОтбора.Контрагент);
	Запрос.УстановитьПараметр("Договор",               ДанныеОтбора.Договор);
	Запрос.УстановитьПараметр("Организация",           ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов",  ДанныеОтбора.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("НалогообложениеНДС",    ДанныеОтбора.НалогообложениеНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",       ДанныеОтбора.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ПорядокРасчетов",       ДанныеОтбора.ПорядокРасчетов);
	Запрос.УстановитьПараметр("Регистратор",           ДанныеОтбора.Ссылка);
	Запрос.УстановитьПараметр("ОтобратьПоЗаказу",      МассивЗаказов <> Неопределено);
	Запрос.УстановитьПараметр("ПодборПоОстаткам",      ПодборПоОстаткам);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ДанныеОтбора.НаправлениеДеятельности);
	
	Если Дата <> Неопределено Тогда
		Запрос.УстановитьПараметр("Период", КонецДня(Дата));
		Запрос.УстановитьПараметр("ГраницаПериод", Новый Граница(КонецДня(Дата), ВидГраницы.Включая));
	Иначе
		Запрос.УстановитьПараметр("Период", '00010101');
		Запрос.УстановитьПараметр("ГраницаПериод", Неопределено);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыДавальца.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтЗаказыДавальцаДляОтбора
	|ИЗ
	|	Документ.ЗаказДавальца КАК ЗаказыДавальца
	|ГДЕ
	|	ВЫБОР КОГДА &ОтобратьПоЗаказу
	|			ТОГДА ЗаказыДавальца.Ссылка В (&МассивЗаказов)
	|		ИНАЧЕ ЗаказыДавальца.Партнер = &Партнер
	|			И ЗаказыДавальца.Контрагент = &Контрагент
	|			И ЗаказыДавальца.Договор = &Договор
	|			И ЗаказыДавальца.Организация = &Организация
	|			И ЗаказыДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|			И ЗаказыДавальца.Валюта = &ВалютаВзаиморасчетов
	|			И ЗаказыДавальца.НалогообложениеНДС = &НалогообложениеНДС
	|			И ЗаказыДавальца.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|			И ЗаказыДавальца.ПорядокРасчетов = &ПорядокРасчетов
	|			И ЗаказыДавальца.НаправлениеДеятельности = &НаправлениеДеятельности
	|		КОНЕЦ
	|;
	|/////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	ТаблицаЗаказы.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	СУММА(ТаблицаЗаказы.Заказано * ТаблицаЗаказы.Коэффициент) КАК Заказано,
	|	СУММА(ТаблицаЗаказы.Количество * ТаблицаЗаказы.Коэффициент) КАК Количество,
	|	СУММА(ТаблицаЗаказы.Сумма * ТаблицаЗаказы.Коэффициент) КАК Сумма
	|ПОМЕСТИТЬ ТаблицаОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		УслугиОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|		УслугиОстатки.Номенклатура КАК Номенклатура,
	|		УслугиОстатки.Характеристика КАК Характеристика,
	|		УслугиОстатки.СуммаОстаток КАК Сумма,
	|		УслугиОстатки.ЗаказаноОстаток КАК Заказано,
	|		1 КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА &ПодборПоОстаткам
	|				ТОГДА УслугиОстатки.КОформлениюОстаток
	|			ИНАЧЕ УслугиОстатки.ЗаказаноОстаток
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.УслугиДавальцуКОформлению.Остатки(
	|				&ГраницаПериод,
	|					ЗаказДавальца В(
	|						ВЫБРАТЬ
	|							ТаблицаДляОтбора.Ссылка
	|						ИЗ
	|							ВтЗаказыДавальцаДляОтбора КАК ТаблицаДляОтбора)) КАК УслугиОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказыДвижения.ЗаказДавальца,
	|		ЗаказыДвижения.Номенклатура,
	|		ЗаказыДвижения.Характеристика,
	|		ЗаказыДвижения.Сумма,
	|		ЗаказыДвижения.Заказано КАК Заказано,
	|		ВЫБОР
	|			КОГДА ЗаказыДвижения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ПодборПоОстаткам
	|				ТОГДА ЗаказыДвижения.КОформлению
	|			ИНАЧЕ ЗаказыДвижения.Заказано
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.УслугиДавальцуКОформлению КАК ЗаказыДвижения
	|	ГДЕ
	|		ЗаказыДвижения.Регистратор = &Регистратор
	|		И ВЫБОР
	|				КОГДА &ОтобратьПоЗаказу
	|					ТОГДА ЗаказыДвижения.ЗаказДавальца В (&МассивЗаказов)
	|				ИНАЧЕ ЗаказыДвижения.ЗаказДавальца.Партнер = &Партнер
	|						И ЗаказыДвижения.ЗаказДавальца.Контрагент = &Контрагент
	|						И ЗаказыДвижения.ЗаказДавальца.Договор = &Договор
	|						И ЗаказыДвижения.ЗаказДавальца.Организация = &Организация
	|						И ЗаказыДвижения.ЗаказДавальца.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|						И ЗаказыДвижения.ЗаказДавальца.Валюта = &ВалютаВзаиморасчетов
	|						И ЗаказыДвижения.ЗаказДавальца.НалогообложениеНДС = &НалогообложениеНДС
	|						И ЗаказыДвижения.ЗаказДавальца.ЦенаВключаетНДС = &ЦенаВключаетНДС
	|						И ЗаказыДвижения.ЗаказДавальца.НаправлениеДеятельности = &НаправлениеДеятельности
	|			КОНЕЦ
	|		И ВЫБОР
	|				КОГДА &Период <> ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ЗаказыДвижения.Период <= &Период
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		И ЗаказыДвижения.Активность) КАК ТаблицаЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаЗаказы.ЗаказДавальца,
	|	ТаблицаЗаказы.Номенклатура,
	|	ТаблицаЗаказы.Характеристика
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаЗаказы.Количество * ТаблицаЗаказы.Коэффициент) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗаказДавальца,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВтНоменклатураЗаказов
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказДавальцаПродукция.Номенклатура КАК Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Упаковка) КАК Упаковка,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.ДатаОтгрузки) КАК ДатаОтгрузки,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Цена + ЗаказДавальцаПродукция.ЦенаСобственныхМатериалов) КАК Цена,
	|	МАКСИМУМ(ЗаказДавальцаПродукция.Ссылка.СтавкаНДС) КАК СтавкаНДС,
	|	ЗаказДавальцаПродукция.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказ
	|ИЗ
	|	ВтНоменклатураЗаказов КАК НоменклатураЗаказов
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Продукция КАК ЗаказДавальцаПродукция
	|		ПО ЗаказДавальцаПродукция.Ссылка         = НоменклатураЗаказов.ЗаказДавальца
	|		 И ЗаказДавальцаПродукция.Номенклатура   = НоменклатураЗаказов.Номенклатура
	|		 И ЗаказДавальцаПродукция.Характеристика = НоменклатураЗаказов.Характеристика
	|ГДЕ
	|	НЕ ЗаказДавальцаПродукция.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказДавальцаПродукция.Номенклатура,
	|	ЗаказДавальцаПродукция.Характеристика,
	|	ЗаказДавальцаПродукция.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Номенклатура,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатки.ЗаказДавальца КАК ЗаказДавальца,
	|	ТаблицаОстатки.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатки.Характеристика КАК Характеристика,
	|	ТаблицаОстатки.Количество КАК Количество,
	|	ТаблицаОстатки.Сумма КАК СуммаВзаиморасчетов,
	|	ТаблицаОстатки.Заказано КАК Заказано,
	|	ЕСТЬNULL(ВТЗаказ.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОтгрузки,
	|	ТаблицаОстатки.Количество КАК КоличествоВЗаказе,
	|	ВТЗаказ.Упаковка КАК Упаковка,
	|	ВТЗаказ.Цена КАК Цена,
	|	ТаблицаОстатки.ЗаказДавальца.СтавкаНДС КАК СтавкаНДС,
	|	ВТЗаказ.Цена * ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК Сумма,
	|	ТаблицаОстатки.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаОстатки.Количество / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТЗаказ.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	ТаблицаОстатки КАК ТаблицаОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаказ КАК ВТЗаказ
	|		ПО ТаблицаОстатки.ЗаказДавальца = ВТЗаказ.Ссылка
	|			И ТаблицаОстатки.Номенклатура = ВТЗаказ.Номенклатура
	|			И ТаблицаОстатки.Характеристика = ВТЗаказ.Характеристика";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ВТЗаказ.Упаковка",
			"ВТЗаказ.Номенклатура"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область ФормированиеГиперссылкиВЖурналеДокументовПереработки

Функция ЕстьДокументыКОформлению(Параметры)
	
	ПараметрыОтбора = НакладныеСервер.ПараметрыОтбораРаспоряжений(Параметры.Организация,,,, Параметры.Менеджер);
	
	Запрос = Новый Запрос(НакладныеСервер.ТекстЗапросаСостояний("СостоянияОтчетовДавальцам", ПараметрыОтбора, Неопределено, Истина)
		+ ОбщегоНазначенияУТ.РазделительЗапросовВПакете() +
		"ВЫБРАТЬ
		|	КОформлению
		|ИЗ
		|	ВтСостоянияОтчетовДавальцам");
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		СписокОрганизаций = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Параметры.Организация);
		СписокОрганизаций.Добавить(Параметры.Организация);
	Иначе
		СписокОрганизаций = Новый Массив;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", СписокОрганизаций);
	Запрос.УстановитьПараметр("Менеджер", Параметры.Менеджер);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает текст гиперссылки перехода из журнала документов в рабочее место оформления.
//
// Параметры:
//	Параметры - Структура - параметры формирования текста гиперссылки.
//
// ВозвращаемоеЗначение:
//	ФорматированнаяСтрока - текст гиперссылки перехода в рабочее место оформления передач.
//
Функция СформироватьГиперссылкуКОформлению(Параметры) Экспорт
	
	ЕстьПраваНаЧтение = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению);
	
	Если Не ЕстьПраваНаЧтение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Отчеты';
							|en = 'Reports'");
	ТекстСсылки = "Обработка.ЖурналДокументовПереработки.Форма.СписокДокументыПриемаКОформлению/СтраницаОтчеты";
	
	Если ЕстьДокументыКОформлению(Параметры) Тогда
		Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки,,,, ТекстСсылки);
	Иначе
		Гиперссылка = Новый ФорматированнаяСтрока(ТекстГиперссылки,, ЦветаСтиля.НезаполненноеПолеТаблицы,, ТекстСсылки);
	КонецЕсли;
	
	Возврат Гиперссылка;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#КонецОбласти

#КонецЕсли

#КонецЕсли
