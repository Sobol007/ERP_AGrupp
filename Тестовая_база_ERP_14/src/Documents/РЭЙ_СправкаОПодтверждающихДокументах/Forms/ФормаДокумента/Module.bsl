#Область ОбработчикиСобытий_Форма

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ЗаполнитьВспомогательныеСпискиЗначений();
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Объект.Дата = Дата(1,1,1) Тогда
			Объект.Дата = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.Основание) Тогда
			ЗаполнитьДокументНаОсновании(Параметры.Основание, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Если Объект.Корректировка Тогда
				Объект.НомерКорректировки = 0;
				ЗаполнитьНомерКорректировки();
			КонецЕсли;
		Иначе
			ЗаполнитьДокументПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация
	Организация_СтароеЗначение = Объект.Организация;
	Контрагент_СтароеЗначение = Объект.Контрагент;
	КонтрактВЭД_СтароеЗначение = Объект.КонтрактВЭД;
	Банк_СтароеЗначение = Объект.Банк;
	ОснованиеПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(Объект.Основание);
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
	
	// Отображение
	УстановитьОтображение_ДопСоглашение();
	УстановитьОтображение_КорректировочнаяСправка();
	УстановитьОтображение_НомерКорректировки();
	УстановитьОтображение_Основание();
	УстановитьОтображение_Страницы();
	УстановитьОтображение_ТолькоПоГТД();
		
	// Оформление 
	ДобавитьУсловноеОформление_Авансы();
	ДобавитьУсловноеОформление_КорректировочныеСправки();
	ДобавитьУсловноеОформление_ПодтверждающиеДокументы();
	ДобавитьУсловноеОформление_ПодтверждающиеДокументыРучные();
	
	УстановитьПараметрыВыбора_Банк();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не ЗначениеЗаполнено(Параметры.Ключ) И ЗначениеЗаполнено(Объект.Основание) Тогда
		Если РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(Объект.Основание, "Корректировка") Тогда
			РЭЙ_СлужебныйКлиент.ПредупреждениеСправкаОснованиеЯвляетсяКорректировочной();
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.Первичное Тогда
		ЗаполнитьНомераСтрокДляПечати();
		
		ПустойКлючСвязи = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		Для Каждого СтрокаТЧ Из Объект.ПодтверждающиеДокументы Цикл
			Если СтрокаТЧ.КлючСвязи = ПустойКлючСвязи Тогда
				СтрокаТЧ.КлючСвязи = Новый УникальныйИдентификатор;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УдалитьСтрокиАвансовБезСвязей();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
	Оповестить("РЭЙ_ОбновитьФормуЗадач");
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.Корректировка И Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", "Основание");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "ОснованиеПредставление", Отказ);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_Шапка

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьПериодЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Или Объект.ПодтверждающиеДокументыРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ОрганизацияПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументы.Очистить();
		Объект.ПодтверждающиеДокументыРучные.Очистить();
		ОрганизацияПриИзмененииНаСервере();
	Иначе
		Объект.Организация = Организация_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииНаСервере()
	Организация_СтароеЗначение = Объект.Организация;
	
	УстановитьРуководителей();
	
	Объект.КонтрактВЭД = Неопределено;
	КонтрактВЭДПриИзмененииНаСервере();
	
	Объект.Банк = Неопределено;	
	Банк_СтароеЗначение = Объект.Банк;
		
	УстановитьПараметрыВыбора_Банк();
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Или Объект.ПодтверждающиеДокументыРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("БанкПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		БанкПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БанкПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументы.Очистить();
		Объект.ПодтверждающиеДокументыРучные.Очистить();
		БанкПриИзмененииНаСервере();
	Иначе
		Объект.Банк = Банк_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзмененииНаСервере()
	Банк_СтароеЗначение = Объект.Банк;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Или Объект.ПодтверждающиеДокументыРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("КонтрагентПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		КонтрагентПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументы.Очистить();
		Объект.ПодтверждающиеДокументыРучные.Очистить();
		КонтрагентПриИзмененииНаСервере();
	Иначе
		Объект.Контрагент = Контрагент_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	Контрагент_СтароеЗначение = Объект.Контрагент;
	
	Если Объект.Контрагент <> Объект.КонтрактВЭД.Контрагент Тогда
		Объект.КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоКонтрагенту(Объект.Организация, Объект.Контрагент);
		КонтрактВЭДПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрактВЭДПриИзменении(Элемент)	
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Или Объект.ПодтверждающиеДокументыРучные.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("КонтрактВЭДПодтверждениеИзменения", ЭтотОбъект));
	Иначе
		КонтрактВЭДПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрактВЭДПодтверждениеИзменения(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументы.Очистить();
		Объект.ПодтверждающиеДокументыРучные.Очистить();
		КонтрактВЭДПриИзмененииНаСервере();
	Иначе
		Объект.КонтрактВЭД = КонтрактВЭД_СтароеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрактВЭДПриИзмененииНаСервере()
	КонтрактВЭД_СтароеЗначение = Объект.КонтрактВЭД;
	
	Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
		Если Объект.КонтрактВЭД.Контрагент <> Объект.Контрагент Тогда
			Объект.Контрагент = Объект.КонтрактВЭД.Контрагент;
			Контрагент_СтароеЗначение = Объект.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Объект.КонтрактВЭД.КонтрактТоварный И Объект.ТолькоПоГТД Тогда
		ТолькоПоГТД = Ложь;
	КонецЕсли;
	
	ЗаполнитьФлагиЭкспортИмпорт();
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		БанковскийСчетПоКонтрактуВЭД = РЭЙ_СлужебныйСервер.ПолучитьБанковскийСчетПоКонтрактуВЭД(Объект.КонтрактВЭД);
		Если ЗначениеЗаполнено(БанковскийСчетПоКонтрактуВЭД) Тогда
			Объект.Банк = БанковскийСчетПоКонтрактуВЭД.Банк;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтображение_ДопСоглашение();
	УстановитьОтображение_ТолькоПоГТД();
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Отбор = Новый Структура;
	
	Отбор.Вставить("Первичное", Истина);
	
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	ПараметрыОткрытия.Вставить("Ключ", Объект.Основание); 
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Документ.РЭЙ_СправкаОПодтверждающихДокументах.ФормаВыбора", ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Основание) Тогда
		ПоказатьЗначение(, Объект.Основание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОчистка(Элемент, СтандартнаяОбработка)
	Объект.Основание = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОснованиеОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОснованиеОбработкаВыбораНаСервере(ВыбранноеЗначение)
	ЗаполнитьДокументНаОсновании(ВыбранноеЗначение);
	
	ОснованиеПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(Объект.Основание);
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
	Модифицированность = Истина;
КонецПроцедуры	

&НаКлиенте
Процедура ПервичноеПриИзменении(Элемент)
	Объект.Корректировка = Не Объект.Первичное;
	ПервичноеКорректировкаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура КорректировкаПриИзменении(Элемент)
	Объект.Первичное = Не Объект.Корректировка;
	ПервичноеКорректировкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПервичноеКорректировкаПриИзмененииНаСервере()
	Если Не Объект.Корректировка И ЗначениеЗаполнено(Объект.Основание) Тогда
		Объект.Основание = Неопределено;
		ОснованиеПредставление = "";
	КонецЕсли;
	
	ЗаполнитьНомерКорректировки();
	
	УстановитьОтображение_КорректировочнаяСправка();
	УстановитьОтображение_Основание();
	УстановитьОтображение_НомерКорректировки();
КонецПроцедуры

&НаКлиенте
Процедура РучноеЗаполнениеПриИзменении(Элемент)
	Если Объект.РучноеЗаполнение И Объект.ПодтверждающиеДокументы.Количество() > 0 Тогда
		ТекстВопроса = 
		"Переход в режим ручного заполнения приведёт к потере данных на вкладке ""Документы"".
		|Вы уверены, что хотите продолжить?";
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("РучноеЗаполнениеПриИзмененииПодтверждающиеДокументыПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет); 
		
	ИначеЕсли Объект.РучноеЗаполнение = Ложь И Объект.ПодтверждающиеДокументыРучные.Количество() > 0 Тогда
		ТекстВопроса = 
		"Таблица ручных валютных операций не пуста и будет очищена!
		|Вы уверены, что хотите продолжить?";
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("РучноеЗаполнениеПриИзмененииПодтверждающиеДокументыРучныеПродолжение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе  
		УстановитьОтображение_Страницы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РучноеЗаполнениеПриИзмененииПодтверждающиеДокументыПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументы.Очистить();
		УстановитьОтображение_Страницы();
	Иначе
		Объект.РучноеЗаполнение = Ложь;
	КонецЕсли;
КонецПроцедуры	

&НаКлиенте
Процедура РучноеЗаполнениеПриИзмененииПодтверждающиеДокументыРучныеПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ПодтверждающиеДокументыРучные.Очистить();
		УстановитьОтображение_Страницы();
	Иначе
		Объект.РучноеЗаполнение = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйВКПриИзменении(Элемент)
	УстановитьТелефонУполномоченногоВК();
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если Объект.УполномоченныйВК.Пустая() Тогда
		Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
		УстановитьТелефонУполномоченногоВК();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд_Форма

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ПараметрыОткрытия = Новый Структура("НачалоПериода,КонецПериода", Объект.ДатаНач, Объект.ДатаКон);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериод_Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыОткрытия, Элементы.ВыбратьПериод,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод_Завершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНач = РезультатВыбора.НачалоПериода;
	Объект.ДатаКон = РезультатВыбора.КонецПериода;
КонецПроцедуры		

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументы(Команда)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено заполнять корректировочную справку.");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
		ПоказатьПредупреждение(, "Не выбран контракт ВЭД!");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДатаНач) Или Не ЗначениеЗаполнено(Объект.ДатаКон) Тогда
		ПоказатьПредупреждение(, "Не указан период для заполнения!");
		Возврат;
	ИначеЕсли Объект.ДатаНач > Объект.ДатаКон Тогда
		ПоказатьПредупреждение(, "Период заполнения указан ошибочно!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Тогда
		ПоказатьВопросОбОчисткеТабличнойЧасти(Новый ОписаниеОповещения("ЗаполнитьПодтверждающиеДокументы_Продолжение", ЭтотОбъект));
	Иначе
		ЗаполнитьПодтверждающиеДокументыНаСервере();	
	КонецЕсли;
	
	Если Объект.ПодтверждающиеДокументы.Количество() > 0 Тогда
		Если Элементы.ПодтверждающиеДокументы.ТекущаяСтрока = Неопределено Тогда
			Элементы.ПодтверждающиеДокументы.ТекущаяСтрока = Объект.ПодтверждающиеДокументы[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодтверждающиеДокументы_Продолжение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПодтверждающиеДокументыНаСервере();
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьПодтверждающиеДокументыНаСервере()
	Объект.ПодтверждающиеДокументы.Очистить();
	Объект.Авансы.Очистить();
	
	Если Не Объект.ТолькоПоГТД Тогда
		МассивВидовДокументов = Новый Массив;
		МассивВидовДокументов.Добавить("ВозвратТоваровОтКлиента");
		МассивВидовДокументов.Добавить("ВозвратТоваровОтПокупателя");
		МассивВидовДокументов.Добавить("ВозвратТоваровПоставщику");
		МассивВидовДокументов.Добавить("ОтчетКомиссионераОПродажах");
		МассивВидовДокументов.Добавить("ОтчетКомитентуОПродажах");
		МассивВидовДокументов.Добавить("ПоступлениеДопРасходов");
		МассивВидовДокументов.Добавить("ПоступлениеТоваровУслуг");
		МассивВидовДокументов.Добавить("ПриобретениеТоваровУслуг");
		МассивВидовДокументов.Добавить("ПриобретениеУслугПрочихАктивов");
		МассивВидовДокументов.Добавить("РеализацияТоваровУслуг");
		МассивВидовДокументов.Добавить("РеализацияУслугПрочихАктивов");
		
		ТекстЗапроса = "";
		ЭтоПерваяСтрока = Истина;
		
		Для Каждого текВидДокумента Из МассивВидовДокументов Цикл
			Если Метаданные.Документы.Найти(текВидДокумента) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭтоПерваяСтрока Тогда
				ТекстЗапроса = ТекстЗапроса + 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ";
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|	ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ РАЗЛИЧНЫЕ";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаДокументов.Ссылка КАК Ссылка
			|" + ?(ЭтоПерваяСтрока, "ПОМЕСТИТЬ ПодтверждающиеДокументы", "") + "
			|	ИЗ
			|		Документ." + текВидДокумента + " КАК ТаблицаДокументов
			|	ГДЕ
			|		ТаблицаДокументов.Проведен
			|		И ТаблицаДокументов.Дата <= &ДатаКон
			|		И ТаблицаДокументов.Дата >= &ДатаНач
			|		И ТаблицаДокументов.Договор В(&ДоговорКонтрагента)
			|";
		
			ЭтоПерваяСтрока = Ложь;
		КонецЦикла;
	Иначе 
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ГТДИмпортТовары.Ссылка
		|ПОМЕСТИТЬ ПодтверждающиеДокументы
		|ИЗ
		|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|ГДЕ
		|	ГТДИмпортТовары.Ссылка.Проведен
		|	И ГТДИмпортТовары.Ссылка.Дата <= &ДатаКон
		|	И ГТДИмпортТовары.Ссылка.Дата >= &ДатаНач
		|	И ГТДИмпортТовары.ДокументПартии ССЫЛКА Документ.ПриобретениеТоваровУслуг
		|	И ГТДИмпортТовары.ДокументПартии.Договор В(&ДоговорКонтрагента)";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ПолучитьМассивДоговоровДляКонтрактаВЭД());		
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.ДатаНач));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.ДатаКон));
	Запрос.Выполнить();	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПодтверждающиеДокументы.Ссылка,
	|	ПодтверждающиеДокументы.Ссылка.Дата КАК Дата
	|ИЗ
	|	ПодтверждающиеДокументы КАК ПодтверждающиеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РЭЙ_СправкаОПодтверждающихДокументах.ПодтверждающиеДокументы КАК СПД
	|		ПО (СПД.Ссылка.Проведен)
	|			И (СПД.Ссылка <> &Ссылка)
	|			И ПодтверждающиеДокументы.Ссылка = СПД.Документ
	|ГДЕ
	|	СПД.Ссылка ЕСТЬ NULL 
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ПодтверждающиеДокументы.Добавить();
		НоваяСтрока.Документ = Выборка.Ссылка;
		ЗаполнитьСтрокуПоДокументу(НоваяСтрока);
		Если Объект.Импорт Тогда
			ЗаполнитьАвансыВСтроке(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДополнительныеРеквизитыТабличныхЧастей();
КонецПроцедуры	

&НаКлиенте
Процедура Файлы(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = "Документ еще не записан. Записать?";
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ФайлыВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОткрытьФормуФайлы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВопросОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			ОткрытьФормуФайлы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуФайлы()
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектВладелец", Объект.Ссылка);
	ОткрытьФорму("Справочник.РЭЙ_Файлы.ФормаСписка", ПараметрыОткрытия,, Новый УникальныйИдентификатор(),,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ТЧ_ПодтверждающиеДокументы

&НаКлиенте
Процедура ПодтверждающиеДокументыПриАктивизацииСтроки(Элемент)
	Если Элементы.ПодтверждающиеДокументы.ТекущиеДанные <> Неопределено Тогда
		Элементы.Авансы.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.ПодтверждающиеДокументы.ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.Авансы.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено добавлять строки в корректировочную справку.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПередУдалением(Элемент, Отказ)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено удалять строки из корректировочной справки.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.ВидДокумента = РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(Объект.КонтрактВЭД, "ВидДокумента");
	КонецЕсли;	
	
	Если НоваяСтрока И Копирование Тогда
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.КлючСвязи = Неопределено;
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.СуммаАвансаВВалютеДокумента = 0;
		Элементы.ПодтверждающиеДокументы.ТекущиеДанные.СуммаАвансаВВалютеКонтракта = 0;
	КонецЕсли;
	
	ВидДокумента_СтароеЗначение = Элементы.ПодтверждающиеДокументы.ТекущиеДанные.ВидДокумента;	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПослеУдаления(Элемент)
	УдалитьСтрокиАвансовБезСвязей();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыКорректировкаПриИзменении(Элемент)
	ТЧ_КорректировкаПриИзмененииНаСервере("ПодтверждающиеДокументы", Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПризнакПоставкиПриИзменении(Элемент)
	ПодтверждающиеДокументыПризнакПоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыПризнакПоставкиПриИзмененииНаСервере()
	ЗаполнитьОжидаемыйСрок(Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыПризнакПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ_ПризнакПоставкиНачалоВыбора("ПодтверждающиеДокументы", Элементы.ПодтверждающиеДокументы.ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыВидДокументаПриИзменении(Элемент)
	ТЧ_ВидДокументаПриИзменении("ПодтверждающиеДокументы", Элементы.ПодтверждающиеДокументы.ТекущаяСтрока, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДокументПриИзменении(Элемент)
	ПодтверждающиеДокументыДокументПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыДокументПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	СтрокаТЧ.ДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.Документ);
	ЗаполнитьСтрокуПоДокументу(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
		
	СтрокаТЧ = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
		
	Если ТипЗнч(СтрокаТЧ.Документ) = Тип("Неопределено") Тогда
		ПодтверждающиеДокументыДокументНачалоВыбора_ВыборТипаДокумента(Элемент, СтрокаТЧ);
	Иначе
		ПодтверждающиеДокументыДокументНачалоВыбора_ВыборДокумента(Элемент, СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДокументНачалоВыбора_ВыборТипаДокумента(Элемент, СтрокаТЧ)
	Если Объект.ТолькоПоГТД Тогда
		СтрокаДоступныхВидовДокументов = "ГТДИмпорт";
	ИначеЕсли ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
		// TODO Сделать корректный выбор с учетом типа документа
		//ВидДоговора	= РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(Объект.КонтрактВЭД, "ДоговорКонтрагента"), "ВидДоговора");
		//
		//Если ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем") Тогда
		//	СтрокаДоступныхВидовДокументов = "КорректировкаДолга,ВозвратТоваровОтПокупателя,РеализацияТоваровУслуг";
		//ИначеЕсли ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером") Тогда
		//	СтрокаДоступныхВидовДокументов = "КорректировкаДолга,ОтчетКомиссионераОПродажах,ВозвратТоваровОтПокупателя,РеализацияТоваровУслуг";
		//ИначеЕсли ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком") Тогда
		//	СтрокаДоступныхВидовДокументов = "КорректировкаДолга,ВозвратТоваровПоставщику,ПоступлениеДопРасходов,ПоступлениеТоваровУслуг";
		//ИначеЕсли ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом") Тогда
		//	СтрокаДоступныхВидовДокументов = "КорректировкаДолга,ОтчетКомитентуОПродажах,ВозвратТоваровПоставщику,ПоступлениеДопРасходов,ПоступлениеТоваровУслуг";
		СтрокаДоступныхВидовДокументов = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДоступныхВидовДокументов) Тогда
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(ПолучитьСтрокуТипов(СтрокаДоступныхВидовДокументов));	
	Иначе
		Элемент.ОграничениеТипа = Элемент.ДоступныеТипы;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Элемент, СтрокаТЧ", Элемент, СтрокаТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждающиеДокументыДокументНачалоВыбора_ЗавершениеВыбораТипаДокумента", ЭтотОбъект, ДополнительныеПараметры);
	СписокДоступныхТипов = ПолучитьСписокЗначенийИзОписанияТипов(Элемент.ОграничениеТипа);
	СписокДоступныхТипов.ПоказатьВыборЭлемента(ОписаниеОповещения, "Выбор типа данных");
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДокументНачалоВыбора_ЗавершениеВыбораТипаДокумента(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Результат.Значение);
		текОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
		ДополнительныеПараметры.СтрокаТЧ.Документ = текОграничениеТипа.ПривестиЗначение(ДополнительныеПараметры.СтрокаТЧ.Документ);
		
		ПодтверждающиеДокументыДокументНачалоВыбора_ВыборДокумента(ДополнительныеПараметры.Элемент, ДополнительныеПараметры.СтрокаТЧ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДокументНачалоВыбора_ВыборДокумента(Элемент, СтрокаТЧ)
	ИмяФормыВыбора	= ПолучитьИмяФормыВыбора(СтрокаТЧ.Документ);
	ФормаСписка	= ПолучитьФорму(ИмяФормыВыбора, Новый Структура("ТекущаяСтрока", СтрокаТЧ.Документ), Элемент);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "Организация", ВидСравненияКомпоновкиДанных.Равно, Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.ЗагрузитьЗначения(ПолучитьМассивДоговоровДляКонтрактаВЭД());
		ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, "ДоговорКонтрагента", ВидСравненияКомпоновкиДанных.ВСписке, СписокДоговоров);
	КонецЕсли;
	
	ФормаСписка.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыНомерГТДПриИзменении(Элемент)
	ПодтверждающиеДокументыНомерГТДПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыНомерГТДПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) И Не ЗначениеЗаполнено(СтрокаТЧ.ДатаШтампаТаможни) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГТДИмпорт.Дата
		|ИЗ
		|	Документ.ГТДИмпорт КАК ГТДИмпорт
		|ГДЕ
		|	ГТДИмпорт.НомерГТД = &НомерГТД";
		
		Запрос.УстановитьПараметр("НомерГТД", СтрокаТЧ.НомерГТД);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			СтрокаТЧ.ДатаШтампаТаможни = Выборка.Дата;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) И ЗначениеЗаполнено(СтрокаТЧ.ДатаШтампаТаможни) Тогда
		СтрокаТЧ.ДатаШтампаТаможни = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыСуммаВВалютеДокументаПриИзменении(Элемент)
	ПодтверждающиеДокументыСуммаВВалютеДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыСуммаВВалютеДокументаПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
		
	Если СтрокаТЧ.ВалютаДокумента <> СтрокаТЧ.ВалютаКонтракта И ЗначениеЗаполнено(СтрокаТЧ.ВалютаДокумента) И ЗначениеЗаполнено(СтрокаТЧ.ВалютаКонтракта) Тогда
		Если СтрокаТЧ.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			текДатаКурса = ?(ЗначениеЗаполнено(СтрокаТЧ.Документ), СтрокаТЧ.Документ.Дата, Объект.Дата);
			СтрокаТЧ.СуммаВВалютеКонтракта = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВВалютеДокумента, текДатаКурса, СтрокаТЧ.ВалютаДокумента, СтрокаТЧ.ВалютаКонтракта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДопСоглашениеПриИзменении(Элемент)
	ПодтверждающиеДокументыДопСоглашениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыДопСоглашениеПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыДопСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ_ДопСоглашениеНачалоВыбора("ПодтверждающиеДокументы", Элементы.ПодтверждающиеДокументы.ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ТЧ_Авансы

&НаКлиенте
Процедура АвансыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекущиеДанныеПД = Элементы.ПодтверждающиеДокументы.ТекущиеДанные;
	Если ТекущиеДанныеПД = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанныеПД.КлючСвязи) Тогда
		ТекущиеДанныеПД.КлючСвязи = Новый УникальныйИдентификатор();
		Элементы.Авансы.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Элементы.ПодтверждающиеДокументы.ТекущиеДанные.КлючСвязи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвансыПослеУдаления(Элемент)
	АвансыПослеУдаленияНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвансыПослеУдаленияНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	РассчитатьИтогСуммыАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура АвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.Авансы.ТекущиеДанные.КлючСвязи = Элементы.ПодтверждающиеДокументы.ТекущиеДанные.КлючСвязи;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансоваяСправкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("КонтрактВЭД", Объект.КонтрактВЭД);
	ПараметрыОткрытия.Вставить("РасчетныйДокумент", Элементы.ПодтверждающиеДокументы.ТекущиеДанные.Документ);
	ПараметрыОткрытия.Вставить("СсылкаСПД", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ДанныеТекущегоДокумента", СформироватьДанныеДокументаДляВыбораАвансовойСправки());
	
	
	ОткрытьФорму("Документ.РЭЙ_СправкаОПодтверждающихДокументах.Форма.ФормаВыбораАвансовойСправки", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансоваяСправкаОчистка(Элемент, СтандартнаяОбработка)
	АвансыОчистить();
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансоваяСправкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АвансыАвансоваяСправкаОбработкаВыбораНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере 
Процедура АвансыАвансоваяСправкаОбработкаВыбораНаСервере(СтруктураАванса)
	ТекущиеДанныеПД = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	ТекущиеДанныеАвансы = Объект.Авансы.НайтиПоИдентификатору(Элементы.Авансы.ТекущаяСтрока);
	Если ТекущиеДанныеПД <> Неопределено И ТекущиеДанныеАвансы <> Неопределено Тогда
		УстановитьАвансВСтроке(ТекущиеДанныеПД, ТекущиеДанныеАвансы, СтруктураАванса);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансовыйРасчетныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	АвансыАвансоваяСправкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансовыйРасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)
	АвансыОчистить();
КонецПроцедуры

&НаКлиенте
Процедура АвансыАвансовыйРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	АвансыАвансоваяСправкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АвансыСуммаАвансаВВалютеКонтрактаПриИзменении(Элемент)
	АвансыСуммаАвансаВВалютеКонтрактаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура АвансыСуммаАвансаВВалютеКонтрактаПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	РассчитатьИтогСуммыАванса(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура АвансыОчистить()
	Элементы.Авансы.ТекущиеДанные.АвансоваяСправка = Неопределено;
	Элементы.Авансы.ТекущиеДанные.АвансовыйРасчетныйДокумент = Неопределено;
	Элементы.Авансы.ТекущиеДанные.АвансоваяСправкаПредставление = "";
	Элементы.Авансы.ТекущиеДанные.АвансовыйРасчетныйДокументПредставление = "";
	
	Элементы.Авансы.ТекущиеДанные.СуммаАвансаВВалютеКонтракта = 0;
	
	СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	РассчитатьИтогСуммыАванса(СтрокаТЧ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ТЧ_ПодтверждающиеДокументыРучные

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено добавлять строки в корректировочную справку.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеПередУдалением(Элемент, Отказ)
	Если Объект.Корректировка Тогда
		ПоказатьПредупреждение(, "Запрещено удалять строки из корректировочной справки.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		Элементы.ПодтверждающиеДокументыРучные.ТекущиеДанные.ВидДокумента = РЭЙ_СлужебныйСервер.ПолучитьЗначениеРеквизита(Объект.КонтрактВЭД, "ВидДокумента");
	КонецЕсли;	
	
	ВидДокумента_СтароеЗначение = Элементы.ПодтверждающиеДокументыРучные.ТекущиеДанные.ВидДокумента;	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеКорректировкаПриИзменении(Элемент)
	ТЧ_КорректировкаПриИзмененииНаСервере("ПодтверждающиеДокументыРучные", Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеПризнакПоставкиПриИзменении(Элемент)
	ПодтверждающиеДокументыРучныеПризнакПоставкиПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыРучныеПризнакПоставкиПриИзмененииНаСервере()
	ЗаполнитьОжидаемыйСрок(Объект.ПодтверждающиеДокументыРучные.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока));
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеПризнакПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ_ПризнакПоставкиНачалоВыбора("ПодтверждающиеДокументыРучные", Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеВидДокументаПриИзменении(Элемент)
	ТЧ_ВидДокументаПриИзменении("ПодтверждающиеДокументыРучные", Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеДопСоглашениеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаСервере
Процедура ПодтверждающиеДокументыРучныеДопСоглашениеПриИзмененииНаСервере()
	СтрокаТЧ = Объект.ПодтверждающиеДокументыРучные.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждающиеДокументыРучныеДопСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТЧ_ДопСоглашениеНачалоВыбора("ПодтверждающиеДокументыРучные", Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий_ТЧ_ПодтверждающиеДокументы_Общее

&НаСервере
Процедура ТЧ_КорректировкаПриИзмененииНаСервере(ИмяТЧ, ИдентификаторСтроки)
	ТекущиеДанные = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокиТЧ = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("НомерСтрокиДляПечати", ТекущиеДанные.НомерСтрокиДляПечати));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		СтрокаТЧ.Корректировка = ТекущиеДанные.Корректировка;
		
		Если СтрокаТЧ.Корректировка = Ложь Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Объект.Основание[ИмяТЧ][Объект[ИмяТЧ].Индекс(СтрокаТЧ)]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_ПризнакПоставкиНачалоВыбора(ИмяТЧ, ИдентификаторСтроки, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.Экспорт Или Объект.Импорт Тогда
		СтандартнаяОбработка = Ложь;
		
		СтрокаТЧ = Элементы[ИмяТЧ].ТекущиеДанные;
		
		Список = Новый СписокЗначений;
		Если Объект.Экспорт Тогда
			Список.Добавить(ПредопределенноеЗначение("Перечисление.РЭЙ_ПризнакиПоставки.ИсполнениеРезидентомОбязательствВСчетАвансаОтНерезидента"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.РЭЙ_ПризнакиПоставки.ПредоставлениеРезидентомОтсрочкиОплатыНерезиденту"));
		КонецЕсли;
		Если Объект.Импорт Тогда
			Список.Добавить(ПредопределенноеЗначение("Перечисление.РЭЙ_ПризнакиПоставки.ИсполнениеНерезидентомОбязательствВСчетАвансаОтРезидента"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.РЭЙ_ПризнакиПоставки.ПредоставлениеНерезидентомОтсрочкиОплатыРезиденту"));
		КонецЕсли;
		
		НачальноеЗначениеВыбора = Неопределено;
		Для Каждого ЭлементСпискаЗначений Из Список Цикл
			Если ЭлементСпискаЗначений.Значение = СтрокаТЧ.ПризнакПоставки Тогда
				НачальноеЗначениеВыбора = ЭлементСпискаЗначений;
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ТЧ_ПризнакПоставкиНачалоВыбора_Завершение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элемент, НачальноеЗначениеВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_ПризнакПоставкиНачалоВыбора_Завершение(Результат, ДополнительныеПараметры) Экспорт 
	Если Результат <> Неопределено Тогда
		СтрокаТЧ = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		СтрокаТЧ.ПризнакПоставки = Результат.Значение;
		Модифицированность = Истина;
		Если Не Объект.РучноеЗаполнение Тогда
			ПодтверждающиеДокументыПризнакПоставкиПриИзменении(ДополнительныеПараметры.Элемент);
		Иначе
			ПодтверждающиеДокументыРучныеПризнакПоставкиПриИзменении(ДополнительныеПараметры.Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_ВидДокументаПриИзменении(ИмяТЧ, ИдентификаторСтроки, Элемент)
	Если Не Объект.РучноеЗаполнение Тогда
		СтрокаТЧ = Объект.ПодтверждающиеДокументы.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументы.ТекущаяСтрока);
	Иначе
		СтрокаТЧ = Объект.ПодтверждающиеДокументыРучные.НайтиПоИдентификатору(Элементы.ПодтверждающиеДокументыРучные.ТекущаяСтрока);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТЧ.НомерГТД) И ВидыДокДляНомерГТД.НайтиПоЗначению(СтрокаТЧ.ВидДокумента) = Неопределено Тогда
		ТекстВопроса = 
		"Выбранный код ПД не требует указания ГТД. Поле ""Номер ГТД"" будет очищено!
		|Продолжить?";
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент", Элемент);
		ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ТЧ_ВидДокументаПриИзменении_Продолжение", ЭтотОбъект, ДополнительныеПараметры), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ТЧ_ВидДокументаПриИзмененииНаСервере(ИмяТЧ, ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_ВидДокументаПриИзменении_Продолжение(Результат, ДополнительныеПараметры) Экспорт 
	СтрокаТЧ = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтрокаТЧ.НомерГТД = Неопределено;
	Иначе
		СтрокаТЧ.ВидДокумента = ВидДокумента_СтароеЗначение;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТЧ_ВидДокументаПриИзмененииНаСервере(ИмяТЧ, ИдентификаторСтроки)
	СтрокаТЧ = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
		
	Если ЗначениеЗаполнено(СтрокаТЧ.ПризнакПоставки) Тогда
		Если ВидыДокДляПризнакПоставки.НайтиПоЗначению(СтрокаТЧ.ВидДокумента) = Неопределено Тогда
			СтрокаТЧ.ПризнакПоставки = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.СтранаГрузоотправителяГрузополучателя) Тогда
		Если ВидыДокДляСтрана.НайтиПоЗначению(СтрокаТЧ.ВидДокумента) = Неопределено Тогда
			СтрокаТЧ.СтранаГрузоотправителяГрузополучателя = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЧ_ДопСоглашениеНачалоВыбора(ИмяТЧ, ИдентификаторСтроки, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтрокаТЧ = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
		
	Отбор = Новый Структура;
	Отбор.Вставить("Владелец", Объект.Контрагент);
	Отбор.Вставить("Ссылка", СформироватьМассивДляВыбораДопСоглашения(Объект.КонтрактВЭД));

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор); 
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", СтрокаТЧ.ДопСоглашение);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыОткрытия, Элемент)
КонецПроцедуры

#КонецОбласти

#Область Отображение

&НаСервере
Процедура ДобавитьУсловноеОформление_Авансы()
	// Краткое наименование документа
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("АвансыАвансоваяСправка");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Авансы.АвансоваяСправкаПредставление"));
	
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("АвансыАвансовыйРасчетныйДокумент");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Авансы.АвансовыйРасчетныйДокументПредставление"));
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_КорректировочныеСправки()
	// Видимость колонки "Корректировка"
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПодтверждающиеДокументыКорректировка");
	
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Первичное");
    ПолеОтбора.ПравоеЗначение = Истина;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Только просмотр
    ЭлементУсловногоОформленияТолькоПросмотр = УсловноеОформление.Элементы.Добавить();
	
	РЭЙ_СлужебныйСервер.РекурсивноЗаполнитьСписокЭлементовФормыДляОформления(ЭлементУсловногоОформленияТолькоПросмотр, Элементы.ПодтверждающиеДокументы, "ПодтверждающиеДокументыКорректировка");
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
    ПолеОтбора.ПравоеЗначение = Истина;
    ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияТолькоПросмотр.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияТолькоПросмотр.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Серый цвет
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПодтверждающиеДокументы");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Корректировка");
	ПолеОтбора.ПравоеЗначение = Истина;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.Корректировка");
	ПолеОтбора.ПравоеЗначение = Ложь;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_ПодтверждающиеДокументы()
	ДобавитьУсловноеОформление_ПодтверждающиеДокументы_Общее("ПодтверждающиеДокументы");
	
	// Суммы авансов
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПодтверждающиеДокументыСуммаАвансаВВалютеДокумента");
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПодтверждающиеДокументыСуммаАвансаВВалютеКонтракта");
		
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Краткое наименование документа
    ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ПодтверждающиеДокументыДокумент");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ПодтверждающиеДокументы.ДокументПредставление"));
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_ПодтверждающиеДокументыРучные()
	ДобавитьУсловноеОформление_ПодтверждающиеДокументы_Общее("ПодтверждающиеДокументыРучные");
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформление_ПодтверждающиеДокументы_Общее(ИмяТЧ)
	// Признак поставки
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "ПризнакПоставки");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ВидДокумента");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ПолеОтбора.ПравоеЗначение = ВидыДокДляПризнакПоставки;
		
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Номер ГТД
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "НомерГТД");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ВидДокумента");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ПолеОтбора.ПравоеЗначение = ВидыДокДляНомерГТД;
		
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Ожидаемый срок
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "ОжидаемыйСрок");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ВидДокумента");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ПолеОтбора.ПравоеЗначение = ВидыДокДляОжидаемыйСрок;
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПризнакПоставки");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ПолеОтбора.ПравоеЗначение = Перечисления.РЭЙ_ПризнакиПоставки.ПредоставлениеРезидентомОтсрочкиОплатыНерезиденту;
		
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Страна ГО/ГП
	ЭлементУсловногоОформленияЦвет = УсловноеОформление.Элементы.Добавить();
	
	ПолеОформления = ЭлементУсловногоОформленияЦвет.Поля.Элементы.Добавить();
	ПолеОформления.Использование = Истина;
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТЧ + "СтранаГрузоотправителяГрузополучателя");
	
	ПолеОтбора = ЭлементУсловногоОформленияЦвет.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ВидДокумента");
	ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ПолеОтбора.ПравоеЗначение = ВидыДокДляСтрана;
		
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаКнопки);
	ЭлементУсловногоОформленияЦвет.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_ДопСоглашение()
	Если Объект.КонтрактВЭД.РамочныйКонтракт Тогда
		Элементы.ПодтверждающиеДокументыДопСоглашение.Видимость = Истина;
		Элементы.ПодтверждающиеДокументыРучныеДопСоглашение.Видимость = Истина;
	Иначе
		Элементы.ПодтверждающиеДокументыДопСоглашение.Видимость = Ложь;
		Элементы.ПодтверждающиеДокументыРучныеДопСоглашение.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_КорректировочнаяСправка()
	Если Объект.Корректировка Тогда
		Элементы.ПодтверждающиеДокументы.ИзменятьПорядокСтрок = Ложь;
		Элементы.ПодтверждающиеДокументыРучные.ИзменятьПорядокСтрок = Ложь;
	Иначе
		Элементы.ПодтверждающиеДокументы.ИзменятьПорядокСтрок = Истина;
		Элементы.ПодтверждающиеДокументыРучные.ИзменятьПорядокСтрок = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_НомерКорректировки()
	Если Объект.Корректировка И Объект.Дата >= Дата(2015,12,28) Тогда
		Элементы.НомерКорректировки.Видимость = Истина;
	Иначе
		Элементы.НомерКорректировки.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_Основание()
	Если Объект.Корректировка Тогда
		Элементы.Основание.Видимость = Истина;
	Иначе
		Элементы.Основание.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_Страницы()
	Элементы.СтраницаПодтверждающиеДокументы.Видимость = Не Объект.РучноеЗаполнение;
	Элементы.СтраницаПодтверждающиеДокументыРучные.Видимость = Объект.РучноеЗаполнение;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = ?(Объект.РучноеЗаполнение, Элементы.СтраницаПодтверждающиеДокументыРучные, Элементы.СтраницаПодтверждающиеДокументы);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображение_ТолькоПоГТД()
	Элементы.ТолькоПоГТД.Доступность = Объект.КонтрактВЭД.КонтрактТоварный;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбора_Банк()
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", РЭЙ_СлужебныйСервер.СписокБанковОрганизации(Объект.Организация)));
	
	Элементы.Банк.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполенияДокумента

#Область Документ

&НаСервере
Процедура ЗаполнитьДокументПоУмолчанию()
	Объект.Первичное = Истина;
	Объект.Корректировка = Ложь;
	
	Объект.Организация = РЭЙ_Универсализация.ПолучитьОсновнуюОрганизацию();
	УстановитьРуководителей();
	
	УстановитьПериодЗаполнения();
	
	Объект.Ответственный 	= Пользователи.ТекущийПользователь();
	Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
	УстановитьТелефонУполномоченногоВК();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументНаОсновании(ДанныеЗаполнения, Отказ = Ложь)
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.РЭЙ_СправкаОПодтверждающихДокументах") Тогда
		Для Каждого текРеквизит Из Метаданные.Документы.РЭЙ_СправкаОПодтверждающихДокументах.Реквизиты Цикл
			Объект[текРеквизит.Имя] = ДанныеЗаполнения[текРеквизит.Имя];
		КонецЦикла;
		
		Объект.Основание = ДанныеЗаполнения;
		Объект.Первичное = Ложь;
		Объект.Корректировка = Истина;
		НомерКорректировки = 0;
		ЗаполнитьНомерКорректировки();
		Объект.ПодтверждающиеДокументы.Загрузить(ДанныеЗаполнения.ПодтверждающиеДокументы.Выгрузить());
		Объект.ПодтверждающиеДокументыРучные.Загрузить(ДанныеЗаполнения.ПодтверждающиеДокументыРучные.Выгрузить());
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ДанныеЗаполнения)) Тогда
		ВидДокументаОснования = РЭЙ_СлужебныйСервер.ПолучитьВидДокумента(ДанныеЗаполнения);
		
		МассивДокументов = Новый Массив;
		Если ВидДокументаОснования = ВРег("ТаможеннаяДекларацияИмпорт") Тогда
			ТаблицаДокументПартии = ДанныеЗаполнения.Товары.Выгрузить(, "ДокументПоступления");
			ТаблицаДокументПартии.Свернуть("ДокументПоступления", "");
			Для Каждого СтрокаГТД Из ТаблицаДокументПартии Цикл
				ДокументПартии = СтрокаГТД.ДокументПоступления;
				ИмяДокументаПартии = ВРег(СокрЛП(ДокументПартии.Метаданные().Имя));
				Если ИмяДокументаПартии = ВРег("ПриобретениеТоваровУслуг") Тогда
					СсылкаНаЗадачуПТУ = РЭЙ_ЗадачиСервер.ПоискЗадачи(ДокументПартии);
					Если Не ЗначениеЗаполнено(СсылкаНаЗадачуПТУ) Тогда
						МассивДокументов.Добавить(ДокументПартии);
					Иначе
						Сообщить("Документ " + РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(ДокументПартии) + " не включен в СПД, т.к. по нему уже имеется задача от " + Формат(СсылкаНаЗадачуПТУ.Дата, "ДФ=dd.MM.yyyy"));
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			МассивДокументов.Добавить(ДанныеЗаполнения);
		КонецЕсли;
		
		
		Если МассивДокументов.Количество() > 0 Тогда
			Объект.КонтрактВЭД = РЭЙ_СлужебныйСервер.ПолучитьКонтрактВЭДПоРасчетномуДокументу(МассивДокументов[0]);
			Объект.Контрагент = МассивДокументов[0].Контрагент;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
			Объект.Первичное = Истина;
			Объект.Корректировка = Ложь;
			Объект.Организация = ДанныеЗаполнения.Организация;
			
			Объект.Банк = Объект.КонтрактВЭД.ПаспортСделки.Банк;
			
			ЗаполнитьФлагиЭкспортИмпорт();
			
			Объект.ДатаКон = ДанныеЗаполнения.Дата;
			Объект.ДатаНач = ДанныеЗаполнения.Дата;
			
			УстановитьРуководителей();
			Объект.Ответственный = Пользователи.ТекущийПользователь();
			Объект.УполномоченныйВК = РЭЙ_СлужебныйСервер.ФизЛицоПользователя(Объект.Ответственный);
			УстановитьТелефонУполномоченногоВК();
			
			Для К = 0 По МассивДокументов.Количество() - 1 Цикл
				НоваяСтрока = Объект.ПодтверждающиеДокументы.Добавить();
				НоваяСтрока.Документ = МассивДокументов[К];
				ЗаполнитьСтрокуПоДокументу(НоваяСтрока);
				Если Объект.Импорт Тогда
					ЗаполнитьАвансыВСтроке(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Сообщить("Не найден паспорт сделки.");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область Шапка

&НаСервере 
Процедура ЗаполнитьНомерКорректировки()
	Если Объект.Корректировка Тогда
		Если Объект.Корректировка И Объект.НомерКорректировки = 0 И ЗначениеЗаполнено(Объект.Основание) И Объект.Дата >= Дата(2015,12,28) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(СПД.НомерКорректировки), 0) КАК НомерКорректировки
			|ИЗ
			|	Документ.РЭЙ_СправкаОПодтверждающихДокументах КАК СПД
			|ГДЕ
			|	СПД.Дата >= ДАТАВРЕМЯ(2015, 12, 28)
			|	И СПД.Проведен
			|	И СПД.Корректировка
			|	И СПД.Основание = &Основание
			|	И СПД.Ссылка <> &Ссылка";
			
			Запрос.УстановитьПараметр("Основание", Объект.Основание);
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Объект.НомерКорректировки = Выборка.НомерКорректировки + 1;
		КонецЕсли;
	Иначе
		Объект.НомерКорректировки = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлагиЭкспортИмпорт()
	Объект.Импорт = Объект.КонтрактВЭД.Импорт;
	Объект.Экспорт = Объект.КонтрактВЭД.Экспорт;
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодЗаполнения()
	Объект.ДатаНач = ДобавитьМесяц(НачалоМесяца(Объект.Дата), -1);
	Объект.ДатаКон = КонецМесяца(Объект.ДатаНач);
КонецПроцедуры

&НаСервере
Процедура УстановитьРуководителей()
	РЭЙ_СлужебныйСервер.УстановитьРуководителей(Объект);
КонецПроцедуры

&НаСервере
Процедура УстановитьТелефонУполномоченногоВК()
	Если НЕ Объект.УполномоченныйВК.Пустая() Тогда
		Объект.ТелефонУполномоченногоВК = РЭЙ_СлужебныйСервер.ПолучитьСлужебныйТелефонФизЛица(Объект.УполномоченныйВК);
		Если ПустаяСтрока(Объект.ТелефонУполномоченногоВК) Тогда
			Сообщить("У выбранного физ.лица не заполнен служебный телефон! Заполните телефон в карточке физ.лица и перевыберите физ.лицо.");
		КонецЕсли;
	Иначе
		Объект.ТелефонУполномоченногоВК = "";
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ТабличныеЧасти

&НаСервере
Процедура ЗаполнитьСтрокуПоДокументу(СтрокаТЧ)
	ЗаполнитьКодПодтверждающегоДокумента(СтрокаТЧ);
	ЗаполнитьНомерИДатуГТД(СтрокаТЧ);
	ЗаполнитьДопСоглашение(СтрокаТЧ);
	ЗаполнитьОжидаемыйСрок(СтрокаТЧ);
	
	//Суммы
	Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
		СтрокаТЧ.ВалютаДокумента = СтрокаТЧ.Документ.Валюта;
		СтрокаТЧ.СуммаВВалютеДокумента = РЭЙ_СлужебныйСервер.ПолучитьСуммуДокументаДляСПД(СтрокаТЧ.Документ, Объект.КонтрактВЭД);
		
		Если СтрокаТЧ.ВалютаДокумента <> Объект.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			СтрокаТЧ.ВалютаКонтракта = Объект.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ВалютаКонтракта) Тогда
				СтрокаТЧ.СуммаВВалютеКонтракта = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(СтрокаТЧ.СуммаВВалютеДокумента, СтрокаТЧ.Документ.Дата, СтрокаТЧ.ВалютаДокумента, СтрокаТЧ.ВалютаКонтракта);
			КонецЕсли;
		Иначе
			СтрокаТЧ.ВалютаКонтракта = Неопределено;
			СтрокаТЧ.СуммаВВалютеКонтракта = 0;
		КонецЕсли;
	Иначе
		СтрокаТЧ.ВалютаКонтракта = Неопределено;
		СтрокаТЧ.ВалютаДокумента = Неопределено;
		СтрокаТЧ.СуммаВВалютеКонтракта = 0;
		СтрокаТЧ.СуммаВВалютеДокумента = 0;
		СтрокаТЧ.СуммаАвансаВВалютеКонтракта = 0;
		СтрокаТЧ.СуммаАвансаВВалютеДокумента = 0;
	КонецЕсли;
	
	Если Объект.Импорт Тогда
		СтрокаТЧ.ПризнакПоставки = Перечисления.РЭЙ_ПризнакиПоставки.ПредоставлениеНерезидентомОтсрочкиОплатыРезиденту;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодПодтверждающегоДокумента(СтрокаТЧ)
	
	Если ЗначениеЗаполнено(Объект.КонтрактВЭД.ВидДокумента) Тогда
		СтрокаТЧ.ВидДокумента = Объект.КонтрактВЭД.ВидДокумента;
	Иначе
		Если Объект.КонтрактВЭД.ДоговорКонтрагента.ТипДоговора = Перечисления.ТипыДоговоров.Импорт Тогда
			Если Объект.КонтрактВЭД.КонтрактТоварный Тогда
				СтрокаТЧ.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВвозНаТерриториюРФТоваровПоГТД;
			Иначе
				СтрокаТЧ.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВыполненныеНерезидентомРаботыУслугиПереданныеПрава;
			КонецЕсли;
		ИначеЕсли Объект.КонтрактВЭД.ДоговорКонтрагента.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем Тогда
			Если Объект.КонтрактВЭД.КонтрактТоварный Тогда
				СтрокаТЧ.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД;
			Иначе
				СтрокаТЧ.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВыполненныеРезидентомРаботыУслугиПереданныеПрава;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомерИДатуГТД(СтрокаТЧ)
	Если Не ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
		Возврат;
	КонецЕсли;
	
	текВидДокумента = РЭЙ_СлужебныйСервер.ПолучитьВидДокумента(СтрокаТЧ.Документ);
	
	Если текВидДокумента = ВРег("ГТДИмпорт") Тогда 
		СтрокаТЧ.ДатаШтампаТаможни = СтрокаТЧ.Документ.Дата;
		СтрокаТЧ.НомерГТД = СтрокаТЧ.Документ.НомерГТД;
	ИначеЕсли текВидДокумента = ВРег("РеализацияТоваровУслуг") Тогда
		Если Объект.КонтрактВЭД.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД Тогда //01_3
			Если ЗначениеЗаполнено(СтрокаТЧ.Документ.РЭЙ_ДатаПоГТД) Тогда
				СтрокаТЧ.ДатаШтампаТаможни = СтрокаТЧ.Документ.РЭЙ_ДатаПоГТД;
			Иначе
				Сообщить("В документе """ + СтрокаТЧ.Документ + """ дата ГТД по экспорту не заполнена. Будет использована дата документа Реализация товаров и услуг.");
				СтрокаТЧ.ДатаШтампаТаможни = СтрокаТЧ.Документ.Дата;
			КонецЕсли;
			
			СтрокаТЧ.НомерГТД = СтрокаТЧ.Документ.РЭЙ_ГТД;
		КонецЕсли;
	ИначеЕсли текВидДокумента = ВРег("ПоступлениеТоваровУслуг") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГТДИмпортТовары.Ссылка,
		|	ГТДИмпортТовары.Ссылка.Дата,
		|	ГТДИмпортТовары.Ссылка.НомерГТД
		|ИЗ
		|	Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
		|ГДЕ
		|	ГТДИмпортТовары.Ссылка.Проведен
		|	И ГТДИмпортТовары.ДокументПартии = &ДокументПартии";
		Запрос.УстановитьПараметр("ДокументПартии", СтрокаТЧ.Документ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТЧ.НомерГТД = Выборка.НомерГТД;
			СтрокаТЧ.ДатаШтампаТаможни = Выборка.Дата;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопСоглашение(СтрокаТЧ)
	Если ЗначениеЗаполнено(Объект.КонтрактВЭД) И Объект.КонтрактВЭД.РамочныйКонтракт Тогда
		ДанныеПоДопСоглашениям = РегистрыСведений.РЭЙ_ДопСоглашения.СоздатьНаборЗаписей();
		ДанныеПоДопСоглашениям.Отбор.ДопСоглашение.Использование = ИСТИНА;
		ДанныеПоДопСоглашениям.Отбор.ДопСоглашение.Значение = СтрокаТЧ.Документ.ДоговорКонтрагента;
		
		Если ЗначениеЗаполнено(Объект.КонтрактВЭД) Тогда
			ДанныеПоДопСоглашениям.Отбор.Договор.Использование = ИСТИНА;
			ДанныеПоДопСоглашениям.Отбор.Договор.Значение = Объект.КонтрактВЭД;
		КонецЕсли;
		ДанныеПоДопСоглашениям.Прочитать();
		
		СтрокаТЧ.ДопСоглашение =  ?(ДанныеПоДопСоглашениям.Количество() > 0, СтрокаТЧ.Документ.ДоговорКонтрагента, Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		//ЭлементыФормы[ИмяТЧ].Колонки.ДопСоглашение.Видимость = ИСТИНА;
	Иначе
	  СтрокаТЧ.ДопСоглашение = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	  //ЭлементыФормы[ИмяТЧ].Колонки.ДопСоглашение.Видимость = ЛОЖЬ;			
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОжидаемыйСрок(СтрокаТЧ)
	Если Объект.КонтрактВЭД.ОтсрочкаПлатежаПредоплаты = Перечисления.РЭЙ_ОтсрочкаПлатежаПредоплаты.ОжидаемыйСрок 
		И ВидыДокДляОжидаемыйСрок.НайтиПоЗначению(СтрокаТЧ.ВидДокумента) <> Неопределено 
		И СтрокаТЧ.ПризнакПоставки = Перечисления.РЭЙ_ПризнакиПоставки.ПредоставлениеРезидентомОтсрочкиОплатыНерезиденту Тогда
		
		СтартоваяДата = Неопределено;
		
		Если Объект.КонтрактВЭД.ВидСтартовойДатыОжидаемогоСрока = Перечисления.РЭЙ_ВидыСтартовыхДатОжидаемогоСрока.ДатаДокумента Тогда
			Если Не Объект.РучноеЗаполнение Тогда
				Если ЗначениеЗаполнено(СтрокаТЧ.Документ) Тогда
					Если СтрокаТЧ.ВидДокумента = Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД Тогда
						СтартоваяДата = СтрокаТЧ.ДатаШтампаТаможни;
					Иначе
						СтартоваяДата = СтрокаТЧ.Документ.Дата;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтартоваяДата = СтрокаТЧ.ДатаШтампаТаможни;
			КонецЕсли;
		ИначеЕсли Объект.КонтрактВЭД.ВидСтартовойДатыОжидаемогоСрока = Перечисления.РЭЙ_ВидыСтартовыхДатОжидаемогоСрока.ДатаПоставкиОтгрузки Тогда
			Если Не Объект.КонтрактВЭД.РамочныйКонтракт Тогда
				СтартоваяДата = Объект.КонтрактВЭД.ДатаПоставкиОтгрузки;
			Иначе 				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РЭЙ_ДопСоглашения.ДатаПоставкиОтгрузки
				|ИЗ
				|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
				|ГДЕ
				|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД
				|	И РЭЙ_ДопСоглашения.ДопСоглашение = &ДопСоглашение";
				
				Запрос.УстановитьПараметр("КонтрактВЭД", Объект.КонтрактВЭД);
				Запрос.УстановитьПараметр("ДопСоглашение", СтрокаТЧ.ДопСоглашение);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтартоваяДата = Выборка.ДатаПоставкиОтгрузки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтартоваяДата) Тогда
			Если Не Объект.КонтрактВЭД.РамочныйКонтракт Тогда
				СтрокаТЧ.ОжидаемыйСрок = СтартоваяДата + (Объект.КонтрактВЭД.КоличествоДней + Объект.КонтрактВЭД.КоличествоДнейДополнительное) * 86400;
			Иначе 				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	РЭЙ_ДопСоглашения.Договор,
				|	РЭЙ_ДопСоглашения.ДопСоглашение,
				|	РЭЙ_ДопСоглашения.ОжидаемоеКоличествоДней,
				|	РЭЙ_ДопСоглашения.ОжидаемоеКоличествоДнейДополнительное,
				|	РЭЙ_ДопСоглашения.ДатаОкончанияКонтракта
				|ИЗ
				|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
				|ГДЕ
				|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД
				|	И РЭЙ_ДопСоглашения.ДопСоглашение = &ДопСоглашение";
				
				Запрос.УстановитьПараметр("КонтрактВЭД", Объект.КонтрактВЭД);
				Запрос.УстановитьПараметр("ДопСоглашение", СтрокаТЧ.ДопСоглашение);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					СтрокаТЧ.ОжидаемыйСрок = СтартоваяДата + (Выборка.ОжидаемоеКоличествоДней + Выборка.ОжидаемоеКоличествоДнейДополнительное) * 86400;
				Иначе 	
					СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧ.ОжидаемыйСрок > Объект.КонтрактВЭД.ДатаЗавершенияОбязательствПоКонтракту Тогда
				СтрокаТЧ.ОжидаемыйСрок = Объект.КонтрактВЭД.ДатаЗавершенияОбязательствПоКонтракту;
				Сообщить("В строке " + СтрокаТЧ.НомерСтроки + " ожидаемый срок установлен равным дате завершения обязательств по контракту, т.к. расчетная дата ожидаемого срока превышала дату завершения обязательств по контракту.");
			КонецЕсли;
		Иначе
			СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
		КонецЕсли;	
	Иначе
		СтрокаТЧ.ОжидаемыйСрок = Дата(1,1,1); 
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАвансыВСтроке(СтрокаТЧ)
	МетаданныеРасчетногоДокумента = СтрокаТЧ.Документ.Метаданные();
	ЗачетАвансовИзДокумента = Ложь;
	Если МетаданныеРасчетногоДокумента.Реквизиты.Найти("СпособЗачетаАвансов") <> Неопределено Тогда
		текстСпособыЗачетаАвансов = "СпособыЗачетаАвансов";
		Если СтрокаТЧ.Документ.СпособЗачетаАвансов = Перечисления[текстСпособыЗачетаАвансов].ПоДокументу Тогда
			ЗачетАвансовИзДокумента = Истина;
		ИначеЕсли СтрокаТЧ.Документ.СпособЗачетаАвансов = Перечисления[текстСпособыЗачетаАвансов].НеЗачитывать Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СВО.Ссылка КАК Справка,
	|	ВЫБОР
	|		КОГДА СВО.ВалютаДокумента = СВО.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА СВО.СуммаВВалютеДокумента
	|		ИНАЧЕ СВО.СуммаВВалютеКонтракта
	|	КОНЕЦ КАК Сумма,
	|	СВО.РасчетныйДокумент
	|ПОМЕСТИТЬ АвансовыеСВО
	|ИЗ
	|	Документ.РЭЙ_СправкаОВалютныхОперациях.ВалютныеОперации КАК СВО
	|ГДЕ
	|	СВО.Ссылка.Проведен
	|	И СВО.Ссылка В(&СсылкиСВО)
	|	И СВО.КонтрактВЭД = &КонтрактВЭД
	|	И СВО.ВидВалютнойОперации.ОжидаемыйСрок
	|	И СВО.Ссылка.Дата <= &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СПД.АвансоваяСправка,
	|	СПД.АвансовыйРасчетныйДокумент,
	|	СУММА(СПД.СуммаАвансаВВалютеКонтракта) КАК Сумма
	|ПОМЕСТИТЬ ЗакрытыеСВО
	|ИЗ
	|	Документ.РЭЙ_СправкаОПодтверждающихДокументах.Авансы КАК СПД
	|ГДЕ
	|	СПД.Ссылка.Проведен
	|	И СПД.Ссылка В(&СсылкиСПД)
	|	И СПД.Ссылка.КонтрактВЭД = &КонтрактВЭД
	|	И СПД.Ссылка.Дата <= &Период
	|	И СПД.Ссылка <> &СсылкаСПД
	|
	|СГРУППИРОВАТЬ ПО
	|	СПД.АвансоваяСправка,
	|	СПД.АвансовыйРасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеТекущегоДокумента.АвансоваяСправка,
	|	ДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент,
	|	ДанныеТекущегоДокумента.СуммаАвансаВВалютеКонтракта КАК Сумма
	|ПОМЕСТИТЬ ПредварительныеДанныеТекущегоДокумента
	|ИЗ
	|	&ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредварительныеДанныеТекущегоДокумента.АвансоваяСправка,
	|	ПредварительныеДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент,
	|	СУММА(ПредварительныеДанныеТекущегоДокумента.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ДанныеТекущегоДокумента
	|ИЗ
	|	ПредварительныеДанныеТекущегоДокумента КАК ПредварительныеДанныеТекущегоДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредварительныеДанныеТекущегоДокумента.АвансоваяСправка,
	|	ПредварительныеДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыеСВО.Справка КАК Справка,
	|	АвансовыеСВО.Сумма - ЕСТЬNULL(ЗакрытыеСВО.Сумма, 0) - ЕСТЬNULL(ДанныеТекущегоДокумента.Сумма, 0) КАК Сумма,
	|	АвансовыеСВО.РасчетныйДокумент
	|ПОМЕСТИТЬ ДоступныеАвансы
	|ИЗ
	|	АвансовыеСВО КАК АвансовыеСВО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗакрытыеСВО КАК ЗакрытыеСВО
	|		ПО АвансовыеСВО.Справка = ЗакрытыеСВО.АвансоваяСправка
	|			И АвансовыеСВО.РасчетныйДокумент = ЗакрытыеСВО.АвансовыйРасчетныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеТекущегоДокумента КАК ДанныеТекущегоДокумента
	|		ПО АвансовыеСВО.Справка = ДанныеТекущегоДокумента.АвансоваяСправка
	|			И АвансовыеСВО.РасчетныйДокумент = ДанныеТекущегоДокумента.АвансовыйРасчетныйДокумент
	|ГДЕ
	|	АвансовыеСВО.Сумма - ЕСТЬNULL(ЗакрытыеСВО.Сумма, 0) - ЕСТЬNULL(ДанныеТекущегоДокумента.Сумма, 0) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоступныеАвансы.Справка КАК Справка,
	|	ДоступныеАвансы.Сумма,
	|	ДоступныеАвансы.РасчетныйДокумент,
	|	ДоступныеАвансы.Справка.Дата КАК Дата
	|ИЗ
	|	ДоступныеАвансы КАК ДоступныеАвансы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	
	Запрос.УстановитьПараметр("КонтрактВЭД", Объект.КонтрактВЭД);
	Запрос.УстановитьПараметр("ВалютаКонтракта", Объект.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("СсылкаСПД", Объект.Ссылка);
	ДанныеТекущегоДокумента = Объект.Авансы.Выгрузить(, "АвансоваяСправка, АвансовыйРасчетныйДокумент, СуммаАвансаВВалютеКонтракта");
	Запрос.УстановитьПараметр("ДанныеТекущегоДокумента", ДанныеТекущегоДокумента);
	Запрос.УстановитьПараметр("Период", КонецДня(СтрокаТЧ.Документ.Дата));
	Запрос.УстановитьПараметр("СсылкиСВО", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСВО(, КонецДня(СтрокаТЧ.Документ.Дата)));
	Запрос.УстановитьПараметр("СсылкиСПД", РЭЙ_СлужебныйСервер.ПолучитьСсылкиНаАктуальныеСПД(, КонецДня(СтрокаТЧ.Документ.Дата)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураАванса = Новый Структура("Справка, РасчетныйДокумент, Сумма");
		ЗаполнитьЗначенияСвойств(СтруктураАванса, Выборка);
		Если ЗачетАвансовИзДокумента Тогда
			СтрокаЗачетаАванса = СтрокаТЧ.Документ.ЗачетАвансов.Найти(Выборка.РасчетныйДокумент);
			Если СтрокаЗачетаАванса = Неопределено Тогда
				Если ВРег(Выборка.РасчетныйДокумент.Метаданные().Имя) = ВРег("ПлатежноеПоручение") Тогда
					ДокументСписания = НайтиДокументСписанияДС(Выборка.РасчетныйДокумент);
					СтрокаЗачетаАванса = СтрокаТЧ.Документ.ЗачетАвансов.Найти(ДокументСписания);
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЗачетаАванса = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗачетаАванса.СуммаЗачета <> 0 Тогда
				СтруктураАванса.Сумма = СтрокаЗачетаАванса.СуммаЗачета;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.КлючСвязи) Тогда
			СтрокаТЧ.КлючСвязи = Новый УникальныйИдентификатор();
		КонецЕсли;
		СтрокаАванса = Объект.Авансы.Добавить();
		СтрокаАванса.КлючСвязи = СтрокаТЧ.КлючСвязи;
		
		УстановитьАвансВСтроке(СтрокаТЧ, СтрокаАванса, СтруктураАванса);
		Если Объект.Импорт Тогда
			СтрокаТЧ.ПризнакПоставки = Перечисления.РЭЙ_ПризнакиПоставки.ИсполнениеНерезидентомОбязательствВСчетАвансаОтРезидента;
		КонецЕсли;
		
		Если СтрокаТЧ.СуммаВВалютеДокумента = СтрокаТЧ.СуммаАвансаВВалютеДокумента Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьАвансВСтроке(СтрокаПД, СтрокаАванса, СтруктураАванса)
	СтрокаАванса.АвансоваяСправка = СтруктураАванса.Справка;
	СтрокаАванса.АвансоваяСправкаПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаАванса.АвансоваяСправка);
	СтрокаАванса.АвансовыйРасчетныйДокумент = СтруктураАванса.РасчетныйДокумент;
	СтрокаАванса.АвансовыйРасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаАванса.АвансовыйРасчетныйДокумент);
	СвободнаяСумма = ?(СтрокаПД.СуммаВВалютеКонтракта = 0, СтрокаПД.СуммаВВалютеДокумента - СтрокаПД.СуммаАвансаВВалютеДокумента, СтрокаПД.СуммаВВалютеКонтракта - СтрокаПД.СуммаАвансаВВалютеКонтракта);
	СтрокаАванса.СуммаАвансаВВалютеКонтракта = Макс(0, Мин(СвободнаяСумма, СтруктураАванса.Сумма));
	
	РассчитатьИтогСуммыАванса(СтрокаПД);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ДобавитьЭлементОтбораНаФормуСписка(ФормаСписка, ИмяПоляКомпановки, ВидСравнения, ПравоеЗначение)
	
	ЭлементыОтбора	= ФормаСписка.Список.Отбор.Элементы;
			
	ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(ИмяПоляКомпановки);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
    ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВспомогательныеСпискиЗначений()
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД")); //01_3
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВвозНаТерриториюРФТоваровПоГТД")); //01_4
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ОтгрузкаТоваровПриВывозеСТерриторииРФБезГТД")); //02_3
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПолучениеТоваровПриВвозеНаТерриториюРФБезГТД")); //02_4
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПередачаРезидентомНаТерриторииРФТоваровИУслугНерезидентуГСМ")); //03_3
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПолучениеРезидентомЗаПределамиТерриторииРФТоваровИУслугОтНерезидентаГСМ")); //03_4
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВыполненныеРезидентомРаботыУслугиПереданныеПрава")); //04_3
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВыполненныеНерезидентомРаботыУслугиПереданныеПрава")); //04_4
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПередачаРезидентомВЛизингИмущества")); //15_3
	ВидыДокДляПризнакПоставки.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПередачаНерезидентомВЛизингИмущества")); //15_4

	ВидыДокДляОжидаемыйСрок.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД")); //01_3
	ВидыДокДляОжидаемыйСрок.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ОтгрузкаТоваровПриВывозеСТерриторииРФБезГТД")); //02_3
	ВидыДокДляОжидаемыйСрок.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПередачаРезидентомНаТерриторииРФТоваровИУслугНерезидентуГСМ")); //03_3
	ВидыДокДляОжидаемыйСрок.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ВыполненныеРезидентомРаботыУслугиПереданныеПрава")); //04_3
	ВидыДокДляОжидаемыйСрок.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПередачаРезидентомВЛизингИмущества")); //15_3

	ВидыДокДляСтрана.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ОтгрузкаТоваровПриВывозеСТерриторииРФБезГТД")); //02_3
	ВидыДокДляСтрана.Добавить(ПредопределенноеЗначение("Справочник.РЭЙ_ВидыПодтверждающихДокументов.ПолучениеТоваровПриВвозеНаТерриториюРФБезГТД")); //02_4
	
	ВидыДокДляНомерГТД.Добавить(Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВвозНаТерриториюРФТоваровПоГТД);
	ВидыДокДляНомерГТД.Добавить(Справочники.РЭЙ_ВидыПодтверждающихДокументов.ВывозСТерриторииРФТоваровПоГТД);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыТабличныхЧастей()
	// Представления полей
	Для Каждого СтрокаТЧ Из Объект.ПодтверждающиеДокументы Цикл
		СтрокаТЧ.ДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.Документ);
	КонецЦикла;	
	Для Каждого СтрокаТЧ Из Объект.Авансы Цикл
		СтрокаТЧ.АвансоваяСправкаПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансоваяСправка);
		СтрокаТЧ.АвансовыйРасчетныйДокументПредставление = РЭЙ_СлужебныйСервер.КраткоеПредставлениеДокумента(СтрокаТЧ.АвансовыйРасчетныйДокумент);
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераСтрокДляПечати()
	Если Не Объект.РучноеЗаполнение Тогда
		ИмяТЧ = "ПодтверждающиеДокументы";
	Иначе
		ИмяТЧ = "ПодтверждающиеДокументыРучные";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТЧ.НомерГТД,
	|	ТЧ.НомерСтроки,
	|	ТЧ.ПризнакПоставки,
	|	ТЧ.ОжидаемыйСрок
	|ПОМЕСТИТЬ ТЧ
	|ИЗ
	|	&ТЧ КАК ТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТЧ.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|			ТОГДА ТЧ.НомерСтроки
	|		ИНАЧЕ ТЧ.НомерГТД
	|	КОНЕЦ КАК ГруппировочноеПоле,
	|	ТЧ.ПризнакПоставки,
	|	ТЧ.ОжидаемыйСрок,
	|	МИНИМУМ(ТЧ.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ СгруппированныеДанные
	|ИЗ
	|	ТЧ КАК ТЧ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ТЧ.НомерГТД = ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|			ТОГДА ТЧ.НомерСтроки
	|		ИНАЧЕ ТЧ.НомерГТД
	|	КОНЕЦ,
	|	ТЧ.ПризнакПоставки,
	|	ТЧ.ОжидаемыйСрок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СгруппированныеДанные.НомерСтроки КАК ИтоговыйНомерСтроки,
	|	ТЧ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СгруппированныеДанные КАК СгруппированныеДанные
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТЧ КАК ТЧ
	|		ПО (ТИПЗНАЧЕНИЯ(СгруппированныеДанные.ГруппировочноеПоле) = ТИП(Справочник.НомераГТД)
	|					И СгруппированныеДанные.ГруппировочноеПоле = ТЧ.НомерГТД
	|				ИЛИ ТИПЗНАЧЕНИЯ(СгруппированныеДанные.ГруппировочноеПоле) <> ТИП(Справочник.НомераГТД)
	|					И СгруппированныеДанные.ГруппировочноеПоле = ТЧ.НомерСтроки)
	|			И СгруппированныеДанные.ПризнакПоставки = ТЧ.ПризнакПоставки
	|			И СгруппированныеДанные.ОжидаемыйСрок = ТЧ.ОжидаемыйСрок
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИтоговыйНомерСтроки
	|ИТОГИ ПО
	|	ИтоговыйНомерСтроки";
	
	Запрос.УстановитьПараметр("ТЧ", Объект[ИмяТЧ].Выгрузить());
	
	ВыборкаИтоги = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НомерСтрокиДляПечати = 0;
	
	Пока ВыборкаИтоги.Следующий() Цикл		
		НомерСтрокиДляПечати = НомерСтрокиДляПечати + 1;
		Выборка = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			СтрокаТЧ = Объект[ИмяТЧ][Выборка.НомерСтроки - 1];
			СтрокаТЧ.НомерСтрокиДляПечати = НомерСтрокиДляПечати;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОбОчисткеТабличнойЧасти(ОписаниеОповещения)
	ТекстВопроса = 
	"Табличная часть будет очищена.
	|Продолжить?";
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да); 
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогСуммыАванса(СтрокаПД)
	СтрокиАвансов = Объект.Авансы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаПД.КлючСвязи));
	текСуммаАвансаВВалютеКонтракта = 0;
	Для Каждого СтрокаАванса Из СтрокиАвансов Цикл
		текСуммаАвансаВВалютеКонтракта = текСуммаАвансаВВалютеКонтракта + СтрокаАванса.СуммаАвансаВВалютеКонтракта;
	КонецЦикла;
	Если СтрокаПД.ВалютаДокумента = Объект.КонтрактВЭД.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		СтрокаПД.СуммаАвансаВВалютеДокумента = текСуммаАвансаВВалютеКонтракта;
		СтрокаПД.СуммаАвансаВВалютеКонтракта = 0;
	Иначе
		СтрокаПД.СуммаАвансаВВалютеДокумента = РЭЙ_СлужебныйСервер.ПересчитатьИзВалютыВВалюту(текСуммаАвансаВВалютеКонтракта, СтрокаПД.Документ.Дата, СтрокаПД.ВалютаКонтракта, СтрокаПД.ВалютаДокумента);
		СтрокаПД.СуммаАвансаВВалютеКонтракта = текСуммаАвансаВВалютеКонтракта;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиАвансовБезСвязей()
	т = 0;
	Пока т < Объект.Авансы.Количество() Цикл
		Если Объект.ПодтверждающиеДокументы.НайтиСтроки(Новый Структура("КлючСвязи", Объект.Авансы[т].КлючСвязи)).Количество() = 0 Тогда
			Объект.Авансы.Удалить(т);
		Иначе
			т = т + 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция МетаданныеДокументыНайтиВид(Вид)
	Возврат Метаданные.Документы.Найти(Вид) <> Неопределено;
КонецФункции	

&НаСервере
Функция НайтиДокументСписанияДС(ДокументСсылка)
	Если ЗначениеЗаполнено(ДокументСсылка.ДокументОснование) И 
		ВРег(ДокументСсылка.ДокументОснование.Метаданные().Имя) = Врег("СписаниеСРасчетногоСчета") Тогда
		
		Возврат ДокументСсылка.ДокументОснование;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДокСписания.Ссылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК ДокСписания
	|ГДЕ
	|	ДокСписания.ДокументОснование = &ДокументСсылка
	|	И ДокСписания.Проведен";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Следующий() Тогда
		НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
	КонецЕсли;
	
	Возврат НайденныйДокумент;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыВыбора(Ссылка)
	ИмяМетаданных = Ссылка.Метаданные().Имя;
   	СтрокаИмениФормы = "Документ."+ИмяМетаданных+".ФормаВыбора";
	
	Возврат	СтрокаИмениФормы;
КонецФункции	

&НаСервере
Функция ПолучитьМассивДоговоровДляКонтрактаВЭД()
	Если Объект.КонтрактВЭД.РамочныйКонтракт Тогда
		ДанныеПоДопСоглашениям = РегистрыСведений.РЭЙ_ДопСоглашения.СоздатьНаборЗаписей();
		ДанныеПоДопСоглашениям.Отбор.Договор.Установить(Объект.КонтрактВЭД);
		ДанныеПоДопСоглашениям.Прочитать();	
		МассивДоговоров = ДанныеПоДопСоглашениям.ВыгрузитьКолонку("ДопСоглашение");
	Иначе
		МассивДоговоров = Новый Массив;
	КонецЕсли;
	
	МассивДоговоров.Добавить(Объект.КонтрактВЭД.ДоговорКонтрагента);
	
	Возврат МассивДоговоров;
КонецФункции

&НаСервере
Функция ПолучитьСписокЗначенийИзОписанияТипов(текОписаниеТипов)
	СписокТипов = Новый СписокЗначений;
	
	Для Каждого текТип Из текОписаниеТипов.Типы() Цикл
		текМетаданные = Метаданные.НайтиПоТипу(текТип);
		СписокТипов.Добавить(текТип, текМетаданные.Представление());
	КонецЦикла;
	
	Возврат СписокТипов;
КонецФункции

&НаКлиенте
Функция ПолучитьСтрокуТипов(Стр)
	Массив = Новый Массив;
	
	Пока Найти(Стр, ",") > 0 Цикл
		ВидДок = Лев(Стр, Найти(Стр, ",") - 1);
		Стр = Сред(Стр, Найти(Стр, ",") + 1);
		Массив.Добавить(ВидДок);
	КонецЦикла;
	
	Массив.Добавить(Стр);
	
	СтрТипов = "";
	
	Для К = 0 По Массив.Количество() - 1 Цикл
		Вид = Массив[К];
		Если МетаданныеДокументыНайтиВид(Вид) Тогда
			СтрТипов = СтрТипов + ?(СокрЛП(СТрТипов) = "", "", ",") + "ДокументСсылка." + Вид;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрТипов;
КонецФункции

&НаСервере
Функция СформироватьДанныеДокументаДляВыбораАвансовойСправки()
	ДанныеТекущегоДокумента = Объект.Авансы.Выгрузить(, "АвансоваяСправка, АвансовыйРасчетныйДокумент, СуммаАвансаВВалютеКонтракта");
	Возврат ПоместитьВоВременноеХранилище(ДанныеТекущегоДокумента, Новый УникальныйИдентификатор);
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьМассивДляВыбораДопСоглашения(текКонтрактВЭД)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РЭЙ_ДопСоглашения.ДопСоглашение
	|ИЗ
	|	РегистрСведений.РЭЙ_ДопСоглашения КАК РЭЙ_ДопСоглашения
	|ГДЕ
	|	РЭЙ_ДопСоглашения.Договор = &КонтрактВЭД";
	Запрос.УстановитьПараметр("КонтрактВЭД", текКонтрактВЭД);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДопСоглашение");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
