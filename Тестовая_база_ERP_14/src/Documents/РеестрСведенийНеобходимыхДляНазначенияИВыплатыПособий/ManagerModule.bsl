#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ДляВсехСтрок( ЗначениеРазрешено(ФизическиеЛица.ФизическоеЛицо, NULL КАК ИСТИНА)
	|	) И ЗначениеРазрешено(Организация)";
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает описание состава документа
//
// Возвращаемое значение:
//  Структура - см. ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента.
Функция ОписаниеСоставаДокумента() Экспорт
	
	ОписаниеСостава = ЗарплатаКадрыСоставДокументов.НовоеОписаниеСоставаДокумента();
	ОписаниеСостава.ЗаполнятьФизическиеЛицаПоСотрудникам = Ложь;
	ОписаниеСостава.ИспользоватьКраткийСостав = Ложь;
	ОписаниеСостава.ЗаполнятьТабличнуюЧастьФизическиеЛицаДокумента = Ложь;
	
	ЗарплатаКадрыСоставДокументов.ДобавитьОписаниеХраненияСотрудниковФизическихЛиц(
		ОписаниеСостава.ОписаниеХраненияСотрудниковФизическихЛиц,
		"ФизическиеЛица",
		"ФизическоеЛицо");
		
	Возврат ОписаниеСостава;

КонецФункции

#Область ФиксацияВторичныхДанныхВДокументах

Функция ПараметрыФиксацииВторичныхДанных() Экспорт
	ФиксируемыеРеквизиты = ФиксируемыеРеквизиты();
	ФиксируемыеТЧ = Новый Структура("СведенияНеобходимыеДляНазначенияПособий", СтрРазделить("Заявление", ",", Ложь));
	Возврат ФиксацияВторичныхДанныхВДокументах.ПараметрыФиксацииВторичныхДанных(ФиксируемыеРеквизиты, , ФиксируемыеТЧ);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

Процедура ЗаполнитьТабличнуюЧастьФизическихЛицИНаборыЗначенийДоступа() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрФизическиеЛица.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ РеестрыСФизическимиЛицами
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ФизическиеЛица КАК РеестрФизическиеЛица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрСведения.Ссылка КАК Ссылка,
	|	ЗаявлениеСотрудника.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК РеестрСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудника
	|		ПО РеестрСведения.Заявление = ЗаявлениеСотрудника.Ссылка
	|ГДЕ
	|	НЕ РеестрСведения.Ссылка В
	|				(ВЫБРАТЬ
	|					РеестрыСФизическимиЛицами.Ссылка
	|				ИЗ
	|					РеестрыСФизическимиЛицами)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ФизическоеЛицо";
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
			Документ = Выборка.Ссылка.ПолучитьОбъект();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(Документ.ФизическиеЛица.Добавить(), Выборка, "ФизическоеЛицо");			
			КонецЦикла;
			Документ.ОбменДанными.Загрузка = Истина;
			Документ.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа", Истина);
			Документ.Записать(РежимЗаписиДокумента.Запись);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСсылкиВОтправках() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОтправки.Объект КАК Объект,
	|	СтатусыОтправки.Основание КАК Основание
	|ИЗ
	|	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
	|		ПО СтатусыОтправки.Основание = ОтправкиФСС.Ссылка
	|ГДЕ
	|	ОтправкиФСС.ОтчетСсылка = НЕОПРЕДЕЛЕНО
	|	И СтатусыОтправки.Объект ССЫЛКА Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
	|	И ОтправкиФСС.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.РеестрСведенийВФСС)";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументОбъект = Выборка.Основание.ПолучитьОбъект();
			ДокументОбъект.ОтчетСсылка = Выборка.Объект;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтправкиФСС.Ссылка КАК Ссылка,
	|	ОтправкиФСС.ИмяФайлаПакета КАК ИмяФайлаПакета,
	|	ОтправкиФСС.Организация КАК Организация
	|ИЗ
	|	Справочник.ОтправкиФСС КАК ОтправкиФСС
	|ГДЕ
	|	ОтправкиФСС.ОтчетСсылка = НЕОПРЕДЕЛЕНО
	|	И ОтправкиФСС.ИмяФайлаПакета <> """"
	|	И ОтправкиФСС.ВидОтчета = ЗНАЧЕНИЕ(Справочник.ВидыОтправляемыхДокументов.РеестрСведенийВФСС)";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ТаблицаПоискаДокументов = Новый ТаблицаЗначений;
		ТаблицаПоискаДокументов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ОтправкиФСС"));
		ТаблицаПоискаДокументов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаПоискаДокументов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
		ТаблицаПоискаДокументов.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11)));
		ТаблицаПоискаДокументов.Колонки.Добавить("ДлинаНомера", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(2,0)));
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Лев(Выборка.ИмяФайлаПакета, 2) = "E_" Тогда
				НоваяСтрока = ТаблицаПоискаДокументов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				СоставныеЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Выборка.ИмяФайлаПакета, "_");
				НоваяСтрока.Дата = Дата(СоставныеЧастиИмени[2], СоставныеЧастиИмени[3], СоставныеЧастиИмени[4]);
				НоваяСтрока.Номер = СтрЗаменить(СоставныеЧастиИмени[5], ".esl", "");
				НоваяСтрока.ДлинаНомера = СтрДлина(НоваяСтрока.Номер);
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ДанныеДокументов", ТаблицаПоискаДокументов);

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Данные.Ссылка КАК Ссылка,
		|	Данные.Организация КАК Организация,
		|	Данные.Номер КАК Номер,
		|	Данные.ДлинаНомера КАК ДлинаНомера,
		|	Данные.Дата КАК Дата
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	&ДанныеДокументов КАК Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДокументов.Ссылка КАК Отправка,
		|	ДанныеДокументов.Номер КАК ЧастьНомера,
		|	ДанныеДокументов.ДлинаНомера КАК ДлинаЧастиНомера,
		|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка КАК Ссылка,
		|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Номер КАК Номер
		|ИЗ
		|	ВТДанныеДокументов КАК ДанныеДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий
		|		ПО ДанныеДокументов.Организация = РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Организация
		|			И (ДанныеДокументов.Дата = НАЧАЛОПЕРИОДА(РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Дата, ДЕНЬ))
		|ГДЕ
		|	РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.Ссылка ЕСТЬ НЕ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	Отправка";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("Отправка") Цикл
			Пока Выборка.Следующий() Цикл
				Если Прав(Выборка.Номер, Выборка.ДлинаЧастиНомера) = Выборка.ЧастьНомера Тогда
					ДокументОбъект = Выборка.Отправка.ПолучитьОбъект();
					ДокументОбъект.ОтчетСсылка = Выборка.Ссылка;
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеФайла

Функция ПолучитьФайлДляОтправки(Ссылка, Отказ) Экспорт
	
	ОписаниеФайла = ПолучитьОписаниеФайла(Ссылка, Отказ);
	
	Если Отказ Тогда
		Возврат Неопределено
	КонецЕсли;
	
	ТекстФайла 	= ОписаниеФайла.ТекстФайла;
	ИмяФайла 	= ЗарплатаКадры.ЗаписатьФайлОтчетностиНаДиск(ОписаниеФайла.ИмяФайла, ТекстФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	ФайлДляОтправки = Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки, КодировкаФайлаВыгрузки");
	
	ФайлДляОтправки.ИмяФайлаВыгрузки 		= ОписаниеФайла.ИмяФайла+".xml";
	ФайлДляОтправки.АдресФайлаВыгрузки 		= СсылкаНаДвоичныеДанныеФайла;
	ФайлДляОтправки.ТипФайлаВыгрузки 		= "РеестрЗаявленийНаВыплатуПособийДляПередачиВФСС";
	ФайлДляОтправки.КодировкаФайлаВыгрузки 	= КодировкаТекста.ANSI;
	
	Возврат ФайлДляОтправки;
	
КонецФункции

Функция ПолучитьОписаниеФайла(Ссылка, Отказ) Экспорт
	
	ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокумента(Ссылка).Выбрать();
	ВыборкаПоШапкеДокумента.Следующий();
	
	ОписаниеРеестра  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Ссылка, ВидРеестра, Дата");
	
	ВыборкаСведенийДляРасчетаПособия = СформироватьЗапросСведенийДляРасчетаПособия(ОписаниеРеестра).Выбрать();
	
	ОписаниеФайла = Новый Структура("ИмяФайла, ТекстФайла, Описание");
	ОписаниеФайла.ИмяФайла = ИмяФайла(ВыборкаПоШапкеДокумента);
	ОписаниеФайла.ТекстФайла = СформироватьФайлРеестра(ОписаниеРеестра, Ссылка, Отказ, ВыборкаПоШапкеДокумента, ВыборкаСведенийДляРасчетаПособия);
	
	ПолноеИмяФайла = ЗарплатаКадры.ЗаписатьФайлОтчетностиНаДиск(ОписаниеФайла.ИмяФайла, ОписаниеФайла.ТекстФайла);
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ОписаниеФайла.Описание = Новый ОписаниеПередаваемогоФайла(ОписаниеФайла.ИмяФайла + ".xml", ПоместитьВоВременноеХранилище(ДвоичныеДанные));
	
	Возврат	ОписаниеФайла;
	
КонецФункции 

Функция СформироватьФайлРеестра(ОписаниеРеестра, Ссылка, Отказ, ВыборкаПоШапкеДокумента, ВыборкаСведенийДляРасчетаПособия)
	
	НачалоНомераСтроки = ИмяФайла(ВыборкаПоШапкеДокумента) + ":";
	
	НомерДокументаВПачке = 0;
	
	ROWSET = ПрямыеВыплатыПособийСоциальногоСтрахования.КорневойЭлементРеестраПилотногоПроектаФСС();
	
	ROWSET.author 			= ?(ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ФИОСоставителя), ВыборкаПоШапкеДокумента.ФИОСоставителя, "");
	ROWSET.version 			= "1.7.6";
	ROWSET.software 		= Лев(РегламентированнаяОтчетность.НазваниеПрограммы(), 255);
	ROWSET.version_software = Лев(Метаданные.Версия, 15);
	ROWSET.phone 			= ВыборкаПоШапкеДокумента.ТелефонСоставителя;
	ROWSET.email 			= ВыборкаПоШапкеДокумента.АдресЭлектроннойПочтыСоставителя;
	ROWSET.EMPL_OGRN 		= ВыборкаПоШапкеДокумента.ОГРНОрганизации;
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Организация, "ОбособленноеПодразделение")  Тогда
		ROWSET.EMPL_REG_NO  = ВыборкаПоШапкеДокумента.ДополнительныйКодФСС;
	Иначе
		ROWSET.EMPL_REG_NO  = ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС;
	КонецЕсли;
	ROWSET.EMPL_KPP 		= ВыборкаПоШапкеДокумента.КППОрганизации;
	ROWSET.EMPL_INN 		= ВыборкаПоШапкеДокумента.ИННОрганизации;
	
	СписокROW = ПрямыеВыплатыПособийСоциальногоСтрахования.СписокЭлементовРеестраПилотногоПроектаФСС(ROWSET);
	
	СписокФизлиц = Новый Массив;
	СписокФизлиц.Добавить(ВыборкаПоШапкеДокумента.Руководитель);
	СписокФизлиц.Добавить(ВыборкаПоШапкеДокумента.ГлавныйБухгалтер);
	
	КадровыеДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, СписокФизлиц, "ФИОПолные");
	КадровыеДанныеРуководителя       = КадровыеДанныеФизическихЛиц.Найти(ВыборкаПоШапкеДокумента.Руководитель,     "ФизическоеЛицо");
	КадровыеДанныеГлавногоБухгалтера = КадровыеДанныеФизическихЛиц.Найти(ВыборкаПоШапкеДокумента.ГлавныйБухгалтер, "ФизическоеЛицо");
	Если КадровыеДанныеРуководителя <> Неопределено И ЗначениеЗаполнено(КадровыеДанныеРуководителя.ФИОПолные) Тогда
		ФИОРуководителя = КадровыеДанныеРуководителя.ФИОПолные;
	Иначе
		ФИОРуководителя = Строка(ВыборкаПоШапкеДокумента.Руководитель);
	КонецЕсли;
	
	Пока ВыборкаСведенийДляРасчетаПособия.Следующий() Цикл
		
		НомерДокументаВПачке = НомерДокументаВПачке + 1;
		
		ROW = ПрямыеВыплатыПособийСоциальногоСтрахования.ЭлементРеестраПилотногоПроектаФСС(ROWSET);
		ROW.BATCH_NO       = НачалоНомераСтроки + Формат(НомерДокументаВПачке, "ЧЦ=10; ЧГ=");
		ROW.EMPLOYER       = ВыборкаПоШапкеДокумента.ОрганизацияСокращенно;
		ROW.EMPL_OGRN      = ВыборкаПоШапкеДокумента.ОГРНОрганизации;
		ROW.EMPL_PARENT_NO = ВыборкаПоШапкеДокумента.КодПодчиненностиФСС;
		ROW.EMPL_KPP       = ВыборкаПоШапкеДокумента.КППОрганизации;
		ROW.EMPL_INN       = ВыборкаПоШапкеДокумента.ИННОрганизации;
		ROW.APPROVE1       = ФИОРуководителя;
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка.Организация, "ОбособленноеПодразделение")  Тогда
			ROW.EMPL_REG_NO = ВыборкаПоШапкеДокумента.ДополнительныйКодФСС;
		Иначе
			ROW.EMPL_REG_NO = ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС;
		КонецЕсли;
		Если КадровыеДанныеГлавногоБухгалтера <> Неопределено И ЗначениеЗаполнено(КадровыеДанныеГлавногоБухгалтера.ФИОПолные) Тогда
			ROW.APPROVE2 = КадровыеДанныеГлавногоБухгалтера.ФИОПолные;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ДолжностьРуководителя) Тогда
			ROW.APPROVE1_ROLE = ВыборкаПоШапкеДокумента.ДолжностьРуководителя;
		КонецЕсли;
		
		ЗаполнитьСтрокуРеестра(ROW, ВыборкаСведенийДляРасчетаПособия);
		
		СписокROW.Добавить(ROW);
		
	КонецЦикла;
	
	СтрокаXML = ПрямыеВыплатыПособийСоциальногоСтрахования.ЗаписатьРеестрВСтрокуXML(ROWSET);
	
	Возврат СтрокаXML;
	
КонецФункции 

Функция ПредставлениеСтатусаНалогоплательщикаДляРеестра(СтатусНалогоплательщикаПолучателя)
	
	ПредставлениеСтатусаНалогоплательщика = 0;
	
	Если СтатусНалогоплательщикаПолучателя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент") Тогда
		ПредставлениеСтатусаНалогоплательщика = 1;	
	ИначеЕсли СтатусНалогоплательщикаПолучателя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент") Тогда
		ПредставлениеСтатусаНалогоплательщика = 2;	
	КонецЕсли;
	
	Возврат ПредставлениеСтатусаНалогоплательщика;
	
КонецФункции

Процедура ЗаполнитьСтрокуРеестра(ROW, СтруктураДанных)
	
	Если Не СтруктураДанных.Перерасчет Тогда
		ROW.TYPE_INFO = "0";
	Иначе
		ROW.TYPE_INFO = "1";
		ROW.RECALC_REASON_CODE = Число("0"+СтруктураДанных.КодПричиныПерерасчета);
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Тогда
		ROW.FSS_PAYMENT_FLAG = ?(ЗначениеЗаполнено(СтруктураДанных.ДатаНачалаОплаты), 1, 0);
	КонецЕсли;
	
	ROW.DOC_TYPE   = СтруктураДанных.ВидВыплаты;
	ROW.DOC_DT1    = СтруктураДанных.ДатаПредставленияПакетаДокументов;
	ROW.SNILS      = СтрЗаменить(СтрЗаменить(СтруктураДанных.СтраховойНомерПФР, "-","")," ","");
	ROW.INN_PERSON = СтруктураДанных.ИНН;
	ROW.SURNAME    = СтруктураДанных.Фамилия;
	ROW.NAME       = СтруктураДанных.Имя;
	ROW.PATRONIMIC = СтруктураДанных.Отчество;
	
	ROW.RESIDENT_FLAG = ПредставлениеСтатусаНалогоплательщикаДляРеестра(СтруктураДанных.СтатусНалогоплательщикаПолучателя);
	
	ROW.RESIDENT_CODE = СтруктураДанных.КодСтраны;
	ROW.BIRTHDAY      = СтруктураДанных.ДатаРождения;
	ROW.GENDER        = Формат(СтруктураДанных.Пол = Перечисления.ПолФизическогоЛица.Женский, "БЛ=0; БИ=1");
	ROW.ID_TYPE       = СтруктураДанных.ВидУдостоверенияЛичности;
	ROW.ID_NO         = СтруктураДанных.СерияДокумента + " " + СтруктураДанных.НомерДокумента;
	ROW.ID_DT         = СтруктураДанных.ДатаВыдачиДокумента;
	ROW.ID_DEPT       = СокрЛП(СтруктураДанных.КемВыданДокумент);
	ROW.OWNER_FLAG    = 1;
	
	ROW.EMPL_FLAG = Формат(СтруктураДанных.Совместительство, "БЛ=1; БИ=0");
	
	// Приказ страхователя:
	// 1 - о досрочном выходе на работу;
	// 2 - о прекращении трудовых отношений.
	Если СтруктураДанных.ДосрочноеПрекращениеОтпускаПоУходуТипПриказа = Перечисления.СостоянияСотрудника.Работа Тогда
		HOLID_TYPE = "1";
	ИначеЕсли СтруктураДанных.ДосрочноеПрекращениеОтпускаПоУходуТипПриказа = Перечисления.СостоянияСотрудника.Увольнение Тогда
		HOLID_TYPE = "2";
	Иначе
		HOLID_TYPE = Неопределено;
	КонецЕсли;
	Если HOLID_TYPE <> Неопределено Тогда
		ROW.HOLID_TYPE  = HOLID_TYPE;
		ROW.HOLID_NO    = СтруктураДанных.ДосрочноеПрекращениеОтпускаПоУходуНомерПриказа;
		ROW.HOLID_DT    = СтруктураДанных.ДосрочноеПрекращениеОтпускаПоУходуДатаПриказа;
		ROW.HOLID_DT_EX = СтруктураДанных.ДосрочноеПрекращениеОтпускаПоУходуДатаПрекращенияОплаты;
	КонецЕсли;
	
	// Извещение о представлении недостающих сведений в ФСС;
	// Решение об отказе в назначении пособия:
	Если СтруктураДанных.Перерасчет И ЗначениеЗаполнено(СтруктураДанных.ИзвещениеИзФССНомер) Тогда
		ROW.RESP_NO = СтруктураДанных.ИзвещениеИзФССНомер;
		ROW.RESP_DT = СтруктураДанных.ИзвещенияИзФССДата;
	КонецЕсли;
	
	Если СтруктураДанных.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ПочтовымПереводом Тогда
		ROW.PAYMENT_TYPE = "0"; // Способ выплаты: почтовый перевод.
		
		ТипАдреса = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;
		ОписаниеАдреса = УчетПособийСоциальногоСтрахования.ОписаниеАдреса(СтруктураДанных.АдресПолучателяФактический, ТипАдреса);
		
		ROW.POST_INDEX 		= ОписаниеАдреса.Индекс;
		ROW.ADDR_A1 		= ОписаниеАдреса.Регион;
		ROW.ADDR_A2 		= ОписаниеАдреса.Район;
		ROW.ADDR_A3 		= ОписаниеАдреса.Город;
		ROW.ADDR_A4 		= ОписаниеАдреса.НаселенныйПункт;
		ROW.ADDR_A5 		= ОписаниеАдреса.Улица;
		ROW.ADDR_HOUSE 		= ОписаниеАдреса.Дом;
		ROW.ADDR_BUILDING 	= ОписаниеАдреса.Корпус;
		ROW.ADDR_FLAT 		= ОписаниеАдреса.Квартира;
		
		ROW.ADDR_KLADR 		= "#" + СтруктураДанных.АдресПолучателяФактическийКодКЛАДР;
		ROW.ADDR_GUID 		= СтруктураДанных.АдресПолучателяФактическийИдентификаторФИАС;
		
	Иначе
		Если СтруктураДанных.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.НаКартуМИР Тогда
			ROW.PAYMENT_TYPE = "2"; // Способ выплаты: банковский счет (карта МИР).
			ROW.PAYCARD_NUM  = СтруктураДанных.НомерКартыМИР;
			ЗаполнятьБанковскиеРеквизиты = ЗначениеЗаполнено(СтруктураДанных.НомерЛицевогоСчета);
		ИначеЕсли СтруктураДанных.СпособВыплатыПособия = Перечисления.СпособыВыплатыПособия.ЧерезБанк Тогда
			ROW.PAYMENT_TYPE = "1"; // Способ выплаты: банковский счет (расчетный счет).
			ЗаполнятьБанковскиеРеквизиты = Истина;
		КонецЕсли;
		Если ЗаполнятьБанковскиеРеквизиты Тогда
			ROW.ACCOUNT_BIC  = СтруктураДанных.БИКБанка;
			ROW.ACCOUNT_NAME = СтруктураДанных.НаименованиеБанка;
			ROW.ACCOUNT      = ОставитьТолькоЦифрыВСтроке(СтруктураДанных.НомерЛицевогоСчета);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.АдресПолучателяРегистрации) Тогда
		Если СтруктураДанных.СтатусНалогоплательщикаПолучателя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатусыНалогоплательщиковПоНДФЛ.Резидент") Тогда	
			
			ТипАдреса = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ОписаниеАдреса = УчетПособийСоциальногоСтрахования.ОписаниеАдреса(СтруктураДанных.АдресПолучателяРегистрации, ТипАдреса);
			
			ROW.POST_INDEX2 		= ОписаниеАдреса.Индекс;
			ROW.ADDR2_A1 			= ОписаниеАдреса.Регион;
			ROW.ADDR2_A2 			= ОписаниеАдреса.Район;
			ROW.ADDR2_A3 			= ОписаниеАдреса.Город;
			ROW.ADDR2_A4 			= ОписаниеАдреса.НаселенныйПункт;
			ROW.ADDR2_A5 			= ОписаниеАдреса.Улица;
			ROW.ADDR2_HOUSE 		= ОписаниеАдреса.Дом;
			ROW.ADDR2_BUILDING 		= ОписаниеАдреса.Корпус;
			ROW.ADDR2_FLAT 			= ОписаниеАдреса.Квартира;
			
			ROW.ADDR2_KLADR 		= "#" + СтруктураДанных.АдресПолучателяРегистрацииКодКЛАДР;
			ROW.ADDR2_GUID 			= СтруктураДанных.АдресПолучателяРегистрацииИдентификаторФИАС;
			
		Иначе
			
			ТипАдреса = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;
			ROW.ADDR2 = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(СтруктураДанных.АдресПолучателяРегистрации, ТипАдреса);
			
		КонецЕсли;
	КонецЕсли;
		
	Если СтруктураДанных.РайонныйКоэффициент >= 1.10 И СтруктураДанных.РайонныйКоэффициент <= 3 Тогда
		ROW.KF_REG = СтруктураДанных.РайонныйКоэффициент * 100;
	Иначе
		ROW.KF_REG = 100;
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Или СтруктураДанных.ВидВыплаты = "2" Тогда
		Если ЗначениеЗаполнено(СтруктураДанных.ПериодПростояС1) И ЗначениеЗаполнено(СтруктураДанных.ПериодПростояПо1)
			Или ЗначениеЗаполнено(СтруктураДанных.ПериодПростояС2) И ЗначениеЗаполнено(СтруктураДанных.ПериодПростояПо2) Тогда
			
			ТипPERIODS = ROW.Свойства().Получить("PERIODS").Тип;
			PERIODS = ФабрикаXDTO.Создать(ТипPERIODS);
			
			ТипPERIOD = PERIODS.Свойства().Получить("PERIOD").Тип;
			
			Если ЗначениеЗаполнено(СтруктураДанных.ПериодПростояС1) И ЗначениеЗаполнено(СтруктураДанных.ПериодПростояПо1) Тогда
				
				PERIOD = ФабрикаXDTO.Создать(ТипPERIOD);
				
				PERIOD.START_DATE 	= Формат(СтруктураДанных.ПериодПростояС1, "ДФ=yyyy-MM-dd");
				PERIOD.END_DATE 	= Формат(СтруктураДанных.ПериодПростояПо1, "ДФ=yyyy-MM-dd");
				PERIOD.IDLE_AVERAGE = СтруктураДанных.СреднийЗаработокНаПериодПростоя1;
				
				PERIODS.PERIOD.Добавить(PERIOD);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтруктураДанных.ПериодПростояС2) И ЗначениеЗаполнено(СтруктураДанных.ПериодПростояПо2) Тогда
				
				PERIOD = ФабрикаXDTO.Создать(ТипPERIOD);
				
				PERIOD.START_DATE 	= Формат(СтруктураДанных.ПериодПростояС2, "ДФ=yyyy-MM-dd");
				PERIOD.END_DATE 	= Формат(СтруктураДанных.ПериодПростояПо2, "ДФ=yyyy-MM-dd");
				PERIOD.IDLE_AVERAGE = СтруктураДанных.СреднийЗаработокНаПериодПростоя2;
				
				PERIODS.PERIOD.Добавить(PERIOD);
				
			КонецЕсли;
			
			ROW.PERIODS.Добавить(PERIODS);
			
		КонецЕсли;
		
		РазностьСтажей = УчетПособийСоциальногоСтрахования.ПодсчитатьРазностьСтажейВГодахИМесяцах(
			СтруктураДанных.СтажРасширенныйЛет,
			СтруктураДанных.СтажРасширенныйМесяцев,
			СтруктураДанных.СтажЛет,
			СтруктураДанных.СтажМесяцев);
		Если РазностьСтажей.РазностьЛет <> 0 Или РазностьСтажей.РазностьМесяцев <> 0 Тогда
			ROW.INSUR_YY = СтруктураДанных.СтажРасширенныйЛет;
			ROW.INSUR_MM = СтруктураДанных.СтажРасширенныйМесяцев;
			ROW.NOT_INSUR_YY = РазностьСтажей.РазностьЛет;
			ROW.NOT_INSUR_MM = РазностьСтажей.РазностьМесяцев;
		Иначе
			ROW.INSUR_YY = СтруктураДанных.СтажЛет;
			ROW.INSUR_MM = СтруктураДанных.СтажМесяцев;
		КонецЕсли;
		
		ROW.LN_CODE = СтруктураДанных.НомерВходящегоДокумента;
		ROW.LN_TYPE = Формат(СтруктураДанных.ЭтоЭЛН, "БЛ=0; БИ=1");
		ROW.LN_DATE = Формат(СтруктураДанных.ДатаВыдачиБольничного, "ДФ=yyyy-MM-dd");
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПервичногоБольничного) Тогда
			ROW.PREV_LN_CODE = СтруктураДанных.НомерПервичногоБольничного;
			ROW.PRIMARY_FLAG = 0;
		Иначе
			ROW.PRIMARY_FLAG = 1;
		КонецЕсли;
		ROW.DUPLICATE_FLAG = Формат(СтруктураДанных.ЯвляетсяДубликатом, "БЛ=0; БИ=1");
		ROW.LPU_NAME       = СтруктураДанных.НаименованиеЛПУ;
		ROW.LPU_OGRN       = СтруктураДанных.ОГРН_ЛПУ;
		ROW.LPU_ADDRESS    = СтруктураДанных.Адрес_ЛПУ;
		ROW.REASON1        = СтруктураДанных.КодПричиныНетрудоспособности;
		ROW.REASON2        = СтруктураДанных.ДополнительныйКодПричиныНетрудоспособности;
		ROW.REASON3        = СтруктураДанных.ВторойКодПричиныНетрудоспособности;
		Если СтруктураДанных.Совместительство Тогда
			ROW.PARENT_CODE = СтруктураДанных.НомерЛисткаПоОсновномуМестуРаботы;
		КонецЕсли;
		ROW.DATE1 			= Формат(СтруктураДанных.ДатаИзмененияКодаПричиныНетрудоспособности, "ДФ=yyyy-MM-dd");
		ROW.DATE2 			= Формат(СтруктураДанных.ДатаОкончанияПутевки, "ДФ=yyyy-MM-dd");
		ROW.VOUCHER_NO 		= СтруктураДанных.НомерПутевки;
		ROW.VOUCHER_OGRN 	= СтруктураДанных.ОГРН_Санатория;
		Если ЗначениеЗаполнено(СтруктураДанных.УходЗаРодственникомФИО1) Тогда
			ROW.SERV1_AGE 			= СтруктураДанных.УходЗаРодственникомЛет1;
			ROW.SERV1_MM 			= СтруктураДанных.УходЗаРодственникомМесяцев1;
			ROW.SERV1_RELATION_CODE = СтруктураДанных.УходЗаРодственникомРодственнаяСвязь1;
			ROW.SERV1_FIO 			= СтруктураДанных.УходЗаРодственникомФИО1;
			ROW.SERV1_DAYS 			= СтруктураДанных.УходЗаРодственникомИспользованоДней1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.УходЗаРодственникомФИО2) Тогда
			ROW.SERV2_AGE 			= СтруктураДанных.УходЗаРодственникомЛет2;
			ROW.SERV2_MM 			= СтруктураДанных.УходЗаРодственникомМесяцев2;
			ROW.SERV2_RELATION_CODE = СтруктураДанных.УходЗаРодственникомРодственнаяСвязь2;
			ROW.SERV2_FIO 			= СтруктураДанных.УходЗаРодственникомФИО2;
			ROW.SERV2_DAYS 			= СтруктураДанных.УходЗаРодственникомИспользованоДней2;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомС) И ЗначениеЗаполнено(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомПо) Тогда
			ROW.HOSPITAL_DT1 = Формат(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомС, "ДФ=yyyy-MM-dd");
			ROW.HOSPITAL_DT2 = Формат(СтруктураДанных.ПериодНахожденияВСтационареСРебенкомПо, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.КодНарушенияРежима) И ЗначениеЗаполнено(СтруктураДанных.ДатаНарушенияРежима) Тогда
			ROW.HOSPITAL_BREACH_CODE = СтруктураДанных.КодНарушенияРежима;
			ROW.HOSPITAL_BREACH_DT   = Формат(СтруктураДанных.ДатаНарушенияРежима, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		ROW.MSE_DT1 = Формат(СтруктураДанных.ДатаНаправленияВБюроМСЭ, "ДФ=yyyy-MM-dd");
		ROW.MSE_DT2 = Формат(СтруктураДанных.ДатаРегистрацииДокументовМСЭ, "ДФ=yyyy-MM-dd");
		ROW.MSE_DT3 = Формат(СтруктураДанных.ДатаОсвидетельствованияМСЭ, "ДФ=yyyy-MM-dd");
		Если ЗначениеЗаполнено(СтруктураДанных.ГруппаИнвалидности) Тогда
			ROW.MSE_INVALID_GROUP = СтруктураДанных.ГруппаИнвалидности;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДнейБолезниИнвалида) Тогда
			ROW.MSE_INVALID_DAYS = СтруктураДанных.ДнейБолезниИнвалида;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НовыйСтатусНетрудоспособного) Тогда
			ROW.MSE_RESULT = СтруктураДанных.НовыйСтатусНетрудоспособного;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС1) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо1) Тогда
			ROW.TREAT1_DT1          = Формат(СтруктураДанных.ОсвобождениеС1, "ДФ=yyyy-MM-dd");
			ROW.TREAT1_DT2          = Формат(СтруктураДанных.ОсвобождениеПо1, "ДФ=yyyy-MM-dd");
			ROW.TREAT1_DOCTOR_ROLE  = СтруктураДанных.ДолжностьВрача1;
			ROW.TREAT1_DOCTOR       = СтруктураДанных.ФИОВрача1;
			ROW.TREAT1_DOC_ID       = СтруктураДанных.ИдентификационныйНомерВрача1;
			ROW.TREAT1_DOCTOR2_ROLE = СтруктураДанных.ДолжностьВрачаПредседателяВК1;
			ROW.TREAT1_CHAIRMAN_VK  = СтруктураДанных.ФИОВрачаПредседателяВК1;
			ROW.TREAT1_DOC2_ID      = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК1;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС2) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо2) Тогда
			ROW.TREAT2_DT1          = Формат(СтруктураДанных.ОсвобождениеС2, "ДФ=yyyy-MM-dd");
			ROW.TREAT2_DT2          = Формат(СтруктураДанных.ОсвобождениеПо2, "ДФ=yyyy-MM-dd");
			ROW.TREAT2_DOCTOR_ROLE  = СтруктураДанных.ДолжностьВрача2;
			ROW.TREAT2_DOCTOR       = СтруктураДанных.ФИОВрача2;
			ROW.TREAT2_DOC_ID       = СтруктураДанных.ИдентификационныйНомерВрача2;
			ROW.TREAT2_DOCTOR2_ROLE = СтруктураДанных.ДолжностьВрачаПредседателяВК2;
			ROW.TREAT2_CHAIRMAN_VK  = СтруктураДанных.ФИОВрачаПредседателяВК2;
			ROW.TREAT2_DOC2_ID      = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК2;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеС3) И ЗначениеЗаполнено(СтруктураДанных.ОсвобождениеПо3) Тогда
			ROW.TREAT3_DT1          = Формат(СтруктураДанных.ОсвобождениеС3, "ДФ=yyyy-MM-dd");
			ROW.TREAT3_DT2          = Формат(СтруктураДанных.ОсвобождениеПо3, "ДФ=yyyy-MM-dd");
			ROW.TREAT3_DOCTOR_ROLE  = СтруктураДанных.ДолжностьВрача3;
			ROW.TREAT3_DOCTOR       = СтруктураДанных.ФИОВрача3;
			ROW.TREAT3_DOC_ID       = СтруктураДанных.ИдентификационныйНомерВрача3;
			ROW.TREAT3_DOCTOR2_ROLE = СтруктураДанных.ДолжностьВрачаПредседателяВК3;
			ROW.TREAT3_CHAIRMAN_VK  = СтруктураДанных.ФИОВрачаПредседателяВК3;
			ROW.TREAT3_DOC2_ID      = СтруктураДанных.ИдентификационныйНомерВрачаПредседателяВК3;
		КонецЕсли;
		ROW.OTHER_STATE_DT 			= Формат(СтруктураДанных.ДатаНовыйСтатусНетрудоспособного, "ДФ=yyyy-MM-dd");
		ROW.RETURN_DATE_LPU 		= Формат(СтруктураДанных.ДатаВыходаНаРаботу, "ДФ=yyyy-MM-dd");
		ROW.NEXT_LN_CODE 			= СтруктураДанных.НомерЛисткаПродолжения;
		ROW.CALC_CONDITION1 		= СтруктураДанных.УсловияИсчисленияКод1;
		ROW.CALC_CONDITION2 		= СтруктураДанных.УсловияИсчисленияКод2;
		ROW.CALC_CONDITION3 		= СтруктураДанных.УсловияИсчисленияКод3;
		Если СтруктураДанных.УсловияИсчисленияКод1 = "43" Или СтруктураДанных.УсловияИсчисленияКод2 = "43" Или СтруктураДанных.УсловияИсчисленияКод3 = "43" Тогда
			Если СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль Тогда
				ROW.CODE_NUCLEAR 	= 1;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск Тогда
				ROW.CODE_NUCLEAR 	= 2;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк Тогда
				ROW.CODE_NUCLEAR 	= 3;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска Тогда
				ROW.CODE_NUCLEAR	= 4;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаАктаФормыН1) Тогда
			ROW.FORM1_DT 			= Формат(СтруктураДанных.ДатаАктаФормыН1, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаНачалаРаботы) Тогда
			ROW.RETURN_DATE_EMPL 	= Формат(СтруктураДанных.ДатаНачалаРаботы, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СрочныйДоговорС) И ЗначениеЗаполнено(СтруктураДанных.СрочныйДоговорПо) Тогда
			ROW.WORK_CONTRACT_START_DT 	= Формат(СтруктураДанных.СрочныйДоговорС, "ДФ=yyyy-MM-dd");
			ROW.WORK_CONTRACT_FINISH_DT = Формат(СтруктураДанных.СрочныйДоговорПо, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаНачалаОплаты) Тогда
			ROW.DT1 = Формат(СтруктураДанных.ДатаНачалаОплаты, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаОкончанияОплаты) Тогда
			ROW.DT2 = Формат(СтруктураДанных.ДатаОкончанияОплаты, "ДФ=yyyy-MM-dd");
		КонецЕсли;		
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияРаботодателя) Тогда
			ROW.EMPL_PAYMENT 	= СтруктураДанных.СуммаПособияРаботодателя;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияФСС) Тогда
			ROW.FSS_PAYMENT		= СтруктураДанных.СуммаПособияФСС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.СуммаПособияВсего) Тогда
			ROW.PAYMENT 		= СтруктураДанных.СуммаПособияВсего;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "2" Тогда
		Если СтруктураДанных.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам
			И СтруктураДанных.ПоставленаНаУчетВРанниеСрокиБеременности = Перечисления.ПостановкаНаУчетВРанниеСрокиБеременности.НеИзвестно Тогда
			ROW.PREGN12W_FLAG = "2";
		Иначе
			ROW.PREGN12W_FLAG = "0";
		КонецЕсли;
	ИначеЕсли СтруктураДанных.ВидВыплаты = "3" Тогда
		ROW.PREGN12W_FLAG = "1";
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "1" Или СтруктураДанных.ВидВыплаты = "2" Или СтруктураДанных.ВидВыплаты = "5" Тогда
		ROW.BASE_AVG_DAILY_SAL = СтруктураДанных.СреднийДневнойЗаработок;
		Если СтруктураДанных.ПорядокРасчетаСреднегоЗаработка = Перечисления.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.СреднийЗаработок Тогда
			ROW.YEAR1 = СтруктураДанных.ПервыйГодРасчета;
			ROW.YEAR2 = СтруктураДанных.ВторойГодРасчета;
			
			Если СтруктураДанных.ЗамененыКалендарныеГодыРасчетаСреднегоЗаработка Тогда
				ROW.YEAR_CHANGE_FLAG = 1;
				ROW.YEAR1_OLD = СтруктураДанных.ЗамененныйПервыйГодРасчета;
				ROW.YEAR2_OLD = СтруктураДанных.ЗамененныйВторойГодРасчета;
			Иначе
				ROW.YEAR_CHANGE_FLAG = 0;
			КонецЕсли;
			
			ROW.BASE_CALC_DAYS = СтруктураДанных.КалендарныхДнейРасчетногоПериода;
			ROW.BASE_SUM1 = СтруктураДанных.ЗаработокПервыйГодРасчета;
			ROW.BASE_SUM2 = СтруктураДанных.ЗаработокВторойГодРасчета;
			ROW.BASE_AVG_SAL = СреднийЗаработокЗаДваКалендарныхГода(СтруктураДанных);
		КонецЕсли;
		Если СтруктураДанных.ДоляВремени > 0 И СтруктураДанных.ДоляВремени < 1 Тогда
			ROW.KF_SHORT_DAY = Окр(СтруктураДанных.ДоляВремени, 3);
		Иначе
			ROW.KF_SHORT_DAY = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "3" Тогда
		ROW.REF_12WEEK_NO = СтруктураДанных.НомерСправкиБеременной;
		ROW.REF_12WEEK_DT = Формат(СтруктураДанных.ДатаСправкиБеременной, "ДФ=yyyy-MM-dd");
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "4" Тогда
		
		Если ЗначениеЗаполнено(СтруктураДанных.ВидСправкиОРожденииРебенка) И ЗначениеЗаполнено(СтруктураДанных.НомерСправки) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправки) Тогда
			Если СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма24 Тогда
				ВидСправкиОРожденииРебенка = "24"; 
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма25 Тогда
				ВидСправкиОРожденииРебенка = "25"; 
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма26 Тогда
				ВидСправкиОРожденииРебенка = "26"; 
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма1 Тогда
				ВидСправкиОРожденииРебенка = "48";
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма2 Тогда
				ВидСправкиОРожденииРебенка = "49";
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма3 Тогда
				ВидСправкиОРожденииРебенка = "50";
			ИначеЕсли СтруктураДанных.ВидСправкиОРожденииРебенка = Перечисления.ФормыСправкиОРожденииРебенка.Форма4 Тогда
				ВидСправкиОРожденииРебенка = "51"; 
			КонецЕсли;	
			ROW.REF_TYPE = ВидСправкиОРожденииРебенка;
			ROW.REF_24_NO = СтруктураДанных.НомерСправки;
			ROW.REF_24_DT = Формат(СтруктураДанных.ДатаСправки, "ДФ=yyyy-MM-dd");
		Иначе 	
			Если ЗначениеЗаполнено(СтруктураДанных.ДокументОРожденииДатаВыдачи) Тогда
				ROW.O_CERT_NO = СтруктураДанных.ДокументОРожденииСерияНомер;
				ROW.O_CERT_DT = Формат(СтруктураДанных.ДокументОРожденииДатаВыдачи, "ДФ=yyyy-MM-dd");
			Иначе
				ROW.O_CERT_NO = ?(ЗначениеЗаполнено(СтруктураДанных.НомерИногоПодтвержденияРождения), СтруктураДанных.НомерИногоПодтвержденияРождения, "00000000");
				ROW.O_CERT_DT = ?(ЗначениеЗаполнено(СтруктураДанных.ДатаИногоПодтвержденияРождения), Формат(СтруктураДанных.ДатаИногоПодтвержденияРождения, "ДФ=yyyy-MM-dd"), Формат(СтруктураДанных.ДатаРожденияРебенка, "ДФ=yyyy-MM-dd"));								
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерДоговораОПередачеНаВоспитание) И ЗначениеЗаполнено(СтруктураДанных.ДатаДоговораОПередачеНаВоспитание) Тогда
			ROW.REF_FAMILY_NO = СтруктураДанных.НомерДоговораОПередачеНаВоспитание;
			ROW.REF_FAMILY_DT = Формат(СтруктураДанных.ДатаДоговораОПередачеНаВоспитание, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		ROW.REF_NPAY_OTHER_NO = СтруктураДанных.НомерСправкиОтДругогоРодителя;
		ROW.REF_NPAY_OTHER_DT = Формат(СтруктураДанных.ДатаСправкиОтДругогоРодителя, "ДФ=yyyy-MM-dd"); 
		
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "4" Или СтруктураДанных.ВидВыплаты = "5" Тогда
		
		ROW.CERT_BR = Формат(СтруктураДанных.ДатаРожденияРебенка, "ДФ=yyyy-MM-dd");
		ROW.CERT_SURNAME = СтруктураДанных.ФамилияРебенка;
		ROW.CERT_NAME = СтруктураДанных.ИмяРебенка;
		ROW.CERT_PATRONIMIC = СтруктураДанных.ОтчествоРебенка;
		Если ЗначениеЗаполнено(СтруктураДанных.УсыновлениеОпека) Тогда
			ROW.WARD_FLAG = СтруктураДанных.УсыновлениеОпека;
			ROW.WARD_REF_NO = СтруктураДанных.УсыновлениеОпекаСерияНомер;
			ROW.WARD_REF_DT = Формат(СтруктураДанных.УсыновлениеОпекаДатаВыдачи,"ДФ=yyyy-MM-dd");
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураДанных.ВидВыплаты = "5" Тогда
		
		ROW.HOLID_DT_ST = Формат(СтруктураДанных.ДатаНачала, "ДФ=yyyy-MM-dd");
		ROW.HOLID_DT_FN = Формат(СтруктураДанных.ДатаОкончания, "ДФ=yyyy-MM-dd");
		ROW.MULTPATR = Формат(СтруктураДанных.ОдновременныйУходЗаНесколькимиДетьми,"БЛ=0; БИ=1");
		ROW.CHILD_SER = СтруктураДанных.Очередность;
		ROW.MH_OUT = Формат(СтруктураДанных.НаличиеРешенияСудаОЛишенииПрав,"БЛ=0; БИ=1");
		ROW.OTHER_CHILD_FLAG_DT = Формат(СтруктураДанных.НаличиеДокументаОСмерти,"БЛ=0; БИ=1");
		ROW.OTHER_CHILD_FLAG_BR = Формат(СтруктураДанных.НаличиеДокументаОРождении,"БЛ=0; БИ=1");
		
		Если СтруктураДанных.ДокументОРожденииВид = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОРождении Тогда
			ROW.CERT_NO = СтруктураДанных.ДокументОРожденииСерияНомер;
			ROW.CERT_DT = Формат(СтруктураДанных.ДокументОРожденииДатаВыдачи, "ДФ=yyyy-MM-dd");
		Иначе
			Если ЗначениеЗаполнено(СтруктураДанных.ДокументОРожденииДатаВыдачи) Тогда
				ROW.O_CERT_NO = СтруктураДанных.ДокументОРожденииСерияНомер;
				ROW.O_CERT_DT = Формат(СтруктураДанных.ДокументОРожденииДатаВыдачи, "ДФ=yyyy-MM-dd");
			Иначе
				ROW.O_CERT_NO = ?(ЗначениеЗаполнено(СтруктураДанных.НомерИногоПодтвержденияРождения), СтруктураДанных.НомерИногоПодтвержденияРождения, "00000000");
				ROW.O_CERT_DT = ?(ЗначениеЗаполнено(СтруктураДанных.ДатаИногоПодтвержденияРождения), Формат(СтруктураДанных.ДатаИногоПодтвержденияРождения, "ДФ=yyyy-MM-dd"), Формат(СтруктураДанных.ДатаРожденияРебенка, "ДФ=yyyy-MM-dd"));								
			КонецЕсли;
		КонецЕсли;
		Если СтруктураДанных.ОдновременныйУходЗаНесколькимиДетьми Тогда
			ROW.AVG_SAL = Окр(СтруктураДанных.СреднийДневнойЗаработок * 30.4, 2);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПриказаНаОтпускПоУходуЗаРебенком) И ЗначениеЗаполнено(СтруктураДанных.ДатаПриказаНаОтпускПоУходуЗаРебенком) Тогда
			ROW.HOLID_ORD_NO = СтруктураДанных.НомерПриказаНаОтпускПоУходуЗаРебенком;
			ROW.HOLID_ORD_DT = Формат(СтруктураДанных.ДатаПриказаНаОтпускПоУходуЗаРебенком, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерПриказаОЗаменеПослеродовогоОтпуска) И ЗначениеЗаполнено(СтруктураДанных.ДатаПриказаОЗаменеПослеродовогоОтпуска) Тогда
			ROW.HOLID_CH_ORD_NO = СтруктураДанных.НомерПриказаОЗаменеПослеродовогоОтпуска;
			ROW.HOLID_CH_ORD_DT = Формат(СтруктураДанных.ДатаПриказаОЗаменеПослеродовогоОтпуска, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиОНеполученииПособияОтОтца) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиОНеполученииПособияОтОтца) Тогда
			ROW.REF_NPAY_FATHER_NO = СтруктураДанных.НомерСправкиОНеполученииПособияОтОтца;
			ROW.REF_NPAY_FATHER_DT = Формат(СтруктураДанных.ДатаСправкиОНеполученииПособияОтОтца, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиОНеполученииПособияОтМатери) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиОНеполученииПособияОтМатери) Тогда
			ROW.REF_NPAY_MOTHER_NO = СтруктураДанных.НомерСправкиОНеполученииПособияОтМатери;
			ROW.REF_NPAY_MOTHER_DT = Формат(СтруктураДанных.ДатаСправкиОНеполученииПособияОтМатери, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.НомерСправкиПоДругимМестамРаботы) И ЗначениеЗаполнено(СтруктураДанных.ДатаСправкиПоДругимМестамРаботы) Тогда
			ROW.REF_NPAY_WORK_NO = СтруктураДанных.НомерСправкиПоДругимМестамРаботы;
			ROW.REF_NPAY_WORK_DT = Формат(СтруктураДанных.ДатаСправкиПоДругимМестамРаботы, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ДатаСмертиРебенка) Тогда
			ROW.CERT_DT_DATE = Формат(СтруктураДанных.ДатаСмертиРебенка, "ДФ=yyyy-MM-dd");
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета) 
			И НЕ СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ЗачетНестраховыхПериодов 
			И ЗначениеЗаполнено(СтруктураДанных.ПроживаниеРаботаВЛьготнойЗоне)
			И НЕ СтруктураДанных.ПроживаниеРаботаВЛьготнойЗоне = Перечисления.ОтношениеКОсобойЗоне.Нет Тогда
			
			Если СтруктураДанных.ПроживаниеРаботаВЛьготнойЗоне = Перечисления.ОтношениеКОсобойЗоне.Проживает Тогда
				ROW.LIVE_COND_FLAG 	= 1; 
			ИначеЕсли СтруктураДанных.ПроживаниеРаботаВЛьготнойЗоне = Перечисления.ОтношениеКОсобойЗоне.Работает Тогда	
				ROW.LIVE_COND_FLAG 	= 2; 
			КонецЕсли;
			
			Если СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаСПравомНаОтселение Тогда
				ROW.LIVE_COND 		= 1;
			ИначеЕсли СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаОтселения Тогда	
				ROW.LIVE_COND 		= 3;
			ИначеЕсли СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаСЛьготнымСоциальноЭкономическимСтатусом Тогда 
				ROW.LIVE_COND 		= 2;
			ИначеЕсли СтруктураДанных.СтатусЛьготнойЗоны = Перечисления.ВидыОсобойЗоныПроживанияРаботы.ЗонаЗагрязненияПриАварииПОМаяк Тогда 
				ROW.LIVE_COND 		= 4;
			КонецЕсли;
			
			Если СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Чернобыль Тогда
				ROW.CODE_NUCLEAR = 1;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Семипалатинск Тогда
				ROW.CODE_NUCLEAR = 2;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.Маяк Тогда
				ROW.CODE_NUCLEAR = 3;
			ИначеЕсли СтруктураДанных.ВыплатаЗаСчетФедеральногоБюджета = Перечисления.ОснованияФинансированияПособияФедеральнымБюджетом.ПодразделенияОсобогоРиска Тогда
				ROW.CODE_NUCLEAR = 4;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяФайла(ДанныеДокумента)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Организация, "ОбособленноеПодразделение") Тогда
		РегистрационныйНомерФСС = ?(ЗначениеЗаполнено(ДанныеДокумента.ДополнительныйКодФСС), ДанныеДокумента.ДополнительныйКодФСС, ДанныеДокумента.РегистрационныйНомерФСС);
	Иначе
		РегистрационныйНомерФСС = ДанныеДокумента.РегистрационныйНомерФСС;
	КонецЕсли;
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДанныеДокумента.Номер, Истина, Истина);
	Возврат "E_" + РегистрационныйНомерФСС + "_" + Формат(ДанныеДокумента.ДатаПодачиЗаявления,"ДФ=yyyy_MM_dd") + "_" + Прав("0"+ НомерНаПечать, 2);
	
КонецФункции 

Функция СформироватьЗапросПоШапкеДокумента(Ссылка)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК ДатаПодачиЗаявления,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.РегистрационныйНомерФСС КАК РегистрационныйНомерФСС,
	|	ДанныеДокумента.ДополнительныйКодФСС КАК ДополнительныйКодФСС,
	|	ДанныеДокумента.КодПодчиненностиФСС КАК КодПодчиненностиФСС,
	|	ДанныеДокумента.Руководитель КАК Руководитель,
	|	ДанныеДокумента.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ДанныеДокумента.РеестрСоставил КАК РеестрСоставил,
	|	ДанныеДокумента.ТелефонСоставителя КАК ТелефонСоставителя,
	|	ДанныеДокумента.АдресЭлектроннойПочтыСоставителя КАК АдресЭлектроннойПочтыСоставителя,
	|	Должности.Наименование КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ОГРН КАК ОГРНОрганизации,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.ИНН КАК ИННОрганизации,
	|	ДанныеДокумента.КПП КАК КППОрганизации,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ДанныеДокумента.Организация.НаименованиеСокращенное КАК СТРОКА(100))) = """"
	|			ТОГДА ДанныеДокумента.Организация.НаименованиеПолное
	|		ИНАЧЕ ДанныеДокумента.Организация.НаименованиеСокращенное
	|	КОНЕЦ КАК ОрганизацияСокращенно,
	|	ДанныеДокумента.Номер КАК Номер
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК Должности
	|		ПО ДанныеДокумента.ДолжностьРуководителя = Должности.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеФизическихЛиц(
		Запрос.МенеджерВременныхТаблиц, "ДанныеДокументов", "РеестрСоставил,ДатаПодачиЗаявления");
		
	КадровыйУчет.СоздатьВТКадровыеДанныеФизическихЛиц(ОписательВременныхТаблиц, Истина, "ФИОПолные");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокументов.ДатаПодачиЗаявления,
	|	ДанныеДокументов.Номер,
	|	ДанныеДокументов.Организация,
	|	ДанныеДокументов.РегистрационныйНомерФСС,
	|	ДанныеДокументов.ДополнительныйКодФСС,
	|	ДанныеДокументов.КодПодчиненностиФСС,
	|	ДанныеДокументов.Руководитель,
	|	ДанныеДокументов.ГлавныйБухгалтер,
	|	ДанныеДокументов.РеестрСоставил,
	|	ДанныеДокументов.ТелефонСоставителя,
	|	ДанныеДокументов.АдресЭлектроннойПочтыСоставителя,
	|	ДанныеДокументов.ДолжностьРуководителя,
	|	ДанныеДокументов.ОГРНОрганизации,
	|	ДанныеДокументов.Ссылка,
	|	ДанныеДокументов.ИННОрганизации,
	|	ДанныеДокументов.КППОрганизации,
	|	ДанныеДокументов.ОрганизацияСокращенно,
	|	ВТКадровыеДанныеФизическихЛиц.ФИОПолные КАК ФИОСоставителя
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеФизическихЛиц КАК ВТКадровыеДанныеФизическихЛиц
	|		ПО ДанныеДокументов.РеестрСоставил = ВТКадровыеДанныеФизическихЛиц.ФизическоеЛицо
	|			И ДанныеДокументов.ДатаПодачиЗаявления = ВТКадровыеДанныеФизическихЛиц.Период";
	
	Возврат Запрос.Выполнить();	
	
КонецФункции 

Функция СформироватьЗапросСведенийДляРасчетаПособия(ОписаниеРеестра)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ОписаниеРеестра.Ссылка);
	Запрос.УстановитьПараметр("Дата", ОписаниеРеестра.Дата);

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пособия.Заявление.ПервыйРасчетныйГод КАК Год
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Пособия
	|ГДЕ
	|	Пособия.Ссылка = &Ссылка
	|	И Пособия.Заявление.ПервыйРасчетныйГод <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год";
	
	Запрос.Текст = ТекстЗапроса;
	МинимальныйГод = Запрос.Выполнить().Выгрузить();
	Если МинимальныйГод.Количество() = 0 Тогда
		ИзмеренияГоды = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Год(ТекущаяДатаСеанса()));
	Иначе
		ИзмеренияГоды = Новый Массив;
		ТекущийГод = МинимальныйГод[0].Год;
		Пока ТекущийГод <= Год(ТекущаяДатаСеанса()) Цикл
			ИзмеренияГоды.Добавить(ТекущийГод);
			ТекущийГод = ТекущийГод + 1;
		КонецЦикла;
	КонецЕсли;
		
	УчетПособийСоциальногоСтрахования.СоздатьВТПредельнаяВеличинаБазы(Запрос.МенеджерВременныхТаблиц, ИзмеренияГоды);
	
	Запрос.УстановитьПараметр("ТаблицаВидовВыплат", ТаблицаВидовВыплат());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВидовВыплат.ВидПособия КАК ВидПособия,
	|	ТаблицаВидовВыплат.ВидВыплаты КАК ВидВыплаты
	|ПОМЕСТИТЬ ВТВидыВыплат
	|ИЗ
	|	&ТаблицаВидовВыплат КАК ТаблицаВидовВыплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявлениеСотрудника.ФамилияПолучателя + "" "" + ЗаявлениеСотрудника.ИмяПолучателя + "" "" + ЗаявлениеСотрудника.ОтчествоПолучателя КАК ФИОСотрудника,
	|	ЗаявлениеСотрудника.ДатаРожденияПолучателя КАК ДатаРождения,
	|	ЕСТЬNULL(ЗаявлениеСотрудника.Гражданство.Код, ""999"") КАК КодСтраны,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ТипЗанятостиРаботника = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ОсновноеМестоРаботы)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совместительство,
	|	ЗаявлениеСотрудника.СпособВыплатыПособия КАК СпособВыплатыПособия,
	|	ЗаявлениеСотрудника.НаименованиеБанка КАК НаименованиеБанка,
	|	ЗаявлениеСотрудника.Банк КАК Банк,
	|	ЗаявлениеСотрудника.БИКБанка КАК БИКБанка,
	|	ЗаявлениеСотрудника.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	ЗаявлениеСотрудника.НомерКартыМИР КАК НомерКартыМИР,
	|	ЗаявлениеСотрудника.АдресПолучателяРегистрации КАК АдресПолучателяРегистрации,
	|	ЗаявлениеСотрудника.АдресПолучателяРегистрацииИдентификаторФИАС КАК АдресПолучателяРегистрацииИдентификаторФИАС,
	|	ЗаявлениеСотрудника.АдресПолучателяРегистрацииКодКЛАДР КАК АдресПолучателяРегистрацииКодКЛАДР,
	|	ЗаявлениеСотрудника.АдресПолучателяФактический КАК АдресПолучателяФактический,
	|	ЗаявлениеСотрудника.АдресПолучателяФактическийИдентификаторФИАС КАК АдресПолучателяФактическийИдентификаторФИАС,
	|	ЗаявлениеСотрудника.АдресПолучателяФактическийКодКЛАДР КАК АдресПолучателяФактическийКодКЛАДР,
	|	ЗаявлениеСотрудника.ФамилияПолучателя КАК Фамилия,
	|	ЗаявлениеСотрудника.ИмяПолучателя КАК Имя,
	|	ЗаявлениеСотрудника.ОтчествоПолучателя КАК Отчество,
	|	ЗаявлениеСотрудника.СчитатьПоПравилам2010Года КАК СчитатьПоПравилам2010Года,
	|	ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка КАК ПорядокРасчетаСреднегоЗаработка,
	|	ЗаявлениеСотрудника.ДатаСправкиОПостановкеНаУчетВРанниеСрокиБеременности КАК ДатаСправкиБеременной,
	|	ЗаявлениеСотрудника.НомерСправкиОПостановкеНаУчетВРанниеСрокиБеременности КАК НомерСправкиБеременной,
	|	Пособия.ПоставленаНаУчетВРанниеСрокиБеременности КАК ПоставленаНаУчетВРанниеСрокиБеременности,
	|	ЗаявлениеСотрудника.ПериодПростоя1ДатаНачала КАК ПериодПростояС1,
	|	ЗаявлениеСотрудника.ПериодПростоя1ДатаОкончания КАК ПериодПростояПо1,
	|	ЗаявлениеСотрудника.ПериодПростоя1СреднийЗаработок КАК СреднийЗаработокНаПериодПростоя1,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ВидДокументаУдостоверяющегоЛичностьПолучателя.КодМВД = ""18""
	|			ТОГДА ""19""
	|		ИНАЧЕ ЕСТЬNULL(ЗаявлениеСотрудника.ВидДокументаУдостоверяющегоЛичностьПолучателя.КодМВД, ""01"")
	|	КОНЕЦ КАК ВидУдостоверенияЛичности,
	|	ЗаявлениеСотрудника.СерияДокументаУдостоверяющегоЛичностьПолучателя КАК СерияДокумента,
	|	ЗаявлениеСотрудника.НомерДокументаУдостоверяющегоЛичностьПолучателя КАК НомерДокумента,
	|	ЗаявлениеСотрудника.ДатаВыдачиДокументаУдостоверяющегоЛичностьПолучателя КАК ДатаВыдачиДокумента,
	|	ВЫРАЗИТЬ(ЗаявлениеСотрудника.КемВыданДокументУдостоверяющийЛичностьПолучателя КАК СТРОКА(100)) КАК КемВыданДокумент,
	|	ЗаявлениеСотрудника.СНИЛСПолучателя КАК СтраховойНомерПФР,
	|	ЗаявлениеСотрудника.ИННПолучателя КАК ИНН,
	|	ЗаявлениеСотрудника.НомерПриказаОПредоставленииОтпускаПоУходуЗаРебенком КАК НомерПриказаНаОтпускПоУходуЗаРебенком,
	|	ЗаявлениеСотрудника.ДатаПриказаОПредоставленииОтпускаПоУходуЗаРебенком КАК ДатаПриказаНаОтпускПоУходуЗаРебенком,
	|	ЗаявлениеСотрудника.ДатаНачалаОтпускаПоУходуЗаРебенком КАК ДатаНачала,
	|	ЗаявлениеСотрудника.ДатаОкончанияОтпускаПоУходуЗаРебенком КАК ДатаОкончания,
	|	ЗаявлениеСотрудника.РайонныйКоэффициент КАК РайонныйКоэффициент,
	|	ЗаявлениеСотрудника.ДоляВремени КАК ДоляВремени,
	|	ЗаявлениеСотрудника.ПервыйРасчетныйГод КАК ПервыйГодРасчета,
	|	ЗаявлениеСотрудника.ВторойРасчетныйГод КАК ВторойГодРасчета,
	|	ЗаявлениеСотрудника.ЗамененыКалендарныеГодыРасчетаСреднегоЗаработка КАК ЗамененыКалендарныеГодыРасчетаСреднегоЗаработка,
	|	ЗаявлениеСотрудника.ПервыйЗамененныйГод КАК ЗамененныйПервыйГодРасчета,
	|	ЗаявлениеСотрудника.ВторойЗамененныйГод КАК ЗамененныйВторойГодРасчета,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ЗаработокПервыйГодРасчета > ПредельнаяВеличинаЗаПервыйГодРасчета.Размер
	|			ТОГДА ПредельнаяВеличинаЗаПервыйГодРасчета.Размер
	|		ИНАЧЕ ЗаявлениеСотрудника.ЗаработокПервыйГодРасчета
	|	КОНЕЦ КАК ЗаработокПервыйГодРасчета,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ЗаработокВторойГодРасчета > ПредельнаяВеличинаЗаВторойГодРасчета.Размер
	|			ТОГДА ПредельнаяВеличинаЗаВторойГодРасчета.Размер
	|		ИНАЧЕ ЗаявлениеСотрудника.ЗаработокВторойГодРасчета
	|	КОНЕЦ КАК ЗаработокВторойГодРасчета,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзТарифнойСтавки)
	|				ИЛИ ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзМРОТ)
	|			ТОГДА НАЧАЛОПЕРИОДА(Пособия.ОсвобождениеДатаНачала1, МЕСЯЦ)
	|		ИНАЧЕ ЗаявлениеСотрудника.ДатаНачалаРасчетногоПериода
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|	ВЫБОР
	|		КОГДА (ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзТарифнойСтавки)
	|				ИЛИ ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзМРОТ))
	|				И Пособия.ОсвобождениеДатаНачала1 <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА КОНЕЦПЕРИОДА(Пособия.ОсвобождениеДатаНачала1, МЕСЯЦ)
	|		ИНАЧЕ ЗаявлениеСотрудника.ДатаОкончанияРасчетногоПериода
	|	КОНЕЦ КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ВЫБОР
	|		КОГДА (ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзТарифнойСтавки)
	|				ИЛИ ЗаявлениеСотрудника.ПорядокРасчетаСреднегоЗаработка = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаСреднегоЗаработкаДляОплатыПособия.ИсходяИзМРОТ))
	|				И Пособия.ОсвобождениеДатаНачала1 <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ДЕНЬ(КОНЕЦПЕРИОДА(Пособия.ОсвобождениеДатаНачала1, МЕСЯЦ))
	|		ИНАЧЕ ЗаявлениеСотрудника.ЧислоКалендарныхДнейРасчетногоПериода
	|	КОНЕЦ КАК КалендарныхДнейРасчетногоПериода,
	|	ЗаявлениеСотрудника.СреднийЗаработокЗаРасчетныйПериод КАК ЗаработокЗаПериодРасчета,
	|	ЗаявлениеСотрудника.Дата КАК ДатаПредставленияПакетаДокументов,
	|	ЕСТЬNULL(ВидыВыплат.ВидВыплаты, ""1"") КАК ВидВыплаты,
	|	ЗаявлениеСотрудника.ВидПособия КАК ВидПособия,
	|	ЗаявлениеСотрудника.СреднийЗаработокЗаРасчетныйПериод КАК СреднийДневнойЗаработок,
	|	ЗаявлениеСотрудника.МРОТ КАК МРОТ,
	|	ЗаявлениеСотрудника.ДатаНачалаТрудовогоДоговораПолучателя КАК СрочныйДоговорС,
	|	ЗаявлениеСотрудника.ДатаОкончанияТрудовогоДоговораПолучателя КАК СрочныйДоговорПо,
	|	ЗаявлениеСотрудника.СтатусНалогоплательщикаПолучателя КАК СтатусНалогоплательщикаПолучателя,
	|	ЗаявлениеСотрудника.ВидДокументаНаПроживание КАК НаименованиеДокументаНаПроживание,
	|	ЗаявлениеСотрудника.СерияДокументаНаПроживание КАК СерияДокументаНаПроживание,
	|	ЗаявлениеСотрудника.НомерДокументаНаПроживание КАК НомерДокументаНаПроживание,
	|	ЗаявлениеСотрудника.ДатаВыдачиДокументаНаПроживание КАК ДатаВыдачиДокументаНаПроживание,
	|	Пособия.НомерСтроки КАК НомерСтроки,
	|	Пособия.ПриступитьКРаботеС КАК ДатаВыходаНаРаботу,
	|	Пособия.ДатаРегистрацииДокументовМСЭ КАК ДатаРегистрацииДокументовМСЭ,
	|	Пособия.ПериодНахожденияВСтационареСРебенкомС КАК ПериодНахожденияВСтационареСРебенкомС,
	|	Пособия.ПериодНахожденияВСтационареСРебенкомПо КАК ПериодНахожденияВСтационареСРебенкомПо,
	|	Пособия.ДатаИзмененияКодаПричиныНетрудоспособности КАК ДатаИзмененияКодаПричиныНетрудоспособности,
	|	Пособия.КодПричиныНетрудоспособности КАК КодПричиныНетрудоспособности,
	|	Пособия.ДополнительныйКодПричиныНетрудоспособности КАК ДополнительныйКодПричиныНетрудоспособности,
	|	Пособия.ВторойКодПричиныНетрудоспособности КАК ВторойКодПричиныНетрудоспособности,
	|	Пособия.УсловияИсчисленияКод1 КАК УсловияИсчисленияКод1,
	|	Пособия.УсловияИсчисленияКод2 КАК УсловияИсчисленияКод2,
	|	Пособия.УсловияИсчисленияКод3 КАК УсловияИсчисленияКод3,
	|	Пособия.НомерЛисткаНетрудоспособности КАК НомерВходящегоДокумента,
	|	Пособия.ДатаВыдачиЛисткаНетрудоспособности КАК ДатаВыдачиБольничного,
	|	Пособия.НомерПервичногоЛисткаНетрудоспособности КАК НомерПервичногоБольничного,
	|	Пособия.КодНарушенияРежима КАК КодНарушенияРежима,
	|	Пособия.ДатаНарушенияРежима КАК ДатаНарушенияРежима,
	|	Пособия.ДатаНовыйСтатусНетрудоспособного КАК ДатаНовыйСтатусНетрудоспособного,
	|	Пособия.НовыйСтатусНетрудоспособного КАК НовыйСтатусНетрудоспособного,
	|	Пособия.ДатаОсвидетельствованияМСЭ КАК ДатаОсвидетельствованияМСЭ,
	|	Пособия.ДатаНаправленияВБюроМСЭ КАК ДатаНаправленияВБюроМСЭ,
	|	Пособия.НомерЛисткаПродолжения КАК НомерЛисткаПродолжения,
	|	Пособия.ОГРН_Санатория КАК ОГРН_Санатория,
	|	Пособия.НомерПутевки КАК НомерПутевки,
	|	Пособия.ДатаОкончанияПутевки КАК ДатаОкончанияПутевки,
	|	Пособия.НомерЛисткаПоОсновномуМестуРаботы КАК НомерЛисткаПоОсновномуМестуРаботы,
	|	Пособия.ОГРНМедицинскойОрганизации КАК ОГРН_ЛПУ,
	|	Пособия.АдресМедицинскойОрганизации КАК Адрес_ЛПУ,
	|	Пособия.НаименованиеМедицинскойОрганизации КАК НаименованиеЛПУ,
	|	Пособия.ПредоставленДубликатЛисткаНетрудоспособности КАК ЯвляетсяДубликатом,
	|	Пособия.ПоУходуВозрастЛет1 КАК УходЗаРодственникомЛет1,
	|	Пособия.ПоУходуВозрастМесяцев1 КАК УходЗаРодственникомМесяцев1,
	|	Пособия.ПоУходуРодственнаяСвязь1 КАК УходЗаРодственникомРодственнаяСвязь1,
	|	Пособия.ПоУходуФИО1 КАК УходЗаРодственникомФИО1,
	|	Пособия.ПоУходуИспользованоДней1 КАК УходЗаРодственникомИспользованоДней1,
	|	Пособия.ПоУходуВозрастЛет2 КАК УходЗаРодственникомЛет2,
	|	Пособия.ПоУходуВозрастМесяцев2 КАК УходЗаРодственникомМесяцев2,
	|	Пособия.ПоУходуРодственнаяСвязь2 КАК УходЗаРодственникомРодственнаяСвязь2,
	|	Пособия.ПоУходуФИО2 КАК УходЗаРодственникомФИО2,
	|	Пособия.ПоУходуИспользованоДней2 КАК УходЗаРодственникомИспользованоДней2,
	|	Пособия.ОсвобождениеДатаНачала1 КАК ОсвобождениеС1,
	|	Пособия.ОсвобождениеДатаОкончания1 КАК ОсвобождениеПо1,
	|	Пособия.ОсвобождениеДолжностьВрача1 КАК ДолжностьВрача1,
	|	Пособия.ОсвобождениеФИОВрача1 КАК ФИОВрача1,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрача1 КАК ИдентификационныйНомерВрача1,
	|	Пособия.ОсвобождениеФИОВрачаПредседателяВК1 КАК ФИОВрачаПредседателяВК1,
	|	Пособия.ОсвобождениеДолжностьВрачаПредседателяВК1 КАК ДолжностьВрачаПредседателяВК1,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1 КАК ИдентификационныйНомерВрачаПредседателяВК1,
	|	Пособия.ОсвобождениеДатаНачала2 КАК ОсвобождениеС2,
	|	Пособия.ОсвобождениеДатаОкончания2 КАК ОсвобождениеПо2,
	|	Пособия.ОсвобождениеДолжностьВрача2 КАК ДолжностьВрача2,
	|	Пособия.ОсвобождениеФИОВрача2 КАК ФИОВрача2,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрача2 КАК ИдентификационныйНомерВрача2,
	|	Пособия.ОсвобождениеФИОВрачаПредседателяВК2 КАК ФИОВрачаПредседателяВК2,
	|	Пособия.ОсвобождениеДолжностьВрачаПредседателяВК2 КАК ДолжностьВрачаПредседателяВК2,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2 КАК ИдентификационныйНомерВрачаПредседателяВК2,
	|	Пособия.ОсвобождениеДатаНачала3 КАК ОсвобождениеС3,
	|	Пособия.ОсвобождениеДатаОкончания3 КАК ОсвобождениеПо3,
	|	Пособия.ОсвобождениеДолжностьВрача3 КАК ДолжностьВрача3,
	|	Пособия.ОсвобождениеФИОВрача3 КАК ФИОВрача3,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрача3 КАК ИдентификационныйНомерВрача3,
	|	Пособия.ОсвобождениеФИОВрачаПредседателяВК3 КАК ФИОВрачаПредседателяВК3,
	|	Пособия.ОсвобождениеДолжностьВрачаПредседателяВК3 КАК ДолжностьВрачаПредседателяВК3,
	|	Пособия.ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3 КАК ИдентификационныйНомерВрачаПредседателяВК3,
	|	Пособия.ГруппаИнвалидности КАК ГруппаИнвалидности,
	|	ФизическиеЛица.Пол КАК Пол,
	|	Пособия.ДатаНачалаОплаты КАК ДатаНачалаОплаты,
	|	Пособия.ДатаОкончанияОплаты КАК ДатаОкончанияОплаты,
	|	Пособия.СтажЛет КАК СтажЛет,
	|	Пособия.СтажМесяцев КАК СтажМесяцев,
	|	Пособия.СтажРасширенныйЛет КАК СтажРасширенныйЛет,
	|	Пособия.СтажРасширенныйМесяцев КАК СтажРасширенныйМесяцев,
	|	Пособия.ФинансированиеФедеральнымБюджетом КАК ВыплатаЗаСчетФедеральногоБюджета,
	|	Пособия.ДатаАктаН1 КАК ДатаАктаФормыН1,
	|	ЗаявлениеСотрудника.ДатаСправкиОНеполученииПособияОтОтца КАК ДатаСправкиОНеполученииПособияОтОтца,
	|	ЗаявлениеСотрудника.НомерСправкиОНеполученииПособияОтОтца КАК НомерСправкиОНеполученииПособияОтОтца,
	|	ЗаявлениеСотрудника.ДатаСправкиОНеполученииПособияОтМатери КАК ДатаСправкиОНеполученииПособияОтМатери,
	|	ЗаявлениеСотрудника.НомерСправкиОНеполученииПособияОтМатери КАК НомерСправкиОНеполученииПособияОтМатери,
	|	ЗаявлениеСотрудника.ВидОсобойЗоныПроживанияРаботы КАК СтатусЛьготнойЗоны,
	|	ЗаявлениеСотрудника.ОтношениеКОсобойЗоне КАК ПроживаниеРаботаВЛьготнойЗоне,
	|	ЗаявлениеСотрудника.ДатаСправкиОНеполученииПособияПоДругимМестамРаботы КАК ДатаСправкиПоДругимМестамРаботы,
	|	ЗаявлениеСотрудника.НомерСправкиОНеполученииПособияПоДругимМестамРаботы КАК НомерСправкиПоДругимМестамРаботы,
	|	ЗаявлениеСотрудника.НомерПриказаОЗаменеПослеродовогоОтпуска КАК НомерПриказаОЗаменеПослеродовогоОтпуска,
	|	ЗаявлениеСотрудника.ДатаПриказаОЗаменеПослеродовогоОтпуска КАК ДатаПриказаОЗаменеПослеродовогоОтпуска,
	|	ЗаявлениеСотрудника.ДатаРожденияРебенка КАК ДатаРожденияРебенка,
	|	ЗаявлениеСотрудника.ФамилияРебенка КАК ФамилияРебенка,
	|	ЗаявлениеСотрудника.ИмяРебенка КАК ИмяРебенка,
	|	ЗаявлениеСотрудника.ОтчествоРебенка КАК ОтчествоРебенка,
	|	ЗаявлениеСотрудника.ФормаСправкиОРожденииРебенка КАК ВидСправкиОРожденииРебенка,
	|	ЗаявлениеСотрудника.ДатаСправкиОРожденииРебенка КАК ДатаСправки,
	|	ЗаявлениеСотрудника.НомерСправкиОРожденииРебенка КАК НомерСправки,
	|	ЗаявлениеСотрудника.ДатаРешенияОбОпеке КАК ДатаРешенияОбОпеке,
	|	ЗаявлениеСотрудника.НомерРешенияОбОпеке КАК НомерРешенияОбОпеке,
	|	ЗаявлениеСотрудника.ДатаРешенияОбУсыновлении КАК ДатаРешенияОбУсыновлении,
	|	ЗаявлениеСотрудника.НомерРешенияОбУсыновлении КАК НомерРешенияОбУсыновлении,
	|	ЗаявлениеСотрудника.ДатаДоговораОПередачеРебенкаВПриемнуюСемью КАК ДатаДоговораОПередачеНаВоспитание,
	|	ЗаявлениеСотрудника.НомерДоговораОПередачеРебенкаВПриемнуюСемью КАК НомерДоговораОПередачеНаВоспитание,
	|	ЗаявлениеСотрудника.ДатаСвидетельстваОРождении КАК ДатаСвидетельстваОРождении,
	|	ЗаявлениеСотрудника.СерияСвидетельстваОРождении КАК СерияСвидетельстваОРождении,
	|	ЗаявлениеСотрудника.НомерСвидетельстваОРождении КАК НомерСвидетельстваОРождении,
	|	ЗаявлениеСотрудника.ДатаИногоДокументаПодтверждающегоРождение КАК ДатаИногоПодтвержденияРождения,
	|	ЗаявлениеСотрудника.НомерИногоДокументаПодтверждающегоРождение КАК НомерИногоПодтвержденияРождения,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ДатаСправкиОРожденииРебенка <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.ДатаСправкиОРожденииРебенка
	|		КОГДА ЗаявлениеСотрудника.ДатаСвидетельстваОРождении <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.ДатаСвидетельстваОРождении
	|	КОНЕЦ КАК ДатаСправкиОРождении,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ДатаСправкиОРожденииРебенка <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.НомерСправкиОРожденииРебенка
	|		КОГДА ЗаявлениеСотрудника.ДатаСвидетельстваОРождении <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.СерияСвидетельстваОРождении + "" "" + ЗаявлениеСотрудника.НомерСвидетельстваОРождении
	|	КОНЕЦ КАК НомерСправкиОРождении,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбОпеке <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ""1""
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбУсыновлении <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ""2""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УсыновлениеОпека,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбОпеке <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.ДатаРешенияОбОпеке
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбУсыновлении <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.ДатаРешенияОбУсыновлении
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК УсыновлениеОпекаДатаВыдачи,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбОпеке <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.НомерРешенияОбОпеке
	|		КОГДА ЗаявлениеСотрудника.ДатаРешенияОбУсыновлении <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ЗаявлениеСотрудника.НомерРешенияОбУсыновлении
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК УсыновлениеОпекаСерияНомер,
	|	Пособия.ВидПодтверждающегоДокумента КАК ДокументОРожденииВид,
	|	ВЫБОР
	|		КОГДА Пособия.ВидПодтверждающегоДокумента <> ЗНАЧЕНИЕ(Перечисление.ВидыПодтверждающихДокументовОтпускаПоУходу.РешениеОбУстановленииОпеки)
	|			ТОГДА Пособия.ДатаДокумента
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДокументОРожденииДатаВыдачи,
	|	ВЫБОР
	|		КОГДА Пособия.ВидПодтверждающегоДокумента <> ЗНАЧЕНИЕ(Перечисление.ВидыПодтверждающихДокументовОтпускаПоУходу.РешениеОбУстановленииОпеки)
	|			ТОГДА Пособия.СерияДокумента + "" "" + Пособия.НомерДокумента
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ДокументОРожденииСерияНомер,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.СправкаОНеполученииПособия = ЗНАЧЕНИЕ(Перечисление.РодителиПредоставившиеСправкуОНеполученииПособия.Отец)
	|			ТОГДА ЗаявлениеСотрудника.ДатаСправкиОНеполученииПособияОтОтца
	|		ИНАЧЕ ЗаявлениеСотрудника.ДатаСправкиОНеполученииПособияОтМатери
	|	КОНЕЦ КАК ДатаСправкиОтДругогоРодителя,
	|	ВЫБОР
	|		КОГДА ЗаявлениеСотрудника.СправкаОНеполученииПособия = ЗНАЧЕНИЕ(Перечисление.РодителиПредоставившиеСправкуОНеполученииПособия.Отец)
	|			ТОГДА ЗаявлениеСотрудника.НомерСправкиОНеполученииПособияОтОтца
	|		ИНАЧЕ ЗаявлениеСотрудника.НомерСправкиОНеполученииПособияОтМатери
	|	КОНЕЦ КАК НомерСправкиОтДругогоРодителя,
	|	ЗаявлениеСотрудника.НаличиеОдногоИзДокументовНаПредыдущихДетей КАК НаличиеДокументаОРождении,
	|	ЗаявлениеСотрудника.НаличиеСвидетельстваОСмертиПредыдущихДетей КАК НаличиеДокументаОСмерти,
	|	Пособия.ОчередностьРожденияРебенка КАК Очередность,
	|	Пособия.НаличиеРешенияСудаОЛишенииПрав КАК НаличиеРешенияСудаОЛишенииПрав,
	|	Пособия.ОдновременныйУходЗаНесколькимиДетьми КАК ОдновременныйУходЗаНесколькимиДетьми,
	|	ЗаявлениеСотрудника.Перерасчет КАК Перерасчет,
	|	ЗаявлениеСотрудника.КодПричиныПерерасчета КАК КодПричиныПерерасчета,
	|	УведомлениеОПрекращении.ТипПриказа КАК ДосрочноеПрекращениеОтпускаПоУходуТипПриказа,
	|	УведомлениеОПрекращении.ДатаПриказа КАК ДосрочноеПрекращениеОтпускаПоУходуДатаПриказа,
	|	УведомлениеОПрекращении.НомерПриказа КАК ДосрочноеПрекращениеОтпускаПоУходуНомерПриказа,
	|	УведомлениеОПрекращении.ДатаПрекращенияОплаты КАК ДосрочноеПрекращениеОтпускаПоУходуДатаПрекращенияОплаты,
	|	ЗаявлениеСотрудника.ИзвещениеИзФССНомер КАК ИзвещениеИзФССНомер,
	|	ЗаявлениеСотрудника.ИзвещенияИзФССДата КАК ИзвещенияИзФССДата,
	|	0 КАК СуммаПособияРаботодателя,
	|	0 КАК СуммаПособияФСС,
	|	0 КАК СуммаПособияВсего,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаСмертиРебенка,
	|	ЗаявлениеСотрудника.КоличествоОплаченныхДнейНетрудоспособностиИнвалида КАК ДнейБолезниИнвалида,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачалаРаботы,
	|	ЗаявлениеСотрудника.ПериодПростоя2ДатаНачала КАК ПериодПростояС2,
	|	ЗаявлениеСотрудника.ПериодПростоя2ДатаОкончания КАК ПериодПростояПо2,
	|	ЗаявлениеСотрудника.ПериодПростоя2СреднийЗаработок КАК СреднийЗаработокНаПериодПростоя2,
	|	Пособия.ЭтоЭЛН КАК ЭтоЭЛН
	|ИЗ
	|	Документ.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.СведенияНеобходимыеДляНазначенияПособий КАК Пособия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявлениеСотрудникаНаВыплатуПособия КАК ЗаявлениеСотрудника
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|			ПО ЗаявлениеСотрудника.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыВыплат КАК ВидыВыплат
	|			ПО ЗаявлениеСотрудника.ВидПособия = ВидыВыплат.ВидПособия
	|		ПО (ЗаявлениеСотрудника.Ссылка = Пособия.Заявление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаЗаПервыйГодРасчета
	|		ПО (ВЫБОР
	|				КОГДА Пособия.Заявление.ПервыйРасчетныйГод < 2010
	|					ТОГДА 2010
	|				ИНАЧЕ Пособия.Заявление.ПервыйРасчетныйГод
	|			КОНЕЦ = ПредельнаяВеличинаЗаПервыйГодРасчета.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК ПредельнаяВеличинаЗаВторойГодРасчета
	|		ПО (ВЫБОР
	|				КОГДА Пособия.Заявление.ВторойРасчетныйГод < 2010
	|					ТОГДА 2010
	|				ИНАЧЕ Пособия.Заявление.ВторойРасчетныйГод
	|			КОНЕЦ = ПредельнаяВеличинаЗаВторойГодРасчета.Год)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УведомлениеОПрекращенииОтпускаПоУходуЗаРебенком КАК УведомлениеОПрекращении
	|		ПО Пособия.ПервичныйДокумент = УведомлениеОПрекращении.Ссылка
	|ГДЕ
	|	Пособия.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	ВидВыплаты";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТаблицаВидовВыплат()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ВидВыплаты", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	Таблица.Колонки.Добавить("ВидПособия", Новый ОписаниеТипов("ПеречислениеСсылка.ПособияНазначаемыеФСС"));
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоВременнойНетрудоспособности;
	СтрокаТаблицы.ВидВыплаты = "1";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодам;
	СтрокаТаблицы.ВидВыплаты = "2";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеВставшимНаУчетВРанниеСроки;
	СтрокаТаблицы.ВидВыплаты = "3";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕдиновременноеПособиеПриРожденииРебенка;
	СтрокаТаблицы.ВидВыплаты = "4";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ЕжемесячноеПособиеПоУходуЗаРебенком;
	СтрокаТаблицы.ВидВыплаты = "5";
	
	// ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки порождает 2 записи в реестре.
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки;
	СтрокаТаблицы.ВидВыплаты = "2";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеПоБеременностиИРодамВставшимНаУчетВРанниеСроки;
	СтрокаТаблицы.ВидВыплаты = "3";
	
	// Сдаются на бумажных носителях:
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ПособиеВСвязиСНесчастнымСлучаемНаПроизводстве;
	СтрокаТаблицы.ВидВыплаты = "6";
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.ВидПособия = Перечисления.ПособияНазначаемыеФСС.ОтпускСверхЕжегодногоНаПериодЛечения;
	СтрокаТаблицы.ВидВыплаты = "9";
	
	Возврат Таблица;
КонецФункции

Функция СреднийЗаработокЗаДваКалендарныхГода(СтруктураДанных)
	СреднийЗаработок = СтруктураДанных.ЗаработокПервыйГодРасчета + СтруктураДанных.ЗаработокВторойГодРасчета;
	Если СреднийЗаработок = 0 Тогда // Средний заработок определяется, исходя из минимального размера оплаты труда.
		СреднийЗаработок = СтруктураДанных.МРОТ * ?(СтруктураДанных.ДоляВремени > 0 И СтруктураДанных.ДоляВремени < 1, СтруктураДанных.ДоляВремени, 1);
	КонецЕсли;
	Возврат СреднийЗаработок;
КонецФункции

// Функция оставляет в строке только цифры, отбрасывая все следующие за цифрами буквы и другие символы,
// причем если строка начинается с буквы - то считаем, что.
//
// Параметры:
//    РазбираемаяСтрока   - Строка - строка, из которой будут отбрасываться все не цифровые символы.
//    ПропускаемыеСимволы - Строка - символы, которые при разборе можно пропустить, на любых других разбор прекращается.
//                          Например, при разборе "К25СТР1", если пропускаемые символы:
//                          "" - то возвратится "0", 
//                          "К" - возвратится "25",
//                          "КСТР" - возвратится "251".
// Возвращаемое значение:
//    Строка - строка, состоящая только из цифр, полученных из исходной строки.
//
Функция ОставитьТолькоЦифрыВСтроке(РазбираемаяСтрока, ПропускаемыеСимволы = "")
	
	Цифры = "1234567890";
	ЦифроваяЧасть = "";
	Для НомерСимвола = 1 По СтрДлина(РазбираемаяСтрока) Цикл
		ТекущийСимвол = Сред(РазбираемаяСтрока, НомерСимвола, 1);
		Если СтрНайти(Цифры, ТекущийСимвол) Тогда
			ЦифроваяЧасть = ЦифроваяЧасть + ТекущийСимвол;
		Иначе
			Если СтрНайти(ПропускаемыеСимволы, ТекущийСимвол) = Неопределено Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Если пустую строку попробовать преобразовать в число - то будет ошибка,
	// поэтому в данном случае вместо пустой строки возвращаем строку с нулем.
	Если ЦифроваяЧасть = "" Тогда
		ЦифроваяЧасть = "0";
	КонецЕсли;
	
	Возврат ЦифроваяЧасть;
КонецФункции

#КонецОбласти

#Область ФиксацияВторичныхДанныхВДокументах

Функция ФиксируемыеРеквизиты()
	ФиксируемыеРеквизиты = Новый Соответствие;
	
	// Реквизиты шапки.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ИмяГруппы           = "Организация";
	Шаблон.ОснованиеЗаполнения = "Организация";
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РегистрационныйНомерФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДополнительныйКодФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодПодчиненностиФСС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОГРН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КПП");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИНН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ТелефонСоставителя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресЭлектроннойПочтыСоставителя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "РеестрСоставил");
	
	// Роль подписанта Руководитель.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Организация";
	Шаблон.ИмяГруппы           = "Руководитель";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "Руководитель");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДолжностьРуководителя");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОснованиеПодписиРуководителя");
	
	// Роль подписанта ГлавныйБухгалтер.
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.ОснованиеЗаполнения = "Организация";
	Шаблон.ИмяГруппы           = "ГлавныйБухгалтер";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ГлавныйБухгалтер");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДолжностьГлавногоБухгалтера");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОснованиеПодписиГлавногоБухгалтера");
	
	
	// Реквизиты табличной части "СведенияНеобходимыеДляНазначенияПособий".
	Шаблон = ФиксацияВторичныхДанныхВДокументах.ОписаниеФиксируемогоРеквизита();
	Шаблон.Путь           = "СведенияНеобходимыеДляНазначенияПособий";
	Шаблон.РеквизитСтроки = Истина;
	
	//   Документ-основание.
	Шаблон.ОснованиеЗаполнения = "ПервичныйДокумент";
	Шаблон.ИмяГруппы           = "СведенияИзПервичногоДокумента";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПервичныйДокумент", Ложь);
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерЛисткаНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерПервичногоЛисткаНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ЯвляетсяПервичнымЛисткомНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ЭтоЭЛН");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПредоставленДубликатЛисткаНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаВыдачиЛисткаНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерЛисткаПоОсновномуМестуРаботы");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаИзмененияКодаПричиныНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОкончанияПутевки");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерПутевки");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОГРН_Санатория");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодПричиныНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДополнительныйКодПричиныНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВторойКодПричиныНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеОрганизацииВЛисткеНетрудоспособности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсновноеМестоРаботы");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуВозрастЛет1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуВозрастМесяцев1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуРодственнаяСвязь1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуФИО1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуИспользованоДней1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуВозрастЛет2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуВозрастМесяцев2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуРодственнаяСвязь2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуФИО2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоУходуИспользованоДней2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПоставленаНаУчетВРанниеСрокиБеременности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "КодНарушенияРежима");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаНарушенияРежима");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПериодНахожденияВСтационареСРебенкомС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПериодНахожденияВСтационареСРебенкомПо");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаНаправленияВБюроМСЭ");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаРегистрацииДокументовМСЭ");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОсвидетельствованияМСЭ");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ГруппаИнвалидности");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаНачала1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаОкончания1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрача1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрача1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрача1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрачаПредседателяВК1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрачаПредседателяВК1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрачаПредседателяВК1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаНачала2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаОкончания2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрача2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрача2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрача2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрачаПредседателяВК2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрачаПредседателяВК2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрачаПредседателяВК2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаНачала3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДатаОкончания3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрача3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрача3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрача3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеФИОВрачаПредседателяВК3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеДолжностьВрачаПредседателяВК3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОсвобождениеИдентификационныйНомерВрачаПредседателяВК3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ПриступитьКРаботеС");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаНовыйСтатусНетрудоспособного");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НовыйСтатусНетрудоспособного");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерЛисткаПродолжения");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "УсловияИсчисленияКод1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "УсловияИсчисленияКод2");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "УсловияИсчисленияКод3");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаАктаН1");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаНачалаРаботы");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаНачалаОплаты");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаОкончанияОплаты");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "МедицинскаяОрганизация");
	
	//   Медицинская организация.
	Шаблон.ОснованиеЗаполнения = "МедицинскаяОрганизация";
	Шаблон.ИмяГруппы           = "СведенияОМедицинскойОрганизации";
	Шаблон.ФиксацияГруппы      = Истина;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НаименованиеМедицинскойОрганизации");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "АдресМедицинскойОрганизации");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОГРНМедицинскойОрганизации");
	
	//   По уходу за ребенком.
	Шаблон.ОснованиеЗаполнения = "ПервичныйДокумент";
	Шаблон.ИмяГруппы           = "СведенияОРебенке";
	Шаблон.ФиксацияГруппы      = Ложь;
	
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФамилияРебенка");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ИмяРебенка");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ОтчествоРебенка");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаРожденияРебенка");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ВидПодтверждающегоДокумента");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ДатаДокумента");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "СерияДокумента");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "НомерДокумента");
	ФиксацияВторичныхДанныхВДокументах.ДобавитьФиксируемыйРеквизит(ФиксируемыеРеквизиты, Шаблон, "ФинансированиеФедеральнымБюджетом");
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыРасширеннаяПодсистемы.ПособияСоциальногоСтрахования.ПрямыеВыплаты") Тогда
		МодульПрямыеВыплатыПособийСоциальногоСтрахованияРасширенный = ОбщегоНазначения.ОбщийМодуль("ПрямыеВыплатыПособийСоциальногоСтрахованияРасширенный");
		МодульПрямыеВыплатыПособийСоциальногоСтрахованияРасширенный.ПриОпределенииФиксируемыхРеквизитовРеестраПрямыхВыплат(ФиксируемыеРеквизиты);
	КонецЕсли;
	
	Возврат Новый ФиксированноеСоответствие(ФиксируемыеРеквизиты);
КонецФункции

#КонецОбласти

Функция СтруктураДанныхЗаполнения() Экспорт
	
	СтруктураДанныхЗаполнения = Новый Структура;
	
	СтруктураДанныхЗаполнения.Вставить("Дата");
	СтруктураДанныхЗаполнения.Вставить("Организация");
	СтруктураДанныхЗаполнения.Вставить("ВидРеестра");
	СтруктураДанныхЗаполнения.Вставить("СтатусДокумента", Перечисления.СтатусыЗаявленийИРеестровНаВыплатуПособий.ВРаботе);
	
	Возврат СтруктураДанныхЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецЕсли

