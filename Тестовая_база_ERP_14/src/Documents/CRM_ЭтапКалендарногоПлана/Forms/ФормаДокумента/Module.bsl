
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ЛицензированиеСервер.ПодсистемаCRMИспользуется() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Невозможно открыть форму контрольной точки. Подсистема 1С:CRM не используется! (см. Персональные настройки пользователя)';en='Can not open the checkpoint form. Subsystem 1C: CRM is not used! (see Personal settings of the user)'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	CRM_ЛицензированиеСервер.ПолучитьЗащищеннуюОбработку().Документ_CRM_ЭтапКалендарногоПлана_ФормаДокумента_ПриСозданииНаСервере();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не Объект.Ссылка.Пустая() Тогда
		
		//Если НЕ ТолькоПросмотр И НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		//	// Проверим кто открыл и если не ответственный, то форма только на чтение.
		//	РежимТолькоПросмотр = Ложь;
		//	Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ПользователиКлиентСервер.ТекущийПользователь()));
		//	Если Строки.Количество() = 0 Тогда // ИЛИ НЕ Строки[0].Ответственный Тогда
		//		РежимТолькоПросмотр = Истина;
		//	КонецЕсли;
		//	ТолькоПросмотр = РежимТолькоПросмотр;
		//КонецЕсли;
		ЭтоНовый = Ложь;
		Если Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.Проект) И Объект.Проект.ЭтоГруппа Тогда
			//
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выберите элемент, а не группу!';en='Select an element, instead of group!'"));
			
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("Начало") Тогда
			Объект.ПлановаяДатаНачала = Параметры.Начало;
		КонецЕсли;
		Если Параметры.Свойство("Окончание") Тогда
			Объект.ПлановаяДатаОкончания = Параметры.Окончание;
		КонецЕсли;
		Если Параметры.Свойство("Наименование") Тогда
			Объект.Тема = Параметры.Наименование;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
			Объект.ПлановаяДатаНачала= ТекущаяДатаСеанса();
		КонецЕсли;

		//// Заполним ответственных по КТ.
		//УчастникиДобавитьОтветственных();
		ЭтоНовый = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Проект) Тогда
		СтатусПроекта = Объект.Проект.CRM_Статус;
	Иначе 
		СтатусПроекта = Перечисления.CRM_СтатусыПроектов.Планируется;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	УстановитьДоступностьРеквизитов(?(Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена, Ложь, Истина));
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СформироватьПредставлениеВложений();
	
	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		ЭтотОбъект.Команды["ВернутьВРаботу"].Подсказка = НСтр("ru='Вернуть в работу контрольную точку'");
		ЭтотОбъект.Команды["Отменить"].Подсказка = НСтр("ru='Отменить контрольную точку'");
	Иначе
		ЭтотОбъект.Команды["ВернутьВРаботу"].Подсказка = НСтр("ru='Вернуть в работу задачу проекта'");
		ЭтотОбъект.Команды["Отменить"].Подсказка = НСтр("ru='Отменить задачу проекта'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Тема) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеКонтекстов();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Строки = Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина));
	Если Строки.Количество() = 0 Тогда
		Если Объект.Участники.Количество() = 1 Тогда
			Объект.Участники[0].Ответственный = Истина;
		ИначеЕсли ПраваНаЧекЛист = "Ограниченные" И Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество()>0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ДействиеПослеВопроса", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Нет прав на указание других участников в качестве Ответственного! Указать Вас?'"), РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка")Тогда
		Объект.ПлановаяДатаОкончания	= Объект.ПлановаяДатаНачала;
		Объект.ФактическаяДатаОкончания = Объект.ФактическаяДатаНачала;
		Объект.ПлановаяДлительность 	= 0;
		Объект.ФактическаяДлительность  = 0;
	КонецЕсли;
	
	//Если ПолучитьЗначениеРеквизита(Объект.Проект, "CRM_Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") И
	//	 ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И Объект.ПлановаяДатаНачала <= НачалоДня(ТекущаяДата()) И 
	//	 Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована") Тогда
	//	
	//	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	//	УстановитьДоступностьРеквизитов(Истина);
	//	
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Проект);
	Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()ИЛИ ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) =  "УПРАВЛЕНИЕНЕБОЛЬШОЙФИРМОЙ_CRM" Тогда
		ИмяФормыПроекта = "Справочник.Проекты.Форма.CRM_ФормаЭлемента";
	ИначеЕсли CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Справочники.Проекты.Формы", "CRM_Модуль_ФормаЭлемента") Тогда
		ИмяФормыПроекта = "Справочник.Проекты.Форма.CRM_Модуль_ФормаЭлемента";
	Иначе
		ИмяФормыПроекта = "Справочник.Проекты.ФормаОбъекта";
	КонецЕсли;
	ПолученнаяФорма = ПолучитьФорму(ИмяФормыПроекта,ПараметрыФормы);
		
	Если ПолученнаяФорма.Открыта() Тогда
		ФормаПроектаОткрыта = Истина;
	КонецЕсли;
	
	// Проверим владельца формы
	Если НЕ ФормаПроектаОткрыта Тогда
		Если ВладелецФормы <> Неопределено Тогда
			Попытка
				Если ВладелецФормы.объект.ссылка = Объект.Проект Тогда
					ФормаПроектаОткрыта = Истина;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ТекущийОбъект.Ссылка.Пустая() И НЕ ТекущийОбъект.Ссылка.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена
	И НЕ ТекущийОбъект.Ссылка.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена
	И (ТекущийОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена ИЛИ ТекущийОбъект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена ) Тогда
		CRM_ОповещенияСервер.УдалитьОповещения(ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Проверим что есть ответственный за КТ.
	Строки = Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина));
	Если Строки.Количество() = 0 Тогда
	//Если Объект.Участники.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Необходимо указать ответственного!';en='It is necessary to specify at least one responsible for test point!'"), , "Участники[0].Ответственный" 
						, "Объект",
						Отказ);
	КонецЕсли;
	
	Если (Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") ИЛИ 
		  Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена")) И
		  НЕ ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru='Для текущего статуса необходимо указать дату закрытия!';en='For the current status, you must specify a closing date!'"),, "Объект.ПлановаяДатаОкончания",,Отказ);
		
	КонецЕсли;

	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И Объект.ФактическаяДатаНачала < Объект.ПлановаяДатаНачала Тогда
			Поле = "Объект.ФактическаяДатаНачала";
			ТекстОшибки = НСтр("ru='Фактическая дата не может быть меньше плановой даты'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,Поле,,Истина);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И Объект.ФактическаяДатаНачала > Объект.ФактическаяДатаОкончания Тогда
		Поле = "Объект.ФактическаяДатаОкончания";
		ТекстОшибки = НСтр("ru='Фактическая дата окончания не может быть меньше фактической даты начала'");	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,Поле,,Истина);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И Объект.ПлановаяДатаНачала > Объект.ПлановаяДатаОкончания Тогда
		Поле = "Объект.ПлановаяДатаОкончания";
		ТекстОшибки = НСтр("ru='Плановая дата окончания не может быть меньше плановой даты начала'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,Поле,,Истина);
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьПланыПроектов",, ЭтотОбъект);

	// Оповещение календарю о записи документа.
	Оповестить("ОбновленыДанныеСобытия", Новый Структура("СсылкаНаОбъект, ОбновлятьКалендарь", Объект.Ссылка, Параметры.ОбновлятьКалендарь), ЭтотОбъект);
	
	Оповестить("ОбновитьНапоминания", Новый Структура("ОткрыватьАктивизироватьФормуНапоминаний", Ложь), ЭтотОбъект);
	
	Оповестить("ОбновитьПланировщик");
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Измененим плановую дату окончания при необходимости
	ПроектОбъект = ТекущийОбъект.Проект.ПолучитьОбъект();
	ЗаписатьПроект = Ложь;
	Если НЕ ФормаПроектаОткрыта Тогда
		
		МаксимальнаяПлановаяДатаОкончания = CRM_УправлениеПроектамиВызовСервера.ПолучитьПлановуюДатуОкончанияПроекта(ТекущийОбъект.Проект);
		Если ТекущийОбъект.Проект.ПлановаяДатаОкончания <> МаксимальнаяПлановаяДатаОкончания Тогда
			ПроектОбъект.ПлановаяДатаОкончания = МаксимальнаяПлановаяДатаОкончания;
			ЗаписатьПроект = Истина;
		КонецЕсли;
		
		МинимальнаяДатаНачала = CRM_УправлениеПроектамиВызовСервера.ПолучитьДатуНачалаПроекта(ТекущийОбъект.Проект);
		Если МинимальнаяДатаНачала <> Неопределено Тогда
			Если ТекущийОбъект.Проект.ДатаНачала <> МинимальнаяДатаНачала Тогда
				ПроектОбъект.ДатаНачала = МинимальнаяДатаНачала;
				ЗаписатьПроект = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Прогноз = CRM_УправлениеПроектамиВызовСервера.ПолучитьПрогноз(ТекущийОбъект.Проект);
		Если ТекущийОбъект.Проект.CRM_ПрогнозЗавершенияПроекта <> Прогноз Тогда
			ПроектОбъект.CRM_ПрогнозЗавершенияПроекта = Прогноз;
			ЗаписатьПроект = Истина;
		КонецЕсли;
		
		Если ЗаписатьПроект Тогда
			ПроектОбъект.Записать();
		КонецЕсли;
		
		ФормаПроектаОткрыта = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриЧтенииНаСервере.
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
		
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийФормы


#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	РеквизитыСсылки = ЗначенияРеквизитовПроекта(Объект.Проект);
	// Заполняем подразделение только, если оно пустое.
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = РеквизитыСсылки.Подразделение;
	КонецЕсли;
	Объект.Этап = РеквизитыСсылки.ТекущийЭтап;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьОтветственными(Команда)
	УчастникиДобавитьОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчистить(Команда)
	
	Если Объект.Участники.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПользователиОчиститьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Список пользователей будет очищен. Продолжить?';en='The list of users will be cleared. Continue?'"), РежимДиалогаВопрос.ОКОтмена, 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.Участники.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиПодбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьПоПодразделению(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РазрешитьВыборКорня", Истина);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиДатуКТ(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаСтарая",НачалоДня(Объект.ПлановаяДатаНачала));
	СтруктураПараметров.Вставить("ТипЭтапа", Объект.ТипЭтапа);
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПеренестиДатуКТЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаПереносаСроков", СтруктураПараметров, ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПеренестиДатуКТЗавершение(ВведенныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВведенныеДанные)  Тогда
		
		// Получены данные для смещения срока КТ.
		ДатаВремяНачала = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВведенныеДанные.ДатаНачала);
		ДатаВремяОкончания = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(ВведенныеДанные.ДатаОкончания);
		Строка = Объект.Смещения.Добавить();
		Строка.СмещениеДатаНачало = Объект.ПлановаяДатаНачала;
		Строка.СмещениеДатаОкончание = Объект.ПлановаяДатаОкончания;
		Строка.Комментарий 	 = ВведенныеДанные.Комментарий;
		Строка.Автор		 = ПользователиКлиентСервер.ТекущийПользователь();
		// изменим дату КТ
		Объект.ПлановаяДатаНачала = НачалоДня(ВведенныеДанные.ДатаНачала);
		Объект.ПлановаяДатаОкончания = НачалоДня(ВведенныеДанные.ДатаОкончания);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СмещенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "СмещенияКомментарий" Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Комментарий);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если не массив, то превратим в массив.
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		МассивВрем = Новый Массив;
		МассивВрем.Добавить(ВыбранноеЗначение);
		ВыбранноеЗначение =  МассивВрем;
	КонецЕсли;
	
	Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ЭлементМассива));
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Пользователь = ЭлементМассива;
				КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
				НоваяСтрока.Адрес = КИПользователя.Адрес;
				НоваяСтрока.Телефон = КИПользователя.Телефон;
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			МассивПользователей = ПолучитьПользователейПодразделения(ЭлементМассива);
			Для каждого Элемент Из МассивПользователей Цикл
				
				Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Элемент));
				Если Строки.Количество() = 0 Тогда
					НоваяСтрока = Объект.Участники.Добавить();
					НоваяСтрока.Пользователь = Элемент;
					КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
					НоваяСтрока.Адрес = КИПользователя.Адрес;
					НоваяСтрока.Телефон = КИПользователя.Телефон;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И (НЕ Элемент.ТекущиеДанные.Добавлена
			И (Элемент.ТекущиеДанные.Пользователь <> ТекущийПользователь ИЛИ Элемент.ТекущиеДанные.Ответственный)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	
	Модифицированность = Истина;
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
		Объект.ФактическаяДатаНачала = ТекущаяДата();
	КонецЕсли;
	
	УстановитьДоступностьРеквизитов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	Модифицированность = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) ИЛИ Объект.ФактическаяДатаОкончания < Объект.ФактическаяДатаНачала Тогда
		Объект.ФактическаяДатаОкончания = ТекущаяДата();
	КонецЕсли;
	ФактическаяДатаОкончанияПриИзменении(Элементы.ФактическаяДатаОкончания);
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена");
		Если НЕ ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда
			Объект.ФактическаяДатаНачала = Объект.ПлановаяДатаНачала;
		КонецЕсли;
		УстановитьДоступностьРеквизитов(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	Модифицированность = Истина;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена") Тогда
	
		Оповещение = Новый ОписаниеОповещения("ВернутьВРаботуПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст = НСтр("ru = 'Вернуть в работу даннную контрольную точку (фактическая дата будет очищена) ?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст = НСтр("ru = 'Вернуть в работу даннную задачу (фактическая дата окончания будет очищена) ?'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) Тогда 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
	ИначеЕсли КонецДня(Объект.ПлановаяДатаНачала) <= КонецДня(ТекущаяДата()) Тогда 
		Если ПолучитьЗначениеРеквизита(Объект.Проект, "CRM_Статус") = ПредопределенноеЗначение("Перечисление.CRM_СтатусыПроектов.ВРаботе") Тогда
			Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
		Иначе
			Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована");
		КонецЕсли;
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована");
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
		Объект.ФактическаяДатаОкончания = Дата(1,1,1);
		Объект.ФактическаяДлительность = 0;
	КонецЕсли;
	
	
	ТолькоПросмотр = Ложь;
	
	Объект.КомментарийОтменыЗадачи = "";
	УстановитьДоступностьРеквизитов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	Модифицированность = Истина;
	Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Проверена");
	УстановитьДоступностьРеквизитов(Ложь);
	ТолькоПросмотр = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
	
	Модифицированность = Истина;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе") Тогда
		Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст = НСтр("ru = 'Вы действительно хотите отменить контрольную точку, находящуюся в работе ?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст = НСтр("ru = 'Вы действительно хотите отменить задачу, находящуюся в работе ?'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена") Тогда
		Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжение", ЭтотОбъект);
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Текст = НСтр("ru = 'Вы действительно хотите отменить выполненную контрольную точку?'");
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Текст = НСтр("ru = 'Вы действительно хотите отменить выполненную задачу?'");
		КонецЕсли;
		
		ПоказатьВопрос(Оповещение, Текст, РежимДиалогаВопрос.ДаНет);
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена");
		УстановитьДоступностьРеквизитов(Ложь);
	КонецЕсли;
	ТолькоПросмотр = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаНачалаПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДатаОкончанияПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПлановаяДлительностьПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаНачалаПриИзменении(Элемент)
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		УстановкаРазрешена = Истина;
		
		Если НЕ Объект.Ссылка.Пустая() Тогда
			// Проверим наличие файлов с необходимым контекстом
			СписокНедостающихКонтекстов = Новый СписокЗначений;
			
			CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Объект.Ссылка, СписокНедостающихКонтекстов);
			
			Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
				УстановкаРазрешена = Ложь; 
			КонецЕсли;
			
		КонецЕсли;
		
		Если УстановкаРазрешена Тогда
			РассчитатьПродолжительность(Элемент);
		Иначе
			Объект.ФактическаяДатаНачала = "";
			
			Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
			Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
				Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
		КонецЕсли;
	Иначе
		РассчитатьПродолжительность(Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДатаОкончанияПриИзменении(Элемент)
	
	УстановкаРазрешена = Истина;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		// Проверим наличие файлов с необходимым контекстом
		СписокНедостающихКонтекстов = Новый СписокЗначений;
		
		CRM_УправлениеПроектамиВызовСервера.ПроверитьНаличиеФайловСНужнымКонтекстом(Объект.Ссылка, СписокНедостающихКонтекстов);
		
		Если СписокНедостающихКонтекстов.Количество() > 0 Тогда
			УстановкаРазрешена = Ложь; 
		КонецЕсли;
		
	КонецЕсли;
	
	Если УстановкаРазрешена Тогда
		РассчитатьПродолжительность(Элемент);
	Иначе
		Объект.ФактическаяДатаОкончания = "";
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Сообщение = НСтр("ru = 'Для завершения задачи необходимо присоединить файл(ы) следующего контекста:'");
		Иначе
			Сообщение = НСтр("ru = 'Для завершения контрольной точки необходимо присоединить файл(ы) следующего контекста:'");
		КонецЕсли;
		Для каждого ЭлементСписка Из СписокНедостающихКонтекстов Цикл
			Сообщение  = Сообщение + Символы.ПС + "  - " + ЭлементСписка.Значение;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическаяДлительностьПриИзменении(Элемент)
	РассчитатьПродолжительность(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(ТекДанные.Пользователь);
		ТекДанные.Адрес = КИПользователя.Адрес;
		ТекДанные.Телефон = КИПользователя.Телефон;
	Иначе
		ТекДанные.Адрес = "";
		ТекДанные.Телефон = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокАдресов = СформироватьСписокКИ(ТекДанные.Пользователь, "АдресЭлектроннойПочты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Адрес");
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите адрес электронной почты'"));
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокТелефонов = СформироватьСписокКИ(ТекДанные.Пользователь, "Телефон");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Телефон");
	СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите телефон'"));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКИЗавершение(ВыбранныйЭлемент, ИмяРеквизита) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекДанные = Элементы.Пользователи.ТекущиеДанные;
		ТекДанные[ИмяРеквизита] = ВыбранныйЭлемент.Значение.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		Заголовок = Объект.Тема;
	Иначе
		Заголовок = НСтр("ru = 'Введите наименование...'");;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДополнительныхРеквизитовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	CRM_ХранилищеНастроек.Сохранить(ЭтотОбъект.ИмяФормы, "ПоказыватьПодсказкуДопРеквизитыПроектов", Ложь);
	Элементы.ДекорацияДополнительныхРеквизитов.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистПередНачаломИзменения(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЧекЛистОписаниеЗадачи" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКонтекстаФайловПередУдалением(Элемент, Отказ)
	Если НЕ ЗначениеЗаполнено(ПраваНаЧекЛист) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ПраваНаЧекЛист = "Ограниченные" И НЕ Элемент.ТекущиеДанные.Добавлена Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОтветственныйПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекДанные.Ответственный Тогда
		Для каждого СтрОтветственный из Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина)) Цикл
			СтрОтветственный.Ответственный = Ложь;
		КонецЦикла;
		ТекДанные.Ответственный = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКонтекстаФайловПриИзменении(Элемент)
	СформироватьПредставлениеКонтекстов();
КонецПроцедуры

&НаКлиенте
Процедура ТЧСОграничениемПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Текданные.Добавлена = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийЭлементовФормы


#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемыСвойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти //СтандартныеПодсистемыСвойства

&НаСервере
Функция СформироватьСписокКИ(Пользователь, ТипСтрокой)
	
	Массив = Новый Массив;
	Массив.Добавить(Пользователь);
	КИПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив, Перечисления.ТипыКонтактнойИнформации[ТипСтрокой]);
	
	СписокТелефонов = Новый СписокЗначений;
	
	Если НЕ КИПользователя = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из КИПользователя Цикл
			
			Если НЕ ТекСсылка = Пользователь Тогда
				СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураНомера.Вставить("Объект"			, Пользователь);
				СписокТелефонов.Добавить(СтруктураНомера, Строка(Пользователь));
				ТекСсылка = Пользователь;
			КонецЕсли;
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, Пользователь);
			СписокТелефонов.Добавить(СтруктураНомера, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокТелефонов;
	
КонецФункции

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Результат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
	Иначе
		Результат = Новый СписокЗначений;
		ПоследнийЭлемент = Неопределено;
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = Найти(Стр, "=");
				Если Поз <> 0 Тогда
					ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Добавляет строки участников, ответственных по проекту.
Процедура УчастникиДобавитьОтветственных()
	
	Если НЕ Объект.Проект.Пустая() И Не Объект.Проект.ЭтоГруппа И ЗначениеЗаполнено(Объект.Проект.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.Проект.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.Проект.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.Этап.Пустая() И Не Объект.Этап.ЭтоГруппа И ЗначениеЗаполнено(Объект.Этап.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.Этап.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.Этап.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовПроекта(ПроектСсылка)
	Возврат Новый Структура("Подразделение, ТекущийЭтап", ПроектСсылка.CRM_Подразделение, ПроектСсылка.CRM_ТекущийЭтап);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователейПодразделения(Подразделение)

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И Пользователи.Подразделение = &Подразделение";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ПолучитьПользователейПодразделения()

&НаКлиенте
Процедура ВернутьВРаботуПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе");
		Объект.ФактическаяДатаОкончания = "";
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Объект.ФактическаяДатаНачала = "";
		КонецЕсли;
		Объект.ФактическаяДлительность = 0;
		ТолькоПросмотр = Ложь;
		УстановитьДоступностьРеквизитов(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПродолжение(Результат, ДопПараметры) Экспорт 
	
	Оповещение = Новый ОписаниеОповещения("ОтменитьПродолжениеВводКомментария", ЭтотОбъект);

	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыОткрытия = Новый Структура("ТипОбъекта", Объект.ТипЭтапа);
		ОткрытьФорму("Документ.CRM_ЭтапКалендарногоПлана.Форма.ФормаВводаКомментария", ПараметрыОткрытия,,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПродолжениеВводКомментария(Результат, ДопПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда 
		Объект.Статус = ПредопределенноеЗначение("Перечисление.CRM_СтатусыЭтаповКалендарногоПлана.Отменена");
		Элементы.КомментарийОтменыЗадачи.Видимость = Истина;
		Объект.КомментарийОтменыЗадачи = Результат;
		
		УстановитьДоступностьРеквизитов(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРеквизитов(Доступность)
	
	Элементы.ГруппаШапка.ТолькоПросмотр = ((Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена 
												И НЕ (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Объект.Проект.Ответственный = Пользователи.ТекущийПользователь()))
											ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена 
											ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена);

	Для Каждого Элемент из Элементы Цикл
		Если Элемент.Имя = "Автор" Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Элемент.ТолькоПросмотр = НЕ Доступность;
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы") И Элемент.Имя <> "ФормаСкопировать" Тогда
			Элемент.Доступность = Доступность;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Истина;
	Элементы.ФормаЗаписать.Доступность 		 = Истина;
	
	Элементы.ВернутьВРаботу.Видимость 	= НЕ Доступность;
	Элементы.ВернутьВРаботу.Доступность = НЕ Доступность;
	
	Элементы.Отменить.Видимость	 		= Доступность;
	Элементы.Отменить.Доступность 		= Доступность;
	
	Элементы.ВыполнитьЗадачу.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.ВРаботе);
		
	Если Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена ИЛИ Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Проверена Тогда 
		Элементы.Отменить.Видимость 					 = Ложь;
		Элементы.Отменить.Доступность 					 = Ложь;
		Элементы.ВернутьВРаботу.Видимость 				 = Истина;
		Элементы.ВернутьВРаботу.Доступность				 = Истина;
		Элементы.ФактическаяДатаНачала.ТолькоПросмотр	 = Истина;
		Элементы.ФактическаяДатаОкончания.ТолькоПросмотр = Истина;
		Элементы.ФактическаяДлительность.ТолькоПросмотр	 = Истина;
		Элементы.Завершить.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Выполнена И НЕ Элементы.ГруппаШапка.ТолькоПросмотр);
	Иначе	
		Элементы.Завершить.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.КомментарийОтменыЗадачи) И Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Отменена Тогда
		Элементы.КомментарийОтменыЗадачи.Видимость = Истина;
	Иначе	
		Элементы.КомментарийОтменыЗадачи.Видимость = Ложь;
	КонецЕсли;
		
	ВидимостьФактДат = ?(СтатусПроекта = Перечисления.CRM_СтатусыПроектов.Планируется, Ложь, Истина);
	
	Элементы.ФактическаяДатаНачала.Видимость 		  	   = ВидимостьФактДат;
	Элементы.ФактическаяДатаОкончания.Видимость 		   = ВидимостьФактДат;
	Элементы.ФактическаяДлительность.Видимость 			   = ВидимостьФактДат;
	Элементы.ДекорацияПродолжительностьДнейФакт.Видимость  = ВидимостьФактДат;
	
	Элементы.Статус.ТолькоПросмотр = Истина;
	
	АвтоЗаголовок = Ложь;
	Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
			Заголовок = НСтр("ru = 'Новая контрольная точка...'");
		Иначе
			Заголовок = Объект.Тема;
		КонецЕсли;
		
		Элементы.Тема.ПодсказкаВвода = НСтр("ru = 'Введите наименование контрольной точки'");
		//Элементы.ПереносСроковЗадачи.Заголовок = НСтр("ru = 'Перенос сроков контрольной точки'");
		
		Элементы.ПлановаяДатаНачала.Заголовок    	= НСтр("ru = 'Плановая дата'");
		Элементы.ПлановаяДатаОкончания.Видимость 	= Ложь;
		Элементы.ПлановаяДлительность.Видимость  	= Ложь;
		Элементы.ДекорацияПродолжительностьДней.Видимость  = Ложь;
		
		Элементы.ФактическаяДатаНачала.Заголовок 	= НСтр("ru = 'Фактическая дата'");
		Элементы.ФактическаяДатаОкончания.Видимость = Ложь;
		Элементы.ФактическаяДлительность.Видимость  = Ложь;
		Элементы.ДекорацияПродолжительностьДнейФакт.Видимость  = Ложь;
		
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
			Заголовок = НСтр("ru = 'Новая задача проекта...'");
		Иначе
			Заголовок = Объект.Тема;
		КонецЕсли;
		
		Элементы.Тема.ПодсказкаВвода = НСтр("ru = 'Введите наименование задачи проекта'");
		
	КонецЕсли;

	Если НЕ ЭтоНовый Тогда
		Элементы.Проект.ТолькоПросмотр = Истина;
		Элементы.Этап.ТолькоПросмотр = НЕ (Объект.ВведенВручную);
	КонецЕсли;
	
	// Права на редактирвание Чек-листа
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ПраваНаЧекЛист = "Полные";
		
	ИначеЕсли Объект.Автор = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Полные";
			
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) и Объект.Проект.Ответственный  = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Полные";
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Этап) и Объект.Этап.Ответственный  = ТекущийПользователь Тогда
		
		ПраваНаЧекЛист = "Ограниченные";
			
	ИначеЕсли Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество()>0 Тогда
		
		ПраваНаЧекЛист = "Ограниченные";
			
	Иначе
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ЧекЛист.ИзменятьПорядокСтрок = (ПраваНаЧекЛист = "Полные");
	Элементы.ЧекЛист.ИзменятьСоставСтрок  = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ГруппаСтатусГоризонт1.Доступность = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ПользователиОтветственный.ТолькоПросмотр = (ПраваНаЧекЛист <> "Полные");
	Планируется = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована);
	Элементы.ПлановаяДатаНачала.ТолькоПросмотр		 = (ПраваНаЧекЛист <> "Полные" ИЛИ НЕ Планируется);
	Элементы.ПлановаяДатаОкончания.ТолькоПросмотр	 = Элементы.ПлановаяДатаНачала.ТолькоПросмотр;
	Элементы.ПлановаяДлительность.ТолькоПросмотр	 = Элементы.ПлановаяДатаНачала.ТолькоПросмотр;
	Элементы.Описание.ТолькоПросмотр = (ПраваНаЧекЛист <> "Полные");
	
	Элементы.ПринятьВРаботу.Видимость = (Объект.Статус = Перечисления.CRM_СтатусыЭтаповКалендарногоПлана.Запланирована И СтатусПроекта = Перечисления.CRM_СтатусыПроектов.ВРаботе);
	
	Элементы.ГруппаВариантыКонтекстаФайлов.Доступность = ЗначениеЗаполнено(ПраваНаЧекЛист);
	Элементы.ВариантыКонтекстаФайлов.ИзменятьПорядокСтрок = (ПраваНаЧекЛист = "Полные");
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьПродолжительность(ТекущийЭлементПерерасчета)
	
	День = 86400; // 60*60*24 
	ДатаПлюсТриДня = КонецДня(ТекущаяДата()) + (День * 3);
	
	Если ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала ИЛИ ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания ИЛИ ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
		Если ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала Тогда
			Объект.ФактическаяДатаОкончания = (НачалоДня(Объект.ФактическаяДатаНачала)) + ((Объект.ФактическаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания Тогда
			Объект.ФактическаяДлительность = (КонецДня(Объект.ФактическаяДатаОкончания) - НачалоДня(Объект.ФактическаяДатаНачала)+1)/День;
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
			Объект.ФактическаяДатаОкончания = (НачалоДня(Объект.ФактическаяДатаНачала)) + ((Объект.ФактическаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) Тогда
			Объект.ФактическаяДлительность = (КонецДня(Объект.ФактическаяДатаОкончания) - НачалоДня(Объект.ФактическаяДатаНачала)+1)/День;
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаНачала) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) Тогда	
			Объект.ФактическаяДатаОкончания = (НачалоДня(Объект.ФактическаяДатаНачала)) + ((Объект.ФактическаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ФактическаяДатаОкончания) И ЗначениеЗаполнено(Объект.ФактическаяДлительность) Тогда
			Объект.ФактическаяДатаНачала = (КонецДня(Объект.ФактическаяДатаОкончания)) - (Объект.ФактическаяДлительность * День);
		КонецЕсли;
		
		Если Объект.ФактическаяДатаОкончания > ДатаПлюсТриДня И Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда 
			Сообщить(НСтр("ru = 'Фактическая дата окончания не должна быть больше, чем на 3 дня от текущей даты'"));
			Объект.ФактическаяДатаОкончания = '00010101';
			Объект.ФактическаяДлительность = 0;
			Возврат		
		ИначеЕсли Объект.ФактическаяДатаНачала > ДатаПлюсТриДня И Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Сообщить(НСтр("ru = 'Фактическая дата не должна быть больше, чем на 3 дня от текущей даты'"));
			Объект.ФактическаяДатаНачала = '00010101';
			Объект.ФактическаяДлительность = 0;
			Возврат
		КонецЕсли;
		
		Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.Этап") Тогда
			Если (Объект.ФактическаяДатаНачала > Объект.ПлановаяДатаНачала И ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала) ИЛИ
				(Объект.ФактическаяДатаОкончания > Объект.ПлановаяДатаОкончания И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания) ИЛИ
				(Объект.ФактическаяДлительность > Объект.ПлановаяДлительность И ЗначениеЗаполнено(Объект.ПлановаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность) Тогда
				
				Если Объект.ФактическаяДлительность > Объект.ПлановаяДлительность И ЗначениеЗаполнено(Объект.ПлановаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ФактическаяДлительность Тогда
					ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
			Если Объект.ФактическаяДатаНачала > Объект.ПлановаяДатаНачала И ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) Тогда
				
				ТекущийЭлементПерерасчета = Элементы.ФактическаяДатаНачала;
							
			КонецЕсли;
		КонецЕсли;

	Иначе
		Если ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ПлановаяДатаНачала Тогда
			Объект.ПлановаяДатаОкончания = (НачалоДня(Объект.ПлановаяДатаНачала)) + ((Объект.ПлановаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ПлановаяДатаОкончания Тогда
			Объект.ПлановаяДлительность = (КонецДня(Объект.ПлановаяДатаОкончания) - НачалоДня(Объект.ПлановаяДатаНачала)+1)/День;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) И ТекущийЭлементПерерасчета = Элементы.ПлановаяДлительность Тогда
			Объект.ПлановаяДатаОкончания = (НачалоДня(Объект.ПлановаяДатаНачала)) + ((Объект.ПлановаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) Тогда
			Объект.ПлановаяДлительность = (КонецДня(Объект.ПлановаяДатаОкончания) - НачалоДня(Объект.ПлановаяДатаНачала)+1)/День;
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаНачала) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) Тогда	
			Объект.ПлановаяДатаОкончания = (НачалоДня(Объект.ПлановаяДатаНачала)) + ((Объект.ПлановаяДлительность - 1) * День);
		ИначеЕсли ЗначениеЗаполнено(Объект.ПлановаяДатаОкончания) И ЗначениеЗаполнено(Объект.ПлановаяДлительность) Тогда
			Объект.ПлановаяДатаНачала = (КонецДня(Объект.ПлановаяДатаОкончания)) - ((Объект.ПлановаяДлительность - 1) * День);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
// Функция возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
// Параметры:
//  СсылкаНаОбъект	- Ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита	- Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ПолучитьЗначениеРеквизита(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции // ПолучитьЗначениеРеквизита()

&НаСервере
Функция ПолучитьНаименованиеРеквизита(Имя) 
	
	МетаданныеДокумента = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.CRM_ЭтапКалендарногоПлана")).Метаданные();
	
	Для Каждого РеквизитДокумента из МетаданныеДокумента.Реквизиты Цикл
		Если РеквизитДокумента.Имя = Имя Тогда
			Возврат РеквизитДокумента.Синоним
		КонецЕсли;
	КонецЦикла;	
		
КонецФункции

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.CRM_ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭтапПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_ЭтапКалендарногоПланаПрисоединенныеФайлы КАК ЭтапПрисоединенныеФайлы
	|ГДЕ
	|	ЭтапПрисоединенныеФайлы.ВладелецФайла = &Этап
	|	И НЕ ЭтапПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеКонтекстов()
	
	ЧислоКонтекстов = Объект.ВариантыКонтекстаФайлов.Количество();
	Если ЧислоКонтекстов = 0 Тогда
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов'");
	Иначе
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов('") + ЧислоКонтекстов + ")"; 
	КонецЕсли;
	Элементы.ГруппаВариантыКонтекстаФайлов.Заголовок = КонтекстыПредставление;
	
КонецПроцедуры // СформироватьПредставлениеКонтекстов()

&НаКлиенте
Процедура ДействиеПослеВопроса(Ответ, ДопПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
		Если Строки.Количество()>0 Тогда
			Строки[0].Ответственный = Истина;
			Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти //СлужебныеПроцедурыИФункции

