#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	ИдентификаторПлатежа   = Неопределено;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("Исправление") И ДанныеЗаполнения.Исправление Тогда
			
			Если ДанныеЗаполнения.Свойство("СчетФактураОснование") Тогда
				ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения);
			ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
				ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("Корректировочный") И ДанныеЗаполнения.Корректировочный
			И ДанныеЗаполнения.Свойство("ДокументОснование")
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("ДокументСсылка.КорректировкаРеализации") 
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента") 
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") 
			И ТипЗнч(ДанныеЗаполнения.ДокументОснование) <> Тип("Массив") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
				ЗаполнитьКорректировкуПоСчетуФактуре(ДанныеЗаполнения);
			Иначе
				ЗаполнитьКорректировкуПоДокументуОснованию(ДанныеЗаполнения);
			КонецЕсли;
			
		ИначеЕсли ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			
			ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
			
		КонецЕсли;
		
		Если НЕ ДанныеЗаполнения.Свойство("ДатаВыставления") Тогда
			ДанныеЗаполнения.Вставить("ДатаВыставления", ТекущаяДатаСеанса());
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	СформироватьМассивОснованийДляПроверки();
	
	Если Не Исправление Тогда
		НомерИсправления = "";
		СчетФактураОснование = Неопределено;
	КонецЕсли;
	
	// Проверим время документа относительно времени документа-основания
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		ДатаПоследнегоДокументаОснования = ПолучитьДатуПоследнегоДокументаОснования();
		Если Дата < ДатаПоследнегоДокументаОснования
			ИЛИ НЕ ЗначениеЗаполнено(Дата) Тогда
		 	
			Дата = ?(ДатаПоследнегоДокументаОснования = КонецДня(ДатаПоследнегоДокументаОснования),
					 ДатаПоследнегоДокументаОснования,
					 ДатаПоследнегоДокументаОснования + 1);
			
		КонецЕсли; 
	КонецЕсли;; 
	
	Если Не ПометкаУдаления Тогда
		ПроверитьДублиСчетФактуры(Отказ);
	КонецЕсли;
	
	Если ЭтоНовый() И Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	ЗаполнитьПризнакСводныйКорректировочный();
	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		МассивДокументов= Новый Массив;
		МассивДокументов.Добавить(Ссылка);
		РегистрыСведений.ЗаданияКФормированиюЗаписейКнигиПокупокПродаж.СформироватьЗаданияПоДокументам(МассивДокументов);
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

	Документы.СчетФактураВыданный.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	УчетНДСУП.СформироватьДвиженияВРегистры(ДополнительныеСвойства, Движения, Отказ);
	//++ НЕ УТ
	РеглУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТ
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(Ссылка, ДополнительныеСвойства.МассивОснованийДляПроверки);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	КоличествоОснований = ДокументыОснования.Количество();
	
	Если КоличествоОснований = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Документы-основания счета-фактуры""';
								|en = 'No line is entered to list ""Tax invoice base documents""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	ДокументыНеПроведены    = Ложь;
	НетИсходногоСчетФактуры = Ложь;
	
	Если ДокументыОснования.Количество() > 0 Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДокументыОснования.ДокументОснование.Проведен КАК ДокументОснованиеПроведен,
		|	ДокументыОснования.ИсходныйДокумент КАК ИсходныйДокумент
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДокументыОснования
		|ГДЕ
		|	ДокументыОснования.Ссылка = &Ссылка
		|");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ДокументОснованиеПроведен Тогда
				ДокументыНеПроведены = Истина;
			КонецЕсли;
			
			Если Корректировочный И Не ЗначениеЗаполнено(Выборка.ИсходныйДокумент) Тогда
				НетИсходногоСчетФактуры = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДокументыНеПроведены Тогда
		Если КоличествоОснований > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести, если проведены все документы списка ""Документы-основания"".';
									|en = 'Tax invoice can be posted if all documents of list ""Base documents"" are posted.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Счет-фактуру можно провести только на основании проведенного документа.';
									|en = 'Tax invoice can be posted only on the basis of a posted document.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	Если НетИсходногоСчетФактуры Тогда
		Если КоличествоОснований > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для всех документов списка ""Документы-основания"".';
									|en = 'Before adding a corrective tax invoice, create a source tax invoice for every document of list ""Base documents"".'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Перед добавлением корректировочного счета-фактуры создайте исходный счет-фактуру для документа-основания.';
									|en = 'Before adding a corrective tax invoice, create a source tax invoice for the base document.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДокументыОснованияПредставление", , Отказ);
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Ссылка) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	Если НЕ Исправление Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СчетФактураОснование");
		МассивНепроверяемыхРеквизитов.Добавить("НомерИсправления");
	КонецЕсли;
	
	Если УчетНДСПереопределяемый.ВерсияПостановленияНДС1137(Дата) > 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("КодВидаОперации");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	Если Исправление Тогда
		
		// Установка номера по исходному документу.
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СчетФактураВыданный.Исправление
		|			ТОГДА СчетФактураВыданный.СчетФактураОснование
		|		ИНАЧЕ СчетФактураВыданный.Ссылка
		|	КОНЕЦ                     КАК Ссылка,
		|	СчетФактураВыданный.Номер КАК Номер
		|ПОМЕСТИТЬ ИсходныеДокументы
		|ИЗ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|ГДЕ
		|	СчетФактураВыданный.Ссылка = &СчетФактураОснование
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.Номер КАК Номер,
		|	ЕСТЬNULL(Исправления.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	ИсходныеДокументы КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК Исправления
		|		ПО ИсходныеДокументы.Ссылка = Исправления.СчетФактураОснование
		|			И ИсходныеДокументы.Ссылка <> Исправления.Ссылка
		|			И Исправления.Исправление
		|			И Исправления.Корректировочный = &Корректировочный
		|			И НЕ Исправления.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ");
		
		Запрос.УстановитьПараметр("СчетФактураОснование", СчетФактураОснование);
		Запрос.УстановитьПараметр("Корректировочный", Корректировочный);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтандартнаяОбработка = Ложь;
			
			// Установка номера и переопределение префикса информационной базы.
			Префикс = "И";
			ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазыИОрганизации(ЭтотОбъект, СтандартнаяОбработка, Префикс);
			
			НомерБезПрефикса = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(Выборка.Номер, Истина, Истина);
			Если СтрДлина(СокрП(НомерБезПрефикса)) = 7 Тогда
				НомерБезПрефикса = Прав(НомерБезПрефикса, СтрДлина(НомерБезПрефикса)-1);
			КонецЕсли;
			Номер = Префикс + НомерБезПрефикса;
			
			НомерИсправления = Формат(Число(Выборка.НомерИсправления)+1, "ЧЦ=10; ЧДЦ=0; ЧГ=0");
			
		КонецЕсли;
		
	Иначе
		
		Префикс = "0";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Запись наборов записей
	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	РегистрыСведений.ТребуетсяОформлениеСчетаФактуры.ОбновитьСостояние(Ссылка, ДополнительныеСвойства.МассивОснованийДляПроверки, Истина);
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Организация") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Валюта") Тогда
		Валюта = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета(Валюта);
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Контрагент") Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Ответственный") Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("Подразделение") Тогда
		Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСчетаФактурыПоОснованию(ВыбранныйСчетФактура = Неопределено) Экспорт
	
	Если ДокументыОснования.Количество() = 0
		Или Не ЗначениеЗаполнено(ДокументыОснования[0].ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОснование = ДокументыОснования[0].ДокументОснование;
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	
	// Возможность ручного выбора исходного счет-фактуры для корректировочного счет-фактуры.
	Если Не ВыбранныйСчетФактура = Неопределено И РеквизитыОснования.Количество() = 1 И Корректировочный Тогда
		
			РеквизитыВыранногоСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранныйСчетФактура,"Номер, Дата");
			
			РеквизитыОснования[0].ИсходныйДокумент = ВыбранныйСчетФактура;
			РеквизитыОснования[0].НомерИсходногоДокумента = РеквизитыВыранногоСчетаФактуры.Номер;
			РеквизитыОснования[0].ДатаИсходногоДокумента = РеквизитыВыранногоСчетаФактуры.Дата;
	
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено И Не ПараметрыСчетаФактуры.Организация = Организация Тогда
		Номер = "";
		Организация = ПараметрыСчетаФактуры.Организация;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено И Не ПараметрыСчетаФактуры.Контрагент = Контрагент Тогда
		Контрагент = ПараметрыСчетаФактуры.Контрагент;
		КППКонтрагента = ПараметрыСчетаФактуры.КППКонтрагента;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Партнер = Неопределено И Не ПараметрыСчетаФактуры.Партнер = Партнер Тогда
		Партнер = ПараметрыСчетаФактуры.Партнер;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Договор = Неопределено И Не ПараметрыСчетаФактуры.Договор = Договор Тогда
		Договор = ПараметрыСчетаФактуры.Договор;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Валюта = Неопределено
			И Валюта <> ВалютаРегламентированногоУчета И Валюта <> ПараметрыСчетаФактуры.Валюта Тогда
		Валюта = ПараметрыСчетаФактуры.Валюта;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		Исправление = ПараметрыСчетаФактуры.Исправление;
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И Исправление Тогда
		СчетФактураОснование = ПараметрыСчетаФактуры.СчетФактураОснование;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Ответственный = Неопределено И Не ПараметрыСчетаФактуры.Ответственный = Ответственный Тогда
		Ответственный = ПараметрыСчетаФактуры.Ответственный;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Подразделение = Неопределено И Не ПараметрыСчетаФактуры.Подразделение = Подразделение Тогда
		Подразделение = ПараметрыСчетаФактуры.Подразделение;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Склад = Неопределено И Не ПараметрыСчетаФактуры.Склад = Склад Тогда
		Склад = ПараметрыСчетаФактуры.Склад;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.НаправлениеДеятельности = Неопределено И Не ПараметрыСчетаФактуры.НаправлениеДеятельности = НаправлениеДеятельности Тогда
		НаправлениеДеятельности = ПараметрыСчетаФактуры.НаправлениеДеятельности;
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.ИдентификаторГосКонтракта = Неопределено И Не ПараметрыСчетаФактуры.ИдентификаторГосКонтракта = ИдентификаторГосКонтракта Тогда
		ИдентификаторГосКонтракта = ПараметрыСчетаФактуры.ИдентификаторГосКонтракта;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КодВидаОперации) Тогда
		КодВидаОперации = КодВидаОперации();
	КонецЕсли;
	
	Если РеквизитыОснования.Количество() > 0 Тогда
		ДокументыОснования.Загрузить(РеквизитыОснования);
	КонецЕсли;
	
	Для Каждого СтрокаОснования Из ДокументыОснования Цикл
		
		СтрокаОснования.ХозяйственнаяОперация = 
			ПараметрыСчетаФактуры.ХозяйственныеОперацииДокументовОснований[СтрокаОснования.ДокументОснование];
		
		Если Не ЗначениеЗаполнено(СтрокаОснования.ХозяйственнаяОперация)Тогда
			СтрокаОснования.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		Если МассивОснований.Количество() > 0 Тогда
			ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		КонецЕсли;
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	ДанныеЗаполнения.Свойство("Корректировочный", Корректировочный);
	
	ПараметрыСчетаФактуры = ПолучитьПараметрыСчетаФактурыПоОснованиям();
	
	Если Не ПараметрыСчетаФактуры.Организация = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Организация", ПараметрыСчетаФактуры.Организация);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Подразделение = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Подразделение", ПараметрыСчетаФактуры.Подразделение);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Контрагент = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Контрагент",     ПараметрыСчетаФактуры.Контрагент);
		ДанныеЗаполнения.Вставить("КППКонтрагента", ПараметрыСчетаФактуры.КППКонтрагента);
		ДанныеЗаполнения.Вставить("ИННКонтрагента", ПараметрыСчетаФактуры.ИННКонтрагента);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Склад = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Склад", ПараметрыСчетаФактуры.Склад);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Партнер = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Партнер", ПараметрыСчетаФактуры.Партнер);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.Договор = Неопределено Тогда
		ДанныеЗаполнения.Вставить("Договор", ПараметрыСчетаФактуры.Договор);
	КонецЕсли;
	
	Если Не ПараметрыСчетаФактуры.НаправлениеДеятельности = Неопределено Тогда
		ДанныеЗаполнения.Вставить("НаправлениеДеятельности", ПараметрыСчетаФактуры.НаправлениеДеятельности);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.Корректировочный = Неопределено Тогда
		Корректировочный = ПараметрыСчетаФактуры.Корректировочный;
		ДанныеЗаполнения.Вставить("Корректировочный", Корректировочный);
		ДанныеЗаполнения.Вставить("Исправление", ПараметрыСчетаФактуры.Исправление);
	КонецЕсли;
	
	Если НЕ ПараметрыСчетаФактуры.СчетФактураОснование = Неопределено И ДанныеЗаполнения.Исправление Тогда
		ДанныеЗаполнения.Вставить("СчетФактураОснование", ПараметрыСчетаФактуры.СчетФактураОснование);
	КонецЕсли;
	
	Если НЕ ДанныеЗаполнения.Свойство("КодВидаОперации") Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперации", КодВидаОперации(ДанныеЗаполнения.ДокументОснование));
	КонецЕсли;
	
	Если ДанныеЗаполнения.КодВидаОперации = "34" Тогда
		ДанныеЗаполнения.Вставить("КодВидаОперацииНаУменьшение", "34");
	КонецЕсли;
	
	ИдентификаторГосКонтракта = ПараметрыСчетаФактуры.ИдентификаторГосКонтракта;
	
	РеквизитыОснования = ПараметрыСчетаФактуры.РеквизитыОснований;
	Если Корректировочный И РеквизитыОснования.Количество() > 0 Тогда
		ДокументыОснования.Загрузить(РеквизитыОснования);
	КонецЕсли;
	
	Для Каждого СтрокаОснования Из ДокументыОснования Цикл
		
		СтрокаОснования.ХозяйственнаяОперация = 
			ПараметрыСчетаФактуры.ХозяйственныеОперацииДокументовОснований[СтрокаОснования.ДокументОснование];
		
		Если Не ЗначениеЗаполнено(СтрокаОснования.ХозяйственнаяОперация)Тогда
			СтрокаОснования.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоОснованию(ДанныеЗаполнения)
	
	Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
		
		МассивОснований = ДанныеЗаполнения.ДокументОснование;
		Для Каждого ОснованиеЗаполнения Из МассивОснований Цикл
			СтрокаОснования = ДокументыОснования.Добавить();
			СтрокаОснования.ДокументОснование = ОснованиеЗаполнения;
		КонецЦикла;
		ДанныеЗаполнения.ДокументОснование = МассивОснований[0];
		
	Иначе
		СтрокаОснования = ДокументыОснования.Добавить();
		СтрокаОснования.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	КонецЕсли;
	
	Основание = ДанныеЗаполнения.ДокументОснование;
	
	РеквизитыСчетаФактуры = ИсправляемыйСчетФактураПоОснованию(
		ЭтотОбъект.Ссылка,
		Основание,
		?(ДанныеЗаполнения.Свойство("Организация"), ДанныеЗаполнения.Организация, Неопределено));
	ИдентификаторГосКонтракта = РеквизитыСчетаФактуры.ИдентификаторГосКонтракта;

	Если ЗначениеЗаполнено(РеквизитыСчетаФактуры.Ссылка) Тогда
		
		Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
			ИмяРеквизита      = РеквизитСФ.Ключ;
			ЗначениеРеквизита = РеквизитСФ.Значение;
			
			Если ИмяРеквизита = "ДокументыОснования" Тогда
				ДокументыОснования.Загрузить(ЗначениеРеквизита);
			ИначеЕсли ИмяРеквизита = "Ссылка" Тогда
				ДанныеЗаполнения.Вставить("СчетФактураОснование", ЗначениеРеквизита);
			ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не обнаружен исходный счет-фактура к исправлению.
		|Введите счет-фактуру к исходному документу продажи, а уже затем введите исправительный счет-фактуру.';
		|en = 'Original tax invoice for correction is not found.
		|Enter tax invoice for the original sales document, and then enter the replacement tax invoice.'");
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИсправлениеПоСчетуФактуре(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Основание = ДанныеЗаполнения.СчетФактураОснование;
	Иначе
		Основание = СчетФактураОснование;
		Исправление = Истина;
	КонецЕсли;
	
	РеквизитыСчетаФактуры = ДанныеСчетаФактуры(Основание);
	ИдентификаторГосКонтракта = РеквизитыСчетаФактуры.ИдентификаторГосКонтракта;
	Для Каждого РеквизитСФ Из РеквизитыСчетаФактуры Цикл
		
		ИмяРеквизита      = РеквизитСФ.Ключ;
		ЗначениеРеквизита = РеквизитСФ.Значение;
		
		Если ИмяРеквизита = "ДокументыОснования" Тогда
			ДокументыОснования.Загрузить(РеквизитСФ.Значение);
		ИначеЕсли ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Если ДанныеЗаполнения <> Неопределено Тогда
				ДанныеЗаполнения.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			Иначе
				ЭтотОбъект[ИмяРеквизита] = ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкуПоСчетуФактуре(ДанныеЗаполнения)
	
	РеквизитыДляОбработки = Документы.СчетФактураВыданный.ПараметрыЗаполненияПоСчетуФактуре(
		ДанныеЗаполнения.ДокументОснование);
	
	Если РеквизитыДляОбработки.Корректировочный Тогда
		
		Основания = РеквизитыДляОбработки.Основания;
		
		Если Основания.Количество() = 1 Тогда
			ДанныеЗаполнения.Вставить("ДокументОснование", Основания[0]);
		Иначе
			ДанныеЗаполнения.Вставить("ДокументОснование", Основания);
			ДанныеЗаполнения.Вставить("Дата", РеквизитыДляОбработки.ДатаКорректировки);
		КонецЕсли;
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКорректировкуПоДокументуОснованию(ДанныеЗаполнения)
	
	ТаблицаОснований = КорректировочныеДокументыПоОснованию(
		ДанныеЗаполнения.ДокументОснование);
	
	Если ТаблицаОснований.Количество() > 0 Тогда
		
		ДанныеЗаполнения.Вставить("ДокументОснование", ТаблицаОснований.ВыгрузитьКолонку("Ссылка"));
		ДанныеЗаполнения.Вставить("Дата", ТаблицаОснований[0].Дата);
		
		ЗаполнитьПоДокументуОснованию(ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПризнакСводныйКорректировочный() Экспорт
	
	КоличествоКорректировокРеализаций = 0;
	Если ЭтотОбъект.Корректировочный Тогда
		Для каждого СтрокаОснование Из ЭтотОбъект.ДокументыОснования Цикл
			Если ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")
				ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
				ИЛИ ТипЗнч(СтрокаОснование.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
				КоличествоКорректировокРеализаций = КоличествоКорректировокРеализаций + 1;
			КонецЕсли;
			Если КоличествоКорректировокРеализаций > 1 Тогда //Если корректировок несколько, то СФ сводный.
				ЭтотОбъект.СводныйКорректировочный = ИСТИНА;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоКорректировокРеализаций <= 1 Тогда
			ЭтотОбъект.СводныйКорректировочный = ЛОЖЬ;
		КонецЕсли;
	Иначе
		ЭтотОбъект.СводныйКорректировочный = ЛОЖЬ;
	КонецЕсли;
	
КонецПроцедуры

Функция ИсправляемыйСчетФактураПоОснованию(Ссылка, Основание, Организация = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&ДокументОснование КАК Ссылка
	|ПОМЕСТИТЬ ОснованияСчетаФактуры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировок.ДокументОснование КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеКорректировок
	|ГДЕ
	|	ДанныеКорректировок.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКорректировок.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеОснования
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.КорректировкаРеализации КАК ДанныеКорректировок
	|	ПО
	|		ДанныеКорректировок.ДокументОснование = ДанныеОснования.ДокументОснование
	|
	|ГДЕ
	|	ДанныеОснования.Ссылка = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписьКнигиПродаж.ИсправляемыйДокумент КАК Ссылка
	|ИЗ
	|	Документ.ЗаписьКнигиПродаж КАК ЗаписьКнигиПродаж
	|ГДЕ
	|	ЗаписьКнигиПродаж.Ссылка = &ДокументОснование
	|	И ЗаписьКнигиПродаж.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеПрочегоНачисленияНДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОснований.Ссылка КАК ДокументОснование,
	|	ЕСТЬNULL(ДанныеРеестра.ХозяйственнаяОперация,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)) КАК ХозяйственнаяОперация
	|ИЗ
	|	ОснованияСчетаФактуры КАК ДанныеОснований
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|	ПО ДанныеОснований.Ссылка = ДанныеРеестра.Ссылка
	|		И НЕ ДанныеРеестра.ДополнительнаяЗапись
	|;
	|
	|////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка                        КАК Ссылка,
	|	СчетФактураВыданный.ДокументОснование             КАК ДокументОснование,
	|	СчетФактураВыданный.Валюта                        КАК Валюта,
	|	СчетФактураВыданный.Организация                   КАК Организация,
	|	СчетФактураВыданный.Контрагент                    КАК Контрагент,
	|	СчетФактураВыданный.КППКонтрагента                КАК КППКонтрагента,
	|	СчетФактураВыданный.КодВидаОперации               КАК КодВидаОперации,
	|	СчетФактураВыданный.Корректировочный              КАК Корректировочный,
	|	СчетФактураВыданный.Номер                         КАК НомерИсходногоДокумента,
	|	СчетФактураВыданный.ИдентификаторГосКонтракта     КАК ИдентификаторГосКонтракта,
	|	ВЫБОР КОГДА СчетФактураВыданный.Исправление ТОГДА
	|		ЕСТЬNULL(СчетФактураВыданный.СчетФактураОснование.Дата, Неопределено)
	|	ИНАЧЕ
	|		СчетФактураВыданный.Дата
	|	КОНЕЦ                                             КАК ДатаИсходногоДокумента,
	|	ВЫБОР КОГДА СчетФактураВыданный.Исправление ТОГДА
	|		СчетФактураВыданный.НомерИсправления
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ                                             КАК НомерИсправленияИсходногоДокумента,
	|	ВЫБОР КОГДА СчетФактураВыданный.Исправление ТОГДА
	|		СчетФактураВыданный.Дата
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ                                             КАК ДатаИсправленияИсходногоДокумента,
	|	
	|	СчетФактураВыданный.ДокументыОснования.(
	|		ДокументОснование,
	|		ХозяйственнаяОперация,
	|		ИсходныйДокумент,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента,
	|		НомерИсправленияИсходногоДокумента,
	|		ДатаИсправленияИсходногоДокумента
	|	) КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйОснования
	|	ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйОснования.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОснованияСчетаФактуры КАК ОснованияСчетаФактуры
	|		ПО ОснованияСчетаФактуры.Ссылка = СчетФактураВыданныйОснования.ДокументОснование
	|
	|ГДЕ
	|	СчетФактураВыданный.Ссылка <> &Ссылка
	|	И (СчетФактураВыданный.Организация = &Организация
	|	ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И СчетФактураВыданный.Проведен
	|	И НЕ СчетФактураВыданный.ПометкаУдаления
	|	И НЕ СчетФактураВыданный.Исправление
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Корректировочный УБЫВ,
	|	СчетФактураВыданный.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("ДокументОснование", Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[2];
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ВидыОпераций = Новый Соответствие;
	ВыборкаОпераций = МассивРезультатов[1].Выбрать();
	Пока ВыборкаОпераций.Следующий() Цикл
		ВидыОпераций.Вставить(ВыборкаОпераций.ДокументОснование, ВыборкаОпераций.ХозяйственнаяОперация);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, Выборка);
		ТаблицаОснований = Выборка.ДокументыОснования.Выгрузить();
		Если Выборка.ДокументОснование <> Основание Тогда
			
			РеквизитыСчетаФактуры.ДокументОснование = Основание;
			ТаблицаОснований.Очистить();
			
			СтрокаОснования = ТаблицаОснований.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОснования, Выборка);
			СтрокаОснования.ДокументОснование = Основание;
			СтрокаОснования.ХозяйственнаяОперация = ВидыОпераций[Основание];
			Если Выборка.Корректировочный Тогда
				СтрокаОснования.ИсходныйДокумент = Выборка.Ссылка;
				РеквизитыСчетаФактурыОснования = ДанныеСчетаФактуры(Выборка.Ссылка);
				ИсходныеДанныеСчетаФактуры = РеквизитыСчетаФактурыОснования.ДокументыОснования;
				Для Каждого СтрокаТаблицы Из ИсходныеДанныеСчетаФактуры Цикл
					ЗаполнитьЗначенияСвойств(СтрокаОснования, СтрокаТаблицы, "НомерИсходногоДокумента,ДатаИсходногоДокумента");
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		РеквизитыСчетаФактуры.Вставить("ДокументыОснования", ТаблицаОснований);
		
	КонецЕсли;
	
	Возврат РеквизитыСчетаФактуры;
	
КонецФункции

Функция ДанныеСчетаФактуры(СчетФактура)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СчетФактураВыданный.ДокументОснование             КАК ДокументОснование,
	|	ВЫБОР КОГДА СчетФактураВыданный.Исправление ТОГДА
	|		СчетФактураВыданный.СчетФактураОснование
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                             КАК СчетФактураОснование,
	|	СчетФактураВыданный.Валюта                        КАК Валюта,
	|	СчетФактураВыданный.Организация                   КАК Организация,
	|	СчетФактураВыданный.Контрагент                    КАК Контрагент,
	|	СчетФактураВыданный.КППКонтрагента                КАК КППКонтрагента,
	|	СчетФактураВыданный.КодВидаОперации               КАК КодВидаОперации,
	|	СчетФактураВыданный.Корректировочный              КАК Корректировочный,
	|	СчетФактураВыданный.ИдентификаторГосКонтракта     КАК ИдентификаторГосКонтракта,
	|	СчетФактураВыданный.ДокументыОснования.(
	|		ДокументОснование,
	|		ХозяйственнаяОперация,
	|		ИсходныйДокумент,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента,
	|		НомерИсправленияИсходногоДокумента,
	|		ДатаИсправленияИсходногоДокумента
	|	)                                                 КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		СтруктураДанных.Вставить("ДокументыОснования", Выборка.ДокументыОснования.Выгрузить());
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция КорректировочныеДокументыПоОснованию(Основание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_СчетаФактурыИсходные
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|	ПО СчетФактураВыданный.Ссылка = ОснованияСчетаФактуры.Ссылка
	|		И НЕ СчетФактураВыданный.Исправление
	|		И СчетФактураВыданный.Проведен
	|ГДЕ
	|	ОснованияСчетаФактуры.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.Дата КАК Дата
	|ИЗ
	|	ВТ_СчетаФактурыИсходные КАК СчетаФактурыИсходные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованияСчетаФактуры
	|			ПО СчетаФактурыИсходные.Ссылка = ОснованияСчетаФактуры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|			ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаРеализации.ДокументОснование
	|			И КорректировкаРеализации.ВидКорректировки В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
	|			ПО (КорректировкаРеализации.Ссылка = ТребуетсяСчетФактура.Основание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Функция КодВидаОперации(Основание = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Основание) И ДокументыОснования.Количество() > 0 Тогда
		Основание = ДокументыОснования[0].ДокументОснование;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Основание", Основание);
	Запрос.УстановитьПараметр("ТипыЗапасовСобственные", УчетНДСУПСлужебный.ТипыЗапасовСобственные());
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СчетФактураВыданный"));
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеОснованийСчетовФактур.НалогообложениеНДС,
	|	ДанныеОснованийСчетовФактур.ЭтоВозврат,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДанныеОснованийСчетовФактур.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьТовары,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДанныеОснованийСчетовФактур.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьСобственныйТовар,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА
	|		НЕ ДанныеОснованийСчетовФактур.ТипЗапасов В (&ТипыЗапасовСобственные)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьКомиссионныйТовар
	|ИЗ
	|	РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснованийСчетовФактур
	|ГДЕ
	|	ДанныеОснованийСчетовФактур.Регистратор = &Основание
	|	И ДанныеОснованийСчетовФактур.ТипСчетаФактуры = &ИдентификаторМетаданных
	|СГРУППИРОВАТЬ ПО
	|	ДанныеОснованийСчетовФактур.НалогообложениеНДС,
	|	ДанныеОснованийСчетовФактур.ЭтоВозврат
	|";
	
	КодВидаОперации = "01";
	ВерсияКодовВидовОпераций = УчетНДСКлиентСервер.ВерсияКодовВидовОпераций(?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса()));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЭтоВозврат Тогда
			Если Выборка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
				КодВидаОперации = "34";
			Иначе
				КодВидаОперации = ?(ВерсияКодовВидовОпераций >= 3, "01", "03");
			КонецЕсли;
		ИначеЕсли Выборка.ЕстьКомиссионныйТовар И Выборка.ЕстьСобственныйТовар Тогда
				КодВидаОперации = ?(ВерсияКодовВидовОпераций >= 3, "15", "01;04");
		ИначеЕсли Выборка.ЕстьКомиссионныйТовар Тогда
			КодВидаОперации = ?(ВерсияКодовВидовОпераций >= 3, "01", "04");
		ИначеЕсли Выборка.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДСУПокупателя Тогда
			КодВидаОперации = "34";
		Иначе
			КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодВидаОперации;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Определяет реквизиты счета-фактуры на основании выбранных документов-оснований
//
// Возвращаемое значение:
//	Структура - реквизиты счета-фактуры.
//
Функция ПолучитьПараметрыСчетаФактурыПоОснованиям()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("Организация, Контрагент, КППКонтрагента, ИННКонтрагента,
		|Партнер, Договор, Валюта, НаправлениеДеятельности, Склад, Подразделение,
		|СчетФактураОснование, РеквизитыОснований, ИдентификаторГосКонтракта, Ответственный");
	Результат.Вставить("ХозяйственныеОперацииДокументовОснований", Новый Соответствие);
	Результат.Вставить("Корректировочный", Ложь);
	Результат.Вставить("Исправление", Ложь);
	
	РеквизитыОснований = Новый ТаблицаЗначений;
	Колонки = РеквизитыОснований.Колонки;
	Колонки.Добавить("ДокументОснование");
	Колонки.Добавить("ИсходныйДокумент");
	Колонки.Добавить("НомерИсходногоДокумента",            ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Колонки.Добавить("ДатаИсходногоДокумента",             ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Колонки.Добавить("НомерИсправленияИсходногоДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(3));
	Колонки.Добавить("ДатаИсправленияИсходногоДокумента",  ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Результат.РеквизитыОснований = РеквизитыОснований;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("ТипСчетаФактуры", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Ссылка)));
	Запрос.УстановитьПараметр("СчетФактура", Ссылка);
	Запрос.УстановитьПараметр("ДатаОтраженияВозвратовКорректировочнымиСФ", УчетНДСУП.НастройкиУчета().ДатаОтраженияВозвратовКорректировочнымиСФ);
	
	ТекстЗапросаОснований = 
	"ВЫБРАТЬ
	|	ДанныеОснований.Регистратор КАК Ссылка,
	|	ДанныеОснований.Организация,
	|	ДанныеОснований.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеОснований.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		И ДанныеОснований.Грузополучатель <> ДанныеОснований.Контрагент
	|		И ДанныеОснований.Грузополучатель.ОбособленноеПодразделение
	|		И ДанныеОснований.Грузополучатель.ГоловнойКонтрагент = ДанныеОснований.Контрагент
	|			ТОГДА ДанныеОснований.Грузополучатель.КПП
	|		ИНАЧЕ ДанныеОснований.Контрагент.КПП
	|	КОНЕЦ КАК КППКонтрагента,
	|	ВЫБОР
	|		КОГДА ДанныеОснований.Грузополучатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|		И ДанныеОснований.Грузополучатель <> ДанныеОснований.Контрагент
	|		И ДанныеОснований.Грузополучатель.ОбособленноеПодразделение
	|		И ДанныеОснований.Грузополучатель.ГоловнойКонтрагент = ДанныеОснований.Контрагент
	|			ТОГДА ДанныеОснований.Грузополучатель.ИНН
	|		ИНАЧЕ ДанныеОснований.Контрагент.ИНН
	|	КОНЕЦ КАК ИННКонтрагента,
	|	ДанныеОснований.Подразделение,
	|	&ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	ВЫРАЗИТЬ(ДанныеРеестра.МестоХранения.Ключ КАК Справочник.Склады) КАК Склад,
	|	ВЫБОР ТИПЗНАЧЕНИЯ(ДанныеОснований.Регистратор)
	|		КОГДА ТИП(Документ.АктВыполненныхРабот)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		КОГДА ТИП(Документ.ВозвратТоваровПоставщику)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровПоставщику)
	|		КОГДА ТИП(Документ.ВозвратТоваровОтКлиента)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
	|		КОГДА ТИП(Документ.ВыкупВозвратнойТарыКлиентом)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		КОГДА ТИП(Документ.ОтчетКомитенту)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомитенту)
	|		КОГДА ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями)
	//++ НЕ УТКА
	|		КОГДА ТИП(Документ.ОтчетДавальцу)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетДавальцу)
	//-- НЕ УТКА
	|		КОГДА ТИП(Документ.ЗаписьКнигиПродаж)
	|			ТОГДА ЗаписьКнигиПродаж.ХозяйственнаяОперация
	|		ИНАЧЕ ЕСТЬNULL(ДанныеРеестра.ХозяйственнаяОперация,
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту))
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ЕСТЬNULL(ДанныеРеестра.НаправлениеДеятельности, НЕОПРЕДЕЛЕНО) КАК НаправлениеДеятельности,
	|	ВЫБОР ТИПЗНАЧЕНИЯ(ДанныеОснований.Регистратор)
	|		КОГДА ТИП(Документ.ЗаписьКнигиПродаж)
	|			ТОГДА ЗаписьКнигиПродаж.Контрагент.Партнер
	|		ИНАЧЕ ЕСТЬNULL(ДанныеРеестра.Партнер, НЕОПРЕДЕЛЕНО)
	|	КОНЕЦ КАК Партнер,
	|	ЕСТЬNULL(ДанныеРеестра.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ДанныеОснований.Валюта
	|ИЗ
	|	РегистрСведений.ДанныеОснованийСчетовФактур КАК ДанныеОснований
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК ДанныеРеестра
	|	ПО ДанныеОснований.Регистратор = ДанныеРеестра.Ссылка
	|		И НЕ ДанныеРеестра.ДополнительнаяЗапись
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаписьКнигиПродаж КАК ЗаписьКнигиПродаж
	|	ПО ДанныеОснований.Регистратор = ЗаписьКнигиПродаж.Ссылка
	|
	|ГДЕ
	|	ДанныеОснований.ТипСчетаФактуры = &ТипСчетаФактуры
	|	И ДанныеОснований.Регистратор В (&ДокументыОснования)";
	
	//++ НЕ УТ
	ТекстЗапросаОснований = СтрЗаменить(ТекстЗапросаОснований, "&ИдентификаторГосКонтракта", "
			|	ВЫБОР КОГДА НЕ ДанныеОснований.Договор.ГосударственныйКонтракт = ЗНАЧЕНИЕ(Справочник.ГосударственныеКонтракты.ПустаяСсылка) ТОГДА
			|		ДанныеОснований.Договор.ГосударственныйКонтракт.Код
			|	ИНАЧЕ
			|		ДанныеОснований.Договор.ИдентификаторГосКонтракта
			|	КОНЕЦ");
	//-- НЕ УТ
	
	ТекстЗапросаОснований = СтрЗаменить(ТекстЗапросаОснований, "&ИдентификаторГосКонтракта", "ДанныеОснований.Договор.ИдентификаторГосКонтракта");

	ТекстЗапросаИсходныхДанных = 
	"ВЫБРАТЬ
	|	ТекущийДокумент.Ссылка                КАК Ссылка,
	|	ТекущийДокумент.ДокументОснование     КАК ДокументОснование,
	|	ТекущийДокумент.ВидКорректировки      КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ТекущийДокумент
	|ГДЕ
	|	ТекущийДокумент.Ссылка В (&ДокументыОснования)
	|	И ТекущийДокумент.ВидКорректировки В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущийДокумент.Ссылка                КАК Ссылка,
	|	ТекущийДокумент.ДокументРеализации    КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ТекущийДокумент
	|ГДЕ
	|	ТекущийДокумент.Ссылка В (&ДокументыОснования)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущийДокумент.Ссылка                КАК Ссылка,
	|	ТекущийДокумент.ДокументПередачи      КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА ТекущийДокумент.Ссылка.Дата >= &ДатаОтраженияВозвратовКорректировочнымиСФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|		ИНАЧЕ ТекущийДокумент.Ссылка.ХозяйственнаяОперация
	|	КОНЕЦ
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ТекущийДокумент
	|ГДЕ
	|	ТекущийДокумент.Ссылка В (&ДокументыОснования)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийДокумент.Ссылка                КАК Ссылка,
	|	ИсходныйСчетФактура.Ссылка            КАК СчетФактура,
	|	ТекущийДокумент.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
	|ИЗ
	|	ВТ_ДокументыОснования КАК ТекущийДокумент
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ИсходныйСФОснования
	|		ПО ТекущийДокумент.ДокументОснование = ИсходныйСФОснования.ДокументОснование
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ИсходныйСчетФактура
	|		ПО ИсходныйСФОснования.Ссылка = ИсходныйСчетФактура.Ссылка
	|			И ИсходныйСчетФактура.Проведен
	|			И НЕ ИсходныйСчетФактура.Исправление
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходныеСчетаФактуры.Ссылка                КАК Ссылка,
	|	Основания.ДокументОснование                КАК ДокументОснование,
	|	ИсходныеСчетаФактуры.СчетФактура           КАК СчетФактура,
	|	ИсходныеСчетаФактуры.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТ_ОснованияИсходных
	|ИЗ
	|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК Основания
	|		ПО ИсходныеСчетаФактуры.СчетФактура = Основания.Ссылка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОснованияИсходных.Ссылка                КАК Ссылка,
	|	КорректировкаРеализации.Ссылка          КАК ДокументОснование,
	|	ОснованияИсходных.СчетФактура           КАК СчетФактура,
	|	ОснованияИсходных.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ВТ_ОснованияИсходныхИКорректировки
	|ИЗ
	|	ВТ_ОснованияИсходных КАК ОснованияИсходных
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ПО ОснованияИсходных.ДокументОснование = КорректировкаРеализации.ДокументОснование
	|		И (КорректировкаРеализации.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияИсходных.Ссылка                КАК Ссылка,
	|	ВозвратТоваровОтКлиента.Ссылка          КАК ДокументОснование,
	|	ОснованияИсходных.СчетФактура           КАК СчетФактура,
	|	ОснованияИсходных.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ВТ_ОснованияИсходных КАК ОснованияИсходных
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.ВидыЗапасов КАК ВозвратТоваровОтКлиента
	|		ПО ОснованияИсходных.ДокументОснование = ВозвратТоваровОтКлиента.ДокументРеализации
	|		И (ВозвратТоваровОтКлиента.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияИсходных.Ссылка                КАК Ссылка,
	|	ВозвратТоваровМеждуОрганизациями.Ссылка КАК ДокументОснование,
	|	ОснованияИсходных.СчетФактура           КАК СчетФактура,
	|	ОснованияИсходных.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ИЗ
	|	ВТ_ОснованияИсходных КАК ОснованияИсходных
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровМеждуОрганизациями.ВидыЗапасов КАК ВозвратТоваровМеждуОрганизациями
	|		ПО ОснованияИсходных.ДокументОснование = ВозвратТоваровМеждуОрганизациями.ДокументПередачи
	|		И (ВозвратТоваровМеждуОрганизациями.Ссылка.Проведен)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияИсходных.Ссылка,
	|	ОснованияИсходных.ДокументОснование,
	|	ОснованияИсходных.СчетФактура,
	|	ОснованияИсходных.ХозяйственнаяОперация
	|ИЗ
	|	ВТ_ОснованияИсходных КАК ОснованияИсходных
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОснованияИсходных.Ссылка      КАК ДокументОснование,
	|	ОснованияИсходных.СчетФактура КАК ИсходныйСчетФактура,
	|	ИсходныеДокументы.Ссылка      КАК ИсходныйДокумент,
	|	ИсходныеДокументы.Номер       КАК НомерИсходногоДокумента,
	|	
	|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
	|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.Дата, Неопределено)
	|	ИНАЧЕ
	|		ИсходныеДокументы.Дата
	|	КОНЕЦ КАК ДатаИсходногоДокумента,
	|	
	|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
	|		ИсходныеДокументы.НомерИсправления
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК НомерИсправленияИсходногоДокумента,
	|	
	|	ВЫБОР КОГДА ИсходныеДокументы.Исправление ТОГДА
	|		ИсходныеДокументы.Дата
	|	ИНАЧЕ
	|		Неопределено
	|	КОНЕЦ КАК ДатаИсправленияИсходногоДокумента,
	|	
	|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)
	|			ИЛИ ИсходныеДокументы.Корректировочный ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Корректировочный,
	|
	|	ВЫБОР КОГДА ОснованияИсходных.ХозяйственнаяОперация =
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК Исправление
	|
	|ИЗ
	|	ВТ_ОснованияИсходныхИКорректировки КАК ОснованияИсходных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураОснования
	|		ПО ОснованияИсходных.ДокументОснование = СчетФактураОснования.ДокументОснование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК ИсходныеДокументы
	|		ПО СчетФактураОснования.Ссылка = ИсходныеДокументы.Ссылка
	|			И (НЕ ИсходныеДокументы.Ссылка = &СчетФактура)
	|			И (НЕ ИсходныеДокументы.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсходныеДокументы.Корректировочный УБЫВ,
	|	ВЫБОР КОГДА ИсходныеДокументы.Корректировочный И ИсходныеДокументы.Исправление ТОГДА
	|		ЕСТЬNULL(ИсходныеДокументы.СчетФактураОснование.Дата, Неопределено)
	|	КОГДА ИсходныеДокументы.Корректировочный ТОГДА
	|		ИсходныеДокументы.Дата
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ УБЫВ,
	|	НомерИсправления УБЫВ
	|
	|ИТОГИ
	|	МАКСИМУМ(Корректировочный),
	|	МАКСИМУМ(Исправление)
	|ПО
	|	ОБЩИЕ,
	|	ИсходныйСчетФактура";
	
	Запрос.Текст = ТекстЗапросаОснований + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапросаИсходныхДанных;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаОснований = РезультатЗапроса[0].Выбрать();
	КоличествоЗапросов = РезультатЗапроса.Количество();
	ВыборкаИсходныхДанных = РезультатЗапроса[КоличествоЗапросов-1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПерваяСтрока      = Истина;
	РазныеОрганизации = Ложь;
	РазныеКонтрагенты = Ложь;
	РазныеПартнеры    = Ложь;
	РазныеДоговоры    = Ложь;
	РазныеСклады      = Ложь;
	РазныеВалюты      = Ложь;
	РазныеПодразделения = Ложь;
	РазныеНаправленияДеятельности = Ложь;
	РазныеИдентификаторыГосКонтракта = Ложь;
	
	Пока ВыборкаОснований.Следующий() Цикл
		
		Результат.ХозяйственныеОперацииДокументовОснований.Вставить(
			ВыборкаОснований.Ссылка, ВыборкаОснований.ХозяйственнаяОперация);
		
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			ЗаполнитьЗначенияСвойств(Результат, ВыборкаОснований);
			Продолжить;
		КонецЕсли;
		
		РазныеОрганизации   = РазныеОрганизации Или Результат.Организация <> ВыборкаОснований.Организация;
		РазныеКонтрагенты   = РазныеКонтрагенты Или Результат.Контрагент <> ВыборкаОснований.Контрагент;
		РазныеПартнеры      = РазныеПартнеры Или Результат.Партнер <> ВыборкаОснований.Партнер;
		РазныеДоговоры      = РазныеДоговоры Или Результат.Договор <> ВыборкаОснований.Договор;
		РазныеСклады        = РазныеСклады Или Результат.Склад <> ВыборкаОснований.Склад;
		РазныеВалюты        = РазныеВалюты Или Результат.Валюта <> ВыборкаОснований.Валюта;
		РазныеПодразделения = РазныеПодразделения Или Результат.Подразделение <> ВыборкаОснований.Подразделение;
		РазныеНаправленияДеятельности = РазныеНаправленияДеятельности
			Или Результат.НаправлениеДеятельности <> ВыборкаОснований.НаправлениеДеятельности;
		РазныеИдентификаторыГосКонтракта = РазныеИдентификаторыГосКонтракта
			Или Результат.ИдентификаторГосКонтракта <> ВыборкаОснований.ИдентификаторГосКонтракта;
		
	КонецЦикла;
	
	Если РазныеОрганизации ИЛИ РазныеКонтрагенты ИЛИ РазныеВалюты Тогда
			
		ТекстСообщения = НСтр("ru = 'Реквизиты документов, на основании которых зарегистрирован счет-фактура, не совпадают:';
								|en = 'Document attributes based on which the tax invoice is registered do not match:'")
			+ ?(РазныеОрганизации, Символы.ПС + НСтр("ru = '- организация';
													|en = '- company'"), "")
			+ ?(РазныеКонтрагенты, Символы.ПС + НСтр("ru = '- контрагент';
													|en = '- counterparty'"), "")
			+ ?(РазныеВалюты, Символы.ПС + НСтр("ru = '- валюта документа';
												|en = '- document currency'"), "") + Символы.ПС 
			+ НСтр("ru = 'Необходимо изменить реквизиты документов-оснований или зарегистрировать по документам с расхождениями отдельные счета-фактуры.';
					|en = 'Change attributes of base documents or register separate tax invoices for documents with variances.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Если РазныеОрганизации Тогда
			Результат.Организация = Неопределено;
		КонецЕсли;
		Если РазныеКонтрагенты Тогда
			Результат.Контрагент = Неопределено;
		КонецЕсли;
		Если РазныеВалюты Тогда
			Результат.Валюта = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.Ответственный = Пользователи.ТекущийПользователь();
	
	Если РазныеПартнеры Тогда
		Результат.Партнер = Неопределено;
	КонецЕсли;
	Если РазныеДоговоры Тогда
		Результат.Договор = Неопределено;
	КонецЕсли;
	Если РазныеСклады Тогда
		Результат.Склад = Неопределено;
	КонецЕсли;
	Если РазныеПодразделения Тогда
		Результат.Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Результат.Ответственный, Результат.Подразделение);
	КонецЕсли;
	Если РазныеНаправленияДеятельности Тогда
		Результат.НаправлениеДеятельности = Неопределено;
	КонецЕсли;
	Если РазныеИдентификаторыГосКонтракта Тогда
		Результат.ИдентификаторГосКонтракта = "";
	КонецЕсли;
	
	Если ВыборкаИсходныхДанных.Следующий() Тогда
		Результат.Исправление      = ВыборкаИсходныхДанных.Исправление;
		Результат.Корректировочный = ВыборкаИсходныхДанных.Корректировочный;
	КонецЕсли;
	
	ВыборкаПоИсходнымСчетамФактуры = ВыборкаИсходныхДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыСчетаФактурыОснования = Неопределено;
	
	Если Результат.Исправление Тогда
		
		ПерваяСтрока               = Истина;
		РазныеСчетФактураОснование = Ложь;
		
		Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
			
			ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
			Если ВыборкаПоДокументам.Следующий() Тогда
				
				Если ПерваяСтрока Тогда
					ПерваяСтрока = Ложь;
					Результат.СчетФактураОснование = ВыборкаПоДокументам.ИсходныйДокумент;
				Иначе
					РазныеСчетФактураОснование = РазныеСчетФактураОснование
						Или Результат.СчетФактураОснование <> ВыборкаПоДокументам.ИсходныйДокумент;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если РазныеСчетФактураОснование Тогда
			Результат.Исправление = Ложь;
			Результат.Корректировочный = Истина;
		Иначе
			РеквизитыСчетаФактурыОснования = ДанныеСчетаФактуры(Результат.СчетФактураОснование);
			Если Результат.Корректировочный И Не РеквизитыСчетаФактурыОснования.Корректировочный Тогда
				Результат.Исправление = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Результат.Корректировочный Тогда
		
		Если Результат.Исправление Тогда
			
			МассивКорректировок = Запрос.Параметры.ДокументыОснования;
			ИсходныеДанныеСчетаФактуры = РеквизитыСчетаФактурыОснования.ДокументыОснования;
			
			Для Каждого ОснованиеКорректировка Из МассивКорректировок Цикл
				Для Каждого СтрокаТаблицы Из ИсходныеДанныеСчетаФактуры Цикл
					СтрокаСРеквизитами = РеквизитыОснований.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, СтрокаТаблицы);
					СтрокаСРеквизитами.ДокументОснование = ОснованиеКорректировка;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			
			ВыборкаПоИсходнымСчетамФактуры.Сбросить();
			
			Пока ВыборкаПоИсходнымСчетамФактуры.Следующий() Цикл
				
				ВыборкаПоДокументам = ВыборкаПоИсходнымСчетамФактуры.Выбрать();
				Пока ВыборкаПоДокументам.Следующий() Цикл
					
					Если ТипЗнч(ВыборкаПоДокументам.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
							И РеквизитыОснований.Найти(ВыборкаПоДокументам.ИсходныйСчетФактура) = Неопределено
						ИЛИ ТипЗнч(ВыборкаПоДокументам.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
							И РеквизитыОснований.Найти(ВыборкаПоДокументам.ИсходныйСчетФактура) = Неопределено
						ИЛИ ТипЗнч(ВыборкаПоДокументам.ДокументОснование) = Тип("ДокументСсылка.КорректировкаРеализации")
							И РеквизитыОснований.Найти(ВыборкаПоДокументам.ДокументОснование) = Неопределено Тогда
						СтрокаСРеквизитами = РеквизитыОснований.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСРеквизитами, ВыборкаПоДокументам);
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьДублиСчетФактуры(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Ссылка.Организация КАК Организация,
	|	ДанныеДокумента.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка <> &Ссылка
	|	И ДанныеДокумента.ДокументОснование В (&МассивОснований)
	|	И ДанныеДокумента.Ссылка.Проведен
	|	И НЕ ДанныеДокумента.Ссылка.ПометкаУдаления
	|	И НЕ ДанныеДокумента.Ссылка.Исправление
	|");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МассивОснований", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ Исправление Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 по организации %2 уже введен счет-фактура %3';
					|en = 'Tax invoice %3 is already entered for document %1 by company %2'"),
				Выборка.ДокументОснование,
				Выборка.Организация,
				Выборка.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				,
				,
				Отказ);
			
		ИначеЕсли Исправление И СчетФактураОснование <> Выборка.Ссылка Тогда
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'На основании документа %1 введен счет-фактура %2. Недопустимо исправление счета-фактуры %3.';
					|en = 'Tax invoice %2 is entered based on document %1. Cannot correct tax invoice %3.'"),
				Выборка.ДокументОснование,
				Выборка.Ссылка,
				СчетФактураОснование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ЭтотОбъект,
				,
				,
				Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьМассивОснованийДляПроверки()
	
	МассивОснований = Новый Массив;
	
	Если НЕ ЭтотОбъект.ДополнительныеСвойства.ЭтоНовый Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Основания.ДокументОснование КАК Основание
		|ИЗ
		|	Документ.СчетФактураВыданный.ДокументыОснования КАК Основания
		|ГДЕ
		|	Основания.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Результат = Запрос.Выполнить();
		МассивОснований = Результат.Выгрузить().ВыгрузитьКолонку("Основание");
		
	КонецЕсли;
	
	Если ЭтотОбъект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		МассивОснованийОбъекта = ЭтотОбъект.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОснований, МассивОснованийОбъекта, Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(МассивОснований, Тип("ДокументСсылка.ОтчетКомиссионера"));
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("МассивОснованийДляПроверки", Новый ФиксированныйМассив(МассивОснований));
	
КонецПроцедуры

Функция ПолучитьДатуПоследнегоДокументаОснования()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ДанныеПервичныхДокументов.ДатаРегистратора) КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|ГДЕ
	|	ДанныеПервичныхДокументов.Организация = &Организация
	|	И ДанныеПервичныхДокументов.Документ В (&ДокументыОснования)";
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование"));
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Дата(1,1,1);
	Иначе
		Возврат Результат.Выгрузить()[0].Дата;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
