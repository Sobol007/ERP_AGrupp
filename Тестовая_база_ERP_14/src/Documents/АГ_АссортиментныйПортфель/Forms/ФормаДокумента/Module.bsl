#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ДоступноИзменениеСтатусаАссортиментногоПортфеля	= РольДоступна(Метаданные.Роли.ПолныеПрава) ИЛИ РольДоступна(Метаданные.Роли.АГ_ИзменениеСтатусаАссортиментногоПортфеля);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;

	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ВыборПериодаРазвития(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(Объект.НачалоПериодаРазвития, Объект.КонецПериодаРазвития);
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ГруппаПериодРазвития.Видимость	= (Объект.ТипПортфеля=ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.РазвитиеЗвездочка") 
		ИЛИ Объект.ТипПортфеля=ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.Развитие"));
		
	Элементы.Статус.Доступность	= ДоступноИзменениеСтатусаАссортиментногоПортфеля;
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	//УсловноеОформление.Элементы.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		Объект.НачалоПериодаРазвития = Результат.ДатаНачала;
		Объект.КонецПериодаРазвития = Результат.ДатаОкончания; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставПортфеляКлассНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ТипПортфеля<>ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.РазвитиеЗвездочка") Тогда
		СтандартнаяОбработка	= Ложь;
		
		СписокВыбора	= Новый СписокЗначений;
		Если Объект.ТипПортфеля=ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.Базовый") Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.AX"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.BX"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.CX"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.AY"));
		ИначеЕсли Объект.ТипПортфеля=ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.Развитие") Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.AZ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.CY"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.BY"));
		ИначеЕсли Объект.ТипПортфеля=ПредопределенноеЗначение("Перечисление.АГ_ТипыАссортиментныхПортфелей.НаВывод") Тогда
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.AZ"));
			СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.АГ_КлассыABCXYZ.BZ"));
		КонецЕсли;
		
		ДанныеВыбора	= СписокВыбора;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

