#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Функция возвращает текст запроса для определения реквизитов доставки.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаРеквизитыДоставки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.Номер             КАК Номер,
	|	Шапка.Проведен          КАК Проведен,
	|	Шапка.Ссылка            КАК Ссылка,
	|	Шапка.Дата              КАК Дата,
	|	Шапка.Партнер           КАК ПолучательОтправитель,
	|	Шапка.ПеревозчикПартнер КАК Перевозчик,
	|	ВЫБОР КОГДА Шапка.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
	|			И НЕ &ИспользоватьЗаданияНаПеревозкуДляУчетаДоставкиПеревозчиками
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|		ИНАЧЕ Шапка.СпособДоставки
	|	КОНЕЦ                   КАК СпособДоставки,
	|	Шапка.ЗонаДоставки      КАК Зона,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчика
	|		ИНАЧЕ Шапка.АдресДоставки
	|		КОНЕЦ               КАК Адрес,
	|
	|	ВЫБОР КОГДА СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
	|		ТОГДА Шапка.АдресДоставкиПеревозчикаЗначенияПолей
	|		ИНАЧЕ Шапка.АдресДоставкиЗначенияПолей
	|		КОНЕЦ               КАК АдресЗначенияПолей,
	|
	|	Шапка.ВремяДоставкиС    КАК ВремяС,
	|	Шапка.ВремяДоставкиПо   КАК ВремяПо,
	|	Шапка.ДополнительнаяИнформацияПоДоставке
	|		                    КАК ДополнительнаяИнформация,
	|	Т.Склад                 КАК Склад,
	|	Т.ДоставитьПолностью    КАК ДоставитьПолностью,
	|	Шапка.ОсобыеУсловияПеревозки КАК ОсобыеУсловияПеревозки,
	|	Шапка.ОсобыеУсловияПеревозкиОписание КАК ОсобыеУсловияПеревозкиОписание,
	|	ЛОЖЬ КАК РазбиватьРасходныеОрдераПоРаспоряжениям
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Т.Ссылка КАК Ссылка,
	|		Т.Склад КАК Склад,
	|		МИНИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ) КАК ДоставитьПолностью
	|	ИЗ
	|		Документ.ЗаказДавальца.Продукция КАК Т
	|	ГДЕ
	|		Т.Ссылка В (&Ссылки)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Т.Ссылка,
	|		Т.Склад
	|	
	|	ИМЕЮЩИЕ
	|		МАКСИМУМ(ВЫБОР
	|				КОГДА Т.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить), ЗНАЧЕНИЕ(перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|					ТОГДА ИСТИНА
	|			КОНЕЦ) = ИСТИНА
	|	) КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК Шапка
	|		ПО (Шапка.Ссылка = Т.Ссылка)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ВозвратСырьяДавальцу.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ДоверенностьВыданная.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство2_2;
	ИспользуетсяПроизводство22 = ПроизводствоСервер.ИспользуетсяПроизводство22();
	ИспользуетсяПроизводство21 = ПроизводствоСервер.ИспользуетсяПроизводство21();
	Если ИспользуетсяПроизводство22 И ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		
		КомандаСоздатьНаОсновании.Менеджер = МенеджерОбъекта.ПолноеИмя();
		
		Если ИспользуетсяПроизводство21 Тогда
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказ на производство 2.2';
															|en = 'Production order 2.2'");
		Иначе
			КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МенеджерОбъекта);
		КонецЕсли;
		
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальца";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаСоздатьНаОсновании, "УправлениеПроизводством2_2", Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	МенеджерОбъекта = Метаданные.Документы.ЗаказНаПроизводство;
	Если ИспользуетсяПроизводство21 И ПравоДоступа("Добавление", МенеджерОбъекта) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		
		КомандаСоздатьНаОсновании.Менеджер = МенеджерОбъекта.ПолноеИмя();
		
		Если ИспользуетсяПроизводство22 Тогда
			КомандаСоздатьНаОсновании.Представление = НСтр("ru = 'Заказ на производство 2.1';
															|en = 'Production order 2.1'");
		Иначе
			КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МенеджерОбъекта);
		КонецЕсли;
		
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводство";
		КомандаСоздатьНаОсновании.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальца";
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаСоздатьНаОсновании, "УправлениеПроизводством2_2", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	Документы.КорректировкаНазначенияТоваров.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ОтчетДавальцу.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПередачаДавальцу.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.ПоступлениеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ПоступлениеСырьяОтДавальца.ДобавитьКомандуСоздатьНаОснованииЗаказа(КомандыСозданияНаОсновании);
	
	Документы.ПриходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
	Обработки.ФормированиеЗаказовНаПередачуВПроизводствоНаОсновании.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РасходныйОрдерНаТовары.ДобавитьКомандуСоздатьНаОснованииРасходныйОрдерНаТовары(КомандыСозданияНаОсновании);
	
	Документы.СчетНаОплатуКлиенту.ДобавитьКомандуСоздатьНаОснованииСчетаНаОплатуЗаказДавальца(КомандыСозданияНаОсновании);
	
	Документы.ПоручениеЭкспедитору.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	КомандаСоздатьНаОсновании = Документы.ДвижениеПродукцииИМатериалов.ДобавитьКомандуСоздатьПередачуПродукцииНаСкладНаОсновании(КомандыСозданияНаОсновании, Истина);
	
	Если КомандаСоздатьНаОсновании <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаСоздатьНаОсновании,
			"УправлениеПроизводством2_2", Истина, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	КомандаСоздатьНаОсновании = Документы.ВыпускПродукции.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Истина);
	
	Если КомандаСоздатьНаОсновании <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаСоздатьНаОсновании,
			"УправлениеПроизводством2_2", Ложь, ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	ПроизводствоСервер.ДобавитьКомандуСоздатьПередачуМатериаловНаОсновании(КомандыСозданияНаОсновании);
	
	ЗаказДавальцаЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Заказ давальца".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаказДавальца) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаказДавальца.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаказДавальца);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.СостояниеВыполненияДокументов.ДобавитьКомандуСостояниеВыполненияЗаказаДавальца(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СостояниеРасчетовСКлиентами.ДобавитьКомандуОтчетаПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КарточкаРасчетовСКлиентами.ДобавитьКомандуКарточкаРасчетовСКлиентомПоДокументам(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КонтрольПоставкиСырьяИМатериаловДавальцем.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КонтрольПередачиПродукцииДавальцу.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "СмТакже";
		КомандаОтчет.Порядок = 2;
	КонецЕсли;
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.РасшифровкаСтоимостиПереработки) Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.РасшифровкаСтоимостиПереработки.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Расшифровка стоимости переработки';
											|en = 'Overtime cost explanation'");
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.Важность = "Обычное";
		
		КомандаОтчет.КлючВарианта = "РасшифровкаСтоимости";
		
	КонецЕсли;
	
	ЗаказДавальцаЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#Область Статус

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовДавальцев[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР КОГДА ТаблицаДокументов.Статус = &Статус ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует запрос проверки при автосмене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриАвтоматическомРасчетеСтатуса(МассивДокументов, ДополнительныеПараметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаказДавальца КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Проверок не требуется
	
КонецФункции

// Формирует массив допустимых статусов на основании настроек программы
//
// Параметры:
//	ИмяДокумента - Строка - Имя вводимого документа.
//
// Возвращаемое значение:
//	Массив - массив допустимых статусов.
//
Функция ДопустимыеСтатусыВводаНаОсновании(ИмяДокумента) Экспорт
	
	МассивДопустимыхСтатусов = Новый Массив;
	Если ИмяДокумента = "ПоступлениеСырьяОтДавальца" Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КПроизводству);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	ИначеЕсли ИмяДокумента = "ПередачаДавальцу" Тогда
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.КОтгрузке);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовДавальцев.Закрыт);
	КонецЕсли;
	
	Возврат МассивДопустимыхСтатусов;
	
КонецФункции

#КонецОбласти

#Область РасчетСостояний

// Осуществляет вычисление текущего состояния заказа давальца
//
// Параметры:
//	ЗаказДавальца            - ДокументСсылка.ЗаказДавальца - Документ, состояние которого необходимо вычислить
//	Договор                 - СправочникСсылка.ДоговорыКонтрагентов    - Договор с клиентом
//	СостояниеРасчетов       - УправляемаяФорма - Форма, в реквизиты которой будет помещено рассчитанное состояние.
//
Процедура РассчитатьСостояние(Знач ЗаказДавальца, Знач Договор, СостояниеРасчетов) Экспорт
	
	ЗаполнитьЗначенияСвойств(СостояниеРасчетов, СтруктураСостоянияРасчетов());
	
	Если ЗначениеЗаполнено(ЗаказДавальца) И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
	
		УстановитьПривилегированныйРежим(Истина); 
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА НЕ ДокументЗаказКлиента.Проведен 
			|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
			|		ИНАЧЕ
			|			ЕСТЬNULL(СостоянияЗаказовКлиентов.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)) 
			|	КОНЕЦ КАК Состояние,
			|	ВЫБОР
			|		КОГДА (НЕ ДокументЗаказКлиента.Проведен)
			|			ТОГДА ЛОЖЬ
			|		КОГДА ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)
			|			ТОГДА ЛОЖЬ
			|		КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
			|				И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК СостояниеПросрочено,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОплаты,0) КАК СуммаОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОплаты,0) КАК ПроцентОплаты,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.СуммаОтгрузки,0) КАК СуммаОтгрузки,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентОтгрузки,0) КАК ПроцентОтгрузки,
			|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен И
			|			((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
			|			ДокументЗаказКлиента.СуммаДокумента > 0) ИЛИ
			|			ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
			|		ТОГДА
			|			ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаДолга,
			|	ЕСТЬNULL(СостоянияЗаказовКлиентов.ПроцентДолга,0) КАК ПроцентДолга,
			|	ВЫБОР
			|		КОГДА
			|			ДокументЗаказКлиента.Проведен И
			|			ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
			|		ТОГДА
			|			РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток
			|		ИНАЧЕ
			|			0
			|	КОНЕЦ КАК СуммаКОплате
			|ИЗ
			|	Документ.ЗаказДавальца КАК ДокументЗаказКлиента
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,,ЗаказКлиента = &РасчетныйДокумент) КАК РасчетыСКлиентамиОстатки
			|ПО
			|	ИСТИНА
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
			|ПО
			|	СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка
			|ГДЕ
			|	ДокументЗаказКлиента.Ссылка = &ЗаказДавальца
			|
			|");
		
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДавальца, "ПорядокРасчетов");
		
		Запрос.УстановитьПараметр("ЗаказДавальца", ЗаказДавальца);
		Запрос.УстановитьПараметр("РасчетныйДокумент", ?(ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов,
			Договор,
			ЗаказДавальца));
		Запрос.УстановитьПараметр("ТекущаяДата",  НачалоДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СостояниеРасчетов, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает текст запроса для расчета состояний заказов.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстЗапросаДляРасчетаСостоянийЗаказов() Экспорт
	
	ТекстЗапроса ="
		|ВЫБРАТЬ 
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ПустаяСсылка)
		|// ОЖИДАЕТСЯ СОГЛАСОВАНИЕ //////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяСогласование)
		|// ОЖИДАЕТСЯ АВАНС ДО ОБЕСПЕЧЕНИЯ //////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяАвансДоОбеспечения)
		|// ГОТОВ К ОБЕСПЕЧЕНИЮ ///////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется
		|		И ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОбеспечению)
		|// ОЖИДАЕТСЯ ПРЕДОПЛАТА ДО ОТГРУЗКИ ////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяПредоплатаДоОтгрузки)
		|// ОЖИДАЕТСЯ ОБЕСПЕЧЕНИЕ ////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОбеспечение)
		|// ГОТОВ К ОТГРУЗКЕ //////////////////////////////////////////////////////////
		|	КОГДА
		|		(НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется ЕСТЬ NULL 
		|		И НЕ ВТСостоянияОбеспечения.ОбособленноеОбеспечениеТребуется)
		|		ИЛИ ВТРасхожденияОрдерНакладная.ТребуетсяОрдер
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКОтгрузке)
		|// В ПРОЦЕССЕ ОТГРУЗКИ //////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|		И (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|			ИЛИ ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|		И (ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) <> 0 
		|			ИЛИ ЕСТЬNULL(ЗаказыКлиентовОстатки.ЗаказаноКонечныйОстаток, 0) <> 0
		|			ИЛИ ЕСТЬNULL(ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток, 0) <> 0)
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ВПроцессеОтгрузки)
		|// ОЖИДАЕТСЯ ОПЛАТА ПОСЛЕ ОТГРУЗКИ /////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ОжидаетсяОплатаПослеОтгрузки)
		|// ГОТОВ К ЗАКРЫТИЮ ////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) И &КонтролироватьЗакрытиеЗаказаДавальца
		|		ИЛИ
		|		ЕСТЬNULL(УслугиДавальцуКОформлению.КОформлению,0) > 0
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.ГотовКЗакрытию)
		|// ЗАКРЫТ //////////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус В
		|				(ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству), 
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|				ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
		|	ТОГДА
		|		ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
		|КОНЕЦ КАК Состояние,
		|ВЫБОР
		|// НЕ ПРОВЕДЕН /////////////////////////////////////////////////////////////
		|	КОГДА
		|		НЕ ДокументЗаказКлиента.Проведен
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1)
		|// ДАТА СОГЛАСОВАНИЯ ///////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|	ТОГДА
		|		ДАТАВРЕМЯ(1,1,1) //ДокументЗаказКлиента.ДатаСогласования
		|// ДАТА АВАНСА /////////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаАвансаДоОбеспечения > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ПРЕДОПЛАТЫ /////////////////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству) И
		|		ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) < ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|// ДАТА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|	КОГДА
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|		ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке))
		|		И ДокументЗаказКлиента.СуммаДокумента > 0 И
		|		(ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) >= ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки + ДокументЗаказКлиента.СуммаАвансаДоОбеспечения ИЛИ
		|		ДокументЗаказКлиента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ЕСТЬNULL(ДатыОтгрузкиЗаказовКлиентов.МинимальнаяДатаОтгрузки, ДокументЗаказКлиента.ДатаОтгрузки)
		|// ДАТА ОПЛАТЫ ПОСЛЕ ОТГРУЗКИ //////////////////////////////////////////////
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		(ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству)
		|			ИЛИ ДокументЗаказКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке)) И
		|		ДокументЗаказКлиента.СуммаДокумента - ДокументЗаказКлиента.СуммаАвансаДоОбеспечения - ДокументЗаказКлиента.СуммаПредоплатыДоОтгрузки > 0 И
		|		ЕСТЬNULL(ЗаказыКлиентовОстатки.КОформлениюКонечныйОстаток, 0) = 0 И
		|		ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеКонечныйОстаток, 0) > 0
		|	ТОГДА
		|		ДатыАктуальностиРасчетов.ДатаАктуальности
		|	ИНАЧЕ
		|		ДАТАВРЕМЯ(1,1,1)
		|КОНЕЦ КАК ДатаСобытия,
		|// СУММА ОПЛАТЫ /////////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОплаты,
		|// ПРОЦЕНТ ОПЛАТЫ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ ((ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеРасход, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОплаты,
		|// СУММА ОТГРУЗКИ ///////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(СуммыОтгрузкиПоЗаказамДавальцев.СуммаОтгрузки,0)
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаОтгрузки,
		|// ПРОЦЕНТ ОТГРУЗКИ /////////////////////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И 
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ(ЕСТЬNULL(СуммыОтгрузкиПоЗаказамДавальцев.СуммаОтгрузки,0)*100/ДокументЗаказКлиента.СуммаДокумента  КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентОтгрузки,
		|// ДОЛГ (+ НАМ ДОЛЖНЫ, - МЫ ДОЛЖНЫ)//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен И
		|		((ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0) И
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным))
		|	ТОГДА
		|		ВЫРАЗИТЬ (ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) КАК ЧИСЛО(31,2))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК СуммаДолга,
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным) И
		|		ДокументЗаказКлиента.Проведен И
		|		ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован) И
		|		ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ВЫРАЗИТЬ((ВЫБОР КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0) > 0 ТОГДА
		|			ЕСТЬNULL(РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		ИНАЧЕ
		|			ЕСТЬNULL(-РасчетыСКлиентамиОстатки.СуммаКонечныйОстаток, 0)
		|		КОНЕЦ
		|		* 100
		|		/ ДокументЗаказКлиента.СуммаДокумента) КАК ЧИСЛО(15, 10))
		|	ИНАЧЕ
		|		0
		|КОНЕЦ КАК ПроцентДолга,
		|// РАСХОЖДЕНИЯ ОРДЕР-НАКЛАДНАЯ//////////////////////////////////////////
		|ВЫБОР
		|	КОГДА
		|		ДокументЗаказКлиента.Проведен
		|		И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.НеСогласован)
		|		И ДокументЗаказКлиента.СуммаДокумента > 0
		|	ТОГДА
		|		ЕСТЬNULL(ВТРасхожденияОрдерНакладная.ЕстьРасхожденияОрдерНакладная, ЛОЖЬ)
		|	ИНАЧЕ
		|		ЛОЖЬ
		|	КОНЕЦ КАК ЕстьРасхожденияОрдерНакладная,
		|//ССЫЛКА НА ЗАКАЗ///////////////////////////////////////////////////////
		|	ДокументЗаказКлиента.Ссылка КАК Заказ
		|ИЗ
		|	Документ.ЗаказДавальца КАК ДокументЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(,,,,ЗаказКлиента В (&МассивЗаказов)) КАК РасчетыСКлиентамиОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТЗаказыКлиентовОстатки КАК ЗаказыКлиентовОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТТоварыКОтгрузкеОстатки КАК ТоварыКОтгрузкеОстатки
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ТоварыКОтгрузкеОстатки.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыАктуальностиЗаказовКлиентов КАК ДатыАктуальностиРасчетов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыАктуальностиРасчетов.ОбъектРасчетов
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ДатыОтгрузкиЗаказовКлиентов КАК ДатыОтгрузкиЗаказовКлиентов
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ДатыОтгрузкиЗаказовКлиентов.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСостоянияОбеспечения КАК ВТСостоянияОбеспечения
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТСостоянияОбеспечения.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТРасхожденияОрдерНакладная КАК ВТРасхожденияОрдерНакладная
		|ПО
		|	ДокументЗаказКлиента.Ссылка = ВТРасхожденияОрдерНакладная.ЗаказКлиента
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТСуммыОтгрузкиПоЗаказамДавальцев КАК СуммыОтгрузкиПоЗаказамДавальцев
		|ПО
		|	ДокументЗаказКлиента.Ссылка = СуммыОтгрузкиПоЗаказамДавальцев.Заказ
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТУслугиДавальцуКОформлению КАК УслугиДавальцуКОформлению
		|ПО
		|	ДокументЗаказКлиента.Ссылка = УслугиДавальцуКОформлению.Заказ
		|ГДЕ
		|	ДокументЗаказКлиента.Ссылка В (&МассивЗаказов)
		|
		|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Функция определяет реквизиты выбранного документа
//
// Параметры:
//	ДокументСсылка - ДокументСсылка.ЗаказДавальца - Ссылка на документа.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	СтруктураРеквизитов = Новый Структура();
	СтруктураРеквизитов.Вставить("Дата",                  Дата(1,1,1));
	СтруктураРеквизитов.Вставить("Организация",           Справочники.Организации.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Партнер",               Справочники.Партнеры.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Контрагент",            Справочники.Контрагенты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("Договор",               Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ПорядокРасчетов",       Перечисления.ПорядокРасчетов.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента);
	СтруктураРеквизитов.Вставить("Валюта",                Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("ВалютаВзаиморасчетов",  Справочники.Валюты.ПустаяСсылка());
	СтруктураРеквизитов.Вставить("СуммаДокумента",        0);
	СтруктураРеквизитов.Вставить("СуммаВзаиморасчетов",   0);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Дата,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДокумента.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|		ИНАЧЕ ДанныеДокумента.ХозяйственнаяОперация
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.Валюта КАК ВалютаВзаиморасчетов,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
		|	ДанныеДокумента.СуммаДокумента КАК СуммаВзаиморасчетов
		|ИЗ
		|	Документ.ЗаказДавальца КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &ДокументСсылка");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Заполняет "ВременнаяТаблицаМатериалов" данными о материалах по данным спецификаций.
//
// Параметры:
//	ПараметрыСпецификаций - Структура - параметры для формирования списка материалов, требуемых для выпуска продукции
//	ВременнаяТаблицаМатериалов - ТаблицаЗначений - таблица, в которую будут помещены рассчитанные данные.
//
// Возвращаемое значение:
//	ТаблицаЗначений - результирующая таблица.
//
Процедура МатериалыПоСпецификациям(ПараметрыСпецификаций, ВременнаяТаблицаМатериалов) Экспорт
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		ПараметрыСпецификаций.ПереченьДанных,
		,
		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
		
		ПараметрыВыборки.ПолучитьСведенияАвтовыбора = Ложь;
		ПараметрыВыборки.ПолучитьПредставления      = Ложь;
		
	ПараметрыВыборки.ОбъединитьМатериалыИВходящиеИзделия = Истина;
	ПараметрыВыборки.ГруппироватьДанные                  = Истина;
	
	УровеньВхождений = 0;
	
	Пока ПараметрыСпецификаций.МассивДанных.Количество() > 0 Цикл
		
		УровеньВхождений = УровеньВхождений + 1;
		
		Если УровеньВхождений > 1000 Тогда // Слишком много вложенных спецификаций, похоже на взаимное пересечение
			
			ТекстОшибки = НСтр("ru = 'При попытке получить перечень материалов по спецификации произошла ошибка.
									 |Количество вложенных спецификаций превысило 1000, возможно в базе данных созданы пересекающиеся спецификации.';
									 |en = 'An error occurred when attempting to receive the material list by the bill of materials.
									 |The number of nested bills of materials is more than 1,000. Maybe overlapping bills of materials are created in the infobase.'");
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		Результат = Справочники.РесурсныеСпецификации.ДанныеСпецификацииПоСпискуНоменклатуры(ПараметрыСпецификаций.МассивДанных, ПараметрыВыборки);
		
		МассивДанных = Новый Массив;
		МассивКлючей = Новый Массив;
		
		Для Х = 0 По Результат.Количество() - 1 Цикл
			
			Если Результат[Х] = Неопределено Тогда
				Продолжить; // Спецификация не указана
			КонецЕсли;
			
			МатериалыИУслуги = Результат[Х].МатериалыИУслуги;
			
			Для Каждого СтрТЧ Из МатериалыИУслуги Цикл
				
				Если СтрТЧ.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиПоСпецификации Тогда
					
					ДанныеПоНоменклатуре = ДанныеПоНоменклатуре(СтрТЧ);
					
					МассивДанных.Добавить(ДанныеПоНоменклатуре);
					МассивКлючей.Добавить(ПараметрыСпецификаций.МассивКлючей[Х]);
					
				ИначеЕсли СтрТЧ.СпособПолученияПолуфабриката = Перечисления.СпособыПолучениеМатериаловЭтапаПроизводства.ПроизвестиНаЭтапе Тогда
					
					Продолжить;
					
				Иначе
					
					НоваяСтрока = ВременнаяТаблицаМатериалов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрТЧ);
					НоваяСтрока.Спецификация = ПараметрыСпецификаций.МассивКлючей[Х];
					НоваяСтрока.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыСпецификаций.МассивДанных = МассивДанных;
		ПараметрыСпецификаций.МассивКлючей = МассивКлючей;
		
	КонецЦикла;
	
	Если ВременнаяТаблицаМатериалов.Количество() > 0 Тогда
		ВременнаяТаблицаМатериалов.Свернуть("Номенклатура, Характеристика, Упаковка, ТипНоменклатуры, Спецификация", 
			"КоличествоУпаковок, Количество");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с данными для получения перечня материалов согласно спецификации.
//
// Параметры:
//	ЗначенияЗаполнения - СтрокаТаблицыЗначений - строка с данными для заполнения структуры.
//
// Возвращаемое значение:
//	Структура - структура с результирующими данными.
//
Функция ДанныеПоНоменклатуре(ЗначенияЗаполнения) Экспорт
	
	ДанныеПоНоменклатуре = Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ЗначенияЗаполнения,
		"Номенклатура,
		|Характеристика,
		|Количество,
		|Спецификация");
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

// Осуществляет инициализацию структуры состояния выполнения документа
//
// Возвращаемое значение:
//	Структура - структура состояния выполнения документа.
//
Функция СтруктураСостояниеВыполненияДокумента() Экспорт
	
	СтруктураСостояние = Отчеты.СостояниеВыполненияДокументов.ИнициализироватьСтруктуруСостояниеВыполненияДокумента();
	
	СтруктураСостояние.Вставить("ВыводитьТаблицуРасчетыСКлиентами",  1);
	СтруктураСостояние.Вставить("ВыводитьТаблицыПоступление",        2);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОбеспечение",        3);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтгрузка",           4);
	СтруктураСостояние.Вставить("ВыводитьТаблицыОтмененоОтгрузка",   5);
	СтруктураСостояние.Вставить("ВыводитьТаблицуУслугДавальцуКОформлению", 6);
	
	СтруктураСостояние.Вставить("ЭтоЗаказ",                          Истина);
	СтруктураСостояние.Вставить("ЕстьСуммовыеПоказателиОтгрузки",    Истина);
	СтруктураСостояние.Вставить("ЕстьПричиныОтменыОтгрузки",         ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовКлиентов"));
	СтруктураСостояние.Вставить("ИмяТЧТоварыОтгрузка",               "Продукция");
	СтруктураСостояние.Вставить("ИмяТЧТоварыПоступление",            "Материалы");
	СтруктураСостояние.Вставить("ИмяПоляСумма",                      "Сумма");
	СтруктураСостояние.Вставить("ТекстТоварУслугаОтгрузка",          НСтр("ru = 'Продукция';
																			|en = 'Products'"));
	СтруктураСостояние.Вставить("ТекстТоварУслугаПоступление",       НСтр("ru = 'Сырье и материалы';
																			|en = 'Materials '"));
	
	СтруктураДопЗапросов = Новый Структура;
	СтруктураДопЗапросов.Вставить("ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ", ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ());
	
	СтруктураСостояние.Вставить("СтруктураДопЗапросов", СтруктураДопЗапросов);
	
	Возврат СтруктураСостояние
	
КонецФункции

// Заполняет стоимость собственных материалов, требуемых для производства, в строках табличной части.
//
//   МассивСтрок       	 - Массив - строки табличной части "Продукция", в которых необходимо заполнить стоимость;
//   ТаблицаСпецификаций - ТаблицаЗначений - хранит количество продукции в ТЧ "Продукция" в разрезе спецификаций;
//   Период            	 - Дата - Дата, на которую выбирается цена материала;
//   МатериалыДавальца 	 - ТаблицаЗначений - Таблица значений с полями идентичными полям табличной части Материалы документа Заказ давальца;
//
Процедура ЗаполнитьСтоимостьСобственныхМатериалов(МассивСтрок, ТаблицаСпецификаций, Период, МатериалыДавальца) Экспорт
	
	ТаблицаЗатрат = Новый ТаблицаЗначений;
	ТаблицаЗатрат.Колонки.Добавить("Спецификация",		Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации"));
	ТаблицаЗатрат.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаЗатрат.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаЗатрат.Колонки.Добавить("ВидЦены",		 	Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
	ТаблицаЗатрат.Колонки.Добавить("Количество",		Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
	
	ПараметрыВыборки = Справочники.РесурсныеСпецификации.ПараметрыВыборкиДанных(
		"МатериалыИУслуги, Трудозатраты",
		,
		Перечисления.ВариантыЗаполненияОбеспеченияПроизводства.ПоНастройкамПередачиВПроизводство);
	
	Для Каждого Строка Из ТаблицаСпецификаций Цикл
		
		ДанныеПоНоменклатуре = Новый Структура("Номенклатура, Характеристика, Количество, ВидЦены, Спецификация, Распоряжение, ПодразделениеДиспетчер");
		ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, Строка);
		
		ТабличныеЧасти = Справочники.РесурсныеСпецификации.ДанныеСпецификацииСПолуфабрикатами(ДанныеПоНоменклатуре, Истина, ПараметрыВыборки);
		
		ТабличныеЧасти.МатериалыИУслуги.Колонки.Добавить("ВидЦены",Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТабличныеЧасти.МатериалыИУслуги.ЗаполнитьЗначения(Строка.ВидЦены, "ВидЦены");
		
		ТабличныеЧасти.МатериалыИУслуги.ЗаполнитьЗначения(Строка.Спецификация, "Спецификация");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТабличныеЧасти.МатериалыИУслуги, ТаблицаЗатрат);
		
	КонецЦикла;
	
	ТаблицаЗатрат.Свернуть("Номенклатура, Характеристика, ВидЦены, Спецификация", "Количество");
	МатериалыДавальца.Свернуть("Номенклатура, Характеристика, Спецификация", "Количество");
	ТаблицаСпецификаций.Свернуть("Спецификация", "Количество");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗатрат.Спецификация,
	|	ТаблицаЗатрат.Номенклатура,
	|	ТаблицаЗатрат.Характеристика,
	|	ТаблицаЗатрат.Количество,
	|	ТаблицаЗатрат.ВидЦены
	|ПОМЕСТИТЬ ВТТаблицаЗатрат
	|ИЗ
	|	&ТаблицаЗатрат КАК ТаблицаЗатрат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказДавальцаМатериалы.Спецификация,
	|	ЗаказДавальцаМатериалы.Номенклатура,
	|	ЗаказДавальцаМатериалы.Характеристика,
	|	ЗаказДавальцаМатериалы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТМатериалыДавальца
	|ИЗ
	|	&МатериалыДавальца КАК ЗаказДавальцаМатериалы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Спецификации.Спецификация,
	|	Спецификации.Количество КАК Количество
	|ПОМЕСТИТЬ Спецификации
	|ИЗ
	|	&ТаблицаСпецификаций КАК Спецификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаМатериалов.Спецификация,
	|	СУММА(ВЫБОР
	|			КОГДА ВТТаблицаМатериалов.Количество - ЕСТЬNULL(ВТМатериалыДавальца.Количество, 0) > 0
	|				ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * (ВТТаблицаМатериалов.Количество - ЕСТЬNULL(ВТМатериалыДавальца.Количество, 0)) / Спецификации.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЦенаСобственныхМатериалов
	|ИЗ
	|	ВТТаблицаЗатрат КАК ВТТаблицаМатериалов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Спецификации КАК Спецификации
	|		ПО ВТТаблицаМатериалов.Спецификация = Спецификации.Спецификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМатериалыДавальца КАК ВТМатериалыДавальца
	|		ПО ВТТаблицаМатериалов.Спецификация = ВТМатериалыДавальца.Спецификация
	|			И ВТТаблицаМатериалов.Номенклатура = ВТМатериалыДавальца.Номенклатура
	|			И ВТТаблицаМатериалов.Характеристика = ВТМатериалыДавальца.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ВТТаблицаМатериалов.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
	|			И ВТТаблицаМатериалов.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ВТТаблицаМатериалов.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТТаблицаМатериалов.Спецификация";
	
	Запрос.УстановитьПараметр("ТаблицаЗатрат",     ТаблицаЗатрат);
	Запрос.УстановитьПараметр("Период",            Период);
	Запрос.УстановитьПараметр("МатериалыДавальца", МатериалыДавальца);
	Запрос.УстановитьПараметр("ТаблицаСпецификаций", ТаблицаСпецификаций);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураОтбора = Новый Структура("Спецификация");
	Для Каждого Строка Из МассивСтрок Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Строка);
		
		Если Выборка.НайтиСледующий(СтруктураОтбора) Тогда
			
			Строка.ЦенаСобственныхМатериалов = Выборка.ЦенаСобственныхМатериалов;
			Строка.СуммаСобственныхМатериалов = Строка.КоличествоУпаковок * Строка.ЦенаСобственныхМатериалов;
			
		КонецЕсли;
		
		Выборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	ПараметрыВыбораСпецификаций.СпецификацииПоФиксированнойСтоимости = "Показывать";
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "ТипПроизводственногоПроцесса";
	Возврат ИменаРеквизитов;
	
КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет таблицу "Сырье и материалы для производства" по данным фактической потребности производства.
//
// Параметры:
//	Параметры - Структура - параметры для заполнения материалов
//	Материалы - ДанныеФормыКоллекция - таблица материалов, в которую будут помещены данные.
//
// Возвращаемое значение:
//	Булево - Истина: таблица материалов перезаполнена; Ложь: таблица материалов не тронута.
//
Функция ЗаполнитьПоФактическойПотребности(Параметры, Материалы) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством2_2") Тогда
		Возврат ЗаполнитьПоФактическойПотребности2_2(Параметры, Материалы);
	КонецЕсли;
	
	// Получим отклонение в потредности, которое образовалось после создания заказов на проивзводство.
	Результат = ПолучитьРезультатЗапросаПоПотребностям(Параметры);
	
	Выборка0 = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Если Не Выборка0.Следующий() ИЛИ (Выборка0.УвеличениеЗаказа = 0 И Выборка0.УменьшениеЗаказа = 0) Тогда
		Возврат Ложь; // Нет данных вообще, либо нет данных к изменению
	КонецЕсли;
	
	Материалы.Очистить(); // очистим текущую ТЧ
	
	ПоступлениеОднойДатой = Параметры.ПоступлениеОднойДатой;
	ДатаПоступления = Параметры.ДатаПоступления;
	
	ВыборкаН = Выборка0.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаН.Следующий() Цикл
		
		ВыборкаХ = ВыборкаН.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаХ.Следующий() Цикл
			
			ВыборкаС = ВыборкаХ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаС.Следующий() Цикл
				
				КРаспределению = ВыборкаС.УвеличениеЗаказа + ВыборкаС.УменьшениеЗаказа; // одно из значений всегда равно 0
				
				// В этом цикле происходит попытка уменьшить заказанное количество,
				// а также добавляются строки материалов, в которых количество не меняется.
				ДетальнаяВыборка = ВыборкаС.Выбрать();
				Пока ДетальнаяВыборка.Следующий() Цикл
					
					ДоступноДляКорректировки = ДетальнаяВыборка.Количество - ДетальнаяВыборка.КоличествоПолучено;
					
					Если ДетальнаяВыборка.Количество = 0 Тогда
						Продолжить;
						
					ИначеЕсли ДоступноДляКорректировки = ДетальнаяВыборка.Количество
						И ДетальнаяВыборка.Количество + КРаспределению <= 0 Тогда
						
						КРаспределению = ДетальнаяВыборка.Количество + КРаспределению;
						Продолжить; // вместо того, чтобы "удалить" строку, мы ее не "добавляем"
						
					КонецЕсли;
					
					НоваяСтрока = Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДетальнаяВыборка);
					
					Если ПоступлениеОднойДатой Тогда
						НоваяСтрока.ДатаПоступления = ДатаПоступления;
					КонецЕсли;
					
					Если КРаспределению >= 0					// Ничего не делаем, просто добавим новую строку в конец, если потребуется
						Или ДоступноДляКорректировки = 0 Тогда	// Все заказанные материалы, были получены, соответственно уменьшать заказанное количество нельзя
						Продолжить; 
					КонецЕсли;
					
					Распределить = Макс(-ДоступноДляКорректировки, КРаспределению);
					
					НоваяСтрока.Количество = НоваяСтрока.Количество + Распределить;
					НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество * ДетальнаяВыборка.Коэффициент;
					
					КРаспределению = КРаспределению - Распределить;
					
				КонецЦикла;
				
				// Добавляем новую строку на количество, которое было увеличено заказами на производство.
				Если КРаспределению > 0 Тогда
					
					НоваяСтрока = Материалы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаС);
					НоваяСтрока.Количество = КРаспределению;
					НоваяСтрока.КоличествоУпаковок = КРаспределению;
					
					Если ПоступлениеОднойДатой Тогда
						НоваяСтрока.ДатаПоступления = ДатаПоступления;
					КонецЕсли;
					
					// Сообщаем о том, что не удеалось уменьшить количество материалов по какой-то из позиций.
				ИначеЕсли КРаспределению < 0 Тогда
					
					Если ЗначениеЗаполнено(ВыборкаС.Характеристика) Тогда
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось уменьшить заказанное количество для номенклатуры ""%1"" с характеристикой ""%2"" на %3 %4. Заказанные материалы уже поступили.';
								|en = 'Cannot decrease the ordered quantity for products ""%1"" with characteristic ""%2"" by %3 %4. Ordered materials have already been received.'"),
							ВыборкаС.Номенклатура,
							ВыборкаС.Характеристика,
							(-1) * КРаспределению,
							ВыборкаС.ЕдиницаИзмерения);
						
					Иначе
						
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось уменьшить заказанное количество для номенклатуры ""%1"" на %2 %3. Заказанные материалы уже поступили.';
								|en = 'Cannot decrease the ordered quantity for products ""%1"" by %2 %3. The ordered materials have already been delivered.'"),
							ВыборкаС.Номенклатура,
							(-1) * КРаспределению,
							ВыборкаС.ЕдиницаИзмерения);
						
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Параметры.Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры:
//		Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//	Возвращаемое значение:
//		Структура - Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ЗаказДавальца";
	ПараметрыУказанияСерий.ИмяТЧТовары = "Продукция";
	ПараметрыУказанияСерий.ИмяТЧСерии  = "Продукция";
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("Склад");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
	ПараметрыУказанияСерий.ЭтоЗаказ = Истина;
	ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Серия,
	|	Товары.Отменено,
	|	Товары.ВариантОбеспечения,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА Товары.Отменено
	|				ИЛИ ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|				ИЛИ НЕ Товары.ВариантОбеспечения В (
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|						ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 15
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					КОГДА Товары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|						ТОГДА 11
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = Товары.Склад)
	|			И ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область УчетНДС

// Инициализирует параметры заполнения налогооблажения НДС
//
// Параметры:
//  Объект		- ДокументОбъект.ЗаказДавальца, ДанныеФормыСтруктура	- документ, для которого необходимо получить параметры.
//
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи().
//
Функция ПараметрыЗаполненияНалогооблаженияНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	ПараметрыЗаполнения.Организация				= Объект.Организация;
	ПараметрыЗаполнения.Дата					= Объект.Дата;
	ПараметрыЗаполнения.Склад					= Объект.Склад;
	ПараметрыЗаполнения.Договор					= Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности	= Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.ОтчетДавальцу			= Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)
	|	И( ЗначениеРазрешено(Склад)
	|	ИЛИ ЗначениеРазрешено(СкладПоступления)
	|	) ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ТекстЗапросаТоварыДокумента(Отбор, Ресурс) Экспорт
	
	Если Ресурс = "Продукция" Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	ВЫБОР КОГДА Таблица.ВариантОбеспечения В(
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
		|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) ТОГДА
		|				Таблица.Ссылка.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ                            КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Серия                        КАК Серия,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаОтгрузки                 КАК ДатаОтгрузки,
		|	Таблица.СтатусУказанияСерий          КАК СтатусУказанияСерий,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.Распоряжение
		|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	НЕ ДанныеУчета.Распоряжение ЕСТЬ NULL
		|//&Отбор
		|";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка                       КАК Распоряжение,
		|	Таблица.Номенклатура                 КАК Номенклатура,
		|	Таблица.Характеристика               КАК Характеристика,
		|	Таблица.Назначение                   КАК Назначение,
		|	Таблица.КодСтроки                    КАК КодСтроки,
		|	Таблица.Количество                   КАК Количество,
		|	Таблица.Цена                         КАК Цена,
		|	Таблица.Сумма                        КАК Сумма,
		|	Таблица.Упаковка                     КАК Упаковка,
		|	Таблица.ДатаПоступления              КАК ДатаПоступления,
		|	Таблица.Склад                        КАК Склад,
		|	ЕСТЬNULL(ДанныеУчета.КОформлению, 0) КАК КОформлению,
		|	ЕСТЬNULL(ДанныеУчета.Заказано, 0)    КАК Заказано
		|ИЗ
		|	Документ.ЗаказДавальца.Материалы КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУчета КАК ДанныеУчета
		|		ПО Таблица.Ссылка = ДанныеУчета.ЗаказПоставщику
		|		И Таблица.КодСтроки = ДанныеУчета.КодСтроки
		|ГДЕ
		|	НЕ ДанныеУчета.ЗаказПоставщику ЕСТЬ NULL
		|//&Отбор
		|";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		
		ТекстОтбора = "";
		
		Для Каждого КлючЗначение Из Отбор Цикл
			
			Ключ = КлючЗначение.Ключ;
			
			Если Ключ = "Ссылка" Тогда
				Ключ = "Таблица.Ссылка";
			КонецЕсли;
			
			ТекстОтбора = 
				ТекстОтбора
				+ " И "
				+ Ключ
				+ " В(&"
				+ КлючЗначение.Значение
				+ ")";
			
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//&Отбор", ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#Область Обеспечение

// Используется для получения данных из заказов давальцев, используемых в обработке "Состояние обеспечения заказов".
// Аналогичные функции объявлены в модулях менеджеров всех типов заказов и учитывают структуру хранения данных документа.
//
// Возвращаемое значение:
// 		Строка - Текст запроса - Текст запроса для выборки данных.
//
Функция ТекстЗапросаЗаказовКОбеспечению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.Ссылка                КАК Заказ,
	|	Т.КодСтроки             КАК КодСтроки,
	|	Т.НомерСтроки           КАК НомерСтроки,
	|	0                       КАК НомерСтрокиПродукция,
	|	НЕОПРЕДЕЛЕНО            КАК Продукция,
	|	НЕОПРЕДЕЛЕНО            КАК Этап,
	|	0                       КАК ЭтапПорядок,
	|	
	|	Т.Номенклатура          КАК Номенклатура,
	|	Т.Характеристика        КАК Характеристика,
	|	Т.Склад                 КАК Склад,
	|	ТаблицаДокумента.Назначение     КАК Назначение,
	|	ТаблицаДокумента.Подразделение  КАК Подразделение,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) КАК ВариантОбеспечения,
	|	Т.ДатаОтгрузки          КАК ДатаОтгрузки,
	|	Т.Упаковка              КАК Упаковка,
	|	
	|	Т.Количество  КАК Количество,
	|	
	|	ТаблицаДокумента.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
	|	ТаблицаДокумента.НеОтгружатьЧастями   КАК НеОтгружатьЧастями,
	|	ТаблицаДокумента.Дата                 КАК Дата,
	|	ТаблицаДокумента.Партнер              КАК Партнер,
	|	ТаблицаДокумента.Менеджер             КАК Менеджер,
	|	ТаблицаДокумента.Статус               КАК Статус,
	|	&ИспользоватьСтатусыЗаказовДавальцев КАК СтатусИспользуется
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК Т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ТаблицаДокумента
	|		ПО Т.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	Т.Ссылка В (&Заказы)
	|	И ТаблицаДокумента.Проведен
	|	И Т.Отменено = ЛОЖЬ
	|	И ТаблицаДокумента.ПометкаУдаления = ЛОЖЬ
	|	И Т.ВариантОбеспечения В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов)
	|	)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет вариант обеспечения в табличной части Продукция документа Заказ давальца.
//
//	Параметры:
//		Объект - ДокументОбъект.ЗаказДавальца - документ, в котором выполняется заполнение,
//		Форма - УправляемаяФорма - форма, в которой выполняется заполнение,
//		ДанныеЗаполнения - ТаблицаЗначений - данные табличной части Продукция,
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий,
//		ЗависимыеРеквизиты - Структура - структура, каждое элемент которой есть структура с именами реквизитов без префикса,
//		                 ключ элемента содержит префикс. Например Новый Структура("Тара", "Сумма, СуммаНДС") означает
//		                 наличие реквизитов: "СуммаТара" и "СуммаНДСТара".
//
//	Возвращаемое значение:
//		Строка - строковое представление количества обработанных строк.
//
Функция ЗаполнитьВариантОбеспечения(Объект, Форма, Операция, ДанныеЗаполнения, ПараметрыУказанияСерий = Неопределено, ЗависимыеРеквизиты = Неопределено) Экспорт

	ЭтоВыборОбеспеченияСУчетомСерий = Операция = "СтрокаТовары"
		И ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
		
	Реквизиты = "КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаУслуги, СуммаСобственныхМатериалов";
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаСуммы(Реквизиты, ЗависимыеРеквизиты);

	СтруктураДействий = Новый Структура;
	Если Форма <> Неопределено Тогда
		СтруктураДействий.Вставить("ПриИзмененииТипаНоменклатурыИлиВариантаОбеспечения",
			Новый Структура("ЕстьРаботы, ЕстьОтменено", Ложь, Истина));
	КонецЕсли;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ЗаполнитьДатыОтгрузки = Ложь;
	ДатаПоУмолчанию = Макс(НачалоДня(ТекущаяДатаСеанса()), Объект.ЖелаемаяДатаОтгрузки);

	ТекСтрокаТовары = Неопределено;
	Идентификатор   = Неопределено;
	СтарыеЗначения = ОбеспечениеКлиентСервер.КлючОбеспечения();
	НовыеЗначения  = ОбеспечениеКлиентСервер.КлючОбеспечения();
	Счетчик = 0;
	Добавлено = 0;
	
	ПараметрыОбновленияДатыОтгрузки = ОбеспечениеСервер.ПараметрыОбновленияДатыОтгрузкиВДокументе();
	ПараметрыОбновленияДатыОтгрузки.ОтгружатьОднойДатой    = Объект.НеОтгружатьЧастями;
	ПараметрыОбновленияДатыОтгрузки.ЖелаемаяДатаОтгрузки   = Объект.ЖелаемаяДатаОтгрузки;
	ПараметрыОбновленияДатыОтгрузки.ДатаОтгрузкиВДокументе = Объект.ДатаОтгрузки;
	
	ОбеспечениеСервер.СдвинутьДатыИСвернутьДублиСтрок(ДанныеЗаполнения, Операция, ПараметрыОбновленияДатыОтгрузки);
	
	Для Каждого СтрокаОбеспечения Из ДанныеЗаполнения Цикл

		// Выбор существующей, либо добавление новой строки.
		Если Идентификатор <> СтрокаОбеспечения.Идентификатор Тогда

			Идентификатор = СтрокаОбеспечения.Идентификатор;
			Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
				СтрокаТовары = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
			ИначеЕсли Операция = "ИндексыСтрок" Тогда
				СтрокаТовары = Объект.Продукция[Идентификатор + Добавлено];
			КонецЕсли;
			ТекСтрокаТовары = СтрокаТовары;

			ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
			ОбработкаТабличнойЧастиКлиентСервер.ЗаполнитьСтруктуруПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

		Иначе
			ТекСтрокаТовары = Объект.Продукция.Вставить(Объект.Продукция.Индекс(ТекСтрокаТовары) + 1);
			ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаТовары);
			ТекСтрокаТовары.КодСтроки = 0;
			Добавлено = Добавлено + 1;
		КонецЕсли;

		// Заполнение полей обеспечения.
		ЗаполнитьЗначенияСвойств(СтарыеЗначения, ТекСтрокаТовары);

		ЗаполнитьЗначенияСвойств(ТекСтрокаТовары, СтрокаОбеспечения, "Количество, ВариантОбеспечения, Склад, ДатаОтгрузки");
		Если ЭтоВыборОбеспеченияСУчетомСерий Тогда
			ТекСтрокаТовары.Серия = СтрокаОбеспечения.Серия;
		КонецЕсли;
		
		Если Объект.НеОтгружатьЧастями Тогда
			ДатаПоУмолчанию = Макс(СтрокаОбеспечения.ДатаОтгрузки, ДатаПоУмолчанию);
			Если Операция = "Заказ" Или Операция = "ИндексыСтрок"
				Или ДатаПоУмолчанию > Объект.ДатаОтгрузки И СтрокаОбеспечения.Отгружено = 0 Тогда
				Объект.ДатаОтгрузки = ДатаПоУмолчанию;
				ЗаполнитьДатыОтгрузки = Истина;
			КонецЕсли;
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(НовыеЗначения, ТекСтрокаТовары);
		ОбеспечениеКлиентСервер.СчетИзменений(Счетчик, СтарыеЗначения, НовыеЗначения);

		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиентСервер.ДобавитьСтрокуДляПересчетаСуммы(СтруктураПересчетаСуммы, ТекСтрокаТовары);

	КонецЦикла;

	ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммы(СтруктураПересчетаСуммы);
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЗаказДавальца));
	КонецЕсли;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	Если ЗаполнитьДатыОтгрузки Тогда
		ОбеспечениеСервер.ЗаполнитьРеквизитВКоллекции(Объект.Продукция, "ДатаОтгрузки", Объект.ДатаОтгрузки);
	КонецЕсли;
	Если Операция = "СтрокаТовары" Или Операция = "СтрокиТовары" Или Операция = "Заказ" Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;
	Возврат ОбеспечениеКлиентСервер.ТекстОбработаноСтрок(Счетчик);

КонецФункции

// Используется для получения признака, что документ может отгружаться частями.
//
// Возвращаемое значение:
//  Булево - признак запрета отгрузки частями.
//
Функция ЕстьНеОтгружатьЧастями() Экспорт
	Возврат Истина;
КонецФункции

// Определяет параметры выбора вариантов обеспечения
//
//	Параметры:
//		Статус - ПеречислениеСсылка.СтатусыЗаказовДавальцев - статус заказа давальца.
//
//	Возвращаемое значение:
//		Структура - Структура параметров выбора.
//
Функция ПараметрыВыбораОбеспечения(Статус) Экспорт
	
	ПутиКДанным = Новый Соответствие();
	ПутиКДанным.Вставить("ДатаОтгрузкиРабот", "ДатаОтгрузки");
	
	Параметры = Новый Структура();
	Параметры.Вставить("ПутиКДанным",          ПутиКДанным);
	Параметры.Вставить("ИмяТабличнойЧасти",    "Продукция");
	Параметры.Вставить("СтатусКВыполнению",     Статус <> Перечисления.СтатусыЗаказовДавальцев.НеСогласован);
	Параметры.Вставить("ИмяМенеджераРегистра", "ЗаказыКлиентов");
	
	Возврат Параметры;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	// Потребности в материалах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Материалы.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Материалы.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Материалы.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Материалы.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

#КонецОбласти

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ЕстьНазначениеВТЧ = Ложь;
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти


#Область ВводНаОсновании

Функция СоздатьЗаказНаПроизводство21НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат СоздатьЗаказНаПроизводствоНаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований, Ложь);
	
КонецФункции

Функция СоздатьЗаказНаПроизводство22НаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований) Экспорт
	
	Возврат СоздатьЗаказНаПроизводствоНаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований, Истина);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Дата                  КАК Период,
	|	Заказ.Валюта                КАК Валюта,
	|	Заказ.Статус                КАК Статус,
	|	Заказ.Партнер               КАК Партнер,
	|	Заказ.Договор               КАК Договор,
	|	Заказ.Назначение            КАК Назначение,
	|	
	|	ВЫБОР
	|		КОГДА Заказ.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ТОГДА Заказ.Назначение.ДвиженияПоСкладскимРегистрам
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ 						КАК ДвиженияПоСкладскимРегистрам,
	|	Заказ.Контрагент            КАК Контрагент,
	|	Заказ.Организация           КАК Организация,
	|	Заказ.Номенклатура          КАК Номенклатура,
	|	Заказ.Характеристика        КАК Характеристика,
	|	Заказ.Подразделение         КАК Подразделение,
	|	Заказ.ЦенаВключаетНДС       КАК ЦенаВключаетНДС,
	|	Заказ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК РасчетыПоДоговорам,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК РасчетыПоНакладным,
	|	
	|	ВЫБОР КОГДА Заказ.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|		И ЕСТЬNULL(Заказ.Договор.ЗаданГрафикИсполнения, ЛОЖЬ) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК ГрафикИсполненияВДоговоре,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Согласован),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК СтатусСогласованИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК СтатусКПроизводствуИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|								ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК СтатусКОтгрузкеИлиВыше,
	|
	|	ВЫБОР КОГДА Заказ.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ                       КАК СтатусЗакрыт,
	|	Заказ.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	Заказ.Номер                 КАК Номер,
	|	Заказ.Менеджер              КАК Менеджер,
	|	Заказ.Комментарий           КАК Комментарий,
	|	Заказ.СуммаДокумента        КАК СуммаДокумента,
	|	Заказ.Проведен              КАК Проведен,
	|	Заказ.ПометкаУдаления       КАК ПометкаУдаления,
	|	Заказ.ДатаПоДаннымПартнера  КАК ДатаПоДаннымПартнера,
	|	Заказ.НомерПоДаннымПартнера КАК НомерПоДаннымПартнера,
	|	Заказ.Склад                 КАК Склад,
	|	ПРЕДСТАВЛЕНИЕ(Заказ.Договор) КАК ДоговорПредставление,
	|	Заказ.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	НакладнаяЯвляетсяРаспоряжением = ЗакупкиСервер.РаспоряжениеНаПриемкуТовараНакладная(Реквизиты.ВариантПриемкиТоваров);
	
	Запрос.УстановитьПараметр("НачалоДня",                      НачалоДня(Реквизиты.Период));
	Запрос.УстановитьПараметр("ИспользоватьСтатусы",            ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовДавальцев"));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",        ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ДокументСсылка)));
	Запрос.УстановитьПараметр("НакладнаяЯвляетсяРаспоряжением", НакладнаяЯвляетсяРаспоряжением);
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ИнформацияПоДоговору = НСтр("ru = 'По договору ""%Договор%""';
									|en = 'Under the ""%Договор%"" contract'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		ИнформацияПоДоговору = СтрЗаменить(ИнформацияПоДоговору, "%Договор%", Реквизиты.ДоговорПредставление);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
КонецПроцедуры

Процедура ИнициализироватьАналитикуУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам",
		РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыКлиентов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	НачалоПериода(&Период, День)  КАК Период,
	|	ТаблицаТовары.Ссылка          КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ТаблицаТовары.Серия           КАК Серия,
	|	ТаблицаТовары.КодСтроки       КАК КодСтроки,
	|	ТаблицаТовары.Склад           КАК Склад,
	|	ТаблицаТовары.Количество      КАК Заказано,
	|	0                             КАК КОформлению,
	|	0                             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                  КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки     КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки    КАК Период,
	|	ТаблицаТовары.Ссылка          КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура    КАК Номенклатура,
	|	ТаблицаТовары.Характеристика  КАК Характеристика,
	|	ТаблицаТовары.Серия           КАК Серия,
	|	ТаблицаТовары.КодСтроки       КАК КодСтроки,
	|	ТаблицаТовары.Склад           КАК Склад,
	|	0                             КАК Заказано,
	|	ТаблицаТовары.Количество      КАК КОформлению,
	|	0                             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                  КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено 
	|	И &Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
	|						ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт))
	|	И ТаблицаТовары.ВариантОбеспечения В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)   КАК ВидДвижения,
	|	&Период                                  КАК Период,
	|	ТаблицаТовары.Ссылка                     КАК ЗаказКлиента,
	|	ТаблицаТовары.Номенклатура               КАК Номенклатура,
	|	ТаблицаТовары.Характеристика             КАК Характеристика,
	|	ТаблицаТовары.Серия                      КАК Серия,
	|	ТаблицаТовары.КодСтроки                  КАК КодСтроки,
	|	ТаблицаТовары.Склад                      КАК Склад,
	|	-ТаблицаТовары.Количество                КАК Заказано,
	|	0                                        КАК КОформлению,
	|	0                                        КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены              КАК ПричинаОтмены
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ИнициализироватьАналитикуУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГрафикОплаты.НомерСтроки                     КАК НомерСтроки,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК Период,
	|	КонецПериода(ГрафикОплаты.ДатаПлатежа, День) КАК ДатаПлатежа,
	|	&Период                                      КАК ДатаРегистратора,
	|	&Номер                                       КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                   КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                        КАК ЗаказКлиента,
	|
	|	&Валюта                                      КАК Валюта,
	|	ГрафикОплаты.Ссылка.ФормаОплаты              КАК ФормаОплаты,
	|	0                                            КАК Сумма,
	|	ГрафикОплаты.СуммаПлатежа                    КАК КОплате,
	|	0                                            КАК КОтгрузке,
	|
	//	Проверяем аванс до производства
	|	ВЫБОР КОГДА НЕ &ИспользоватьСтатусы ТОГДА
	|		ИСТИНА
	|	КОГДА &СтатусКПроизводствуИлиВыше
	|			И НЕ &СтатусКОтгрузкеИлиВыше
	|			И ГрафикОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения) ТОГДА
	|		ЛОЖЬ
	//	Проверяем предоплату до отгрузки
	|	КОГДА &СтатусКОтгрузкеИлиВыше
	|			И ГрафикОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения))
	|			И &ИспользоватьСтатусы ТОГДА
	|		ЛОЖЬ
	//	Считаем, что все хорошо
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
	|	ГрафикОплаты.ВариантОплаты                   КАК ВариантОплаты,
	|	&Валюта                                      КАК ВалютаДокумента
	|
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ГрафикОплаты
	|
	|ГДЕ
	|	ГрафикОплаты.Ссылка = &Ссылка
	|	И &СтатусСогласованИлиВыше
	|	И НЕ &РасчетыПоНакладным
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Указываем продукцию к отгрузке
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаТовары.НомерСтроки)            КАК НомерСтроки,
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День) КАК Период,
	|	НЕОПРЕДЕЛЕНО                                   КАК ДатаПлатежа,
	|	&Период                                        КАК ДатаРегистратора,
	|	&Номер                                         КАК НомерРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)         КАК ВидДвижения,
	|	&АналитикаУчетаПоПартнерам                     КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР КОГДА &РасчетыПоДоговорам ТОГДА
	|		&Договор
	|	ИНАЧЕ
	|		&Ссылка
	|	КОНЕЦ                                          КАК ЗаказКлиента,
	|
	|	&Валюта                                        КАК Валюта,
	|	НЕОПРЕДЕЛЕНО                                   КАК ФормаОплаты,
	|	0                                              КАК Сумма,
	|	0                                              КАК КОплате,
	|	СУММА(ТаблицаТовары.СуммаСНДС)                     КАК КОтгрузке,
	|
	|	ИСТИНА                                         КАК ИсключатьПриКонтроле,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПустаяСсылка)               КАК ВариантОплаты,
	|	&Валюта                                        КАК ВалютаДокумента
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКПроизводствуИлиВыше
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ &РасчетыПоНакладным
	|	И НЕ &ГрафикИсполненияВДоговоре
	|
	|СГРУППИРОВАТЬ ПО
	|	КонецПериода(ТаблицаТовары.ДатаОтгрузки, День)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЗаказыПоставщикам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаказыПоставщикам";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	1                                                                 КАК Порядок,
	|	ТаблицаТовары.НомерСтроки                                         КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                            КАК ВидДвижения,
	|	&Период                                                           КАК Период,
	|	ТаблицаТовары.Ссылка                                              КАК ЗаказПоставщику,
	|	ТаблицаТовары.Номенклатура                                        КАК Номенклатура,
	|	ТаблицаТовары.Характеристика                                      КАК Характеристика,
	|	ТаблицаТовары.КодСтроки                                           КАК КодСтроки,
	|	ТаблицаТовары.Склад                                               КАК Склад,
	|	ВЫБОР КОГДА &СтатусКПроизводствуИлиВыше ТОГДА
	|		ТаблицаТовары.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                                             КАК КОформлению,
	|	ТаблицаТовары.Количество                                          КАК Заказано,
	|	НЕОПРЕДЕЛЕНО                                                      КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки        КАК НомерСтроки,
	|	ТаблицаТовары.ДатаПоступления    КАК Период,
	|	ТаблицаТовары.Ссылка             КАК Распоряжение,
	|	ТаблицаТовары.Склад              КАК Склад,
	|	ТаблицаТовары.Номенклатура       КАК Номенклатура,
	|	ТаблицаТовары.Характеристика     КАК Характеристика,
	|	
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИНАЧЕ
	|				ТаблицаТовары.Назначение
	|		КОНЕЦ                        КАК Назначение,
	|		
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			ТаблицаТовары.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ                        КАК ПланируемоеПоступление,
	|		
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|				0
	|			ИНАЧЕ
	|				ТаблицаТовары.Количество
	|		КОНЕЦ                        КАК ПланируемоеПоступлениеПодЗаказ,
	|		
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|			ТаблицаТовары.Количество
	|		ИНАЧЕ
	|			0
	|		КОНЕЦ                        КАК ПланируемоеПоступлениеСНеподтвержденными,
	|		
	|	ВЫБОР КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|				0
	|			ИНАЧЕ
	|				ТаблицаТовары.Количество
	|		КОНЕЦ                        КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
	|	
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКПроизводствуИлиВыше
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ГрафикОтгрузкиТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.ДатаОтгрузки      КАК Период,
	|	ТаблицаТовары.ДатаОтгрузки      КАК ДатаОтгрузки,
	|
	|	ТаблицаТовары.Номенклатура              КАК Номенклатура,
	|	ТаблицаТовары.Характеристика            КАК Характеристика,
	|	ТаблицаТовары.Склад                     КАК Склад,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			&Назначение
	|		КОНЕЦ                               КАК Назначение,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоИзЗаказов,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоПодЗаказ,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется) ТОГДА
	|			ТаблицаТовары.Количество
	|		КОНЕЦ                               КАК КоличествоНеобеспечено
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И(&СтатусКПроизводствуИлиВыше
	|			И ТаблицаТовары.ВариантОбеспечения В(
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Требуется),
	|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно))
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ИзЗаказов))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СвободныеОстатки";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "
	// Резервирование тары
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	0                                      КАК ВНаличии,
	|	ТаблицаТовары.Количество               КАК ВРезервеСоСклада,
	|	0                                      КАК ВРезервеПодЗаказ
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|	И (ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.СоСклада)
	|
	|		ИЛИ ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить)
	|			И НЕ &СтатусКОтгрузкеИлиВыше)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Отгрузка продукции
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ТаблицаТовары.Количество               КАК ВНаличии,
	|	0                                      КАК ВРезервеСоСклада,
	|
	|	ВЫБОР КОГДА ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТовары.Количество
	|	ИНАЧЕ 0
	|		КОНЕЦ                              КАК ВРезервеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКОтгрузкеИлиВыше
	|
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В(
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	// Заказ давальцу на материалы
	"ВЫБРАТЬ
	|	1                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	
	|	ТаблицаТовары.Назначение               КАК Назначение,
	|
	|	0                                      КАК Потребность,
	|	-ТаблицаТовары.Количество              КАК КЗаказу,
	|	ТаблицаТовары.Количество               КАК Заказано,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКПроизводствуИлиВыше
	|	И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Формирование потребности в продукции
	|ВЫБРАТЬ
	|	2                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&Назначение                            КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	ТаблицаТовары.Количество               КАК КЗаказу,
	|	0                                      КАК Заказано,
	|	0                                      КАК НаличиеПодЗаказ
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКПроизводствуИлиВыше
	|
	|	И ТаблицаТовары.ВариантОбеспечения В(
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Закрытие потребности в продукции
	|ВЫБРАТЬ
	|	2                                      КАК Порядок,
	|	ТаблицаТовары.НомерСтроки              КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	&Назначение                            КАК Назначение,
	|
	|	ТаблицаТовары.Количество               КАК Потребность,
	|	0                                      КАК КЗаказу,
	|	0                                      КАК Заказано,
	|	ТаблицаТовары.Количество               КАК НаличиеПодЗаказ
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И НЕ ТаблицаТовары.Отменено
	|	И &СтатусКОтгрузкеИлиВыше
	|	И НЕ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКПоступлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаПоступления          КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Отправитель,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	
	|	ВЫБОР КОГДА НЕ &ДвиженияПоСкладскимРегистрам ТОГДА
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			ИНАЧЕ
	|				ТаблицаТовары.Назначение
	|		КОНЕЦ                              КАК Назначение,
	|	
	|	&Ссылка                                КАК ДокументПоступления,
	|	ТаблицаТовары.Количество               КАК КОформлениюНакладныхПоРаспоряжению,
	|	ВЫБОР
	|		КОГДА (НЕ &НакладнаяЯвляетсяРаспоряжением
	|				И ТаблицаТовары.Склад.ИспользоватьОрдернуюСхемуПриПоступлении
	|				И ТаблицаТовары.ДатаПоступления >= ТаблицаТовары.Склад.ДатаНачалаОрдернойСхемыПриПоступлении)
	|			ТОГДА ТаблицаТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ                                  КАК КОформлениюОрдеров,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОтДавальца) КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКПроизводствуИлиВыше";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУслугиДавальцуКОформлению(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "УслугиДавальцуКОформлению";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	1										КАК Порядок,
	|	ТаблицаТовары.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&НачалоДня								КАК Период,
	|	ТаблицаТовары.Ссылка					КАК ЗаказДавальца,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	ТаблицаТовары.Количество				КАК Заказано,
	|	0										КАК КОформлению,
	|	ТаблицаТовары.СуммаСНДС					КАК Сумма,
	|	НЕОПРЕДЕЛЕНО							КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2										КАК Порядок,
	|	ТаблицаТовары.НомерСтроки				КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)	КАК ВидДвижения,
	|	&Период									КАК Период,
	|	ТаблицаТовары.Ссылка					КАК ЗаказДавальца,
	|	ТаблицаТовары.Номенклатура				КАК Номенклатура,
	|	ТаблицаТовары.Характеристика			КАК Характеристика,
	|	-ТаблицаТовары.Количество				КАК Заказано,
	|	0										КАК КОформлению,
	|	-ТаблицаТовары.СуммаСНДС				КАК Сумма,
	|	ТаблицаТовары.ПричинаОтмены				КАК ПричинаОтмены
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Отменено
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыКОтгрузке";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаТовары.ДатаОтгрузки             КАК Период,
	|	ТаблицаТовары.Склад                    КАК Склад,
	|	&Партнер                               КАК Получатель,
	|	&Ссылка                                КАК ДокументОтгрузки,
	|	ТаблицаТовары.Номенклатура             КАК Номенклатура,
	|	ТаблицаТовары.Характеристика           КАК Характеристика,
	|	ВЫБОР
	|		КОГДА &ДвиженияПоСкладскимРегистрам
	|			И ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|			ТОГДА &Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ 								   КАК Назначение,
	|	ТаблицаТовары.Серия                    КАК Серия,
	|	0                                      КАК ВРезерве,
	|	ТаблицаТовары.Количество               КАК КОтгрузке,
	|	ТаблицаТовары.Количество               КАК КОформлению
	|ИЗ
	|	Документ.ЗаказДавальца.Продукция КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &СтатусКОтгрузкеИлиВыше
	|	И ТаблицаТовары.Номенклатура.ТипНоменклатуры В (
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаТовары.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)
	|	И НЕ ТаблицаТовары.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ЗаказДавальца";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",  """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерПоДаннымПартнера", """""");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКОтгрузкеИлиВыше",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКПроизводствуИлиВыше",
		"ВЫБОР КОГДА ТаблицаТовары.Ссылка.Статус В(
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КПроизводству),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.КОтгрузке),
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовДавальцев.Закрыт)) ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ");
	ПереопределениеРасчетаПараметров.Вставить("ДвиженияПоСкладскимРегистрам",
		"ЕСТЬNULL(ТаблицаТовары.Ссылка.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)");
	ПереопределениеРасчетаПараметров.Вставить("Назначение","ТаблицаТовары.Ссылка.Назначение");
	ПереопределениеРасчетаПараметров.Вставить("НакладнаяЯвляетсяРаспоряжением",
		"ТаблицаТовары.Ссылка.ВариантПриемкиТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным)");
	
	Если ИмяРегистра = "СвободныеОстатки" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаСвободныеОстатки(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ОбеспечениеЗаказов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеЗаказов(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ЗаказыКлиентов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаЗаказыКлиентов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКОтгрузке" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКОтгрузке(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";	
		
	ИначеЕсли ИмяРегистра = "ГрафикОтгрузкиТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаГрафикОтгрузкиТоваров(Запрос, ТекстыЗапроса, Неопределено);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "ТоварыКПоступлению" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыКПоступлению(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Заказ клиента
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказДавальцаНаУслуги";
	КомандаПечати.Представление = НСтр("ru = 'Заказ давальца на услуги по выпуску продукции';
										|en = 'Material provider order for product release services'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Заказ поставщику
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЗаказовНаТоварыУслуги";
	КомандаПечати.Идентификатор = "ЗаказДавальцуНаСырье";
	КомандаПечати.Представление = НСтр("ru = 'Заказ давальцу на сырье материалы';
										|en = 'Material provider order for materials'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	Если ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок")
	 Или ПолучитьФункциональнуюОпцию("НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок") Тогда
		
		// Счет на оплату
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату';
											|en = 'Proforma invoice'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// Счет на оплату с факсимиле
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Обработка.ПечатьСчетовНаОплату";
		КомандаПечати.Идентификатор = "СчетНаОплату";
		КомандаПечати.Представление = НСтр("ru = 'Счет на оплату с факсимиле';
											|en = 'Proforma invoice with facsimile'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ДополнительныеПараметры.Вставить("ОтображатьФаксимиле", Истина);
		
	КонецЕсли;
	
	ЗаказДавальцаЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ЗаказДавальцаЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);

КонецПроцедуры


Функция ПолучитьДанныеДляПечатнойФормыСчетаНаОплату(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Возврат ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов);
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаСырьеИМатериалы(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Заказчик,
	|
	|	ЛОЖЬ													КАК УчитыватьНДС,
	|
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Исполнитель,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|
	|	Документы.АдресДоставки									КАК АдресДоставки,
	|	Документы.Грузоотправитель								КАК Грузоотправитель,
	|	Документы.Грузополучатель								КАК Грузополучатель,
	// Параметры для выбора областей макета отчета
	|	ЛОЖЬ													КАК ПоказыватьНДСВСтроках,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НЕОПРЕДЕЛЕНО КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК ВариантОплаты,
	|	НЕОПРЕДЕЛЕНО КАК ПроцентПлатежа,
	|	НЕОПРЕДЕЛЕНО КАК СуммаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаПоступления									КАК ДатаПоступления,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|	Товары.Сумма											КАК Сумма,
	|	НЕОПРЕДЕЛЕНО											КАК СтавкаНДС,
	|	0														КАК СуммаНДС,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		ПРЕДСТАВЛЕНИЕ(Товары.Упаковка)
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ВЫБОР КОГДА Товары.Ссылка.ВернутьМногооборотнуюТару
	|			  И Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Заказ давальцу на сырье и материалы';
																|en = 'Material provider order for materials'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа давальцу';
																|en = 'material provider order'"));
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыЗаказаНаУслуги(МассивОбъектов, ПараметрыПечати) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка										КАК Ссылка,
	|	Документы.Номер											КАК Номер,
	|	Документы.Дата											КАК Дата,
	|	""""													КАК АдресДоставки,
	|	Документы.Организация									КАК Организация,
	|	Документы.Организация									КАК Исполнитель,
	|	ВЫБОР КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|			ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД) ТОГДА
	|		ЛОЖЬ
	|	ИНАЧЕ
	|		ИСТИНА
	|	КОНЕЦ													КАК УчитыватьНДС,
	|	ЛОЖЬ													КАК ИспользоватьАвтоСкидки,
	|	&ВыводитьДопКолонкиНДС									КАК ПоказыватьНДСВСтроках,
	|	""""													КАК Тип,
	|	&ПредставлениеДокумента									КАК ПредставлениеДокумента,
	|	&ПредставлениеВОшибке									КАК ПредставлениеВОшибке,
	|	Документы.Организация.Префикс							КАК Префикс,
	|	Документы.Контрагент									КАК Контрагент,
	|	Документы.Контрагент									КАК Заказчик,
	|	Документы.БанковскийСчет								КАК БанковскийСчет,
	|	Документы.БанковскийСчет.ТекстКорреспондента			КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС								КАК ЦенаВключаетНДС,
	|	Документы.Валюта										КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование			КАК Менеджер,
	|	Документы.ДополнительнаяИнформация						КАК ДополнительнаяИнформация,
	|	НЕОПРЕДЕЛЕНО											КАК Грузоотправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Грузополучатель
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка								КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки							КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа							КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ВариантОплаты						КАК ВариантОплаты,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа						КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа							КАК СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка											КАК Ссылка,
	|	Товары.НомерСтроки										КАК НомерСтроки,
	|	Товары.Номенклатура										КАК Номенклатура,
	|	Товары.Номенклатура.Код									КАК Код,
	|	Товары.Номенклатура.Артикул								КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное					КАК НаименованиеПолное,
	|	Товары.ДатаОтгрузки										КАК ДатаОтгрузки,
	|	Товары.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	""""													КАК Содержание,
	|
	|	НЕОПРЕДЕЛЕНО											КАК ВидЦеныИсполнителя,
	|
	|	ВЫБОР КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) ТОГДА
	|		ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК ЕдиницаИзмерения,
	|
	|	Товары.КоличествоУпаковок								КАК Количество,
	|
	|	Товары.Цена												КАК Цена,
	|	Товары.Сумма											КАК Сумма,
	|	Товары.СуммаНДС											КАК СуммаНДС,
	|	0														КАК СуммаСкидки,
	|	Товары.Сумма											КАК СуммаБезСкидки,
	|
	|	Заказ.СтавкаНДС											КАК СтавкаНДС,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) = 1 ТОГДА
	|		НЕОПРЕДЕЛЕНО
	|	ИНАЧЕ
	|		Товары.Упаковка.Наименование
	|	КОНЕЦ													КАК Упаковка,
	|
	|	ЛОЖЬ													КАК ЭтоВозвратнаяТара
	|
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца.Продукция КАК Товары
	|	ПО
	|		Заказ.Ссылка В(&МассивОбъектов)
	|		И Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Товары.Упаковка",
		"Товары.Номенклатура"));
		
	Запрос.УстановитьПараметр("МассивОбъектов",			МассивОбъектов);
	Запрос.УстановитьПараметр("ПредставлениеДокумента",	НСтр("ru = 'Заказ давальца на услуги по выпуску продукции';
																|en = 'Material provider order for product release services'"));
	Запрос.УстановитьПараметр("ПредставлениеВОшибке",	НСтр("ru = 'заказа давальца';
																|en = 'material provider order'"));
	Запрос.УстановитьПараметр("ВыводитьДопКолонкиНДС", Константы.ВыводитьДопКолонкиНДС.Получить());
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Функция ДанныеДляПечатныхФормСчетаНаОплатуИзвещения(ПараметрыПечати, МассивОбъектов) Экспорт 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	
	|	ВЫБОР КОГДА Документы.БанковскийСчет.ИностранныйБанк
	|		ИЛИ Документы.БанковскийСчет.ВалютаДенежныхСредств <> Константы.ВалютаРегламентированногоУчета
	|		ИЛИ Документы.БанковскийСчетКонтрагента.ИностранныйБанк ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ПлатежЗаРубеж,
	|	Документы.БанковскийСчет.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств,
	|	Документы.БанковскийСчет.СВИФТБанка КАК СВИФТБанка,
	|	Документы.БанковскийСчет.СВИФТБанкаДляРасчетов КАК СВИФТБанкаДляРасчетов,
	|	Документы.БанковскийСчет.АдресБанка КАК АдресБанка,
	|	Документы.БанковскийСчет.АдресБанкаДляРасчетов КАК АдресБанкаДляРасчетов,
	|	Документы.БанковскийСчет.СчетВБанкеДляРасчетов КАК СчетВБанкеДляРасчетов,
	|	
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанков.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанков.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанков.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанков.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
 	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	Документы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	Документы.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЛОЖЬ КАК СчетКВозврату
	|ИЗ
	|	Документ.ЗаказДавальца КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанков
	|		ПО Документы.БанковскийСчет.Банк = КлассификаторБанков.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константы
	|		ПО ИСТИНА
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.Ссылка			КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки		КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа		КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа	КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа		КАК СуммаПлатежа,
	|	ЛОЖЬ								КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказДавальца.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1													КАК НомерСтроки,
	|	Заказ.Ссылка										КАК Ссылка,
	|	Заказ.Номенклатура									КАК Номенклатура,
	|	Заказ.Номенклатура.Код								КАК Код,
	|	Заказ.Номенклатура.Артикул							КАК Артикул,
	|	Заказ.Номенклатура.НаименованиеПолное				КАК НаименованиеПолное,
	|	Заказ.СтавкаНДС										КАК СтавкаНДС,
	|	Заказ.Характеристика.НаименованиеПолное				КАК Характеристика,
	|	Заказ.Содержание									КАК Содержание,
	|	СУММА(Товары.Сумма)									КАК Цена,
	|	СУММА(Товары.Сумма)									КАК Сумма,
	|	СУММА(Товары.СуммаНДС)								КАК СуммаНДС,
	|	СУММА(Товары.Сумма)									КАК СуммаБезСкидки,
	|	0													КАК СуммаСкидки,
	|	1													КАК Количество,
	|	НЕОПРЕДЕЛЕНО										КАК Упаковка,
	|	ЛОЖЬ												КАК ЭтоВозвратнаяТара,
	|	ПРЕДСТАВЛЕНИЕ(Заказ.Номенклатура.ЕдиницаИзмерения)	КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ЗаказДавальца КАК Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказДавальца.Продукция КАК Товары
	|	ПО
	|		Заказ.Ссылка = Товары.Ссылка
	|		И Товары.Отменено = ЛОЖЬ
	|
	|ГДЕ
	|	Заказ.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Заказ.Ссылка,
	|	Заказ.Номенклатура,
	|	Заказ.Характеристика,
	|	Заказ.СтавкаНДС,
	|	Заказ.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке",			ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты",	ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти",	ПакетРезультатовЗапроса[2]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает назначение материала по умолчанию. Используется для заполнения в строках табличной части "Материалы"
// заказа давальца. Параметры:
//   - ЗаказДавальца - ДокументСсылка.ЗаказДавальца - заказ, являющийся распоряжением на поступление материала,
//                                                    назначение которого необходимо получить.
//  Возвращаемое значение:
//   - СправочникСсылка.Назначение, Неопределено - назначение давальческого материала.
Функция НазначениеМатериалы(ЗаказДавальца) Экспорт
	
	Результат = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказДавальца, "НазначениеМатериалы");
	
	Возврат Результат;
	
КонецФункции

// Возврашает реквизиты связанные с давальческим назначением.
//  Параметры:
//   Назначение - СправочникСсылка.Назначения - Назначение для которого необходимо определить реквизиты заказа давальца
//                                              к которому оно относится.
//  Возвращаемое значение:
//   Неопределено - Если назначение не давальческое.
//   Структура - Структура с полями:
//    * Партнер    - СправочникСсылка.Партнеры - Партнер, указанный в заказе давальца.
//    * Договор    - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в заказе давальца.
//    * Контрагент - Контрагент, указанный в заказе давальца.
Функция РеквизитыПоНазначению(Назначение) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Партнеры.Ссылка,    ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))             КАК Партнер,
		|	ЕСТЬNULL(Договоры.Ссылка,    ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))          КАК Контрагент
		|ИЗ
		|	Справочник.Назначения КАК СпрНазначения
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказДавальца
		|		ПО ЗаказДавальца.Ссылка = СпрНазначения.Заказ
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
		|		ПО Партнеры.Ссылка = ЕСТЬNULL(ЗаказДавальца.Партнер, СпрНазначения.Партнер)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|		ПО Договоры.Ссылка = ЕСТЬNULL(ЗаказДавальца.Договор, СпрНазначения.Договор)
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Контрагенты.Ссылка = ЕСТЬNULL(ЗаказДавальца.Контрагент, Договоры.Контрагент)
		|ГДЕ
		|	СпрНазначения.Ссылка = &Назначение
		|		И (НЕ ЗаказДавальца.Ссылка ЕСТЬ NULL
		|			ИЛИ СпрНазначения.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
		|				И СпрНазначения.ТипНазначения <> ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Собственное))";
	
	Результат = Неопределено;
	
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Результат = Новый Структура("Партнер, Договор, Контрагент");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возврашает шаблон для генерации назначения продукции в документе.
//  Параметры:
//   - Объект - ДокументОбъект.ЗаказДавальца, ДанныеФормыСтруктура - заказ
//   - ИмяРеквизита - Строка - путь и имя реквизита назначения.
//  Возвращаемое значение:
//   Структура - (см. функцию Справочники.Назначения.ШаблонНового).
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Если Объект.УправлениеПроизводством2_2 Тогда
		
		ШаблонНазначения.Партнер                 = Объект.Партнер;
		ШаблонНазначения.Договор                 = Объект.Договор;
		ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.ДавальческоеПродукция22;
		
	Иначе
		
		ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.Давальческое21;
		
	КонецЕсли;
	
	ШаблонНазначения.Заказ                   = Объект.Ссылка;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Возврашает шаблон для генерации назначения материалов в документе.
//  Параметры:
//   - Объект - ДокументОбъект.ЗаказДавальца, ДанныеФормыСтруктура - заказ
//   - ИмяРеквизита - Строка - путь и имя реквизита назначения.
//  Возвращаемое значение:
//   Структура - (см. функцию Справочники.Назначения.ШаблонНового).
Функция ШаблонНазначенияМатериалы(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
		ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	КонецЕсли;
	
	Если Объект.УправлениеПроизводством2_2 Тогда
		
		ШаблонНазначения.Партнер                 = Объект.Партнер;
		ШаблонНазначения.Договор                 = Объект.Договор;
		ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
		
	Иначе
		
		ШаблонНазначения.Заказ                   = Объект.Ссылка;
		ШаблонНазначения.ТипНазначения           = Перечисления.ТипыНазначений.Давальческое21;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

// Функция возвращает результат запроса с информацией о распределении потребностей в материалах.
//
// Параметры:
//	Параметры - Структура - параметры для заполнения материалов.
//
// Возвращаемое значение:
//	РезультатЗапроса - информацией о распределении потребностей в материалах по строкам документа.
//
Функция ПолучитьРезультатЗапросаПоПотребностям(Параметры)
	
	ТекстЗапроса =
	// Материалы, которые уже поступили по заказу
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОбороты.КодСтроки,
	|	ЗаказыПоставщикамОбороты.ЗаказаноРасход КАК Получено
	|ПОМЕСТИТЬ ПоступившиеМатериалы
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Обороты(, , Период, ЗаказПоставщику = &ЗаказДавальца) КАК ЗаказыПоставщикамОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Материалы, указанные в документе
	|ВЫБРАТЬ
	|	Заказ.ДатаПоступления,
	|	Заказ.Номенклатура,
	|	Заказ.Характеристика,
	|	Заказ.Упаковка,
	|	Заказ.КоличествоУпаковок,
	|	Заказ.Количество,
	|	Заказ.ВидЦены,
	|	Заказ.Цена,
	|	Заказ.Сумма,
	|	Заказ.КодСтроки,
	|	Заказ.Склад,
	|	Регистр.Получено
	|ПОМЕСТИТЬ ВтМатериалы
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК Заказ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПоступившиеМатериалы КАК Регистр
	|	ПО
	|		Заказ.КодСтроки = Регистр.КодСтроки
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказДавальца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Информация о потребности в материалах и продукции, а именно:
	//		- сколько продукции требуется и сколько было заказано
	//		- сколько материалов потребовалось после заказа продукции и сколько заказано.
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказДавальца)
	|				И НЕ Потребности.ПотребностьПриход = 0 ТОГДА
	|		""Продукция""
	|	КОГДА ТИПЗНАЧЕНИЯ(Потребности.Регистратор) = ТИП(Документ.ЗаказНаПроизводство)
	|				И Потребности.КЗаказуПриход < 0 ТОГДА
	|		""Продукция""
	|	ИНАЧЕ
	|		""Материал""
	|	КОНЕЦ							КАК ТипТовара,
	|	Потребности.Регистратор			КАК Регистратор,
	|	Потребности.Номенклатура		КАК Номенклатура,
	|	Потребности.Характеристика		КАК Характеристика,
	|	Потребности.Склад				КАК Склад,
	|	Потребности.Назначение			КАК Назначение,
	|	Потребности.ПотребностьПриход	КАК Требуется,
	|	ВЫБОР
	|		КОГДА Потребности.КЗаказуПриход < 0
	|			ТОГДА -Потребности.КЗаказуПриход
	|		ИНАЧЕ 0
	|	КОНЕЦ							КАК Заказано
	|ПОМЕСТИТЬ Потребности
	|ИЗ
	|	РегистрНакопления.ОбеспечениеЗаказов.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Назначение В
	|				(ВЫБРАТЬ
	|					Т.Ссылка
	|				ИЗ
	|					Справочник.Назначения КАК Т
	|				ГДЕ
	|					Т.Заказ = &ЗаказДавальца)) КАК Потребности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Если таблица не пустая, значит заказы на производство оформлены не на всю продукцию.
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьСтроки
	|ПОМЕСТИТЬ ЗаказНеОбеспечен
	|ИЗ
	|	(ВЫБРАТЬ
	|		Потребности.Номенклатура	КАК Номенклатура,
	|		Потребности.Характеристика	КАК Характеристика,
	|		Потребности.Склад			КАК Склад
	|	ИЗ
	|		Потребности КАК Потребности
	|	ГДЕ
	|		Потребности.ТипТовара = ""Продукция""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Потребности.Номенклатура,
	|		Потребности.Характеристика,
	|		Потребности.Склад
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Потребности.Требуется) > СУММА(Потребности.Заказано)) КАК НеобеспеченныеСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Определим насколько необходимо изменить количество материалов в заказе давальца
	|ВЫБРАТЬ
	|	Потребности.Номенклатура	КАК Номенклатура,
	|	Потребности.Характеристика	КАК Характеристика,
	|	Потребности.Склад			КАК Склад,
	|	ВЫБОР КОГДА Потребности.ТребуетсяОстаток > 0 ТОГДА
	|		Потребности.ТребуетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ						КАК УвеличениеЗаказа,
	|	ВЫБОР КОГДА Потребности.ТребуетсяОстаток < 0 ТОГДА
	|		Потребности.ТребуетсяОстаток
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ						КАК УменьшениеЗаказа
	|ПОМЕСТИТЬ Отклонения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Потребности.Номенклатура							КАК Номенклатура,
	|		Потребности.Характеристика							КАК Характеристика,
	|		Потребности.Склад									КАК Склад,
	|		МАКСИМУМ(НеОбеспечено.ЕстьСтроки)					КАК ЕстьНеОбСтроки,
	|		СУММА(Потребности.Требуется - Потребности.Заказано)	КАК ТребуетсяОстаток
	|	ИЗ
	|		Потребности КАК Потребности
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ЗаказНеОбеспечен КАК НеОбеспечено
	|		ПО
	|			(ИСТИНА)
	|	ГДЕ
	|		Потребности.ТипТовара = ""Материал""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Потребности.Номенклатура,
	|		Потребности.Характеристика,
	|		Потребности.Склад
	|	) КАК Потребности
	|
	|ГДЕ
	//	Если заказана не вся продукция, то нет смысла уменьшать заказанное количество, т.к. материалы еще могут понадобиться.
	|	(Потребности.ЕстьНеОбСтроки ЕСТЬ НЕ NULL И Потребности.ТребуетсяОстаток > 0
	//		Если заказана вся продукция, то корректируем заказанное количество материалов в заказе давальцу, согласно данным заказов на производство.
	|		ИЛИ Потребности.ЕстьНеОбСтроки ЕСТЬ NULL И НЕ Потребности.ТребуетсяОстаток = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Итоговая таблица для распределения отклонений по строкам материалов из заказа давальца.
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Отклонения.Номенклатура,	ВтМатериалы.Номенклатура)	КАК Номенклатура,
	|	ЕСТЬNULL(Отклонения.Характеристика,	ВтМатериалы.Характеристика)	КАК Характеристика,
	|	ЕСТЬNULL(Отклонения.Склад,			ВтМатериалы.Склад)			КАК Склад,
	|
	|	ВЫБОР КОГДА Отклонения.Номенклатура ЕСТЬ НЕ NULL ТОГДА
	|		Отклонения.Номенклатура.ЕдиницаИзмерения
	|	ИНАЧЕ
	|		ВтМатериалы.Номенклатура.ЕдиницаИзмерения
	|	КОНЕЦ										КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(Отклонения.УвеличениеЗаказа, 0)	КАК УвеличениеЗаказа,
	|	ЕСТЬNULL(Отклонения.УменьшениеЗаказа, 0)	КАК УменьшениеЗаказа,
	|	ВтМатериалы.ДатаПоступления					КАК ДатаПоступления,
	|	ВтМатериалы.Упаковка						КАК Упаковка,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1)			КАК Коэффициент,
	|	ВтМатериалы.КоличествоУпаковок				КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВтМатериалы.Количество, 0)			КАК Количество,
	|	ЕСТЬNULL(ВтМатериалы.Получено, 0)			КАК КоличествоПолучено,
	|	ВтМатериалы.ВидЦены							КАК ВидЦены,
	|	ВтМатериалы.Цена							КАК Цена,
	|	ВтМатериалы.Сумма							КАК Сумма,
	|	ВтМатериалы.КодСтроки						КАК КодСтроки
	|ИЗ
	|	Отклонения КАК Отклонения
	|
	|	ПОЛНОЕ СОЕДИНЕНИЕ ВтМатериалы КАК ВтМатериалы
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО
	|			ВтМатериалы.Упаковка = Упаковки.Ссылка
	|	ПО
	|		Отклонения.Номенклатура = ВтМатериалы.Номенклатура
	|		И Отклонения.Характеристика = ВтМатериалы.Характеристика
	|		И Отклонения.Склад = ВтМатериалы.Склад
	|
	|ИТОГИ
	|	МАКСИМУМ(УвеличениеЗаказа),
	|	МИНИМУМ(УменьшениеЗаказа),
	|	МАКСИМУМ(ЕдиницаИзмерения)
	|ПО
	|	ОБЩИЕ,
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"Упаковки",
		"ВтМатериалы.Номенклатура"));
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказДавальца", Параметры.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ТекстЗапросаВТТоварыРаспоряженияПоступлениеЗаказ()
	
	ТекстЗапроса = "
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументТовары.Номенклатура КАК Номенклатура,
	|	ДокументТовары.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ КАК Упаковка,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	Сумма(ДокументТовары.Сумма) КАК СуммаСНДС,
	|	ДокументТовары.Склад КАК Склад,
	|	ВтДокументы.ДокументСсылка КАК Ссылка
	|ПОМЕСТИТЬ ВТТоварыРаспоряженияПоступление
	|ИЗ
	|	Документ.ЗаказДавальца.Материалы КАК ДокументТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДокументы КАК ВтДокументы
	|		ПО (ВтДокументы.ДокументСсылка = ДокументТовары.Ссылка)
	|ГДЕ
	|	ВтДокументы.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Характеристика,
	|	ДокументТовары.Упаковка,
	|	ДокументТовары.Склад,
	|	ВтДокументы.ДокументСсылка,
	|	ВЫБОР
	|		КОГДА ДокументТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ДокументТовары.Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ ДокументТовары.Упаковка
	|	КОНЕЦ
	|
	|;";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Осуществляет инициализацию структуры состояния расчетов
//
// Возвращаемое значение:
//	СтруктураСостоянияРасчетов - Структура -
//
Функция СтруктураСостоянияРасчетов()
	
	СтруктураСостоянияРасчетов = Новый Структура;
	СтруктураСостоянияРасчетов.Вставить("Состояние", Перечисления.СостоянияЗаказовКлиентов.ПустаяСсылка());
	СтруктураСостоянияРасчетов.Вставить("СостояниеПросрочено", Ложь);
	СтруктураСостоянияРасчетов.Вставить("СуммаОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОплаты", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентОтгрузки", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("ПроцентДолга", 0);
	СтруктураСостоянияРасчетов.Вставить("СуммаКОплате", 0);
	
	Возврат СтруктураСостоянияРасчетов
	
КонецФункции

Функция СоздатьЗаказНаПроизводствоНаОснованииЗаказаДавальцаПроверкаОснований(ОбъектыОснований, УправлениеПроизводством2_2)
	
	РезультатПроверки = Новый Структура("ОбъектыОснований, ТекстОшибки");
	
	Если ОбъектыОснований.Количество() = 0
			Или УправлениеПроизводством2_2 И Не ПроизводствоСервер.ИспользуетсяПроизводство21()
			Или Не УправлениеПроизводством2_2 И Не ПроизводствоСервер.ИспользуетсяПроизводство22() Тогда
			
				РезультатПроверки.ОбъектыОснований = ОбъектыОснований;
				Возврат РезультатПроверки;
			
	КонецЕсли;
	
	// Требуется проверка.
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивСсылок", ОбъектыОснований);
	Запрос.УстановитьПараметр("УправлениеПроизводством2_2", УправлениеПроизводством2_2);
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказДавальца.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказДавальца
		|ГДЕ
		|	ЗаказДавальца.Ссылка В(&МассивСсылок) И ЗаказДавальца.УправлениеПроизводством2_2 = &УправлениеПроизводством2_2";
	
	РезультатПроверки.ОбъектыОснований = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если РезультатПроверки.ОбъектыОснований.Количество() = 0 Тогда
		
		Если ОбъектыОснований.Количество() = 1 Тогда
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для данного документа';
												|en = 'Unable to execute the command for this document'");
		Иначе
			РезультатПроверки.ТекстОшибки = НСтр("ru = 'Команда не может быть выполнена для выбранных документов';
												|en = 'Command cannot be executed for the selected documents'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

#КонецОбласти

#Область ПроизводствоПоЗаказуДавальца

Процедура СоздатьВтСпособыПолученияМатериалов2_1(МенеджерВременныхТаблиц, СвойстваНазначений) Экспорт
	
	Назначения = Новый Массив();
	Для Каждого Элемент Из СвойстваНазначений Цикл
		Если Элемент.Значение <> Неопределено И Элемент.Значение.ЭтоНазначениеДавальца Тогда
			Назначения.Добавить(Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО					 КАК Распоряжение,
		|	ЗаказыДавальца.Назначение        КАК Назначение,
		|	ТаблицаМатериалы.Номенклатура    КАК Номенклатура,
		|	ТаблицаМатериалы.Характеристика  КАК Характеристика,
		|	МАКСИМУМ(ТаблицаМатериалы.Склад) КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказыДавальца
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Материалы КАК ТаблицаМатериалы
		|		ПО ТаблицаМатериалы.Ссылка = ЗаказыДавальца.Ссылка
		|ГДЕ
		|	ЗаказыДавальца.Проведен
		|	И ЗаказыДавальца.Назначение В(&Назначения)
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыДавальца.Назначение,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение, Назначение, Номенклатура, Характеристика, Склад";
	Запрос.УстановитьПараметр("Назначения", Назначения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВтСпособыПолученияМатериалов2_1ДляЗаказа(МенеджерВременныхТаблиц, Заказ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО					 КАК Распоряжение,
		|	
		|	ВЫБОР КОГДА ЗаказыДавальца.УправлениеПроизводством2_2 ТОГДА
		|				ЗаказыДавальца.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗаказыДавальца.Назначение
		|		КОНЕЦ КАК Назначение,
		|	
		|	ТаблицаМатериалы.Номенклатура    КАК Номенклатура,
		|	ТаблицаМатериалы.Характеристика  КАК Характеристика,
		|	МАКСИМУМ(ТаблицаМатериалы.Склад) КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ИЗ
		|	Документ.ЗаказДавальца КАК ЗаказыДавальца
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Материалы КАК ТаблицаМатериалы
		|		ПО ТаблицаМатериалы.Ссылка = ЗаказыДавальца.Ссылка
		|ГДЕ
		|	ЗаказыДавальца.Проведен
		|	И ЗаказыДавальца.Ссылка = &Заказ
		|СГРУППИРОВАТЬ ПО
		|	
		|	ВЫБОР КОГДА ЗаказыДавальца.УправлениеПроизводством2_2 ТОГДА
		|				ЗаказыДавальца.НазначениеМатериалы
		|			ИНАЧЕ
		|				ЗаказыДавальца.Назначение
		|		КОНЕЦ,
		|	
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Характеристика
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение, Назначение, Номенклатура, Характеристика, Склад";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗаполнитьПоФактическойПотребности2_2(Параметры, ТабЧастьМатериалы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Партнер",          Параметры.Партнер);
	Запрос.УстановитьПараметр("Договор",          Параметры.Договор);
	Запрос.УстановитьПараметр("Склад",            Параметры.СкладПоступления);
	Запрос.УстановитьПараметр("ТекущийДокумент",  Параметры.Ссылка);
	Запрос.Текст =
		"// Назначения этапов производства ПО назначению давальца.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Обеспечение.Назначение КАК Назначение
		|ПОМЕСТИТЬ ВтНазначенияЭтапов
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Этапы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Обеспечение
		|		ПО Этапы.Ссылка = Обеспечение.Ссылка
		|			И Обеспечение.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|ГДЕ
		|	Этапы.Партнер = &Партнер
		|	И Этапы.Договор = &Договор
		|	И Этапы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
		|;
		|
		|// Временная таблица потребностей этапов в обособленных материалах.
		|ВЫБРАТЬ
		|	Потребности.Назначение     КАК Назначение,
		|	Потребности.Номенклатура   КАК Номенклатура,
		|	Потребности.Характеристика КАК Характеристика,
		|	Потребности.Склад          КАК Склад,
		|	СУММА(Потребности.КЗаказу) КАК КоличествоЭтап
		|ПОМЕСТИТЬ ВтПотребностиЭтапов
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатки.Назначение     КАК Назначение,
		|		ТаблицаОстатки.Номенклатура   КАК Номенклатура,
		|		ТаблицаОстатки.Характеристика КАК Характеристика,
		|		ТаблицаОстатки.Склад          КАК Склад,
		|		ТаблицаОстатки.КЗаказуОстаток КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			Назначение В(
		|				ВЫБРАТЬ
		|					Таблица.Назначение
		|				ИЗ
		|					ВтНазначенияЭтапов КАК Таблица)
		|			И Склад В ИЕРАРХИИ (&Склад)) КАК ТаблицаОстатки
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		Движения.Назначение     КАК Назначение,
		|		Движения.Номенклатура   КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад          КАК Склад,
		|		
		|		-ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.КЗаказу
		|				ИНАЧЕ
		|					-Движения.КЗаказу
		|			КОНЕЦ               КАК КЗаказу
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Движения
		|	ГДЕ
		|		Движения.Активность
		|		И Движения.Регистратор = &ТекущийДокумент
		|		И Движения.Назначение В(
		|			ВЫБРАТЬ
		|				Таблица.Назначение
		|			ИЗ
		|				ВтНазначенияЭтапов КАК Таблица)) КАК Потребности
		|СГРУППИРОВАТЬ ПО
		|	Потребности.Назначение, Потребности.Номенклатура, Потребности.Характеристика, Потребности.Склад
		|ИМЕЮЩИЕ
		|	СУММА(Потребности.КЗаказу) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение, Номенклатура, Характеристика, Склад";
	
	Запрос.Выполнить();
	РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ПолуфабрикатыВПроизводстве(Запрос.МенеджерВременныхТаблиц,
	                                                                                   "ВтПотребностиЭтапов",
	                                                                                   "ВтПолуфабрикатыВПроцессе");
	
	Запрос.Текст =
		"// Потребности этапов В обособленных материалах.
		|ВЫБРАТЬ
		|	Потребности.Назначение     КАК Назначение,
		|	Потребности.Номенклатура   КАК Номенклатура,
		|	Потребности.Характеристика КАК Характеристика,
		|	Потребности.Склад          КАК Склад,
		|	ВЫБОР КОГДА Потребности.КоличествоЭтап - ЕСТЬNULL(ПолуфабрикатыВПроцессе.Количество, 0) < 0 ТОГДА // так как в производстве нет контроля остатков и регистр оборотный.
		|					0
		|				ИНАЧЕ
		|					Потребности.КоличествоЭтап - ЕСТЬNULL(ПолуфабрикатыВПроцессе.Количество, 0)
		|		КОНЕЦ                  КАК КоличествоЭтап
		|ИЗ
		|	ВтПотребностиЭтапов КАК Потребности
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПолуфабрикатыВПроцессе КАК ПолуфабрикатыВПроцессе
		|		ПО ПолуфабрикатыВПроцессе.Номенклатура   = Потребности.Номенклатура
		|		 И ПолуфабрикатыВПроцессе.Характеристика = Потребности.Характеристика
		|		 И ПолуфабрикатыВПроцессе.Склад          = Потребности.Склад
		|		 И ПолуфабрикатыВПроцессе.Назначение     = Потребности.Назначение
		|
		|;
		|
		|// Контроль поступления материалов по заказу давальца
		|ВЫБРАТЬ
		|	
		|	Ордера.Назначение     КАК Назначение,
		|	
		|	Ордера.Номенклатура   КАК Номенклатура,
		|	Ордера.Характеристика КАК Характеристика,
		|	Ордера.Склад          КАК Склад,
		|	Ордера.КОформлениюОрдеровРасход + Ордера.ПринимаетсяПриход КАК КоличествоОрдер
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Обороты(,,,
		|		ДокументПоступления = &ТекущийДокумент) КАК Ордера
		|;
		|
		|// Контроль оформления накладных на поступление материалов по заказу давальца
		|ВЫБРАТЬ
		|	Накладные.КодСтроки         КАК КодСтроки,
		|	Накладные.Номенклатура      КАК Номенклатура,
		|	Накладные.Характеристика    КАК Характеристика,
		|	Накладные.Склад             КАК Склад,
		|	Накладные.КОформлениюРасход КАК КоличествоНакладная
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Обороты(,,,
		|		ЗаказПоставщику = &ТекущийДокумент) КАК Накладные";
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ТаблицыПакета = Новый Массив();
	ТаблицыПакета.Добавить("ПотребностиЭтапов");
	ТаблицыПакета.Добавить("ОрдераПоЗаказу");
	ТаблицыПакета.Добавить("НакладныеПоЗаказу");
	
	Этапы     = ПакетРезультатов[ТаблицыПакета.Найти("ПотребностиЭтапов")].Выгрузить();
	Ордера    = ПакетРезультатов[ТаблицыПакета.Найти("ОрдераПоЗаказу")].Выгрузить();
	Накладные = ПакетРезультатов[ТаблицыПакета.Найти("НакладныеПоЗаказу")].Выгрузить();
	
	Таблица = ТабЧастьМатериалы.Выгрузить();
	Таблица.Колонки.Добавить("КоличествоНакладная", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Таблица.Колонки.Добавить("КоличествоЭтап", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Таблица.Колонки.Добавить("КоличествоОрдер", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповЧисла(15, 3));
	Таблица.Индексы.Добавить("КодСтроки,Номенклатура,Характеристика,Склад");
	Таблица.Индексы.Добавить("Назначение,Номенклатура,Характеристика,Склад");
	
	Источник   = Накладные;
	Колонка    = "КоличествоНакладная";
	ОтборСтрок = "КодСтроки,Номенклатура,Характеристика,Склад";
	Выражение  = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение);
	
	Источник   = Ордера;
	Колонка    = "КоличествоОрдер";
	ОтборСтрок = "Назначение,Номенклатура,Характеристика,Склад";
	
	Выражение1  = "ПО [КоличествоНакладная]";
	Выражение2  = "[КоличествоНакладная], ПО [Количество]";
	Выражение3  = "ПО [Количество]";
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение1);
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение2);
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение3);
	
	Источник   = Этапы;
	Колонка    = "КоличествоЭтап";
	ОтборСтрок = "Назначение,Номенклатура,Характеристика,Склад";
	
	Выражение1  = "ПО [КоличествоНакладная]";
	Выражение2  = "ПО [КоличествоОрдер]";
	Выражение3  = "ПО [Количество]";
	
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение1);
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение2);
	НакладныеСервер.РаспределитьКоличество(Источник, Таблица, Колонка, ОтборСтрок, Выражение3);
	
	МассивСтрокПодДавальца = Новый Массив();
	ВсегоСтрок = Таблица.Количество();
	Для Счетчик = 1 По ВсегоСтрок Цикл
		
		СтрокаТаблицы = Таблица[ВсегоСтрок - Счетчик];
		
		Если СтрокаТаблицы.Назначение = Параметры.НазначениеМатериалы Тогда
			Количество = Макс(СтрокаТаблицы.КоличествоНакладная, СтрокаТаблицы.КоличествоОрдер);
		Иначе
			Количество = Макс(СтрокаТаблицы.КоличествоНакладная, СтрокаТаблицы.КоличествоОрдер, СтрокаТаблицы.КоличествоЭтап);
		КонецЕсли;
		Разница = СтрокаТаблицы.Количество - Количество;
		СтрокаТаблицы.Количество = Количество;
		Если Разница > 0 Тогда
			
			Если Количество > 0 Тогда
				
				НоваяСтрока = Таблица.Вставить(ВсегоСтрок);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, , "КодСтроки");
				
			Иначе
			
				НоваяСтрока = СтрокаТаблицы;
				
			КонецЕсли;
			
			НоваяСтрока.Количество = Разница;
			НоваяСтрока.Назначение = Параметры.НазначениеМатериалы;
			НоваяСтрока.КоличествоЭтап = 0;
			
			МассивСтрокПодДавальца.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Распределить этапы на строки под давальца в целом.
	ПоляСвязи = "Номенклатура, Характеристика, Склад";
	Отбор = Новый Структура(ПоляСвязи);
	Этапы.Индексы.Добавить(ПоляСвязи);
	Для Каждого СтрокаТаблицы Из МассивСтрокПодДавальца Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеСтроки = Этапы.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			КоличествоРаспределить = Мин(СтрокаТаблицы.Количество, НайденнаяСтрока.КоличествоЭтап);
			Если КоличествоРаспределить > 0 Тогда
				
				НайденнаяСтрока.КоличествоЭтап = НайденнаяСтрока.КоличествоЭтап - КоличествоРаспределить;
				Если КоличествоРаспределить < СтрокаТаблицы.Количество Тогда
					
					СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - КоличествоРаспределить;
					СтрокаТаблицы.КоличествоЭтап = СтрокаТаблицы.Количество;
					
					НоваяСтрока = Таблица.Вставить(Таблица.Индекс(СтрокаТаблицы));
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
					НоваяСтрока.Количество = КоличествоРаспределить;
					НоваяСтрока.КоличествоЭтап = КоличествоРаспределить;
					НоваяСтрока.КодСтроки = 0;
					НоваяСтрока.Назначение = НайденнаяСтрока.Назначение;
					
				Иначе
					
					СтрокаТаблицы.Назначение = НайденнаяСтрока.Назначение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Дополнение таблицы нераспределенными потребностями этапа.
	Источник = Этапы;
	Источник.Колонки.КоличествоЭтап.Имя = "Количество";
	НакладныеСервер.ДополнитьТаблицу(Источник, Таблица, "Количество");
	
	ТабЧастьМатериалы.Загрузить(Таблица);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ПересчитатьКоличествоУпаковок",
		ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабЧастьМатериалы, СтруктураДействий, Неопределено);
	Возврат Истина;
	
КонецФункции

#КонецОбласти

// Возвращает таблицу допустимых отклонений мерных товаров по списку распоряжений.
//
//	Параметры:
//		СписокРаспоряжений - СписокЗначений, ДокументСсылка.ЗаказНаВнутреннееПотребление - список заказов для определения допустимых отклонений
//		ТипДвиженияЗапасов - ПеречислениеСсылка.ТипыДвиженияЗапасов -
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица допустимых отклонений
//		* Заказ                - ДокументСсылка.ЗаказНаВнутреннееПотребление
//		* Номенклатура         - СправоникСсылка.Номенклатура
//		* Характеристика       - СправоникСсылка.ХарактеристикиНоменклатуры
//		* Серия                - СправоникСсылка.СерииНоменклатуры
//		* ДопустимоеОтклонение - Число
//
Функция ДопустимыеОтклоненияМерныхТоваров(СписокРаспоряжений, ТипДвиженияЗапасов) Экспорт
	
	ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	
	Если Не ЗначениеЗаполнено(СписокРаспоряжений) Или ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров = 0 Тогда
		Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Таблица = Новый ТаблицаЗначений;
		Таблица.Колонки.Добавить("Заказ");
		Таблица.Колонки.Добавить("Номенклатура");
		Таблица.Колонки.Добавить("Характеристика");
		Таблица.Колонки.Добавить("Склад");
		Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Отгрузка Тогда
			Таблица.Колонки.Добавить("Серия");
		КонецЕсли;
		Таблица.Колонки.Добавить("ДопустимоеОтклонение");
		Возврат Таблица;
	КонецЕсли;
	
	Если ТипЗнч(СписокРаспоряжений) = Тип("ДокументСсылка.ЗаказДавальца") Тогда
		МассивРаспоряжений = Новый Массив();
		МассивРаспоряжений.Добавить(СписокРаспоряжений);
	Иначе
		МассивРаспоряжений = СписокРаспоряжений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	
	Если ТипДвиженияЗапасов = Перечисления.ТипыДвиженияЗапасов.Поступление Тогда
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКПоступлению.ЗаказПоставщику КАК Заказ,
			|	ТоварыКПоступлению.Номенклатура    КАК Номенклатура,
			|	ТоварыКПоступлению.Характеристика  КАК Характеристика,
			|	ТоварыКПоступлению.Склад           КАК Склад,
			|	СУММА(ТоварыКПоступлению.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыПоставщикам.Обороты(&НачПериод, &КонПериод,
			|		, ЗаказПоставщику В (&МассивРаспоряжений)) КАК ТоварыКПоступлению
			|ГДЕ
			|	ТоварыКПоступлению.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКПоступлению.Номенклатура,
			|	ТоварыКПоступлению.Характеристика,
			|	ТоварыКПоступлению.ЗаказПоставщику,
			|	ТоварыКПоступлению.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыПоставщикам",
			"ЗаказПоставщику В (&МассивРаспоряжений)", Запрос.Параметры);
		
	Иначе
		
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ТоварыКОтгрузке.ЗаказКлиента   КАК Заказ,
			|	ТоварыКОтгрузке.Номенклатура   КАК Номенклатура,
			|	ТоварыКОтгрузке.Характеристика КАК Характеристика,
			|	ТоварыКОтгрузке.Серия          КАК Серия,
			|	ТоварыКОтгрузке.Склад          КАК Склад,
			|	СУММА(ТоварыКОтгрузке.КОформлениюПриход
			|		* (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100)) КАК ДопустимоеОтклонение
			|ИЗ
			|	РегистрНакопления.ЗаказыКлиентов.Обороты(&НачПериод,&КонПериод,,
			|		ЗаказКлиента В (&МассивРаспоряжений)) КАК ТоварыКОтгрузке
			|ГДЕ
			|	ТоварыКОтгрузке.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины В (&МерныеТипыЕдиницИзмерений)
			|СГРУППИРОВАТЬ ПО
			|	ТоварыКОтгрузке.ЗаказКлиента,
			|	ТоварыКОтгрузке.Номенклатура,
			|	ТоварыКОтгрузке.Характеристика,
			|	ТоварыКОтгрузке.Серия,
			|	ТоварыКОтгрузке.Склад";
		
		ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ЗаказыКлиентов",
			"ЗаказКлиента В (&МассивРаспоряжений)", Запрос.Параметры);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МерныеТипыЕдиницИзмерений",
		Справочники.УпаковкиЕдиницыИзмерения.МерныеТипыЕдиницИзмерений());
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров",
		ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров);
	
	Запрос.УстановитьПараметр("НачПериод", ГраницыОборотов.МинимальнаяДата);
	Запрос.УстановитьПараметр("КонПериод", ГраницыОборотов.МаксимальнаяДата);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Заполняет поле "Назначение" в табличной части по заказам давальцев
//
// Возвращаемое значение:
//	Товары - ТабличнаяЧасть - Табличная часть, в которой необходимо заполнить поле назначение.
//
Процедура ЗаполнитьНазначенияПоЗаказамДавальцев(Товары, СписокЗаказов) Экспорт
	
	Если Не Товары.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ссылка     КАК ЗаказДавальца,
	|	Назначение КАК Назначение
	|ИЗ
	|	Документ.ЗаказДавальца
	|ГДЕ
	|	Ссылка В(&СписокЗаказов)");
	
	Запрос.УстановитьПараметр("СписокЗаказов", СписокЗаказов);
	
	ТаблицаНазначений = Запрос.Выполнить().Выгрузить();
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Для Каждого СтрТовары Из Товары Цикл
		Если СтрТовары.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			СтрТовары.Назначение = ПустоеНазначение;
		Иначе	
			СтрокаСНазначением = ТаблицаНазначений.Найти(СтрТовары.ЗаказДавальца, "ЗаказДавальца");
			СтрТовары.Назначение = ?(СтрокаСНазначением = Неопределено, ПустоеНазначение, СтрокаСНазначением.Назначение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Партнер                                КАК Партнер,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&Склад                                  КАК МестоХранения,
	|	&Подразделение                          КАК Подразделение,
	|	&Менеджер                               КАК Ответственный,
	|	&Комментарий                            КАК Комментарий,
	|	&Валюта                                 КАК Валюта,
	|	&СуммаДокумента                         КАК Сумма,
	|	&Статус                                 КАК Статус,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                   КАК Дополнительно,
	|	&ДатаПоДаннымПартнера                   КАК ДатаПервичногоДокумента,
	|	&НомерПоДаннымПартнера                  КАК НомерПервичногоДокумента,
	|	&Период   КАК ДатаОтраженияВУчете";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ФормированиеГиперссылкиВЖурналеДокументыПереработки

Функция ТекстЗапросаЗаказыВРаботе()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияЗаказов.Заказ КАК Заказ,
	|	СостоянияЗаказов.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказов
	|ГДЕ
	|	СостоянияЗаказов.Заказ ССЫЛКА Документ.ЗаказДавальца
	|	И СостоянияЗаказов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)";
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не (ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СостоянияЗаказовКлиентов)
			И ПравоДоступа("Изменение", Метаданные.Документы.ЗаказДавальца)
			И ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстГиперссылки = НСтр("ru = 'Заказы давальцев';
							|en = 'Material provider orders'");
	Запрос = Новый Запрос(ТекстЗапросаЗаказыВРаботе());
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМесто());
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМесто());
	КонецЕсли;
	
КонецФункции

Функция ИмяФормыРабочееМесто() Экспорт
	
	Возврат "Документ.ЗаказДавальца.Форма.ФормаСписка";
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
