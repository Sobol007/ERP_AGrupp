#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	УстановитьЗначенияПоУмолчанию();
	Если Параметры.Свойство("Состояние") Тогда
		Состояние = Параметры.Состояние;
	КонецЕсли;
	
	СтруктураОтборов = Неопределено;
	Если Параметры.Свойство("СтруктураОтборов", СтруктураОтборов) Тогда
		СтруктураБыстрогоОтбора = Новый Структура;
		
		Если СтруктураОтборов.Свойство("Организация", Организация) Тогда
			СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
		КонецЕсли;
		
		Если СтруктураОтборов.Свойство("Подразделение", Подразделение) Тогда
			СтруктураБыстрогоОтбора.Вставить("Подразделение", Подразделение);
		КонецЕсли;
	Иначе
		Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		Если СтруктураБыстрогоОтбора = Неопределено Тогда
			Параметры.Свойство("Организация",	Организация);
			Параметры.Свойство("Подразделение",	Подразделение);
		Иначе
			СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
			СтруктураБыстрогоОтбора.Свойство("Подразделение", Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Период = Параметры.ПериодРегистрации;
	КонецЕсли;
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МесяцСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Период);
	
	ОбновитьДанныеФормы();
	УстановитьВидимость(ЭтаФорма);
	
	ВремяОжидания = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РаспределениеПрочихЗатрат" Тогда
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Организация", Параметр.Организация);
		СтруктураОтбора.Вставить("Подразделение", Параметр.Подразделение);
		СтруктураОтбора.Вставить("СтатьяРасходов", Параметр.СтатьяРасходов);
		СтруктураОтбора.Вставить("АналитикаРасходов", Параметр.АналитикаРасходов);
		СтруктураОтбора.Вставить("НаправлениеДеятельности", Параметр.НаправлениеДеятельности);
		
		Строки = СтатьиРасходов.НайтиСтроки(СтруктураОтбора);
		Если Строки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Строки[0], Параметр);
		КонецЕсли;
		Если ЗначениеЗаполнено(Состояние) И Параметр.Свойство("Состояние") И Состояние <> Параметр.Состояние Тогда
			ОбновитьДанныеФормы();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		Настройки.Удалить("Организация");
		Настройки.Удалить("Подразделение");
	Иначе
		Если Параметры.Свойство("Организация") Тогда
			Настройки["Организация"] = Параметры.Организация;
		КонецЕсли;
		Настройки["Организация"] = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Настройки["Организация"]);
		
		Если Параметры.Свойство("Подразделение") Тогда
			Настройки["Подразделение"] = Параметры.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ПериодРегистрации") Тогда
		Настройки["Период"] = Параметры.ПериодРегистрации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("МесяцСтрокаНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено Тогда
		Период = ВыбранныйПериод;
		МесяцСтрока = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Период);

		ОбновитьДанныеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
																		  СтандартнаяОбработка,
																		  Период,
																		  МесяцСтрока);
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура МесяцСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	УстановитьВидимость(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаДокументыПроизводстваОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ОткрытьЖурнал(ПараметрыЖурнала());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатьиРасходов

&НаКлиенте
Процедура СтатьиРасходовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуДокумента(Элементы.СтатьиРасходов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовПередНачаломИзменения(Элемент, Отказ)
	
	ОткрытьТекущийЭлемент();
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовОткрыть(Команда)
	
	ОткрытьТекущийЭлемент();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.СтатьиРасходов);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.СтатьиРасходов, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.СтатьиРасходов);
КонецПроцедуры

&НаКлиенте
Процедура СтатьиРасходовСформироватьДокументы(Команда)
	
	Если Элементы.СтатьиРасходов.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выделено ни одной строки.';
																|en = 'No lines selected.'"));
		Возврат;
		
	КонецЕсли;
	
	ЗапуститьФоновоеЗадание("СформироватьДокументы", ПараметрыФоновогоЗадания());
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Состояние.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатьиРасходов.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СостоянияРаспределенияРасходов.ОшибкаРаспределения;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.SpecialTextColor);

КонецПроцедуры

#Область ЗаполнениеФормы

&НаКлиенте
Процедура ОбновитьДанныеФормы()

	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.РаспределениеПрочихЗатрат.Форма.ФормаРабочееМесто.ОбновитьДанныеФормы");

	ОтключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияОбновленияФормы");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Период", Период);
	ПараметрыЗадания.Вставить("Организации", МассивДоступныхОрганизаций(Организация));
	ПараметрыЗадания.Вставить("Подразделения", ПодразделенияРасходов());
	ПараметрыЗадания.Вставить("Состояние", Состояние);
	ПараметрыЗадания.Вставить("ТолькоПостоянныеРазницы", Ложь);
	
	СтатьиРасходов.Очистить();
	ЗапуститьФоновоеЗадание("ЗаполнитьСтатьиРасходов", ПараметрыЗадания);

КонецПроцедуры

&НаСервере
Функция ПодразделенияРасходов()
	
	СписокПодразделений = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СписокПодразделений.Добавить(Подразделение);
	КонецЕсли;
	
	Возврат СписокПодразделений;
	
КонецФункции

#КонецОбласти

#Область ФоновыеЗадания

&НаКлиенте
Процедура ЗапуститьФоновоеЗадание(ИмяЗадания, ПараметрыЗадания)
	
	ДобавитьФоновоеЗадание(ИмяЗадания, Истина);
	
	ПараметрыЗаданий = Новый Соответствие;
	ПараметрыЗаданий.Вставить(ИмяЗадания, ПараметрыЗадания);
	
	ЗапуститьФоновыеЗадания(ПараметрыЗаданий);

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьФоновыеЗадания(ПараметрыЗаданий = Неопределено)

	ВсеЗаданияВыполнены = ЗапуститьФоновыеЗаданияНаСервере(ПараметрыЗаданий);
	
	Если ВсеЗаданияВыполнены Тогда
		ОбработатьЗавершениеЗаданийНаКлиенте();
	Иначе
		ПроверитьАктивностьФоновогоЗаданияОбновленияФормы();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФоновоеЗадание(ИмяЗадания, ОчиститьОчередь = Ложь)

	Если ОчиститьОчередь Тогда
		
		ОтменитьВыполнениеТекущихЗаданий();
		ТекущиеФоновыеЗадания.Очистить();
		
	КонецЕсли;
	
	ДанныеЗадания = ТекущиеФоновыеЗадания.Добавить();
	ДанныеЗадания.ИмяЗадания = ИмяЗадания;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеТекущихЗаданий()
	
	Для Каждого Задание Из ТекущиеФоновыеЗадания Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(Задание.ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьФоновыеЗаданияНаСервере(Знач ПараметрыЗаданий)
	
	ВсеЗаданияВыполнены = Истина;
	
	Для Каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
		
		Если ДанныеЗадания.ЗаданиеЗапущено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЗадания = Неопределено;
		
		Если ПараметрыЗаданий <> Неопределено Тогда
			ПараметрыЗадания = ПараметрыЗаданий.Получить(ДанныеЗадания.ИмяЗадания);
		КонецЕсли; 
		
		Если ДанныеЗадания.ИмяЗадания = "СформироватьДокументы" Тогда
			РезультатЗапускаЗадания = ЗапуститьЗаданиеСформироватьДокументы(ПараметрыЗадания);
		ИначеЕсли ДанныеЗадания.ИмяЗадания = "ЗаполнитьСтатьиРасходов" Тогда
			РезультатЗапускаЗадания = ЗапуститьЗаданиеЗаполнитьСтатьиРасходов(ПараметрыЗадания);
		Иначе
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Неизвестное задание ""%1""';
									|en = 'Unknown job ""%1""'"),
								ДанныеЗадания.ИмяЗадания);
		КонецЕсли;
		
		ДанныеЗадания.ИдентификаторЗадания = РезультатЗапускаЗадания.ИдентификаторЗадания;
		ДанныеЗадания.АдресХранилища = РезультатЗапускаЗадания.АдресРезультата;
		
		Если РезультатЗапускаЗадания.Статус = "Выполняется" Тогда
			ДанныеЗадания.ЗаданиеЗапущено = Истина;
		ИначеЕсли РезультатЗапускаЗадания.Статус = "Выполнено" Тогда
			ДанныеЗадания.ЗаданиеВыполнено = Истина;
		КонецЕсли;
		
		Если Не ДанныеЗадания.ЗаданиеВыполнено Тогда
			ВсеЗаданияВыполнены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий(ВсеЗаданияВыполнены);
	
	Возврат ВсеЗаданияВыполнены;

КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеЗаданийНаКлиенте()

	Для Каждого ДанныеЗадания Из ТекущиеФоновыеЗадания Цикл
		
		Если ДанныеЗадания.ИмяЗадания = "СформироватьДокументы" Тогда
			ОбработатьРезультатФормированияДокументов(ДанныеЗадания.АдресХранилища);
		ИначеЕсли ДанныеЗадания.ИмяЗадания = "ЗаполнитьСтатьиРасходов" Тогда
			ОбработатьРезультатПолученияСтатейРасходов(ДанныеЗадания.АдресХранилища);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущиеФоновыеЗадания.Очистить();
	
	Если Элементы.ГруппаВыполнениеРасчетаВФоне.Видимость Тогда
		НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктивностьФоновогоЗаданияОбновленияФормы()
	
	Идентификаторы = Новый Массив;
	Для Каждого Задание Из ТекущиеФоновыеЗадания Цикл
		Идентификаторы.Добавить(Задание.ИдентификаторЗадания);
	КонецЦикла;
	
	Если Не ЗаданияВыполнены(Идентификаторы) Тогда
		
		ПодключитьОбработчикОжидания("ПроверитьАктивностьФоновогоЗаданияОбновленияФормы", ИнтервалПроверкиФоновыхЗаданий(), Истина);
		Возврат;
		
	КонецЕсли;
	
	ОбработатьЗавершениеЗаданийНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданияВыполнены(ИдентификаторыЗаданий)
	
	ЗаданияВыполнены = Истина;
	Индекс = ИдентификаторыЗаданий.Количество() - 1;
	
	Пока ЗаданияВыполнены И Индекс >= 0 Цикл
		
		ЗаданияВыполнены = Мин(ЗаданияВыполнены, ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторыЗаданий[Индекс]));
		Индекс = Индекс - 1;
		
	КонецЦикла;
	
	Возврат ЗаданияВыполнены;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИнтервалПроверкиФоновыхЗаданий()
	
	Возврат 1;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФоновогоЗадания()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ПараметрыРасходов", ПолучитьПараметрыРасходов());
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеСформироватьДокументы(ПараметрыЗадания)
	
	ТекущаяОперация = НСтр("ru = 'Формирование документов распределения расходов.';
							|en = 'Generate expense allocation documents.'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ВыполнитьВФоне(
									"Документы.РаспределениеПрочихЗатрат.СформироватьДокументы",
									ПараметрыЗадания,
									ПолучитьПараметрыФоновогоЗадания(ТекущаяОперация, 
										ВремяОжидания, 
										УникальныйИдентификатор));
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервере
Функция ЗапуститьЗаданиеЗаполнитьСтатьиРасходов(ПараметрыЗадания)
	
	ТекущаяОперация = НСтр("ru = 'Заполнение статей расходов.';
							|en = 'Fill in expense items.'");
	
	РезультатЗапускаЗадания = ДлительныеОперации.ВыполнитьВФоне(
									"Документы.РаспределениеПрочихЗатрат.СтатьиКРаспределениюВФоне",
									ПараметрыЗадания,
									ПолучитьПараметрыФоновогоЗадания(ТекущаяОперация, 
										ВремяОжидания, 
										УникальныйИдентификатор));
			
	Возврат РезультатЗапускаЗадания;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыФоновогоЗадания(НаименованиеЗадания, ВремяОжидания, УИДФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УИДФормы);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ОжидатьЗавершение = ВремяОжидания;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	
	Возврат ПараметрыВыполнения;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура НастроитьЭлементыВЗависимостиОтНаличияФоновыхЗаданий(ЗаданиеВыполнено)
	
	ИдетФормированиеДокументов = ТекущиеФоновыеЗадания.НайтиСтроки(
		Новый Структура("ИмяЗадания, ЗаданиеВыполнено", "СформироватьДокументы", Ложь)).Количество() > 0;
		
	Элементы.ГруппаОтбор.Доступность = Не ИдетФормированиеДокументов;
	Элементы.СтатьиРасходов.Доступность = ЗаданиеВыполнено;
	Элементы.ГруппаВыполнениеРасчетаВФоне.Видимость = Не ЗаданиеВыполнено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимость(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СтатьиРасходовПодразделение.Видимость = Не ЗначениеЗаполнено(Форма.Подразделение);
	Элементы.СтатьиРасходовОрганизация.Видимость = Не ЗначениеЗаполнено(Форма.Организация);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Период = НачалоМесяца(ТекущаяДатаСеанса());
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокумента(ТекущиеДанные)
	
	Документ = ТекущиеДанные.Ссылка;
	
	Если Документ.Пустая() Тогда
		
		НастройкиРаспределенияСтатьиРасходов = ПолучитьНастройкиРаспределенияСтатейРасходов(
			ПолучитьПараметрыРасходов(ТекущиеДанные.ПолучитьИдентификатор()));
		
		СтруктураОснования = НастройкиРаспределенияСтатьиРасходов[0];
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
		
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", Документ);
	КонецЕсли;
	
	ОткрытьФорму("Документ.РаспределениеПрочихЗатрат.ФормаОбъекта", ПараметрыФормы, Элементы.СтатьиРасходов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущийЭлемент()
	
	ТекущиеДанные = Элементы.СтатьиРасходов.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьФормуДокумента(ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция МассивДоступныхОрганизаций(Организация = Неопределено)
	
	Если Организация = Неопределено Или Организация = Справочники.Организации.ПустаяСсылка() Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеСправочника.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК ДанныеСправочника
		|ГДЕ
		|	ДанныеСправочника.Ссылка = &Организация
		|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|");
		Запрос.УстановитьПараметр("Организация", Организация);
		МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	Иначе
		МассивОрганизаций =Новый Массив;
		МассивОрганизаций.Добавить(Организация);
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаСервере
Функция ПараметрыЖурнала()
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("КлючНазначенияФормы", "РаспределениеПрочихЗатрат");
	ПараметрыЖурнала.Вставить("ИмяРабочегоМеста", "ЖурналДокументовПроизводства");
	ПараметрыЖурнала.Вставить("СинонимЖурнала",НСтр("ru = 'Документы производства';
													|en = 'Production documents'"));
	ОтборыФормыСписка = Новый Структура;
	ОтборыФормыСписка.Вставить("Период", Новый СтандартныйПериод(НачалоМесяца(Период), КонецМесяца(Период)));
	ОтборыФормыСписка.Вставить("Организация", Организация);
	ОтборыФормыСписка.Вставить("Подразделение", Подразделение);
	
	ОтборТипыДокументов = Новый СписокЗначений;
	ОтборТипыДокументов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.РаспределениеПрочихЗатрат"));
	ОтборыФормыСписка.Вставить("ОтборТипыДокументов", ОтборТипыДокументов);
	
	ОтборХозяйственныеОперации = Новый СписокЗначений;
	ОтборХозяйственныеОперации.Добавить(Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства);
	ОтборыФормыСписка.Вставить("ОтборХозяйственныеОперации", ОтборХозяйственныеОперации);
	
	ПараметрыЖурнала.Вставить("ОтборыФормыСписка", ОтборыФормыСписка);
	
	Возврат ПараметрыЖурнала;
	
КонецФункции

&НаКлиенте
// Формирует массив с данными по строке
//	Параметры:
//		ИдСтроки - Число - идентификатор строки, по которой сработало событие Выбор
//	Возвращаемое значение:
//		Массив - содержит структуру с данными строк.
//
Функция ПолучитьПараметрыРасходов(ИдСтроки = Неопределено)
	
	ПараметрыРасходов = Новый Массив;
	Для Каждого ТекСтрока Из Элементы.СтатьиРасходов.ВыделенныеСтроки Цикл
		
		Если Не ИдСтроки = Неопределено И Не ТекСтрока = ИдСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаполнения = Новый Структура;
		ДанныеСтроки = Элементы.СтатьиРасходов.ДанныеСтроки(ТекСтрока);
		ДанныеЗаполнения.Вставить("Дата",                    КонецМесяца(Период));
		ДанныеЗаполнения.Вставить("Ссылка",					 ДанныеСтроки.Ссылка);
		ДанныеЗаполнения.Вставить("ИДСтроки",                ТекСтрока);
		ДанныеЗаполнения.Вставить("СтатьяРасходов",          ДанныеСтроки.СтатьяРасходов);
		ДанныеЗаполнения.Вставить("АналитикаРасходов",       ДанныеСтроки.АналитикаРасходов);
		ДанныеЗаполнения.Вставить("Организация",             ДанныеСтроки.Организация);
		ДанныеЗаполнения.Вставить("Подразделение",           ДанныеСтроки.Подразделение);
		ДанныеЗаполнения.Вставить("НаправлениеДеятельности", ДанныеСтроки.НаправлениеДеятельности);
		
		ПараметрыРасходов.Добавить(ДанныеЗаполнения);
				
	КонецЦикла;
	
	Возврат ПараметрыРасходов;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатФормированияДокументов(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Результат.ТекстыОшибок.Количество() > 0 Тогда
		Для Каждого Ошибка Из Результат.ТекстыОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
		КонецЦикла;
	КонецЕсли;
	
	Если Результат.СформированоДокументов > 0 Тогда
		
		ПоказатьОповещениеПользователя(,
			,
			НСтр("ru = 'Сформировано документов распределения:';
				|en = 'Generated allocation documents:'") + " " + Результат.СформированоДокументов
			,
			БиблиотекаКартинок.Информация32);
		
		Для Каждого НовыеДанные Из Результат.ОбновленныеДанные Цикл
			
			СтрокаКОбновлению = СтатьиРасходов.НайтиПоИдентификатору(НовыеДанные.ИдСтроки);
			Если СтрокаКОбновлению = Неопределено 
				Или НЕ СтрокаКОбновлению.СтатьяРасходов = НовыеДанные.СтатьяРасходов
				Или НЕ СтрокаКОбновлению.АналитикаРасходов = НовыеДанные.АналитикаРасходов
				Или НЕ СтрокаКОбновлению.Организация = НовыеДанные.Организация
				Или НЕ СтрокаКОбновлению.Подразделение = НовыеДанные.Подразделение
				Или НЕ СтрокаКОбновлению.НаправлениеДеятельности = НовыеДанные.НаправлениеДеятельности Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКОбновлению.Состояние = НовыеДанные.Состояние;
			СтрокаКОбновлению.Ссылка = НовыеДанные.Документ;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ОбработатьРезультатПолученияСтатейРасходов(АдресХранилища)
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не Результат = Неопределено Тогда
		СтатьиРасходов.Загрузить(Результат);
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьНастройкиРаспределенияСтатейРасходов(ПараметрыРасходов)
	Возврат Документы.РаспределениеПрочихЗатрат.ПолучитьНастройкиРаспределенияСтатейРасходов(ПараметрыРасходов);
КонецФункции

#КонецОбласти

#КонецОбласти
