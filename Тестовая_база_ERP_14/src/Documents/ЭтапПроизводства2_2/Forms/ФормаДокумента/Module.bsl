
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения;

&НаКлиенте
Перем ТекущиеДанныеИдентификатор;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Свойство("ОтражениеВыполненного") Тогда
		ОтражениеВыполненного = Параметры.ОтражениеВыполненного;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	// Буфер обмена
	УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма, "РасходМатериаловИРабот_,ЭкономияМатериалов_,ВыходныеИзделия_,ПобочныеИзделия_");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	УстановитьВидимостьКомандВводаНаОсновании();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Событие.ОбработкаВыбора");
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ИсполнениеЗаказа" Тогда
		
		Детали = ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение);
		Если Детали.Ошибки <> Неопределено Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Детали.Ошибки);
		Иначе
			ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Детали.Оповещение);
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения" Тогда
		
		Оповещение = ЗаполнитьВариантОбеспечения(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.СостояниеОбеспечения.Форма.Форма" Тогда
		
		Оповещение = ЗаполнитьОбеспечениеЭтапа(ВыбранноеЗначение);
		ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.РазрешениеНаЗаменуМатериалов.Форма.ПодборАналогов" Тогда
		
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ], ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия" Тогда
		
		СкорректироватьСтрокиЗаказа(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации" Тогда
		
		ЗагрузитьРезультатПодбораМатериаловПоСпецификации(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбмена(ЭтаФорма, Истина);
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПереработчику" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Массив") И Параметр.Найти(Объект.Ссылка) <> Неопределено Тогда
			Прочитать();
		КонецЕсли; 
		
	ИначеЕсли ИмяСобытия = "ИзменениеПоследовательностиЭтапов"
		И Объект.ПартияПроизводства = Параметр Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр = Объект.Ссылка Тогда
		
		СформироватьНадписьМаркировкаПродукции();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Если НЕ Объект.РучноеРазмещениеВГрафике Тогда
		
		УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
			ВидыРабочихЦентров, 
			ТекущийОбъект.ПланироватьРаботуВидовРабочихЦентров,
			ТекущийОбъект.ВидыРабочихЦентров,
			ТекущийОбъект.АльтернативныеВидыРабочихЦентров);
		
	КонецЕсли;
	
	ПередЗаписьюСохранитьГрафикПроизводства(ТекущийОбъект);
	
	УстановитьФлагЗаполненоАвтоматически(ТекущийОбъект);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ПроизводствоНаСтороне Тогда
		// Нужно разблокировать объект
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли; 
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	ЗаполнитьСостояниеВыполненияОпераций();
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	ПоказатьЗапланированныеКОбеспечениюНаСервере();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭтапыПроизводства", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	#Область ГрафикПроизводства
	
	ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ);
	
	Если ОтметкаПланироватьНеРанее
		И НЕ ЗначениеЗаполнено(Объект.ПланироватьНеРанее) Тогда
		
		ТекстСообщения = НСтр("ru = 'Значение ""Планировать не ранее"" не указано.';
								|en = 'The ""Plan not earlier than"" value is not specified.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, 
			Объект.Ссылка,
			"НадписьПланироватьНеРанее",
			,
			Отказ);
		
	КонецЕсли;
	
	#КонецОбласти
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Выходные изделия - отмена строк
	ВыходныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ВыходныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	// Побочные изделия - отмена строк
	ПобочныеИзделияСкрыватьОтмененныеСтроки =  Настройки.Получить("ПобочныеИзделияСкрыватьОтмененныеСтроки");
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если Объект.Спецификация.Пустая() Тогда
		Если ПоказатьНормативыМатериалы Тогда
			ПоказатьНормативыМатериалы = Ложь;
		КонецЕсли;
		Если ПоказатьНормативыТрудозатраты Тогда
			ПоказатьНормативыТрудозатраты = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьНормативыМатериалы ИЛИ ПоказатьНормативыТрудозатраты Тогда
		Если ПоказатьНормативыМатериалы
				И Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 0
			ИЛИ ПоказатьНормативыТрудозатраты
				И Объект.Трудозатраты.Количество() > 0 Тогда
			ПоказатьНормативыПриИзмененииНаСервере();
		Иначе
			НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьНормативы");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НомерПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	ОбработатьИзменениеСтатусаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияДлительностиЭтапаПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияДлительностиЭтапа.Пустая() Тогда
		Объект.ЕдиницаИзмеренияДлительностиЭтапа = ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ;
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕдиницаИзмеренияДлительностиЭтапа");
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОбеспеченияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЖелаемаяДатаОбеспечения");
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
	Если ОтражениеВыполненного Тогда
		Объект.ДатаРасхода = Объект.ДатаОтгрузки;
		ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоОднойДатойПриИзменении(Элемент)
	
	ПроизводствоОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)
	
	ДатаПроизводстваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходОднойДатойПриИзменении(Элемент)
	
	РасходОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРасходаПриИзменении(Элемент)
	
	ДатаРасходаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элемент.Валюта.ПриИзменении");
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "ПобочныеИзделия") Тогда
		ВалютаПриИзмененииСервер();
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПродукцияНажатие(Элемент)
	
	ПродукцияСвернута = НЕ ПродукцияСвернута;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаВыходныеИзделия, 
		Элементы.ГиперСсылкаНадписьПродукция, 
		ПродукцияСвернута);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПобочныеИзделияНажатие(Элемент)
	
	ПобочныеИзделияСвернуты = НЕ ПобочныеИзделияСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ГруппаПобочныеИзделияСворачиваемая, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
		
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРасходМатериаловИРаботНажатие(Элемент)
	
	ИзрасходованныеМатериалыСвернуты = НЕ ИзрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.РасходМатериаловИРабот, 
		Элементы.ГиперСсылкаНадписьРасходМатериаловИРабот, 
		ИзрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьРЭкономияМатериаловНажатие(Элемент)
	
	НеизрасходованныеМатериалыСвернуты = НЕ НеизрасходованныеМатериалыСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов, 
		НеизрасходованныеМатериалыСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтап(Команда)
	
	Если Модифицированность Или Не Объект.Проведен Тогда
		Ответ = Неопределено;
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗакрытьЭтапЗавершение", ЭтотОбъект),
						НСтр("ru = 'Необходимо провести документ для выполнения операции. Провести документ?';
							|en = 'Post the document to perform the operation. Post the document?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Не Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытьЭтапФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьЭтапФрагмент()
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ЭтапПроизводства2_2.ФормаДокумента.Команда.ЗакрытьЗаказФрагмент");
	
	СписокЗаказовКЗакрытию = Новый СписокЗначений;
	СписокЗаказовКЗакрытию.Добавить(Объект.Ссылка);
	
	СтруктураЗакрытия = Новый Структура;
	СтруктураЗакрытия.Вставить("Заказы",                       СписокЗаказовКЗакрытию);
	СтруктураЗакрытия.Вставить("ДокументИнициатор",            Объект.Ссылка);
	СтруктураЗакрытия.Вставить("ОтменитьНеотработанныеСтроки", Истина);
	СтруктураЗакрытия.Вставить("ЗакрыватьЗаказы",              Истина);
	
	ОткрытьФорму("Обработка.ПомощникЗакрытияЗаказов.Форма.ФормаЗакрытия", СтруктураЗакрытия,
					ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
//Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеРаботОднойДатойПриИзменении(Элемент)
	
	ВыполнениеРаботОднойДатойПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияРаботПриИзменении(Элемент)
	
	ДатаВыполненияРаботПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыОсновная

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭтапаПриИзменении(Элемент)
	
	НаименованиеЭтапаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПроизводстваПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПроизводстваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияЭтапОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ПоказатьЭтапы" Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(Объект.Распоряжение, Объект.ПартияПроизводства);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьСпецификацию"
		И ЗначениеЗаполнено(Объект.Спецификация) Тогда
		
		ПоказатьЗначение(, Объект.Спецификация)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПроизводстваНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПланированияПриИзменении(Элемент)
	
	ОбработатьИзменениеСпособаПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметкаПланироватьНеРанееПриИзменении(Элемент)
	
	Если Не ОтметкаПланироватьНеРанее Тогда
		
		Объект.ПланироватьНеРанее = Неопределено;
		
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		
	КонецЕсли;
		
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОтметкаПланироватьНеРанее");
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстКомментарийКонвертацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Далее" Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПослеПросмотраКомментарияКонвертации", ЭтотОбъект);
		
		Строка    = Объект.КомментарийПриКонвертации;
		Подсказка = НСтр("ru = 'Служебная информация';
						|en = 'Service information'");
		
		ПоказатьВводСтроки(Оповещение, Строка, Подсказка, 0, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраКомментарияКонвертации(Строка, Параметры) Экспорт
	
	Если Строка = "" Тогда
		Объект.КомментарийПриКонвертации = "";
		СформироватьКомментарийКонвертации(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьГруппуКомментарийКонвертации(Элемент)
	
	Объект.КомментарийПриКонвертации = "";
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатоВыполнениеЭтапаПриИзменении(Элемент)
	
	ОбработатьНачалоВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершеноВыполнениеЭтапаПриИзменении(Элемент)
	
	ОбработатьЗавершениеВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеОкончаниеЭтапаПриИзменении(Элемент)
	
	ОбработатьИзменениеДатыВыполненияЭтапа();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненоПриИзменении(Элемент)
	
	Если Объект.Выполнено = Объект.Запланировано Тогда
		
		ЗавершеноВыполнениеЭтапа = Истина;
		ОбработатьЗавершениеВыполненияЭтапа("Выполнено");
		
	ИначеЕсли Объект.Выполнено > 0 И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		ОбработатьНачалоВыполненияЭтапа("Выполнено");
		
	Иначе
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		ОбработатьЗавершениеВыполненияЭтапа("Выполнено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаказПереработчикуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#СоздатьЗаказ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = Неопределено;
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
			ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо установить статус ""К выполнению"".
										|Изменить статус этапа и создать заказ?';
										|en = 'To create an order, set the ""For execution"" status.
										|Change the stage status and create an order?'");
										
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Изменить статус и создать заказ';
																|en = 'Change status and create order'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
			
			ТекстВопроса = НСтр("ru = 'Для создания заказа необходимо записать документ.
										|Записать документ и создать заказ?';
										|en = 'You should save the document to create an order.
										|Save the document and create an order?'");
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Записать и создать заказ';
																|en = 'Write and create order'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
			
		КонецЕсли; 
		
		Если ТекстВопроса <> Неопределено Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьОбъектИСоздатьЗаказПереработчику", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			СоздатьЗаказПереработчику();
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутнаяКартаПриИзменении(Элемент)
	
	Если Объект.МаршрутнаяКарта.Пустая() Тогда
		
		Объект.КоэффициентМаршрутнойКарты = 0;
		
	ИначеЕсли Объект.КоэффициентМаршрутнойКарты = 0 Тогда
		
		Объект.КоэффициентМаршрутнойКарты = 1;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "МаршрутнаяКарта");
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПланироватьНеРанееОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#ОткрытьЭтапПланироватьНеРанее" Тогда
		
		Если ЗначениеЗаполнено(Объект.ПланироватьНеРанее)
			И ТипЗнч(Объект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
			
			ПоказатьЗначение(, Объект.ПланироватьНеРанее);
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "#РедактироватьЗначение" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ссылка", Объект.Ссылка);
		ПараметрыФормы.Вставить("Распоряжение", Объект.Распоряжение);
		ПараметрыФормы.Вставить("ПланироватьНеРанее", Объект.ПланироватьНеРанее);
		ПараметрыФормы.Вставить("ФорматДатыГрафика", ФорматДатыГрафика);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОткрытьФормуРедактированияПланироватьНеРанееЗавершение", 
			ЭтотОбъект);
		
		ОткрытьФорму(
				"Документ.ЭтапПроизводства2_2.Форма.РедактированиеПланироватьНеРанее", 
				ПараметрыФормы, 
				ЭтаФорма,,,, 
				ОписаниеОповещения, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПланироватьНеРанееЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		
		Объект.ПланироватьНеРанее = РезультатЗакрытия;
		
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ВыходныеИзделияСерия 
			ИЛИ Поле = Элементы.ВыходныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ВыходныеИзделия");
	КонецЕсли;
	
	Если (Поле = Элементы.ВыходныеИзделияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
	Если Поле = Элементы.ВыходныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		СтандартнаяОбработка = Ложь;
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ВыходныеИзделия", ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВыходныеИзделия");
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтаФорма, ТекущиеДанные, "ВыходныеИзделия", НоваяСтрока, Копирование); 
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Произведено = Истина;
		Иначе
			ТекущиеДанные.Произведено = Ложь;
		КонецЕсли;
		
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ВыходныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);
		
	КонецЕсли;
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ВыходныеИзделияКешТекущейСтроки, НоваяСтрока) Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ВыходныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ВыходныеИзделия", Элемент);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ВыходныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ВыходныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ВыходныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ВыходныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ВыходныеИзделия);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ВыходныеИзделия.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
		Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ОтмененоПриИзменении("ВыходныеИзделия", ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении(Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ВыходныеИзделия")
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если (Поле = Элементы.ПобочныеИзделияСерия 
			ИЛИ Поле = Элементы.ПобочныеИзделияСтатусУказанияСерий)
		И ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		ОткрытьПодборСерий("ПобочныеИзделия");
	КонецЕсли;
	
	Если Поле = Элементы.ПобочныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ПобочныеИзделия", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ПобочныеИзделия");
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаПриНачалеРедактирования(
				ЭтаФорма, ТекущиеДанные, "ПобочныеИзделия", НоваяСтрока, Копирование); 
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Произведено = Истина;
		Иначе
			ТекущиеДанные.Произведено = Ложь;
		КонецЕсли;
		
		ЗаполнитьДатуПроизводстваВСтроке(ТекущиеДанные);
		
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ("ПобочныеИзделия", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПобочныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ПобочныеИзделия);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ПобочныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ПобочныеИзделия");

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ТекущиеДанные.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущиеДанные.Количество);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", ПараметрыЗаполненияЦенПобочногоВыпуска(ЭтаФорма));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = Элементы.ПобочныеИзделия.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = Элементы.ПобочныеИзделия.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ПобочныеИзделия, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ПобочныеИзделия", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПроизведеноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ПобочныеИзделия);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	Если ТекущиеДанные.Произведено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", ПараметрыЗаполненияЦенПобочногоВыпуска(ЭтаФорма));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииНаправленияВыпуска(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ПобочныеИзделияЭтапаЦенаПриИзменении(ТекущиеДанные, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	УправлениеПроизводствомКлиент.ПобочныеИзделияЭтапаСуммаПриИзменении(ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ПобочныеИзделия.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
		Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ОтмененоПриИзменении("ПобочныеИзделия", ТекущиеДанные)
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработатьПоСпецификацииПриИзменении(Элемент)
	
	ОбработатьПоСпецификацииПриИзменении(Элементы.ПобочныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЭтапПотребительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	ЭтапПотребительНачалоВыбора(ТекущиеДанные, "ПобочныеИзделия")
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		
		Если ОтражениеВыполненного Тогда
			ТекущиеДанные.Выполнено = Истина;
		Иначе
			ТекущиеДанные.Выполнено = Ложь;
		КонецЕсли;
		
		Если Объект.ВыполнениеРаботОднойДатой Тогда
			ТекущиеДанные.ДатаВыполнения = Объект.ДатаВыполненияРабот;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.УстановитьТипИсполнителя(
		ТекущиеДанные.Исполнитель,
		ИспользоватьБригадныеНаряды);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ПоказатьНормативыТрудозатраты И ТекущиеДанные <> Неопределено Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("ВидРабот");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок("Трудозатраты", МассивДанных, АдресХранилищаНормативы);
		ТекущиеДанные.Норматив = Нормативы[0];
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Трудозатраты");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыВыполненоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ТрудозатратыВыполненоПриИзмененииНаСервере(Идентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыВыполненоПриИзмененииНаСервере(Знач Идентификатор)
	
	ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(Идентификатор);
	
	Если ТекущиеДанные.Выполнено Тогда
		
		Если НЕ НачатоВыполнениеЭтапа Тогда
			НачатоВыполнениеЭтапа = Истина;
			ОбработатьНачалоВыполненияЭтапа();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВыполнениеРаботОднойДатой Тогда
		УправлениеПроизводством.УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, Объект.ДатаВыполненияРабот);
	Иначе
		УправлениеПроизводством.УстановитьДатуВыполненияТрудозатраты(ТекущиеДанные, ДатаСобытияЗавершение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		Объект.Подразделение,
		ТекущиеДанные.Исполнитель,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, Объект.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Объект.Подразделение, Объект.Организация);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбеспечениеМатериаламиИРаботами

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина, "Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Элементы.ОбеспечениеМатериаламиИРаботами.Выбор");
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если Поле = Элементы.ОбеспечениеМатериаламиИРаботамиВариантОбеспечения И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные);
		
	ИначеЕсли Поле = Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала И НЕ ТолькоПросмотр Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборАналогов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаПриНачалеРедактирования(
		ЭтаФорма,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
	
	СкладыКлиент.ОбновитьКешированныеЗначения(
		Элемент, 
		КэшированныеЗначения, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ПоказатьНормативыМатериалы И ТекущиеДанные <> Неопределено Тогда
		
		МассивДанных = Новый Массив;
		ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
		МассивДанных.Добавить(ДанныеСтроки);
		Нормативы = ПолучитьНормативыПриИзмененииСтрок("ОбеспечениеМатериаламиИРаботами", МассивДанных, АдресХранилищаНормативы);
		ТекущиеДанные.Норматив = Нормативы[0];
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);

КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПослеУдаления(Элемент)
	
	ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(
			Объект.ОбеспечениеМатериаламиИРаботами, 
			ДатаОтгрузкиОбязательна, 
			СкладОбязателен);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ОбеспечениеМатериаламиИРаботами", Элемент.ТекстРедактирования, Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПроизводитсяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ПроизводитсяПриИзменении(
		ТекущиеДанные,
		Объект,
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСпецификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСпецификацияПриИзменении(
		Объект, 
		ТекущиеДанные, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЭтапаСкладПриИзменении(
		ТекущиеДанные, 
		ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, 
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура НеОтгружатьЧастямиПриИзмененииНаСервере()

	Если Объект.НеОтгружатьЧастями Тогда
		Объект.ДатаОтгрузки = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									Объект.ОбеспечениеМатериаламиИРаботами, "ДатаОтгрузки");
		ЗаполнитьДатуВТЧ("ОбеспечениеМатериаламиИРаботами", "ДатаОтгрузки", Объект.ДатаОтгрузки);
		
		Если ОтражениеВыполненного Тогда
			Объект.РасходОднойДатой = Объект.НеОтгружатьЧастями;
			Объект.ДатаРасхода = Объект.ДатаОтгрузки;
			ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
		КонецЕсли;
		
	КонецЕсли;
	
	ИзмененныеРеквизиты = "НеОтгружатьЧастями";
	Если ОтражениеВыполненного Тогда
		ИзмененныеРеквизиты = ИзмененныеРеквизиты + ",РасходОднойДатой";
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРаботПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	Если НоваяСтрока Тогда
		Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
			ТекущиеДанные.ДатаРасхода = Объект.ДатаРасхода;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасходМатериаловИРабот.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение            		 = ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.РасходМатериаловИРабот, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("РасходМатериаловИРабот", Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРаботПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловПриНачалеРедактирования(
		ЭтаФорма,
		Объект,
		ТекущиеДанные,
		НоваяСтрока,
		Копирование);
		
	СкладыКлиент.ОбновитьКешированныеЗначения(Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			"ЭкономияМатериалов", ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПередУдалением(Элемент, Отказ)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий.ЭкономияМатериалов);

КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПослеУдаления(Элемент)
	
	ПослеУдаленияСтрокТЧДляКоторойЕстьСерии("ЭкономияМатериалов", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииНоменклатуры(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииХарактеристики(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииКоличестваУпаковок(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	ВыбранноеЗначение.Значение                   = ТекущаяСтрока.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки = ТекущаяСтрока.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий.ЭкономияМатериалов, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ЭкономияМатериалов", Элемент.ТекстРедактирования, Элементы.ЭкономияМатериалов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ПриИзмененииПолучателя(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	ЭкономияМатериаловДействиеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	СтатьяРасходовНачалоВыбора(ТекущиеДанные, "ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ЭкономияМатериалов.ТекущиеДанные;
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация  
	Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыПроизводственныйПроцесс

&НаКлиенте
Процедура ВидыРабочихЦентровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПередНачаломДобавления(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Отказ,
		Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
		ТекущиеДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.Минута");
		Если НЕ ТекущиеДанные.Альтернативный Тогда
			ТекущиеДанные.Использовать = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровПослеУдаления(Элемент)
	
	// Нужно проверить что выбран вид РЦ
	КоллекцияОсновныхВидовРЦ = ВидыРабочихЦентров.ПолучитьЭлементы();
	Для каждого СтрокаОсновнойВидРЦ Из КоллекцияОсновныхВидовРЦ Цикл
		Если СтрокаОсновнойВидРЦ.Использовать Тогда
			Продолжить;
		КонецЕсли;
		КоллекцияАльтернатив = СтрокаОсновнойВидРЦ.ПолучитьЭлементы();
		ИспользуетсяАльтернатива = Ложь;
		Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
			Если СтрокаАльтернатива.Использовать Тогда
				ИспользуетсяАльтернатива = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ИспользуетсяАльтернатива Тогда
			СтрокаОсновнойВидРЦ.Использовать = Истина;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеДаннымиОбИзделияхКлиент.ПриИзмененииСоставаВидовРабочихЦентров(
		ВидыРабочихЦентров, 
		Объект.ПорядокРаботыВидовРабочихЦентров,
		Истина);
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровИспользоватьПриИзменении(Элемент)
	
	// Это всегда установка флажка
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
	Если РодительЭлемента = Неопределено Тогда
		РодительЭлемента = ТекущиеДанные;
		КоллекцияАльтернатив = ТекущиеДанные.ПолучитьЭлементы();
	Иначе
		КоллекцияАльтернатив = РодительЭлемента.ПолучитьЭлементы();
	КонецЕсли;
	
	Для каждого СтрокаАльтернатива Из КоллекцияАльтернатив Цикл
		Если СтрокаАльтернатива.Использовать И СтрокаАльтернатива <> ТекущиеДанные Тогда
			СтрокаАльтернатива.Использовать = Ложь;
		КонецЕсли;
	КонецЦикла;
	Если РодительЭлемента.Использовать И РодительЭлемента <> ТекущиеДанные Тогда
		РодительЭлемента.Использовать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВидРабочегоЦентраПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВариантНаладкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ВидыРабочихЦентров.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(ТекущаяСтрока);
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровВремяРаботыПриИзменении(Элемент)
	
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРабочихЦентровЕдиницаИзмеренияПриИзменении(Элемент)
	
	ВидыРабочихЦентровПересчитатьВремяРаботы(Элементы.ВидыРабочихЦентров.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПредварительныйБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершающийБуферПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЗавершающийБуфер");
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПредварительногоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияПредварительногоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияПредварительногоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияЗавершающегоБуфераПриИзменении(Элемент)
	
	Если Объект.ЕдиницаИзмеренияЗавершающегоБуфера.Пустая() Тогда
		
		Объект.ЕдиницаИзмеренияЗавершающегоБуфера = ОсновнаяЕдиницаВремениБуфера;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокРаботыВидовРабочихЦентровПриИзменении(Элемент)
	
	УправлениеДаннымиОбИзделияхКлиент.ПорядокРаботыВидовРабочихЦентровПриИзменении(
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Ложь);
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыДополнительно

&НаКлиенте
Процедура ВыпускПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПроизводствоИПланирование

&НаКлиенте
Процедура Производство_ОткрытьСпецификацию(Команда)
	
	Если ЗначениеЗаполнено(Объект.Спецификация) Тогда
		ПоказатьЗначение(, Объект.Спецификация)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПоказатьЭтапы(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(Объект.Распоряжение, Объект.ПартияПроизводства);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ПерейтиКРучномуРедактированиюГрафика(Команда)
	
	ОткрытьФормуРучногоРедактированияГрафика();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ЗаполнитьПоОперациям(Команда)
	
	ПоказатьВопросИЗаполнитьПоОперациям();
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_ВыполнениеОпераций(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьВыполнениеОпераций(Объект.Ссылка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Производство_СменныеЗадания(Команда)
	
	ОткрытьФорму(
		"Документ.СменноеЗадание.ФормаСписка",
		Новый Структура("ОтборПоЭтапу", Объект.Ссылка),
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЖелаемуюДатуОбеспечения(Команда)
	
	Если ТипЗнч(ГрафикПроизводства) = Тип("Структура")
		И ГрафикПроизводства.Свойство("НачалоЭтапа") Тогда
		
		ИзменитьЖелаемуюДатуОбеспеченияЭтапаНаСервере(ГрафикПроизводства.НачалоЭтапа);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ОбеспечениеМатериаламиИРаботами 

&НаКлиенте
Процедура Обеспечение_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификации(Команда)
	
	Если Объект.ОбеспечениеМатериаламиИРаботами.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по спецификации?';
							|en = 'Refill the tabular section according to BOM?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill in'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		Обеспечение_ЗаполнитьПоСпецификацииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СостояниеОбеспечения(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Обеспечение_СостояниеОбеспечения");
	
	ТекстПредупреждения = НСтр("ru = 'Не введено ни одной строки в список ""Обеспечение материалами и работами"".
		|Просмотр состояния обеспечения невозможен.';
		|en = 'No line is entered into the ""Supply with materials and works"" list. 
		|Cannot view the supply state.'");
	
	Если ОбеспечениеКлиент.ПроверитьВозможностьВыполненияКомандыСостояниеОбеспеченияВДокументе(
			ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекстПредупреждения) Тогда
		
		ДанныеДляОбеспечения = ПодготовитьДанныеДляОбеспеченияЗаказа();
		ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма", ДанныеДляОбеспечения, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьОбеспечение(Команда)

	УправлениеПроизводствомКлиент.ОбеспечениеМатериаламиИРаботамиЗаполнитьОбеспечение(
			Объект, 
			Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки, 
			ЭтаФорма, 
			"Объект");

КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
		
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.';
										|en = 'To remove from reserve for assignment, post the document first.'"));
		
	Иначе
		
		НаличиеТоваровКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
		
		Если НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКОбособленномуОбеспечению" Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		ИначеЕсли НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению" Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Ложь);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется") Тогда
		
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
		
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.';
										|en = 'To reserve for assignment, post the document first.'"));
		
	Иначе
		
		НаличиеТоваровКОбособленномуОбеспечению = ЕстьТоварыКОбособленномуОбеспечению();
		
		Если НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКОбособленномуОбеспечению" Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		ИначеЕсли НаличиеТоваровКОбособленномуОбеспечению = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению" Тогда
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечениюПоТекущемуЗаказу(Истина);
		Иначе
			ОбеспечениеКлиент.СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьМатериалСледующий(Команда)
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияМатериалов Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ОбеспечениеМатериаламиИРаботами", ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьПобочноеИзделиеПредыдущий(Команда)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияПобочныхИзделий Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ПобочныеИзделия", ТекущиеДанные.НомерСтроки, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_УточнитьПобочноеИзделиеСледующий(Команда)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено ИЛИ Не ЕстьУточненияПобочныхИзделий Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводствомКлиент.ПерейтиКСтрокеСАвтовыборомКоторуюТребуетсяУточнить(Объект,
		ЭтаФорма, "ПобочныеИзделия", ТекущиеДанные.НомерСтроки, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыМатериалы = НЕ ПоказатьНормативыМатериалы;
	ПоказатьНормативыПриИзмененииНаСервере("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПоказатьЗапланированныеКОбеспечению(Команда)
	
	ПоказатьЗапланированныеКОбеспечению = НЕ ПоказатьЗапланированныеКОбеспечению;
	
	ПоказатьЗапланированныеКОбеспечениюНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьАналоги(Команда)
	
	ОткрытьПодборАналогов();
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСерииПоFEFO(Команда)
	
	Если ЕстьЗаполненныеСерииПоFEFO() Тогда
		
		НоменклатураКлиент.ЗадатьВопросОПерезаполненииСерийПоFEFO(
			Новый ОписаниеОповещения("ЗаполнитьСерииПоFEFOЗавершение", ЭтотОбъект));
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(
								Объект,
								Объект.ОбеспечениеМатериаламиИРаботами,
								НСтр("ru = 'Обеспечение материалами и работами';
									|en = 'Supply with materials and works'"),
								ВыделенныеСтроки) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЭтоГруппа", Ложь);
		Если ОтражениеВыполненного
			И НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки Тогда
			Отбор.Вставить("Подразделение",		Объект.Подразделение);
			Отбор.Вставить("ЦеховаяКладовая",	Истина);
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("Отбор,ВыборГруппИЭлементов", Отбор, ИспользованиеГруппИЭлементов.Элементы);
		
		ДополнительныеПараметры =  Новый Структура("ВыделенныеСтроки", ВыделенныеСтроки);
		ОписаниеОповещения = Новый ОписаниеОповещения("Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ОткрытьФорму("Справочник.Склады.ФормаВыбора",
			СтруктураПараметров,
			ЭтаФорма,
			,
			,
			,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСкладВВыделенныхСтрокахЗавершение(ВыбранныйСклад, ДополнительныеПараметры) Экспорт
	
	ВыделенныеСтроки = ДополнительныеПараметры.ВыделенныеСтроки;
	
	Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
		
		ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
		СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ПодобратьПоСпецификации(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ДанныеПоНоменклатуре = ДанныеПоНоменклатуреКонструктор();
	
	ЗаполнитьЗначенияСвойств(ДанныеПоНоменклатуре, ДанныеПартииПроизводства,
		"Распоряжение, Спецификация, Номенклатура, Характеристика, Количество");
	
	ПараметрыФормы.Вставить("ДанныеПоНоменклатуре", ДанныеПоНоменклатуре);
	ПараметрыФормы.Вставить("Этап", Объект.Этап);
	ПараметрыФормы.Вставить("ПоказыватьКоличествоПодобрано", Истина);
	ПараметрыФормы.Вставить("ЗаголовокКолонкиКоличествоПодобрано", НСтр("ru = 'В этапе';
																		|en = 'In stage'"));
	ПараметрыФормы.Вставить("СтруктураПоискаПодобранныеМатериалы", Новый Структура("Номенклатура,Характеристика"));
	ПараметрыФормы.Вставить("АдресПодобранныеМатериалы", ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище());
	
	ОткрытьФорму("Справочник.РесурсныеСпецификации.Форма.ПодборМатериаловПоСпецификации",
			ПараметрыФормы,
			ЭтотОбъект, 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииИзрасходованныхМатериаловНажатие(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(
		Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.УказатьСерииИзрасходованныхМатериаловНажатие");
	
	ЗаполнитьПоместитьМатериалыДляУказанияСерийВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УказатьСерииИзрасходованныхМатериаловНажатиеЗавершение", ЭтаФорма);
	ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Обеспечение_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ОбеспечениеМатериаламиИРаботами");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспечения(Команда)
	
	Если Объект.РасходМатериаловИРабот.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по данным обеспечения
									|с учетом неизрасходованных материалов?';
									|en = 'Refill the tabular section according to supply data 
									|considering unused materials?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill in'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасхода(Команда)
	
	Если Элементы.РасходМатериаловИРабот.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых необходимо заполнить дату расхода.';
									|en = 'Select the materials for which it is required to populate the consumption date.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение", ЭтотОбъект, Элементы.РасходМатериаловИРабот.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату расхода материалов (работ)';
				|en = 'Enter the material (work) consumption date'"), 
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ПолучитьВес(Команда)
	
	ПолучитьВес("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ДополнитьПоДаннымОбеспечения(Команда)
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ЭкономияМатериалов

&НаКлиенте
Процедура ЭкономияМатериалов_СкопироватьСтроки(Команда)

	СкопироватьСтрокиТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьНеизрасходованными(Команда)
	
	ЗаполнитьНеизрасходованнымиМатериалами();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗагрузитьДанныеИзТСД(Команда)
	
	ЗагрузитьДанныеИзТСД("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПоискПоШтрихкоду(Команда)
	
	ПоискПоШтрихкоду("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ПолучитьВес(Команда)
	
	ПолучитьВес("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходов(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых требуется заполнить статью расходов.';
									|en = 'Select materials to fill in the expense item for.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.ЭкономияМатериалов.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			Идентификаторы.Добавить(ИдентификаторСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В выделенных строках отсутствуют материалы, для которых требуется заполнить статью расходов.';
									|en = 'There are no materials in the selected lines for which expense item population is required.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить("НаНаправленияДеятельности");
	МассивВариантов.Добавить("НаРасходыБудущихПериодов");
	МассивВариантов.Добавить("НаПроизводственныеЗатраты");
	МассивВариантов.Добавить("НаВнеоборотныеАктивы");
	
	ПараметрыФормы = Новый Структура("ВариантыРаспределенияРасходов, ХозяйственнаяОперация",
		МассивВариантов,
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьСтатьюРасходовЗавершение", ЭтотОбъект, Новый Структура("Идентификаторы", Идентификаторы));
	ОткрытьФорму("ПланВидовХарактеристик.СтатьиРасходов.Форма.ФормаВыбораСтатьиИАналитики", ПараметрыФормы,ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДату(Команда)
	
	Если Элементы.ЭкономияМатериалов.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать материалы, для которых требуется заполнить дату передачи (списания).';
									|en = 'Select the materials for which it is required to populate the transfer (write-off) date.'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЭкономияМатериалов_ЗаполнитьДатуЗавершение", ЭтотОбъект, Элементы.ЭкономияМатериалов.ВыделенныеСтроки);
	ОбщегоНазначенияУТКлиент.ВвестиДатуСКонтролемПустогоЗначения(
			НачалоДняТекущаяДатаСеанса(), 
			НСтр("ru = 'Введите дату передачи (списания)';
				|en = 'Enter transfer (write-off) date'"),
			ЧастиДаты.Дата, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ЭкономияМатериалов");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВыходныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Команда.ВыходныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ВыходныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Изделия по рассчитываемой стоимости';
													|en = 'Products by calculated cost'"));
	
	Если ОтражениеВыполненного
		И НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Подразделение",		Объект.Подразделение);
		Отбор.Вставить("ЦеховаяКладовая",	Истина);
		ПараметрыТЧ.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ВыходныеИзделияСкрыватьОтмененныеСтроки =  Не ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ВыходныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ВыходныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ВыходныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ВыходныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ВыходныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВыходныеИзделия");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ВыходныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ВыходныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделия_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ПобочныеИзделия");
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПобочныеИзделия_УказатьСерии(Команда)
	
	ОткрытьПодборСерий("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьПолучателя(Команда)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ЭтапПроизводства2_2.Форма.ФормаДокумента.Команда.ПобочныеИзделия_ЗаполнитьПолучателя");	
	
	ПараметрыТЧ = Новый Структура;
	ПараметрыТЧ.Вставить("ИмяТЧФорма"      , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ИмяТЧОбъект"     , "ПобочныеИзделия");
	ПараметрыТЧ.Вставить("ПредставлениеТЧ" , НСтр("ru = 'Побочный и промежуточный выход по фиксированной стоимости';
													|en = 'Side and intermediate product at fixed cost'"));
	
	Если ОтражениеВыполненного
		И НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Подразделение",		Объект.Подразделение);
		Отбор.Вставить("ЦеховаяКладовая",	Истина);
		ПараметрыТЧ.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПолучателяЗавершение", 
												   ЭтотОбъект, Новый Структура("ПараметрыТЧ", ПараметрыТЧ));
	
	ПроизводствоКлиент.ОткрытьФормуВыбораПолучателя(ЭтаФорма, Объект, ПараметрыТЧ,, ОписаниеОповещения); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачество(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ПолучитьВес(Команда)
	
	ПолучитьВес("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьЦены(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.ВидЦены.Пустая() Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Вид цены""';
								|en = 'The ""Price type"" field is not populated'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ВидЦены","Объект");
		
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПобочныеИзделия.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстШаблона = НСтр("ru = 'В таблице ""%1"" не выбрано ни одной строки. Цены не могут быть заполнены';
							|en = 'No line is selected in the ""%1"" table. Cannot fill in prices'");
		ПоказатьПредупреждение( , СтрШаблон(ТекстШаблона, НадписьПобочныеИзделия));
		
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Новый Массив;
	
	Для Каждого Строка Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.ПобочныеИзделия.НайтиПоИдентификатору(Строка);
		Если ДанныеСтроки.Произведено ИЛИ ДанныеСтроки.Цена <> 0 Тогда
			Идентификаторы.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Идентификаторы.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В выделенных строках отсутствуют позиции, доступные для заполнения по виду цен.';
								|en = 'There are no items available for population by a price type in the selected lines.'");
		ПоказатьПредупреждение( , ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(Объект.ВидЦены, Идентификаторы);
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ОтменитьВыделенныеСтроки(Команда)
	
	ОтменитьВыделенныеСтроки("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_СкрыватьОтмененныеСтроки(Команда)
	
	ПобочныеИзделияСкрыватьОтмененныеСтроки = Не ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
	Если ПобочныеИзделияСкрыватьОтмененныеСтроки Тогда
		Элементы.ПобочныеИзделия.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.ПобочныеИзделия.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПобочныеИзделия_СкрыватьОтмененныеСтроки.Пометка = ПобочныеИзделияСкрыватьОтмененныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ИзменитьКачествоОтменитьСтроку(Команда)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ПобочныеИзделия");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ИзменитьКачество");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущаяСтрока.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущаяСтрока.Упаковка);
	КонецЕсли;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			"ПобочныеИзделия", 
			ЭтаФорма,
			СтруктураДействий);
			
	ДополнительныеПараметры = Новый Структура("ИмяТЧ", "ПобочныеИзделия");
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	СкладыКлиент.ИзменитьКачество(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделия_ЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ПобочныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_ВидыРабочихЦентров

&НаКлиенте
Процедура КомандаДобавитьАльтернативныйВидРЦ(Команда)
	
	ТекущиеДанные = Элементы.ВидыРабочихЦентров.ТекущиеДанные;
	
	УправлениеДаннымиОбИзделияхКлиент.ДобавитьАльтернативныйВидРЦ(
		ТекущиеДанные, 
		ВидыРабочихЦентров, 
		Элементы.ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина);
	
КонецПроцедуры

#КонецОбласти

#Область КомандыТЧ_Трудозатраты

&НаКлиенте
Процедура Трудозатраты_РазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_СкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьПоСпецификации(Команда)
	
	Если Объект.Трудозатраты.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть по спецификации?';
							|en = 'Refill the tabular section according to BOM?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("Трудозатраты_ЗаполнитьПоСпецификацииЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill in'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		Трудозатраты_ЗаполнитьПоСпецификацииЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьИсполнителейВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки для заполнения исполнителей.';
									|en = 'Select lines to fill in assignees.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = Объект.Трудозатраты.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		Объект.Подразделение,
		ПерваяСтрока.Исполнитель,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьСтатьюКалькуляцииВВыделенныхСтроках(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура Трудозатраты_ПоказатьНормативы(Команда)
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	ПоказатьНормативыТрудозатраты = НЕ ПоказатьНормативыТрудозатраты;
	ПоказатьНормативыПриИзмененииНаСервере("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	Если ОтражениеВыполненного
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиИЗакрытьОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	Если ОтражениеВыполненного
		И Объект.Проведен
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьДокументОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	Если ОтражениеВыполненного
		И НеобходимоУказатьСерииРасхода() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПровестиДокументОтражениеВыполненногоЗавершение", ЭтаФорма);
		ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения);
	Иначе
		ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучателяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;	
	
	ПараметрыТЧ      = ДополнительныеПараметры.ПараметрыТЧ;
	ВыделенныеСтроки = Элементы[ПараметрыТЧ.ИмяТЧФорма].ВыделенныеСтроки;
	
	ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателяНаСервере(ПараметрыТЧ, ВыделенныеСтроки, Получатель)
	
	ИмяТЧОбъект = ПараметрыТЧ.ИмяТЧОбъект;
	ИмяТЧФорма  = ПараметрыТЧ.ИмяТЧФорма;
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьТипСклада", Новый Структура("Склад, ТипСклада", "Получатель", "ТипСклада"));
	
	ПараметрыУказанияСерий = ЭтаФорма[ЭтаФорма.ПараметрыРедактированияЭтапа.ИмяРеквизитаПараметрыУказанияСерий];
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад"                    , Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий"   , ПараметрыУказанияСерий[ИмяТЧФорма]);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект[ИмяТЧОбъект].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки.Получатель = Получатель;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧФорма, ВыделенныеСтроки, СтруктураДействий);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)

	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	УстановитьУсловноеОформлениеОбеспечения();
	
	УстановитьУсловноеОформлениеРасходМатериаловИРабот();
	УстановитьУсловноеОформлениеЭкономияМатериалов();
	
	УстановитьУсловноеОформлениеВыходныеИзделия();
	
	УстановитьУсловноеОформлениеТрудозатраты();
	УстановитьУсловноеОформлениеВидыРабочихЦентров();
	
	УстановитьУсловноеОформлениеОсновное();

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОбеспечения()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеОбеспеченияЭтапаПроизводства(
		ЭтаФорма, "Объект", "ОбеспечениеМатериаламиИРаботами");
	
	ОбщегоНазначенияУТ.УстановитьСнятьОтметкуНезаполненного(
		УсловноеОформление, "ДатаОтгрузки", "ДатаОтгрузки", "", "ДатаОтгрузкиОбязательна");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВыходныеИзделия()

	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеВыходныхИзделийЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеПоляЭтапПотребительПолуфабриката(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеСтатьиКалькуляцииЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия",,, Истина);
		
	УправлениеПроизводством.УстановитьУсловноеОформлениеФиксированнойСтоимостиЭтапаПроизводства(
		ЭтаФорма, "Объект", "ПобочныеИзделия");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(
		ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	#Область ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокВыходныеИзделия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ВыходныеИзделия_ПобочныеИзделия_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВыходныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоВыпускающийЭтап");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПобочныеИзделияКоличество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделия.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	#Область ПередачаВПереработку_ДатаПроизводства_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоНаСтороне");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СозданЗаказПереработчику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Формируется);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован);
	СписокСтатусов.Добавить(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеЭкономияМатериалов()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеЭкономияМатериаловЭтапаПроизводства(
		ЭтаФорма, "Объект", "ЭкономияМатериалов");
	
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
КонецПроцедуры

&НаСервере
Функция УстановитьУсловноеОформлениеЭкономияМатериаловНазначение()
	
	ЭкономияМатериаловНазначениеПредставление = "ЭкономияМатериаловНазначениеТекстНаименованиеЭтапа";
	Для Каждого Элемент Из УсловноеОформление.Элементы Цикл
		
		Если Элемент.Представление = ЭкономияМатериаловНазначениеПредставление Тогда
			
			УсловноеОформление.Элементы.Удалить(Элемент);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Вставить(0);
	Элемент.Представление = ЭкономияМатериаловНазначениеПредставление;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭкономияМатериаловНадписьНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЭкономияМатериалов.Обособить");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("<%1>", Объект.НазначениеМатериалы));
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформлениеРасходМатериаловИРабот()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеРасходМатериаловИРаботЭтапаПроизводства(
		ЭтаФорма, "Объект", "РасходМатериаловИРабот");

	#Область ДатаРасхода_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаРасхода.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РасходОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокРасхода");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеВидыРабочихЦентров()
	
	УправлениеДаннымиОбИзделиях.УстановитьУсловноеОформлениеВидыРабочихЦентров(
		ЭтаФорма, "ВидыРабочихЦентров");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеТрудозатраты()
	
	УправлениеПроизводством.УстановитьУсловноеОформлениеТрудозатраты(
		ЭтаФорма, "Объект", "Трудозатраты");
	
	#Область ДатаВыполненияРаботТаблица_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыДатаВыполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Трудозатраты.Выполнено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ДатаВыполненияРаботПодвал_ОтметкаНезаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаВыполненияРабот.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыполнениеРаботОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоСтрокТрудозатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеОсновное()
	
	// ПланироватьНеРанее - отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НадписьПланироватьНеРанее.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтметкаПланироватьНеРанее");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// КоэффициентМаршрутнойКарты - отметка незаполненного
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоэффициентМаршрутнойКарты.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МаршрутнаяКарта");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	УстановитьУсловноеОформлениеПлановаяДатаПоступления();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПлановаяДатаПоступления()
	
	// Реквизит в шапке
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СтатусНачат();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Выходные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
	// Побочные изделия
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияДатаПроизводства.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроизводствоОднойДатой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Произведено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.ДатаПроизводства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ПлановаяДатаПоступления");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстПредопределенногоЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.Выполнено.МинимальноеЗначение  = 0;
	Элементы.Выполнено.МаксимальноеЗначение = Объект.Запланировано;
	
	Если ОтражениеВыполненного Тогда
		
		Элементы.ГруппаШапкаПраво.Видимость			= Ложь;
		Элементы.Распоряжение.Видимость				= Ложь;
		Элементы.ЖелаемаяДатаОбеспечения.Видимость	= Ложь;
		
		Элементы.ВыходныеИзделияГруппаОтмена.Видимость	= Ложь;
		Элементы.ПобочныеИзделияГруппаОтмена.Видимость	= Ложь;
		
		Элементы.ВыходныеИзделия_ОтменаСтрок.Видимость	= Ложь;
		Элементы.ПобочныеИзделия_ОтменаСтрок.Видимость	= Ложь;
		
		Элементы.ТрудозатратыГруппаВыполнено.Видимость	= Ложь;
		
		Элементы.ГруппаДополнительно.Видимость			= Ложь;
		
		Элементы.СтраницаОбеспечениеМатериаламиИРаботами.Заголовок			= НСтр("ru = 'Материалы и работы';
																					|en = 'Materials and works'");
		Элементы.ОбеспечениеМатериаламиИРаботамиГруппаОбеспечение.Видимость	= Ложь;
		
	Иначе
		Элементы.УказатьСерииИзрасходованныхМатериалов.Видимость = Ложь;
	КонецЕсли;
	
	ЭтоВыпускающийЭтап = ЭтоВыпускающийЭтап(ЭтаФорма);
	Если ЭтоВыпускающийЭтап Тогда
		
		ПобочныеИзделияСвернуты = (Объект.ПобочныеИзделия.Количество() = 0);
		
		УстановитьСвойстваСворачиваемойГруппы(
			Элементы.ГруппаПобочныеИзделияСворачиваемая, 
			Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
			ПобочныеИзделияСвернуты);
			
	КонецЕсли;
	
	НеизрасходованныеМатериалыСвернуты = Истина;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ЭкономияМатериалов, 
		Элементы.ГиперСсылкаНадписьРЭкономияМатериалов,
		НеизрасходованныеМатериалыСвернуты);
	
	Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость = ЭтоВыпускающийЭтап;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка
		И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда // СубдавальческаяСхема
		Элементы.ГруппаСпособПроизводства.Видимость = ИспользуетсяПроизводствоНаСтороне;
	Иначе
		Элементы.ГруппаСпособПроизводства.Видимость = Объект.ПроизводствоНаСтороне;
	КонецЕсли;
	
	Элементы.НазначениеПродукция.Видимость = НЕ Объект.НазначениеПродукция.Пустая();
	
	Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		Элементы.ВыходныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ВыходныеИзделияСпецификация.Видимость = Ложь;
		Элементы.ПобочныеИзделияОбработатьПоСпецификации.Видимость = Ложь;
		Элементы.ПобочныеИзделияСпецификация.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Элементы.ОбеспечениеМатериаламиИРаботамиГруппаПроизводится.Видимость = Ложь;
	КонецЕсли;
	
	НадписьСпецификация = ФорматированнаяСтрокаНадписьСпецификация();
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.Обеспечение_СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ПравоЧтенияАналогов Тогда
		Элементы.ОбеспечениеМатериаламиИРаботамиЕстьАналогиМатериала.Видимость = Ложь;
		Элементы.Обеспечение_ПодобратьАналоги.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗакрытьЭтап.Доступность = ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2);
	
	РассчитатьКоличествоВидовРабочихЦентров(ЭтаФорма);
	
	СформироватьКомментарийКонвертации(ЭтаФорма);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Заголовок формы
	#Область ЗаголовокФормы
	Если СтруктураРеквизитов.Свойство("НаименованиеЭтапа") 
		ИЛИ Инициализация Тогда
		
		ЗаголовокСтроки = Новый Массив;
		
		РеквизитыПредставления = Новый Структура("Номер, НаименованиеЭтапа");
		ЗаполнитьЗначенияСвойств(РеквизитыПредставления, Объект);
		
		ПредставлениеЭтапа = ПредставлениеЭтапа(РеквизитыПредставления);
		ЗаголовокСтроки.Добавить(ПредставлениеЭтапа);
		ЗаголовокСтроки.Добавить(НСтр("ru = '(Этап производства)';
										|en = '(Production stage)'"));
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = СтрСоединить(ЗаголовокСтроки, " ");
		
	КонецЕсли;
	#КонецОбласти
	
	// Подразделение
	#Область Подразделение
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ Инициализация Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций;
		
	КонецЕсли;
	#КонецОбласти
	
	// Маршрутная карта
	#Область МаршрутнаяКарта
	Если СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("МаршрутнаяКарта")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаМаршрутнаяКарта.Видимость =
			Форма.ИспользоватьПооперационноеУправление
			И Не Объект.ПроизводствоНаСтороне
			И Не Форма.Объект.ТипПроизводственногоПроцесса =
				ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Если Форма.ИспользоватьПооперационноеУправление Тогда
			
			Элементы.МаршрутнаяКарта.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций;
			Элементы.КоэффициентМаршрутнойКарты.ТолькоПросмотр = Форма.НачатоВыполнениеОпераций
				ИЛИ Объект.МаршрутнаяКарта.Пустая();
			
		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	// Переработка на стороне
	#Область СпособПроизводства
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") ИЛИ Инициализация Тогда
		
		Элементы.СтраницаТрудозатраты.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
		Элементы.ВыходныеИзделияПроизведено.Видимость =
			НЕ Форма.Объект.ПроизводствоНаСтороне
			И НЕ Форма.ОтражениеВыполненного;
		Элементы.ПобочныеИзделияПроизведено.Видимость = 
			НЕ Форма.Объект.ПроизводствоНаСтороне
			И НЕ Форма.ОтражениеВыполненного;
		
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику Тогда
				
				МассивСтрок = Новый Массив;
				ПредставлениеЗаказа = СтрШаблон(НСтр("ru = 'заказ переработчику № %1 от %2';
													|en = 'tolling order No. %1, %2'"), 
											ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
													Форма.РеквизитыЗаказаПереработчика.Номер, Ложь, Истина),
											Формат(Форма.РеквизитыЗаказаПереработчика.Дата, "ДЛФ=D"));
											
				Если Форма.ПравоПросмотраЗаказаПереработчику Тогда
					СсылкаНаЗаказ = ПолучитьНавигационнуюСсылку(Форма.Объект.ЗаказПереработчику);
				Иначе
					СсылкаНаЗаказ = Неопределено;
				КонецЕсли;
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, СсылкаНаЗаказ));
				
				Если НЕ Форма.РеквизитыЗаказаПереработчика.Проведен Тогда
					МассивСтрок.Добавить(" ");
					МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
												НСтр("ru = 'не проведен';
													|en = 'not posted'"),, Форма.ЦветОсобогоТекста));
				КонецЕсли;
				ТекстЗаказ = Новый ФорматированнаяСтрока(МассивСтрок);
			ИначеЕсли Форма.ПравоДобавленияЗаказаПереработчику Тогда
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'создать заказ переработчику';
																|en = 'create tolling order'"),,,, "#СоздатьЗаказ");
			Иначе
				ТекстЗаказ = Новый ФорматированнаяСтрока(НСтр("ru = 'нет заказа переработчику';
																|en = 'no tolling order'"));
			КонецЕсли; 
			
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("(", ТекстЗаказ, ")");
		Иначе
			Форма.НадписьЗаказПереработчику = Новый ФорматированнаяСтрока("");
		КонецЕсли;
		
		МассивСвязиПараметров	= Новый Массив;
		МассивПараметровВыбора	= Новый Массив;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТипов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", Новый ФиксированныйМассив(МассивТипов)));
		
		Если Форма.ОтражениеВыполненного
			И Форма.НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки Тогда
			МассивСвязиПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Подразделение", "Объект.Подразделение"));
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЦеховаяКладовая", Истина));
		КонецЕсли;
		
		МассивСвязиПараметров  = Новый ФиксированныйМассив(МассивСвязиПараметров);
		МассивПараметровВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
		
		Элементы.ОбеспечениеМатериаламиИРаботамиСклад.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ОбеспечениеМатериаламиИРаботамиСклад.ПараметрыВыбора		= МассивПараметровВыбора;
		
		Элементы.ЭкономияМатериаловПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ЭкономияМатериаловПолучатель.ПараметрыВыбора		= МассивПараметровВыбора;
		
		Элементы.ВыходныеИзделияПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ВыходныеИзделияПолучатель.ПараметрыВыбора			= МассивПараметровВыбора;
		
		Элементы.ПобочныеИзделияПолучатель.СвязиПараметровВыбора	= МассивСвязиПараметров;
		Элементы.ПобочныеИзделияПолучатель.ПараметрыВыбора			= МассивПараметровВыбора;
		
		Если Объект.ПроизводствоНаСтороне И Форма.СозданЗаказПереработчику 
			ИЛИ Форма.ИспользоватьПооперационноеУправление И Форма.НачатоВыполнениеОпераций Тогда
			
			Элементы.СпособПроизводства.ТолькоПросмотр = Истина;
		Иначе
			Элементы.СпособПроизводства.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Элементы.ПобочныеИзделия_ЗаполнитьЦены.Видимость = НЕ Форма.Объект.ПроизводствоНаСтороне;
		
	КонецЕсли;
	#КонецОбласти
	
	// График производства
	#Область ГрафикПроизводства
	
	// Параметры планирования
	Если СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПериодПроизводства.Видимость =
			Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
			
		Элементы.ГруппаПараметрыПланированияГрафика.Видимость =
			Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Элементы.ГруппаПериодПроизводства.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
			Элементы.ГруппаПараметрыПланированияГрафика.Доступность = Форма.ПравоРедактированияГрафикаПроизводства
															 И Объект.Статус <> СтатусЗавершен();
			
			Элементы.ГруппаДлительностьУББВ.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
													  И НЕ Форма.Объект.ПланироватьРаботуВидовРабочихЦентров;
			Элементы.ДекорацияОтступУББВ.Видимость = Элементы.ДлительностьЭтапа.Видимость;
			
			Элементы.СпособПланированияББВ.Видимость = ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
			Элементы.ДекорацияОтступББВ.Видимость = ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
			
			Элементы.РучноеРедактированиеГрафикаПроизводства.Видимость = Форма.Объект.РучноеРазмещениеВГрафике;
		
			Элементы.ГруппаПланироватьНеРанее.Доступность = НЕ Форма.Объект.РучноеРазмещениеВГрафике
															И Объект.Статус <> СтатусНачат()
															И Объект.Статус <> СтатусЗавершен();
			
		КонецЕсли;
		
		Элементы.ГруппаПараметрыПланированияБезГрафика.Видимость =
			НЕ Форма.ПланируетсяГрафикПроизводства
			И НЕ Форма.ОтражениеВыполненного;
		Элементы.ГруппаПараметрыПланированияБезГрафика.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
		Элементы.СтраницаВидыРабочихЦентров.Видимость = НЕ Форма.Объект.РучноеРазмещениеВГрафике
														 И Форма.Объект.ПланироватьРаботуВидовРабочихЦентров 
														 И ДоступноПланированиеПоПроизводственнымРесурсам(Форма);
														 
		Элементы.СтраницаВидыРабочихЦентров.Доступность = Форма.ПравоРедактированияГрафикаПроизводства;
		
	КонецЕсли;
	
	// Предварительный буфер
	Если СтруктураРеквизитов.Свойство("ПредварительныйБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияПредварительногоБуфера)
			И Форма.Объект.ПредварительныйБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Завершающий буфер
	Если СтруктураРеквизитов.Свойство("ЗавершающийБуфер") ИЛИ Инициализация Тогда
		
		Если НЕ ЗначениеЗаполнено(Форма.Объект.ЕдиницаИзмеренияЗавершающегоБуфера)
			И Форма.Объект.ЗавершающийБуфер <> 0 Тогда
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Истина;
		Иначе
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// Единица измерения длительности этапа УББВ
	Если СтруктураРеквизитов.Свойство("ЕдиницаИзмеренияДлительностиЭтапа") ИЛИ Инициализация Тогда
		
		ЕдиницаИзмеренияДень = ПредопределенноеЗначение("Перечисление.ЕдиницыИзмеренияВремени.День");
		
		Если Форма.Объект.ЕдиницаИзмеренияДлительностиЭтапа = ЕдиницаИзмеренияДень Тогда
			ТекстПодсказки = НСтр("ru = 'При планировании используется календарь работы подразделения.';
									|en = 'Department calendar is used on scheduling.'");
		Иначе
			ТекстПодсказки = НСтр("ru = 'При планировании используется расписание работы подразделения.';
									|en = 'Department timetable is used while planning.'");
		КонецЕсли;
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапа.Подсказка = ТекстПодсказки;
		Иначе
			Форма.Элементы.ЕдиницаИзмеренияДлительностиЭтапаБезГрафика.Подсказка = ТекстПодсказки;
		КонецЕсли;
		
	КонецЕсли;
		
	// Период планирования
	Если СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ТекстПериодПроизводства = "";
		
		Если Форма.ПланируетсяГрафикПроизводства Тогда
			
			Если Форма.ГрафикПроизводства.Рассчитан Тогда
				
				ШаблонПериодПроизводства = НСтр("ru = 'с %1 по %2';
												|en = 'from %1 to %2'");
				
				ТекстПериодПроизводства = СтрШаблон(ШаблонПериодПроизводства,
											Формат(Форма.ГрафикПроизводства.НачалоЭтапа, Форма.ФорматДатыГрафика),
											Формат(Форма.ГрафикПроизводства.ОкончаниеЭтапа, Форма.ФорматДатыГрафика));
				
			Иначе
				
				ТекстПериодПроизводства = НСтр("ru = '<график производства не рассчитан>';
												|en = '<production schedule is not calculated>'");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.НадписьПериодПроизводства = ТекстПериодПроизводства;
		
	КонецЕсли;
	
	// Планировать не ранее
	Если СтруктураРеквизитов.Свойство("ОтметкаПланироватьНеРанее")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПланирования")
		ИЛИ Инициализация Тогда
		
		Элементы.НадписьПланироватьНеРанее.Видимость = Форма.ОтметкаПланироватьНеРанее;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Обеспечение, Расход, Экономия
	#Область Обеспечение_РасходМатериаловИРабот_ЭкономияМатериалов
	
	Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот")
		ИЛИ СтруктураРеквизитов.Свойство("ЭкономияМатериалов") 
		ИЛИ Инициализация Тогда
		
		РасходМатериаловИРаботКоличество = Форма.Объект.РасходМатериаловИРабот.Количество();
		ЭкономияМатериаловКоличество = Форма.Объект.ЭкономияМатериалов.Количество();
		
		Если СтруктураРеквизитов.Свойство("РасходМатериаловИРабот") ИЛИ Инициализация Тогда
			Если РасходМатериаловИРаботКоличество > 0 Тогда
				Форма.НадписьРасходМатериаловИРабот = СтрШаблон("%1 (%2)", Элементы.РасходМатериаловИРабот.Заголовок, РасходМатериаловИРаботКоличество);
			Иначе
				Форма.НадписьРасходМатериаловИРабот = Элементы.РасходМатериаловИРабот.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ЭкономияМатериалов") ИЛИ Инициализация Тогда
			Если ЭкономияМатериаловКоличество > 0 Тогда
				Форма.НадписьЭкономияМатериалов = СтрШаблон("%1 (%2)", Элементы.ЭкономияМатериалов.Заголовок, ЭкономияМатериаловКоличество);
			Иначе
				Форма.НадписьЭкономияМатериалов = Элементы.ЭкономияМатериалов.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокРасхода = РасходМатериаловИРаботКоличество + ЭкономияМатериаловКоличество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СпособПроизводства") 
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		ВидимостьЭлементов = НЕ Форма.Объект.ПроизводствоНаСтороне
							И НЕ Форма.ОтражениеВыполненного
							И (Форма.Объект.Статус = СтатусНачат() ИЛИ Форма.Объект.Статус = СтатусЗавершен());
							
		Элементы.СтраницаРасходМатериаловИРабот.Видимость = ВидимостьЭлементов;
		
	КонецЕсли;
	
	// Отгрузка одной датой и дата отгрузки
	Если СтруктураРеквизитов.Свойство("НеОтгружатьЧастями")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа.
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику И НЕ Объект.НеОтгружатьЧастями Тогда
				Элементы.НеОтгружатьЧастями.Видимость = Ложь;
			Иначе
				Элементы.НеОтгружатьЧастями.Видимость = Истина;
			КонецЕсли;
			
			Элементы.НеОтгружатьЧастями.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаОтгрузки.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
		КонецЕсли;
		
		Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Спецификация") ИЛИ Инициализация Тогда
		ВидимостьЭлементов = НЕ Форма.Объект.Спецификация.Пустая() И НЕ Форма.Объект.Этап.Пустая();
		Элементы.Обеспечение_ПоказатьНормативы.Видимость        = ВидимостьЭлементов;
		Элементы.Обеспечение_ЗаполнитьПоСпецификации.Видимость  = ВидимостьЭлементов;
		Элементы.Обеспечение_ПодобратьПоСпецификации.Видимость  = ВидимостьЭлементов;
		Элементы.Трудозатраты_ПоказатьНормативы.Видимость       = ВидимостьЭлементов;
		Элементы.Трудозатраты_ЗаполнитьПоСпецификации.Видимость = ВидимостьЭлементов;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЕстьУточненияМатериалов") ИЛИ Инициализация Тогда
		Элементы.ГруппаУточнениеМатериалов.Видимость = Форма.ЕстьУточненияМатериалов;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЕстьУточненияПобочныхИзделий") ИЛИ Инициализация Тогда
		Элементы.ГруппаУточнениеПобочныхИзделий.Видимость = Форма.ЕстьУточненияПобочныхИзделий;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЖелаемаяДатаОбеспечения") 
		ИЛИ СтруктураРеквизитов.Свойство("ГрафикПроизводства")
		ИЛИ Инициализация Тогда
		
		ПеренестиЖелаемуюДату = Форма.ПланируетсяГрафикПроизводства
			И ЗначениеЗаполнено(Форма.ГрафикПроизводства.НачалоЭтапа)
			И Форма.Объект.ЖелаемаяДатаОбеспечения <> НачалоДня(Форма.ГрафикПроизводства.НачалоЭтапа);
		
		Форма.Элементы.ПеренестиЖелаемуюДатуОбеспечения.Видимость = ПеренестиЖелаемуюДату;
		
		Если ПеренестиЖелаемуюДату Тогда
			
			Форма.Элементы.ПеренестиЖелаемуюДатуОбеспечения.Заголовок = СтрШаблон(
				НСтр("ru = 'установить %1 (по графику)';
					|en = 'set %1 (on schedule)'"),
				Формат(Форма.ГрафикПроизводства.НачалоЭтапа, "ДЛФ=D"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("РасходОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаРасхода.Видимость = Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРаботДатаРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериаловДатаОперации.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.РасходМатериаловИРабот_ЗаполнитьДатуРасхода.Видимость = НЕ Объект.РасходОднойДатой;
		Элементы.ЭкономияМатериалов_ЗаполнитьДату.Видимость = НЕ Объект.РасходОднойДатой;
		
	КонецЕсли;
		
	#КонецОбласти
	
	// Выходные изделия
	#Область ВыходныеИзделия_ПобочныеИзделия
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия")
		ИЛИ СтруктураРеквизитов.Свойство("ПобочныеИзделия") 
		ИЛИ Инициализация Тогда
		
		Форма.ВыходныеИзделияКоличество = Форма.Объект.ВыходныеИзделия.Количество();
		Форма.ПобочныеИзделияКоличество = Форма.Объект.ПобочныеИзделия.Количество();
		
		Если СтруктураРеквизитов.Свойство("ВыходныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ВыходныеИзделияКоличество > 0 Тогда
				Форма.НадписьПродукция = СтрШаблон("%1 (%2)", Элементы.ВыходныеИзделия.Заголовок, Форма.ВыходныеИзделияКоличество);
			Иначе
				Форма.НадписьПродукция = Элементы.ВыходныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ПобочныеИзделия") ИЛИ Инициализация Тогда
			Если Форма.ПобочныеИзделияКоличество > 0 Тогда
				Форма.НадписьПобочныеИзделия = СтрШаблон("%1 (%2)", Элементы.ПобочныеИзделия.Заголовок, Форма.ПобочныеИзделияКоличество);
			Иначе
				Форма.НадписьПобочныеИзделия = Элементы.ПобочныеИзделия.Заголовок;
			КонецЕсли;
		КонецЕсли;
		
		Форма.КоличествоСтрокВыходныеИзделия = Форма.ВыходныеИзделияКоличество + Форма.ПобочныеИзделияКоличество;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ЭтоВыпускающийЭтап")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаПродукция.Видимость = ЭтоВыпускающийЭтап(Форма)
			ИЛИ Форма.Объект.ВыходныеИзделия.Количество() > 0;
		Если НЕ Элементы.ГруппаПродукция.Видимость Тогда
			Элементы.ГиперСсылкаНадписьПобочныеИзделия.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// Производство одной датой и дата производства
	Если СтруктураРеквизитов.Свойство("ПроизводствоОднойДатой")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ Инициализация Тогда
		
		// Если этап включен в заказ переработчику, 
		// то в этапе нельзя изменять режим ввода дат, 
		// т.к. он должен быть единым для всех этапов заказа.
		Если Объект.ПроизводствоНаСтороне Тогда
			
			Если Форма.СозданЗаказПереработчику И НЕ Объект.ПроизводствоОднойДатой Тогда 
				Элементы.ПроизводствоОднойДатой.Видимость = Ложь;
			Иначе
				Элементы.ПроизводствоОднойДатой.Видимость = Истина;
			КонецЕсли;
			
			Элементы.ДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой;
			
			Элементы.ПроизводствоОднойДатой.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			Элементы.ДатаПроизводства.ТолькоПросмотр = Форма.СозданЗаказПереработчику;
			
		Иначе
			
			НачатоПроизводство = Объект.Статус = СтатусНачат() Или Объект.Статус = СтатусЗавершен();
			
			Элементы.ПроизводствоОднойДатой.Видимость = НачатоПроизводство;
			Элементы.ДатаПроизводства.Видимость = Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
			Элементы.ВыходныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			Элементы.ПобочныеИзделияДатаПроизводства.Видимость = Не Объект.ПроизводствоОднойДатой И НачатоПроизводство;
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Трудозатраты
	#Область Трудозатраты
	
	Если СтруктураРеквизитов.Свойство("Трудозатраты")
		ИЛИ Инициализация Тогда
		Форма.КоличествоСтрокТрудозатрат = Форма.Объект.Трудозатраты.Количество();
	КонецЕсли;
	
	// Дата выполнения работ
	Если СтруктураРеквизитов.Свойство("ВыполнениеРаботОднойДатой")
		ИЛИ Инициализация Тогда
		
		Элементы.ДатаВыполненияРабот.Видимость = Объект.ВыполнениеРаботОднойДатой;
		Элементы.ТрудозатратыДатаВыполнения.Видимость = Не Объект.ВыполнениеРаботОднойДатой;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Нормативы
	#Область Нормативы
	
	Если СтруктураРеквизитов.Свойство("ПоказатьНормативы") ИЛИ Инициализация Тогда
		
		Элементы.ОбеспечениеМатериаламиИРаботамиНорматив.Видимость = Форма.ПоказатьНормативыМатериалы;
		Элементы.Обеспечение_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыМатериалы;
		
		Элементы.ТрудозатратыНорматив.Видимость = Форма.ПоказатьНормативыТрудозатраты;
		Элементы.Трудозатраты_ПоказатьНормативы.Пометка = Форма.ПоказатьНормативыТрудозатраты;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Выполнение
	#Область ВыполнениеЭтапа
	
	// Группа "Выполнение этапа"
	Если СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ Инициализация Тогда
		
		Элементы.ГруппаВыполнение.Видимость =
			НЕ Форма.Объект.ПроизводствоНаСтороне
			И НЕ Форма.ОтражениеВыполненного;
		
	КонецЕсли;
	
	// Сроки выполнения
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.АвтоОтметкаНезаполненного = Форма.НачатоВыполнениеЭтапа;
		Элементы.ФактическоеОкончаниеЭтапа.АвтоОтметкаНезаполненного = Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое начало этапа
	Если СтруктураРеквизитов.Свойство("НачатоВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеНачалоЭтапа.ТолькоПросмотр = НЕ Форма.НачатоВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Фактическое окончание этапа
	Если СтруктураРеквизитов.Свойство("ЗавершеноВыполнениеЭтапа")
		ИЛИ Инициализация Тогда
		
		Элементы.ФактическоеОкончаниеЭтапа.ТолькоПросмотр = НЕ Форма.ЗавершеноВыполнениеЭтапа;
		
	КонецЕсли;
	
	// Запланировано
	Если СтруктураРеквизитов.Свойство("Запланировано")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Объект.ЕдиницаИзмеренияПартииВыпуска,
			Объект.Запланировано);
		Элементы.Запланировано.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
	// Запланировано
	Если СтруктураРеквизитов.Свойство("Выполнено")
		ИЛИ Инициализация Тогда
		
		ПодсказкаВвода = УправлениеДаннымиОбИзделияхКлиентСервер.ПредставлениеЕдиницыИзмеренияПартииВыпуска(
			Объект.ЕдиницаИзмеренияПартииВыпуска,
			Объект.Выполнено);
		Элементы.Выполнено.Подсказка = ПодсказкаВвода;
		
	КонецЕсли;
	
	#КонецОбласти
	
	// Работа с операциями
	#Область Операции
	Если СтруктураРеквизитов.Свойство("Подразделение")
		ИЛИ СтруктураРеквизитов.Свойство("СпособПроизводства")
		ИЛИ СтруктураРеквизитов.Свойство("Статус")
		ИЛИ СтруктураРеквизитов.Свойство("ТребуетсяЗаполнитьПоОперациям")
		ИЛИ Инициализация Тогда
		
		// видимость элементов
		ВидимостьЭлементов =
			Форма.ИспользоватьПооперационноеУправление
			И Не Форма.Объект.ПроизводствоНаСтороне
			И Не Форма.ОтражениеВыполненного;
		
		Элементы.ФормаЗаполнитьПоОперациям.Видимость     = ВидимостьЭлементов;
		Элементы.ТребуетсяЗаполнитьПоОперациям.Видимость = ВидимостьЭлементов И Форма.Объект.ТребуетсяЗаполнитьПоОперациям;
		Элементы.ФормаВыполнениеОпераций.Видимость       = ВидимостьЭлементов;
		Элементы.ФормаСменныеЗадания.Видимость           = ВидимостьЭлементов И Форма.ИспользоватьСменныеЗадания;
		
		Элементы.ФормаГруппаПерейти.Вид = ?(ВидимостьЭлементов И Форма.ИспользоватьСменныеЗадания,
			ВидГруппыФормы.Подменю,
			ВидГруппыФормы.ГруппаКнопок);
		
		// доступность элементов
		ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(Форма);
		
		ДоступностьЭлементов = ПроверяемыеСтатусы.Найти(Форма.Объект.Статус) <> Неопределено;
		
		Элементы.ФормаЗаполнитьПоОперациям.Доступность = ДоступностьЭлементов;
		Элементы.ФормаВыполнениеОпераций.Доступность   = ДоступностьЭлементов;
		Элементы.ФормаСменныеЗадания.Доступность       = ДоступностьЭлементов;
		
	КонецЕсли;
	#КонецОбласти
	
	// ВидыРабочихЦентров
	#Область ВидыРабочихЦентров
	
	Если СтруктураРеквизитов.Свойство("ВидыРабочихЦентров")
		ИЛИ Инициализация Тогда
		
		НесколькоВидовРЦ = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество() > 1;
	
		Если НесколькоВидовРЦ Тогда
			Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = "";
		Иначе
			Элементы.ПорядокРаботыВидовРабочихЦентров.ПодсказкаВвода = НСтр("ru = '<не используется>';
																			|en = '<not used>'");
		КонецЕсли;
		
		Элементы.ПорядокРаботыВидовРабочихЦентров.Доступность = НесколькоВидовРЦ;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства


#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения
		И ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		И ТекущиеДанные.СтатусУказанияСерий > 8 Тогда
		ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
		Если ПараметрыФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыФормы.Вставить("ВыборСерии", Истина);
		
		Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
			ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
		Возврат;
	КонецЕсли;
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтаФорма, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
				ДополнительныеПараметры.ПараметрыУказанияСерий, 
				ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Новый Структура;
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ЭкономияМатериалов" Тогда
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ПараметрыУказанияСерий.ИмяТЧТовары, ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
		
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ПараметрыУказанияСерий.ИмяТЧТовары,, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ИмяТЧ)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
					Объект, 
					ПараметрыУказанияСерий[ИмяТЧ], 
					ТекущиеДанныеИдентификатор, 
					ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий[ИмяТЧ], ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СписокТЧ = Неопределено, ОбновитьПараметрыУказанияСерий = Ложь)
	
	Если ОбновитьПараметрыУказанияСерий Тогда
		ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли; 
	
	Если СписокТЧ <> Неопределено Тогда
		МассивТЧ = СтрРазделить(СписокТЧ, ",");
		Для каждого ИмяТЧ Из МассивТЧ Цикл
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ]);
		КонецЦикла; 
	Иначе
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ВыходныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ПобочныеИзделия);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ОбеспечениеМатериаламиИРаботамиСерия.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	Элементы.Обеспечение_ЗаполнитьСерииПоFEFO.Видимость = ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры;
	
	Элементы.ЭкономияМатериаловСерия.Видимость = ПараметрыУказанияСерий.ЭкономияМатериалов.ИспользоватьСерииНоменклатуры;
	Элементы.РасходМатериаловИРаботСерия.Видимость = ПараметрыУказанияСерий.РасходМатериаловИРабот.ИспользоватьСерииНоменклатуры;
	
	Элементы.ВыходныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПобочныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделия_УказатьСерии.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаполненныеСерииПоFEFO()

	Возврат НоменклатураСервер.ЕстьСтрокиСЗаполненнымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами);

КонецФункции

&НаСервере
Функция ЗаполнитьСерииПоFEFOСервер()
	
	Если НоменклатураСервер.ЕстьСтрокиСЗаполняемымиПоFEFOСериями(Объект.ОбеспечениеМатериаламиИРаботами) Тогда
		
		НоменклатураСервер.ЗаполнитьСерииПоFEFO(Объект,ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);	
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСерииПоFEFOЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если НЕ Результат Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ЗаполнитьСерииПоFEFOСервер() Тогда
		
		НоменклатураКлиент.ПредупредитьОбОтсутствииСтрокЗаполняемыхПоFEFO();
		
	КонецЕсли;
	
КонецПроцедуры

#Область СерииИзрасходованныхМатериалов

&НаКлиенте
Функция ПараметрыФормыРедактированияСерийРасхода()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ссылка",					Объект.Ссылка);
	ПараметрыФормы.Вставить("Назначение",				Объект.Назначение);
	ПараметрыФормы.Вставить("Подразделение",			Объект.Подразделение);
	ПараметрыФормы.Вставить("РасходОднойДатой",			Объект.РасходОднойДатой);
	ПараметрыФормы.Вставить("ДатаРасхода",				Объект.ДатаРасхода);
	ПараметрыФормы.Вставить("СостояниеСерий",			"1");
	ПараметрыФормы.Вставить("ПараметрыУказанияСерий",	ПараметрыУказанияСерий.РасходМатериаловИРабот);
	ПараметрыФормы.Вставить("АдресМатериалыДляСерий",	АдресМатериалыДляСерий);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРедактированияСерийРасхода(ОписаниеОповещения)
	
	ПараметрыФормы = ПараметрыФормыРедактированияСерийРасхода();
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.Форма.РедактированиеСерийВРасходе",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерииИзрасходованныхМатериаловНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	
КонецПроцедуры

&НаСервере
Функция НеобходимоУказатьСерииРасхода()
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	
	СтруктураОтбора = Новый Структура("СтатусУказанияСерий", 1);
	Таблица = Объект.РасходМатериаловИРабот.НайтиСтроки(СтруктураОтбора);
	
	Если Таблица.Количество() > 0 Тогда
		ПоместитьМатериалыДляУказанияСерийВХранилище();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоместитьМатериалыДляУказанияСерийВХранилище()
	
	ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	ПоместитьМатериалыДляУказанияСерийВХранилище();
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьМатериалыДляУказанияСерийВХранилище()
	
	Таблица = Объект.РасходМатериаловИРабот.Выгрузить();
	Если ЭтоАдресВременногоХранилища(АдресМатериалыДляСерий) Тогда
		АдресМатериалыДляСерий = ПоместитьВоВременноеХранилище(Таблица, АдресМатериалыДляСерий);
	Иначе
		АдресМатериалыДляСерий = ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища()
	
	Если ЭтоАдресВременногоХранилища(АдресМатериалыДляСерий) Тогда
		Таблица = ПолучитьИзВременногоХранилища(АдресМатериалыДляСерий);
		Объект.РасходМатериаловИРабот.Загрузить(Таблица);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокументОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрытьОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокументОтражениеВыполненногоЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьМатериалыДляУказанияСерийИзВременногоХранилища();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходМатериаловИРабот");
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроизводствоИПланирование

#Область ГрафикПроизводства

&НаСервере
Функция ПараметрыФормыРучногоРазмещенияЭтапаВГрафике()
	
	Результат = УправлениеПроизводством.ПараметрыФормыРучногоРазмещенияЭтапаВГрафике(Объект, УникальныйИдентификатор);
	
	Результат.ГрафикПроизводства = ГрафикПроизводства;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГрафикПроизводства(ДанныеЗаполнения = Неопределено)
	
	ГрафикПроизводства = Неопределено;
	
	Если ПланируетсяГрафикПроизводства Тогда
		
		Если ДанныеЗаполнения = Неопределено Тогда
			ГрафикПроизводства = Документы.ЭтапПроизводства2_2.ГрафикПроизводства(Объект.Ссылка);
		Иначе
			ГрафикПроизводства = ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПлановуюДатуПоступления();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлановуюДатуПоступления()
	
	ПредыдущееЗначение = ПлановаяДатаПоступления;
	
	Если ПланируетсяГрафикПроизводства Тогда
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступленияПоГрафику(ГрафикПроизводства);
	Иначе
		ПлановаяДатаПоступления = Документы.ЭтапПроизводства2_2.ПлановаяДатаПоступления(Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьПлановыеДатыПоступления(ПлановаяДатаПоступления, ПредыдущееЗначение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеРучноеРазмещениеВГрафике(ДанныеЗаполнения)
	
	СтруктураРазмещения = УправлениеПроизводствомКлиентСервер.СтруктураРазмещенияЭтапаВГрафике();
	
	ЗаполнитьЗначенияСвойств(СтруктураРазмещения, ДанныеЗаполнения);
	
	Возврат СтруктураРазмещения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения = Неопределено)
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		ЗаполнитьГрафикПроизводства(ДанныеЗаполнения.ДанныеРучноеРазмещениеВГрафике);
		
		Если ЭтоАдресВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом) Тогда
			
			ЗанятоЭтапом = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресЗанятоЭтапом);
			Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ЗанятоЭтапом = РегистрыНакопления.ДоступностьВидовРабочихЦентров.ЗанятоЭтапом(Объект.Ссылка);
		Объект.ЗанятостьВидовРабочихЦентров.Загрузить(ЗанятоЭтапом);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлановыеДатыПоступления(НовоеЗначение, ПредыдущееЗначение)
	
	// После ручного изменения графика, необходимо обновить плановые даты произодства
	Если ПредыдущееЗначение = Неопределено
		 ИЛИ ПредыдущееЗначение = НовоеЗначение
		 ИЛИ НЕ ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеПроизводством.ОбновитьПлановыеДатыПоступления(Объект, НовоеЗначение, ПредыдущееЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеРучногоРазмещения()
	
	ЗаполнитьГрафикПроизводства();
	
	Объект.ЗанятостьВидовРабочихЦентров.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСохранитьГрафикПроизводства(ТекущийОбъект)
	
	Если Не ПланируетсяГрафикПроизводства ИЛИ Не Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ГрафикПроизводства", ГрафикПроизводства);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагЗаполненоАвтоматически(ТекущийОбъект)
	
	Если Модифицированность Тогда
		Значение = Ложь;
	Иначе
		Значение = ТекущийОбъект.ЗаполненоАвтоматически;
	КонецЕсли;
	
	ТекущийОбъект.УстановитьФлагЗаполненоАвтоматически(Значение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиРазмещенияЭтапаВГрафике(Отказ)
	
	Если Не ПланируетсяГрафикПроизводства ИЛИ Не Объект.РучноеРазмещениеВГрафике Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКДанным = "СпособПланирования";
	
	УправлениеПроизводствомКлиентСервер.ПроверитьРазмещениеЭтапаВГрафике(
		ГрафикПроизводства, 
		Объект.Ссылка, 
		ПутьКДанным, 
		Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПланирования

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПланирования(Форма)
	
	Если НЕ Форма.ПланируетсяГрафикПроизводства Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		
		Возврат СпособПланированияВручную();
		
	ИначеЕсли Объект.ПланироватьРаботуВидовРабочихЦентров 
				И ДоступноПланированиеПоПроизводственнымРесурсам(Форма) Тогда
		
		Возврат СпособПланированияПоДоступности();
		
	Иначе
		
		Возврат СпособПланированияПоОбщейДлительности();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСпособаПланирования(ДанныеЗаполнения = Неопределено)
	
	Объект.ПланироватьРаботуВидовРабочихЦентров = (СпособПланирования = СпособПланированияПоДоступности());
	Объект.РучноеРазмещениеВГрафике = (СпособПланирования = СпособПланированияВручную());
	
	Если Объект.РучноеРазмещениеВГрафике Тогда
		Объект.ПланироватьНеРанее = Неопределено;
		НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
			Объект.ПланироватьНеРанее,
			ФорматДатыГрафика);
		ОтметкаПланироватьНеРанее = Ложь;
		ЗаполнитьДанныеРучногоРазмещения(ДанныеЗаполнения);
	Иначе
		ОчиститьДанныеРучногоРазмещения();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПланирования, ГрафикПроизводства");
	
КонецПроцедуры

#КонецОбласти

#Область СпособыПроизводства

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСпособПроизводства(Форма)
	
	Если Форма.Объект.ПроизводствоНаСтороне Тогда
		
		Возврат СпособПроизводстваНаСтороне();
		
	Иначе
		
		Возврат СпособПроизводстваСобственное();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеСпособаПроизводстваНаСервере()
	
	Объект.ПроизводствоНаСтороне = (СпособПроизводства = СпособПроизводстваНаСтороне());
	
	Если Объект.ПроизводствоНаСтороне Тогда
		ПриВыбореСпособаПроизводствоНаСтороне();
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер("ВыходныеИзделия,ПобочныеИзделия", Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "СпособПроизводства");
	
	УстановитьВидимостьКомандВводаНаОсновании();

КонецПроцедуры

#КонецОбласти

#Область ПроизводствоНаСтороне

&НаСервере
Процедура ЗаполнитьРеквизитыЗаказаПереработчика()
	
	СозданЗаказПереработчику = Объект.ПроизводствоНаСтороне И Не Объект.ЗаказПереработчику.Пустая();
	
	Если СозданЗаказПереработчику Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ЗаказПереработчику, "Номер,Дата,Проведен");
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура(РеквизитыЗаказа);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		РеквизитыЗаказаПереработчика = Новый ФиксированнаяСтруктура;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбъектИСоздатьЗаказПереработчику(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется")
		ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован") Тогда
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");
	КонецЕсли;
	
	Если Записать() Тогда
		СоздатьЗаказПереработчику();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказПереработчику()

	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.ЗаказПереработчику.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

// Изменяет данные этапа которые не доступны при переработке на стороне
//
&НаСервере
Процедура ПриВыбореСпособаПроизводствоНаСтороне()

	Объект.ПланироватьРаботуВидовРабочихЦентров = Ложь;
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВыходныеИзделия");
	СписокТЧ.Добавить("ПобочныеИзделия");
	Для каждого ИмяТЧ Из СписокТЧ Цикл
		Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
			ДанныеСтроки.Произведено = Ложь;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область ОтметкаВыполнения

&НаСервере
Процедура ОбработатьНачалоВыполненияЭтапа(ИзмененныеРеквизиты = "")
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				НачатоВыполнениеЭтапа, 
				Объект.ФактическоеНачалоЭтапа);

	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"НачатоВыполнениеЭтапа");

	Если НЕ НачатоВыполнениеЭтапа
		И ЗначениеЗаполнено(Объект.ФактическоеОкончаниеЭтапа) Тогда
		
		ЗавершеноВыполнениеЭтапа = Ложь;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					ЗавершеноВыполнениеЭтапа, 
					Объект.ФактическоеОкончаниеЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"ЗавершеноВыполнениеЭтапа");
		
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗавершениеВыполненияЭтапа(ИзмененныеРеквизиты = "")
	
	УправлениеПроизводством.УстановитьДатуПоОтметке(
				ЗавершеноВыполнениеЭтапа, 
				Объект.ФактическоеОкончаниеЭтапа,
				,
				Истина);
	
	ДобавитьВСписокИзмененныхРеквизитов(
				ИзмененныеРеквизиты, 
				"ЗавершеноВыполнениеЭтапа");
	
	Если ЗавершеноВыполнениеЭтапа И НЕ НачатоВыполнениеЭтапа Тогда
		
		НачатоВыполнениеЭтапа = Истина;
		
		УправлениеПроизводством.УстановитьДатуПоОтметке(
					НачатоВыполнениеЭтапа, 
					Объект.ФактическоеНачалоЭтапа);
		
		ДобавитьВСписокИзмененныхРеквизитов(
					ИзмененныеРеквизиты, 
					"НачатоВыполнениеЭтапа");
	
	КонецЕсли;
	
	ОбработатьИзменениеОтметкиВыполнения(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеДатыВыполненияЭтапа()
	
	ДатаСобытияДоИзменения = ДатаСобытияЗавершение;
	ДатаСобытияЗавершение = НачалоДня(Объект.ФактическоеОкончаниеЭтапа);
	
	Если Объект.ПроизводствоОднойДатой Тогда
		
		Если Объект.ДатаПроизводства = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаПроизводства, ДатаСобытияЗавершение, Истина);
			
			ДатаПроизводстваПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИменаТаблиц = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
		
		Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
			
			ИзменитьДатуВТЧ(
				ИмяТаблицы,
				"ДатаПроизводства",
				ДатаСобытияЗавершение,
				ДатаСобытияДоИзменения,
				Истина,
				"Произведено");
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РасходОднойДатой Тогда
		
		Если Объект.ДатаРасхода = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаРасхода, ДатаСобытияЗавершение, Истина);
			
			ДатаРасходаПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИзменитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода",  ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		ИзменитьДатуВТЧ("ЭкономияМатериалов",      "ДатаОперации", ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		ИзменитьДатуВТЧ("ЭкономияМатериаловСерии", "ДатаОперации", ДатаСобытияЗавершение, ДатаСобытияДоИзменения);
		
	КонецЕсли;
	
	Если Объект.ВыполнениеРаботОднойДатой Тогда
		
		Если Объект.ДатаВыполненияРабот = ДатаСобытияДоИзменения Тогда
			
			УправлениеПроизводством.УстановитьДатуПоОтметке(
				Истина,
				Объект.ДатаВыполненияРабот, ДатаСобытияЗавершение, Истина);
			
			ДатаВыполненияРаботПриИзмененииНаСервере();
			
		КонецЕсли;
		
	Иначе
		
		ИзменитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", ДатаСобытияЗавершение, ДатаСобытияДоИзменения, Истина, "Выполнено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеОтметкиВыполнения(СписокРеквизитов = "")
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииОтметкиВыполнения(
		Объект,
		ДанныеЗаполнения);
	
	ДобавитьВСписокИзмененныхРеквизитов(
		СписокРеквизитов,
		ИзмененныеРеквизиты);
	
	Если ТекущийСтатус <> Объект.Статус Тогда
		
		ПослеИзмененияСтатусаНаСервере(СписокРеквизитов);
		
	Иначе
		
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, СписокРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеСтатусаНаСервере()
	
	ДанныеЗаполнения = ДанныеЗаполненияПриИзмененииСтатуса();
	
	ИзмененныеРеквизиты = УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		Объект, 
		ТекущийСтатус, 
		ДанныеЗаполнения);
	
	ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтатусаНаСервере(ИзмененныеРеквизиты = "")

	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	
	УстановитьВидимостьЭлементовСерий();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИзмененныеРеквизиты);

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИзмененныеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область Состояние

&НаСервере
Процедура ЗаполнитьСостояниеВыполненияОпераций()
	
	НачатоВыполнениеОпераций = Ложь;
	
	Если ИспользоватьПооперационноеУправление
		И Не Объект.МаршрутнаяКарта.Пустая()
		И Не Объект.ПроизводствоНаСтороне Тогда
	
		ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(ЭтаФорма);
		Если ПроверяемыеСтатусы.Найти(Объект.Статус) <> Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК Операции
			|ГДЕ
			|	Операции.Этап = &Этап
			|	И Операции.Проведен
			|");
			Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
			
			УстановитьПривилегированныйРежим(Истина);
			
			НачатоВыполнениеОпераций = НЕ Запрос.Выполнить().Пустой();
			
			УстановитьПривилегированныйРежим(Ложь);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоВидовРабочихЦентров(Форма)
	
	Форма.ВидыРабочихЦентровКоличество = Форма.ВидыРабочихЦентров.ПолучитьЭлементы().Количество();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступноПланированиеПоПроизводственнымРесурсам(Форма)
	
	Возврат Форма.ИспользуетсяПланированиеПоПроизводственнымРесурсам
			И НЕ Форма.Объект.ПроизводствоНаСтороне;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафика()
	
	Если НЕ ПланируетсяГрафикПроизводства Тогда
		Возврат;
	КонецЕсли;
	
	ИмяОткрываемойФормы = "Документ.ЭтапПроизводства2_2.Форма.РучноеРазмещениеВГрафике";
	
	ПараметрыФормы = ПараметрыФормыРучногоРазмещенияЭтапаВГрафике();
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
				"ОткрытьФормуРучногоРедактированияГрафикаЗавершение", 
				ЭтотОбъект);
	
	ОткрытьФорму(
			ИмяОткрываемойФормы, 
			ПараметрыФормы, 
			ЭтаФорма,,,, 
			ОписаниеОповещения, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРучногоРедактированияГрафикаЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено
		И РезультатЗакрытия.РучноеРазмещениеВГрафике Тогда
		
		СпособПланирования = СпособПланированияВручную(); 
		
		ОбработатьИзменениеСпособаПланирования(РезультатЗакрытия);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обеспечение

&НаКлиенте
Процедура ОбеспечениеМатериаламиИРаботамиВыборВариантОбеспечения(ТекущиеДанные)

	Если ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения Тогда
			
			ПараметрыФормы = ПараметрыФормыЗапросаКоличестваИСерий();
			
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму(
				"Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличестваИСерий",
				ПараметрыФормы,
				ЭтаФорма,
				,
				,
				,
				Новый ОписаниеОповещения("ОбработатьВыборВариантаОбеспечения", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
			
	Иначе

		ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
										"ОбеспечениеМатериаламиИРаботами", 
										НСтр("ru = 'Обеспечение';
											|en = 'Supply'"));
		
		ПараметрыПроверки.Поля.Вставить("Склад", "Объект.ОбеспечениеМатериаламиИРаботами[%1].Склад");
		ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Обеспечение материалами и работами""';
														|en = 'The Warehouse column is not filled in line %1 of the ""Supply with materials and works"" list'"));
			
		ПараметрыПроверки.Поля.Удалить("Подразделение");
		
		НетОшибок = ОбеспечениеКлиент.ПроверитьЗаполнение(
						Объект, 
						Объект.ОбеспечениеМатериаламиИРаботами, 
						Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, 
						ПараметрыПроверки);
			
		Если НетОшибок Тогда
			
			ПараметрыФормы = ПараметрыВыбораОбеспечения();
			Если ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
				ОткрытьФорму("Перечисление.ВариантыОбеспечения.Форма.ВыборВариантаОбеспечения", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
			Иначе
				Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
								ПараметрыФормы, 
								"ОбеспечениеМатериаламиИРаботами",
								НСтр("ru = 'Обеспечение';
									|en = 'Supply'"));
								ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВариантОбеспечения(ВыбранноеЗначение)

	Для Каждого Элемент Из ВыбранноеЗначение Цикл
		Элемент.Вставить("Идентификатор", Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока);
	КонецЦикла;
	
	ИсходныйСтатус = Объект.Статус;
	
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
							Объект, 
							ЭтаФорма, 
							"СтрокаТовары", 
							ВыбранноеЗначение,
							ПараметрыРедактированияЭтапа,
							ПараметрыУказанияСерий);
							
	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеЭтапа(ВыбранноеЗначение)

	ТаблицаОбеспечения = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресВХранилище);
	
	ИсходныйСтатус = Объект.Статус;
	
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
							Объект, 
							ЭтаФорма, 
							"Заказ", 
							ТаблицаОбеспечения,
							ПараметрыРедактированияЭтапа,
							ПараметрыУказанияСерий);

	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат ТекстОповещения;

КонецФункции

&НаСервере
Функция ЗаполнитьОбеспечениеВУстановленномПорядке(ВыбранноеЗначение)
	
	ОбъектОбеспечения = Объект;
	ОбеспечениеПроизводства.ЗаполнитьНазначениеОбеспеченияЭтапа(Объект, ПараметрыРедактированияЭтапа);
	
	ПутиКДанным = ОбеспечениеПроизводства.ПутиКДанным();
	ПутиКДанным.Вставить("Назначение", "НазначениеОбеспечения");
	
	ПараметрыЗаполнения = Новый Структура("ПереченьВариантов, ИзменятьОбособление, ЗаполнятьЦелымиУпаковками", Неопределено, Истина, Ложь);
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, ВыбранноеЗначение);
	
	ПараметрыДокумента = Новый Структура;
	ПараметрыДокумента.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыМатериаловВПроизводство);
	ПараметрыДокумента.Вставить("ПутиКДанным", ПутиКДанным);
	ПараметрыДокумента.Вставить("СтатусКВыполнению", Объект.Статус <> СтатусФормируется() И Объект.Статус <> СтатусСформирован());
	
	ВыделенныеСтроки = Элементы.ОбеспечениеМатериаламиИРаботами.ВыделенныеСтроки;
	Таблица = ОбеспечениеСервер.ТаблицаЗаполнениеОбеспечения(
		ВыделенныеСтроки,
		ОбъектОбеспечения,
		Объект.ОбеспечениеМатериаламиИРаботами,
		ПараметрыЗаполнения,
		ПараметрыДокумента);
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		Возврат Новый Структура(
			"Ошибки",
			ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
				Таблица, "ОбеспечениеМатериаламиИРаботами", НСтр("ru = 'Обеспечение';
																|en = 'Supply'")));
	КонецЕсли;
	
	ИсходныйСтатус = Объект.Статус;
	
	// Перенос результатов в документ.
	ТекстОповещения = Документы.ЭтапПроизводства2_2.ЗаполнитьВариантОбеспечения(
		Объект, ЭтаФорма, "СтрокиТовары", Таблица, ПараметрыРедактированияЭтапа, ПараметрыУказанияСерий);
	
	Если ИсходныйСтатус <> Объект.Статус Тогда
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	Возврат Новый Структура("Ошибки, Оповещение", Неопределено, ТекстОповещения);
	
КонецФункции

&НаСервере
Функция ПараметрыВыбораОбеспечения()
	
	ОбъектОбеспечения = Объект;
	ОбеспечениеПроизводства.ЗаполнитьНазначениеОбеспеченияЭтапа(Объект, ПараметрыРедактированияЭтапа);
	
	ПутиКДанным = ОбеспечениеПроизводства.ПутиКДанным();
	ПутиКДанным.Вставить("Назначение", "НазначениеОбеспечения");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("МенеджерРегистра", РегистрыНакопления.ЗаказыМатериаловВПроизводство);
	Результат = ОбеспечениеПроизводства.ПараметрыВыбораОбеспеченияЭтапа(
		Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока,
		ОбъектОбеспечения,
		Объект.ОбеспечениеМатериаламиИРаботами,
		ПутиКДанным,
		ПараметрыЗаполнения);
	ОбеспечениеСервер.ДобавитьСвойствоАдресТаблицыПодобраноРанее(Результат, УникальныйИдентификатор);
	
	ЗаполнитьСписокВыбораВариантовОбеспечения(Результат, ОтражениеВыполненного);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура Обеспечение_ЗаполнитьПоСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьОбеспечениеПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбеспечениеПоСпецификацииНаСервере()
	
	Объект.ОбеспечениеМатериаламиИРаботами.Очистить();
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации("МатериалыИУслуги", Ложь);
	Если ДанныеСпецификации = Неопределено
		ИЛИ НЕ ДанныеСпецификации.Свойство("МатериалыИУслуги") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого Строка Из ДанныеСпецификации.МатериалыИУслуги Цикл
		
		НоваяСтрока = Объект.ОбеспечениеМатериаламиИРаботами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
			Объект, 
			НоваяСтрока, 
			ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
			СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами",, СтруктураДействий);
	
	ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕстьУточненияМатериалов");
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНормативыПриИзмененииНаСервере(СписокТЧ = Неопределено)
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "ОбеспечениеМатериаламиИРаботами") > 0) Тогда
		
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами");
	КонецЕсли;
	
	Если (СписокТЧ = Неопределено ИЛИ Найти(СписокТЧ, "Трудозатраты") > 0) Тогда
		
		ЗаполнитьНормативы("Трудозатраты");
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПоказатьНормативы");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативы(ИмяТЧ, СтрокиЗаполнения = Неопределено)
	
	ТребуетсяЗаполнить = Ложь;
	
	Если СтрокиЗаполнения <> Неопределено Тогда
		МассивСтрок = СтрокиЗаполнения;
	Иначе
		МассивСтрок = Объект[ИмяТЧ];
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		И ПоказатьНормативыМатериалы Тогда
	
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("Номенклатура,Характеристика,ХарактеристикиИспользуются,Упаковка");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	ИначеЕсли ИмяТЧ = "Трудозатраты"
		И ПоказатьНормативыТрудозатраты Тогда
		
		МассивДанных = Новый Массив;
		Для каждого ТекущиеДанные Из МассивСтрок Цикл
			ДанныеСтроки = Новый Структура("ВидРабот");
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекущиеДанные);
			МассивДанных.Добавить(ДанныеСтроки);
		КонецЦикла;
		ТребуетсяЗаполнить = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяЗаполнить Тогда
		
		НормативыИзХранилища = ПолучитьНормативыИзВременногоХранилища();
		
		Нормативы = ПолучитьНормативыПриИзмененииСтрок(ИмяТЧ, МассивДанных, НормативыИзХранилища);
		Для Сч = 0 По МассивСтрок.Количество() - 1 Цикл
			МассивСтрок[Сч].Норматив = Нормативы[Сч];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНормативыИзВременногоХранилища()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаНормативы) Тогда
		
		Результат = ПолучитьИзВременногоХранилища(АдресХранилищаНормативы);
		Возврат Результат;
		
	КонецЕсли;
	
	Результат = Новый Структура();
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации("МатериалыИУслуги,Трудозатраты", Истина);
	
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги") Тогда
		Таблица = ДанныеСпецификации.МатериалыИУслуги.Скопировать(, "Номенклатура,Характеристика,Количество");
		Таблица.Свернуть("Номенклатура,Характеристика", "Количество");
		Результат.Вставить("ОбеспечениеМатериаламиИРаботами", Таблица);
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("Трудозатраты") Тогда
		Таблица = ДанныеСпецификации.Трудозатраты.Скопировать(, "ВидРабот,Количество");
		Таблица.Свернуть("ВидРабот", "Количество");
		Результат.Вставить("Трудозатраты", Таблица);
	КонецЕсли;
	
	АдресХранилищаНормативы = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормативыПриИзмененииСтрок(Знач ИмяТЧ, Знач МассивДанных, Знач АдресИлиНормативы)
	
	Если ЭтоАдресВременногоХранилища(АдресИлиНормативы) Тогда
		НормативыИзХранилища = ПолучитьИзВременногоХранилища(АдресИлиНормативы);
	Иначе
		НормативыИзХранилища = АдресИлиНормативы;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НормативыИзХранилища) И НормативыИзХранилища.Свойство(ИмяТЧ) Тогда
		Нормативы = НормативыИзХранилища[ИмяТЧ];
	Иначе
		Нормативы = Неопределено;
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура,Характеристика");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Истина);
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		СтруктураПоиска = Новый Структура("ВидРабот");
		
		Результат = УправлениеПроизводством.ПолучитьНормативы(
			Нормативы,
			МассивДанных,
			СтруктураПоиска,
			Ложь);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНормативыПоСпецификации(Знач ПереченьДанных, ПолучатьМатериалыПоТребованию)
	
	Нормативы = Документы.ЭтапПроизводства2_2.ПолучитьНормативыПоСпецификации(ДанныеПартииПроизводства,
																				ПереченьДанных,
																				ПолучатьМатериалыПоТребованию,
																				Новый Структура("Этап", Объект.Этап));
	Возврат Нормативы;
	
КонецФункции

&НаКлиенте
Функция ПараметрыФормыЗапросаКоличестваИСерий()
	
	ПараметрыПроверки = ОбеспечениеКлиентСервер.ИнициализироватьПараметрыПроверкиЗаполнения(
		"ОбеспечениеМатериаламиИРаботами", 
		НСтр("ru = 'Обеспечение';
			|en = 'Supply'"));
		
	ПараметрыПроверки.Поля.Вставить("Склад", "Объект.ОбеспечениеМатериаламиИРаботами[%1].Склад");
	ПараметрыПроверки.Тексты.Вставить("Склад", НСтр("ru = 'Не заполнена колонка ""Склад"" в строке %1 списка ""Обеспечение материалами и работами""';
													|en = 'The Warehouse column is not filled in line %1 of the ""Supply with materials and works"" list'"));
	
	Если Не ОбеспечениеКлиент.ПроверитьЗаполнение(
			Объект, Объект.ОбеспечениеМатериаламиИРаботами, Элементы.ОбеспечениеМатериаламиИРаботами.ТекущаяСтрока, ПараметрыПроверки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = ПараметрыВыбораОбеспечения();
	
	Если Не ТипЗнч(ПараметрыФормы) = Тип("Структура") Тогда
		Ошибки = ОбеспечениеКлиентСервер.ОшибкиКонтроляОтгрузкиИОбеспечения(
								ПараметрыФормы, 
								"ОбеспечениеМатериаламиИРаботами",
								НСтр("ru = 'Обеспечение';
									|en = 'Supply'"));
								ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ПодборТоваров", Ложь);
	ТекущаяСтрока = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	
	ПараметрыФормы.Вставить("Дата",                              Объект.Дата);
	ПараметрыФормы.Вставить("Склад",                             ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("Упаковка",                          ТекущаяСтрока.Упаковка);
	ПараметрыФормы.Вставить("Серия",                             ТекущаяСтрока.Серия);

	ПараметрыФормы.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	ПараметрыФормы.Вставить("Регистратор", Объект.Ссылка);
	
	// Остальные параметры получены при вызове ПараметрыВыбораОбеспечения()
	ПараметрыФормы.Вставить("Назначение",                        ПараметрыФормы.Отбор.Назначение);
	ПараметрыФормы.Вставить("Подразделение",                     ПараметрыФормы.Отбор.Подразделение);
	
	ПараметрыФормы.Вставить("Номенклатура",                      ПараметрыФормы.Отбор.Номенклатура);
	ПараметрыФормы.Вставить("Характеристика",                    ПараметрыФормы.Отбор.Характеристика);
	
	ПараметрыФормы.Вставить("ТипНоменклатуры",                   ПараметрыФормы.Отбор.ТипНоменклатуры);
	
	ПараметрыФормы.Вставить("СкладВТЧ",                          ПараметрыФормы.Отбор.Склад);
	ПараметрыФормы.Вставить("ВариантОбеспечения",                ПараметрыФормы.ТекущийВариант.ВариантОбеспечения);
	ПараметрыФормы.Вставить("Количество",                        ПараметрыФормы.ТекущийВариант.Количество);
	
	ЗаполнитьСписокВыбораВариантовОбеспечения(ПараметрыФормы, ОтражениеВыполненного);
	
	Возврат ПараметрыФормы
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеДляОбеспеченияЗаказа()

	РеквизитыЗаказа = Новый Структура("Ссылка, Статус, Дата");
	ЗаполнитьЗначенияСвойств(РеквизитыЗаказа, Объект);
	РеквизитыЗаказа.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОбеспечения);
	РеквизитыЗаказа.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	РеквизитыЗаказа.Вставить("Менеджер", Объект.Ответственный);
	
	// Описание особенностей формы - дату отгрузки работ необходимо брать из поля "Дата отгрузки".
	ПутиКДанным = ОбеспечениеПроизводства.ПутиКДанным();
	ПутиКДанным.Вставить("ДатаОтгрузки", "ДатаОтгрузки");
	
	ТаблицаТовары = ОбеспечениеСервер.СтрокиВТаблицу(Объект.ОбеспечениеМатериаламиИРаботами, Объект, ПутиКДанным);
	АдресТаблицыТовары = ПоместитьВоВременноеХранилище(ТаблицаТовары);

	ПараметрыЗаполнения = Новый Структура("СтатусКВыполнению, ИмяМенеджераРегистра",
		Объект.Статус <> СтатусФормируется() И Объект.Статус <> СтатусСформирован(), 
		"ЗаказыМатериаловВПроизводство");
	
	ПараметрыФормы = ОбеспечениеКлиентСервер.ПараметрыФормыСостояниеОбеспеченияЗаказов();
	ПараметрыФормы.ВызовИзФормыЗаказа          = Истина;
	ПараметрыФормы.РеквизитыЗаказа             = РеквизитыЗаказа;
	ПараметрыФормы.АдресТаблицыТовары          = АдресТаблицыТовары;
	ПараметрыФормы.ПараметрыВыполненияДействий = ПараметрыЗаполнения;

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ОбработатьВыборВариантаОбеспечения(СтруктураПодобранныеТовары, ДополнительныеПараметры) Экспорт 
	
	Если Не ЗначениеЗаполнено(СтруктураПодобранныеТовары) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбеспечениеКлиентСервер.ЗначенияРеквизитовДокументаДляВопросаОбОтгрузкеОднойДатой();
	ЗначенияРеквизитов.ДатаОтгрузки         = Объект.ДатаОтгрузки;
	ЗначенияРеквизитов.ЖелаемаяДатаОтгрузки = Объект.ЖелаемаяДатаОбеспечения;
	ЗначенияРеквизитов.НеОтгружатьЧастями   = Объект.НеОтгружатьЧастями;
	
	ОбеспечениеКлиент.ПоказатьВопросОбОтгрузкеОднойДатой(
		ЭтаФорма,
		ЗначенияРеквизитов,
		СтруктураПодобранныеТовары,
		"ЗаполнитьВариантОбеспеченияПослеВопроса",
		Объект.ОбеспечениеМатериаламиИРаботами.Количество() > 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВариантОбеспеченияПослеВопроса(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.НеОтгружатьЧастями = Ложь;
		Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
		Элементы.ОбеспечениеМатериаламиИРаботамиДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	КонецЕсли;
	
	Оповещение = ЗаполнитьВариантОбеспечения(ДополнительныеПараметры.ПодобранныеТовары);
	ПоказатьОповещениеПользователя(ОбеспечениеКлиентСервер.ТекстЗаполнениеОбеспечения(), , Оповещение);
		
КонецПроцедуры

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например, при вставке из
// буфера, при заполнении по спецификации. Процедура выполняет действия которые зависят от данных в строках.
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивИдентификаторовСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = Неопределено;
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			МассивСтрок.Добавить(Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла; 
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(ИмяТЧ, МассивСтрок);
		
	Иначе
		
		Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
				ИЛИ ИмяТЧ = "Трудозатраты") Тогда
			ЗаполнитьНормативы(ИмяТЧ, МассивСтрок);
		КонецЕсли;

	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		Если Объект.НеОтгружатьЧастями И Объект.ДатаОтгрузки <> '000101010000' Тогда
			Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
				ТекущиеДанные.ДатаОтгрузки = Объект.ДатаОтгрузки;
			КонецЦикла; 
		КонецЕсли; 
		
		СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
				ИспользоватьНесколькоСкладов, 
				СкладПоУмолчанию, 
				КоллекцияСтрок);
				
		ОбеспечениеКлиентСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
			
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
				ТекущиеДанные.ДатаРасхода = Объект.ДатаРасхода;
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		Для каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			Если НЕ ТекущиеДанные.СписатьНаРасходы Тогда
				СкладыКлиентСервер.ЗаполнитьСкладПоУмолчанию(
						ИспользоватьНесколькоСкладов, 
						СкладПоУмолчанию, 
						ТекущиеДанные,
						"Получатель");
			КонецЕсли;
			Если Объект.РасходОднойДатой И Объект.ДатаРасхода <> '000101010000' Тогда
				ТекущиеДанные.ДатаОперации = Объект.ДатаРасхода;
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Для Каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если Объект.ПроизводствоОднойДатой И Объект.ДатаПроизводства <> '000101010000' Тогда
				ТекущиеДанные.ДатаПроизводства = Объект.ДатаПроизводства;
			КонецЕсли;
			
			Если ОтражениеВыполненного Тогда
				ТекущиеДанные.Произведено = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		Для Каждого ТекущиеДанные Из КоллекцияСтрок Цикл
			
			Если ОтражениеВыполненного Тогда
				ТекущиеДанные.Выполнено = Истина;
			КонецЕсли;
			
			Если Объект.ВыполнениеРаботОднойДатой И Объект.ДатаВыполненияРабот <> '000101010000' Тогда
				ТекущиеДанные.ДатаВыполнения = Объект.ДатаВыполненияРабот;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
			ИЛИ ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "РасходМатериаловИРабот"
			ИЛИ ИмяТЧ = "ЭкономияМатериалов")
		И НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	КонецЕсли; 
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьЗапланированныеКОбеспечениюНаСервере()

	Элементы.Обеспечение_ПоказатьЗапланированныеКОбеспечению.Пометка = ПоказатьЗапланированныеКОбеспечению;
	
	Если ПоказатьЗапланированныеКОбеспечению Тогда
		Для каждого ТекущиеДанные Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			ТекущиеДанные.СкрытьСтроку = (ТекущиеДанные.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.НеТребуется);
		КонецЦикла;
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Новый ФиксированнаяСтруктура("СкрытьСтроку", Истина);
	Иначе
		Элементы.ОбеспечениеМатериаламиИРаботами.ОтборСтрок = Неопределено;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ИзменитьЖелаемуюДатуОбеспеченияЭтапаНаСервере(ЖелаемаяДата)
	
	УправлениеПроизводством.ИзменитьЖелаемуюДатуОбеспеченияЭтапа(
		Объект,
		ЖелаемаяДата);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЖелаемаяДатаОбеспечения");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.ОбеспечениеМатериаламиИРаботами, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		
		ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивВыделенныхСтрок);
		
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораВариантовОбеспечения(ПараметрыФормы, ОтражениеВыполненного)
	
	Если ОтражениеВыполненного Тогда
		
		ПараметрыФормы.Вставить("СписокВыбора", Новый СписокЗначений);
		ПараметрыФормы.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить"));
		ПараметрыФормы.СписокВыбора.Добавить(
			ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УточнениеНоменклатуры

&НаСервере
Процедура ПроверитьНаличиеУточненийНоменклатуры(ИмяТЧ, Реквизит)
	
	Реквизит = Ложь;
	
	НайденныеСтроки = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("ИспользуетсяАвтовыбор", Истина));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		Если (Строка.Номенклатура.Пустая() ИЛИ Строка.Характеристика.Пустая() И Строка.ХарактеристикиИспользуются) Тогда
			
			Реквизит = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РасходМатериаловИРабот

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьПоДаннымОбеспеченияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходМатериаловИРабот_ЗаполнитьДатуРасходаЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаРасхода = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспеченияНаСервере(Дополнить = Ложь)

	Документы.ЭтапПроизводства2_2.ЗаполнитьРасходМатериаловИРаботПоДаннымОбеспечения(Объект, Дополнить);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("РасходМатериаловИРабот");
	
КонецПроцедуры

&НаСервере
Процедура РасходОднойДатойПриИзмененииНаСервере()

	Если Объект.РасходОднойДатой Тогда
		Объект.ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.РасходМатериаловИРабот, "ДатаРасхода"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ЭкономияМатериалов, "ДатаОперации"));
		ДатаРасходаПриИзмененииНаСервере();
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "РасходОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаРасходаПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("РасходМатериаловИРабот",  "ДатаРасхода", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериалов",      "ДатаОперации", Объект.ДатаРасхода);
	ЗаполнитьДатуВТЧ("ЭкономияМатериаловСерии", "ДатаОперации", Объект.ДатаРасхода);
	
КонецПроцедуры

#КонецОбласти

#Область Экономия

&НаКлиенте
Процедура ЭкономияМатериаловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ЭкономияМатериаловСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма, "ЭкономияМатериалов", ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	СтатьяРасходовПриИзмененииСервер(Параметры.ИмяТЧ, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериалами()

	Если Объект.ЭкономияМатериалов.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Перезаполнить табличную часть?';
							|en = 'Refill the tabular section?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьНеизрасходованнымиМатериаламиЗавершение", ЭтотОбъект);
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Заполнить';
															|en = 'Fill in'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	Иначе
		ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНеизрасходованнымиМатериаламиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНеизрасходованнымиМатериаламиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНеизрасходованнымиМатериаламиНаСервере()
	
	Документы.ЭтапПроизводства2_2.ЗаполнитьНеизрасходованныеМатериалы(Объект);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ЭкономияМатериалов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьСтатьюРасходовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = ДополнительныеПараметры.Идентификаторы;
	
	Для каждого ИдентификаторСтроки Из Идентификаторы Цикл
		
		ДанныеСтроки = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеСтроки.СписатьНаРасходы Тогда
			ДанныеСтроки.СтатьяРасходов = РезультатЗакрытия.СтатьяРасходов;
			ДанныеСтроки.АналитикаРасходов = РезультатЗакрытия.АналитикаРасходов;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериалов_ЗаполнитьДатуЗавершение(ВыбраннаяДата, МассивВыделенныхСтрок) Экспорт

	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТаблицы = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТаблицы.ДатаОперации = ВыбраннаяДата;
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкономияМатериаловДействиеПриИзменении(СтрокаТабличнойЧасти)
	
	УправлениеПроизводствомКлиент.ЭкономияМатериаловЭтапаДействиеПриИзменении(
		СтрокаТабличнойЧасти,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
	СтатьяРасходовПриИзмененииСервер("ЭкономияМатериалов", КэшированныеЗначения)
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеИзделия

&НаСервере
Процедура ПроизводствоОднойДатойПриИзмененииНаСервере()

	Если Объект.ПроизводствоОднойДатой Тогда
		Объект.ДатаПроизводства = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ВыходныеИзделия, "ДатаПроизводства"), 
										Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(Объект.ПобочныеИзделия, "ДатаПроизводства"));
	КонецЕсли;
	ДатаПроизводстваПриИзмененииНаСервере();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ПроизводствоОднойДатой");
	
КонецПроцедуры

&НаСервере
Процедура ДатаПроизводстваПриИзмененииНаСервере()

	ЗаполнитьДатуВТЧ("ВыходныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ВыходныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделия",      "ДатаПроизводства", Объект.ДатаПроизводства);
	ЗаполнитьДатуВТЧ("ПобочныеИзделияСерии", "ДатаПроизводства", Объект.ДатаПроизводства);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущаяСтрока, СтруктураДействий)
	
	Если Объект.Статус = СтатусНачат() ИЛИ Объект.Статус = СтатусЗавершен() Тогда
		Если Объект.ПроизводствоОднойДатой Тогда
			ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства(Объект.ДатаПроизводства, Объект.ДатаПроизводства);
			СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
		Иначе
			ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства(ДатаСобытияЗавершение, ПлановаяДатаПоступления);
			СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
		КонецЕсли;
	Иначе
		ПараметрыДействия = УправлениеПроизводствомКлиентСервер.ПараметрыДействияЗаполнитьДатуПроизводства();
		СтруктураДействий.Вставить("ЗаполнитьДатуПроизводства", ПараметрыДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуПроизводстваВСтроке(ТекущаяСтрока)
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущаяСтрока, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен, Идентификаторы)
	
	СтрокиКОбработке = Новый Массив;
	
	Для каждого Идентификатор Из Идентификаторы Цикл
		ДанныеСтроки = Объект.ПобочныеИзделия.НайтиПоИдентификатору(Идентификатор);
		Если ДанныеСтроки.Произведено Тогда
			СтрокиКОбработке.Добавить(ДанныеСтроки);
		КонецЕсли;
		ДанныеСтроки.Цена  = 0;
		ДанныеСтроки.Сумма = 0;
	КонецЦикла;
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенПобочногоВыпуска(
		Объект.ВидЦены,
		Объект.Валюта,
		Объект.ФактическоеНачалоЭтапа);
	
	ЦеныЗаполнены = ПродажиСервер.ЗаполнитьЦены(
		Объект.ПобочныеИзделия, // Табличная часть
		СтрокиКОбработке, // Массив строк или структура отбора
		ПараметрыЗаполнения, // Параметры заполнения
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму",
			"КоличествоУпаковок"));
	
	Возврат ЦеныЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьВыделенныеСтроки(ИмяТЧ)
	
	Если Объект[ИмяТЧ].Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.';
													|en = 'Tabular section is not filled in.'"));
		Возврат;
	ИначеЕсли Элементы[ИмяТЧ].ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В табличной части отсутствуют выделенные строки.';
													|en = 'There are no selected lines in the tabular section.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", Элементы[ИмяТЧ].ВыделенныеСтроки);
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ОтменитьВыделенныеСтрокиВыборПричиныЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыделенныеСтрокиВыборПричиныЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыделенныеСтрокиНаСервере(ДополнительныеПараметры.ИмяТЧ, ДополнительныеПараметры.ВыделенныеСтроки, ПричинаОтмены);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены';
			|en = 'Selected lines are canceled'"),
		,
		,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыделенныеСтрокиНаСервере(ИмяТЧ, ВыделенныеСтроки, ПричинаОтмены)
	
	КэшируемыеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура;
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		Строка = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Строка.Отменено = Истина;
		Строка.ПричинаОтмены = ПричинаОтмены;
		
		Строка.Произведено = Ложь;
		
		ПараметрыПроверкиСерий = Новый Структура;
		ПараметрыПроверкиСерий.Вставить("Склад", Строка.Получатель);
		ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(Строка, СтруктураДействий, КэшируемыеЗначения);
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, ВыделенныеСтроки, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПоСпецификацииПриИзменении(ТекущиеДанные)
	
	Если Не ТекущиеДанные.ОбработатьПоСпецификации Тогда
		ТекущиеДанные.Спецификация = Неопределено;
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект.Дата,
		Объект.Подразделение,
		ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", ПараметрыЗаполнения);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтмененоПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.Произведено = Ложь;
	КонецЕсли;
	
	Если Не ТекущиеДанные.Отменено Тогда
		ТекущиеДанные.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьДействиеЗаполнитьДатуПроизводства(ТекущиеДанные, СтруктураДействий);
	
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", ТекущиеДанные.Получатель);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Изделия_ИзменитьКачествоОтменитьСтрокуЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	СтараяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	НоваяСтрока = Объект[ИмяТЧ].Вставить(Объект[ИмяТЧ].Индекс(СтараяСтрока) + 1);
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока,, "КодСтроки");
	
	ЗаполнитьЗначенияСвойств(СтараяСтрока, ЭтаФорма[ИмяТЧ + "КешТекущейСтроки"]);
	СтараяСтрока.Отменено = Истина;
	ОтмененоПриИзменении(ИмяТЧ, СтараяСтрока);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	МассивСтрок.Добавить(СтараяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок);
	
	Элементы[ИмяТЧ].ТекущаяСтрока  = НоваяСтрока.ПолучитьИдентификатор();
	
КонецПроцедуры

#КонецОбласти

#Область Трудозатраты

&НаКлиенте
Процедура Трудозатраты_ЗаполнитьПоСпецификацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТрудозатратыПоСпецификацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТрудозатратыПоСпецификацииНаСервере()
	
	Объект.Трудозатраты.Очистить();
	
	ДанныеСпецификации = ПолучитьНормативыПоСпецификации("Трудозатраты", Ложь);
	Если ДанныеСпецификации = Неопределено
		ИЛИ НЕ ДанныеСпецификации.Свойство("Трудозатраты") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(Объект.Трудозатраты, ДанныеСпецификации.Трудозатраты);
	ПослеИзмененияСтрокТЧПрограммноНаСервере("Трудозатраты");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Подразделение, Организация)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("Подразделение", Подразделение);
	ПараметрыВыбора.Вставить("Организация", Организация);
	
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.Исполнитель = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		
		ТекущиеДанные.Исполнитель = Результат;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнениеРаботОднойДатойПриИзмененииНаСервере()

	Если Объект.ВыполнениеРаботОднойДатой Тогда
		Объект.ДатаВыполненияРабот = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
									Объект.Трудозатраты, "ДатаВыполнения");
	КонецЕсли;
	ЗаполнитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", Объект.ДатаВыполненияРабот);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ВыполнениеРаботОднойДатой");

КонецПроцедуры

&НаСервере
Процедура ДатаВыполненияРаботПриИзмененииНаСервере()
	
	ЗаполнитьДатуВТЧ("Трудозатраты", "ДатаВыполнения", Объект.ДатаВыполненияРабот);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)

	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы[ИмяТЧ].ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоСтрокДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоСтрокДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	Перем СоставСтрок, ПараметрыОтбора;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок,СтатьяКалькуляции";
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СоставСтрок = "Номенклатура,Характеристика,Упаковка,КоличествоУпаковок";
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		СоставСтрок = "ВидРабот,Количество,СтатьяКалькуляции,Исполнитель";
	КонецЕсли;
	
	ПодборТоваров = СтрНайти("ВыходныеИзделия,ПобочныеИзделия,ОбеспечениеМатериаламиИРаботами,РасходМатериаловИРабот,ЭкономияМатериалов", ИмяТЧ) > 0;
	Если ПодборТоваров Тогда
		
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		Если ИмяТЧ <> "ЭкономияМатериалов" И НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
		
	КонецЕсли;
	
	СтрокиИзБуфера = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаИзБуфера Из СтрокиИзБуфера Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаИзБуфера, СоставСтрок);
		
		Если ПодборТоваров Тогда 
			
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
					ТекущаяСтрока,
					ИмяТЧ,
					ЭтаФорма,
					СтруктураДействий);
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
	
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандБуфераОбмена(Форма, ДоступностьРеквизитов)
	
	Форма.Элементы.ВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюВыходныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюПобочныеИзделия_ВставитьСтроки.Доступность = ДоступностьРеквизитов;

	Форма.Элементы.Обеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ОбеспечениеМатериаламиИРаботамиКонтекстноеМенюОбеспечение_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.РасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.РасходМатериаловИРаботКонтекстноеМенюРасходМатериаловИРабот_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.ЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.ЭкономияМатериаловКонтекстноеМенюЭкономияМатериалов_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
	Форма.Элементы.Трудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	Форма.Элементы.КонтекстноеМенюТрудозатраты_ВставитьСтроки.Доступность = ДоступностьРеквизитов;
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ОтметитьНаличиеАналогов(СтрокиЗаполнения = Неопределено)

	Если Не ПравоЧтенияАналогов Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма);
	УправлениеПроизводством.ОтметитьНаличиеАналогов(Объект.ОбеспечениеМатериаламиИРаботами, ПараметрыВыбораАналогов, СтрокиЗаполнения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборАналогов()
	
	ТекущиеДанные = Элементы.ОбеспечениеМатериаламиИРаботами.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Необходимо выбрать строку для которой есть аналоги';
										|en = 'Select the line with substitutes'"));
		Возврат;
	ИначеЕсли НЕ ТекущиеДанные.ЕстьАналогиМатериала Тогда
		ПоказатьПредупреждение(, Нстр("ru = 'Для выделенной строки аналоги не найдены';
										|en = 'Substitutes are not found for the selected line'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораАналогов = ПараметрыВыбораАналогов(ЭтаФорма, ТекущиеДанные);
	УправлениеПроизводствомКлиент.ОткрытьПодборАналогов(ПараметрыВыбораАналогов, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, ИмяТЧ = "ОбеспечениеМатериаламиИРаботами")
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Результат = УправлениеПроизводством.ВыполнитьЗаменуНаАналог(Объект[ИмяТЧ], АдресВХранилище);
	
	Если Результат.СписокОшибок <> Неопределено Тогда
		ТекущиеДанные = Объект.ОбеспечениеМатериаламиИРаботами.НайтиПоИдентификатору(ТекущаяСтрока);
		ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ТекущиеДанные.НомерСтроки, "ЕстьАналогиМатериала");
		Для каждого ТекстСообщения Из Результат.СписокОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКСтроке, "Объект");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого ДанныеСтроки Из Результат.СписокИзмененныхСтрок Цикл
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ДанныеСтроки,
				ИмяТЧ,
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ДанныеСтроки.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыВыбораАналогов(Форма, ТекущиеДанные = Неопределено)

	ПараметрыФормы = УправлениеПроизводствомКлиентСервер.ПараметрыВыбораАналогов();
	
	ПараметрыФормы.ИспользоватьПроизводство2_2 = Истина;
	ПараметрыФормы.ДатаОкончанияДействияРазрешений = НачалоДняТекущаяДатаСеанса();
	
	ПараметрыФормы.Подразделение = Форма.Объект.Подразделение;
	
	ПараметрыФормы.ЗаказНаПроизводство   = Форма.ДанныеПартииПроизводства.Распоряжение;
	ПараметрыФормы.Спецификация          = Форма.ДанныеПартииПроизводства.Спецификация;
	ПараметрыФормы.Изделие               = Форма.ДанныеПартииПроизводства.Номенклатура;
	ПараметрыФормы.ХарактеристикаИзделия = Форма.ДанныеПартииПроизводства.Характеристика;
	
	ПараметрыФормы.ЗаказКлиента = ПредопределенноеЗначение("Документ.ЗаказКлиента.ПустаяСсылка");
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы.КлючСвязиСпецификация = ТекущиеДанные.КлючСвязиСпецификация;
		ПараметрыФормы.Материал = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.ХарактеристикаМатериала = ТекущиеДанные.Характеристика;
		ПараметрыФормы.УпаковкаМатериала = ТекущиеДанные.Упаковка;
		ПараметрыФормы.КоличествоУпаковокМатериала = ТекущиеДанные.КоличествоУпаковок;
		ПараметрыФормы.КоличествоМатериала = ТекущиеДанные.Количество;
		ПараметрыФормы.ПоказатьДоступныеОстатки = (ТекущиеДанные.ВариантОбеспечения <> ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется"));
	КонецЕсли; 

	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ПоискПоШтрихкоду(ИмяТЧ)

	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ИмяТЧ);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныхШтрихкода, ИмяТЧ) Экспорт
	
	ОбработатьШтрихкоды(ДанныхШтрихкода, ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, ИмяТЧ)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	
	ЗаполнитьСтруктурыДействийДляОбработкиШтрихкодов(
			ИмяТЧ,
			ЭтаФорма,
			СтруктураДействийСДобавленнымиСтроками,
			СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ИмяТЧ                                  = ИмяТЧ;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ШтрихкодированиеНоменклатурыКлиент.НужноОткрытьФормуУказанияСерийПослеОбработкиШтрихкодов(СтруктураДействий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_" + ИмяТЧ, 0.1, Истина);
		
	КонецЕсли;
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		
		Элементы[ИмяТЧ].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
		
		МассивСтрок = ОбщегоНазначенияУТКлиентСервер.Массив(СтруктураДействий.ТекущаяСтрока);
		ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействийСДобавленнымиСтроками);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия, КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма, Объект, СтруктураПараметровДействия, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(ИмяТЧ)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, ИмяТЧ),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ИмяТЧ) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(Результат.ТаблицаТоваров, ИмяТЧ);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_РасходМатериаловИРабот()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.РасходМатериаловИРабот.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("РасходМатериаловИРабот",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьПодборСерийПриСканированииШтрихкодаНоменклатуры_ЭкономияМатериалов()

	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.ЭкономияМатериалов.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	ОткрытьПодборСерий("ЭкономияМатериалов",,ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(ИмяТЧ)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма, ИмяТЧ);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока,ИмяТЧ", ТекущаяСтрока, ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ДополнительныеПараметры.ИмяТЧ, ЭтаФорма, СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДополнительныеПараметры.ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ДополнительныеПараметры.ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ЭкономияМатериалов" Тогда
			ТекущаяСтрокаИдентификатор = ДополнительныеПараметры.ТекущаяСтрока.ПолучитьИдентификатор();
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
					ДополнительныеПараметры.ИмяТЧ, 
					ТекущаяСтрокаИдентификатор, 
					КэшированныеЗначения);
		КонецЕсли; 
		
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Константы

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоОбщейДлительности()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияПоДоступности()
	
	Возврат 1;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПланированияВручную()
	
	Возврат 2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваСобственное()
	
	Возврат 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпособПроизводстваНаСтороне()
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ЭтапПроизводства2_2));
	УстановитьВидимостьЭлементовСерий();
	
	ПараметрыРедактированияЭтапа = Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРедактированияЭтапа());
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(Объект));
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЭтапПроизводства2_2);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ОбеспечениеМатериаламиИРаботамиСпецификация, ПараметрыВыбораСпецификаций.ОбеспечениеМатериаламиИРаботами);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ВыходныеИзделияСпецификация, ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПобочныеИзделияСпецификация, ПараметрыВыбораСпецификаций.ВыходныеИзделия);
	
	АдресХранилищаНормативы = "";
	ДанныеПартииПроизводства = Документы.ЭтапПроизводства2_2.ДанныеПартииПроизводства(Объект.Распоряжение, Объект.НазначениеПродукция, Объект.ПартияПроизводства);
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	
	ИспользоватьСписаниеНаРасходы = (ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
										ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")
									) И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;

	ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения = ПолучитьФункциональнуюОпцию("ИспользоватьРасширеннуюФормуПодбораКоличестваИВариантовОбеспечения");
	НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки = Константы.НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки.Получить();
	
	ВалютаДокумента = Объект.Валюта;
	
	ЦветОсобогоТекста = ЦветаСтиля.ЦветОсобогоТекста;
	
	ПравоДобавленияЗаказаПереработчику = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказПереработчику);
	ПравоПросмотраЗаказаПереработчику  = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПереработчику);
	ПравоЧтенияАналогов = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.АналогиВПроизводстве);
	ПравоРедактированияГрафикаПроизводства = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ГрафикЭтаповПроизводства2_2);
	
	ОсновнаяЕдиницаВремениБуфера = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениБуфера();
	ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ = Справочники.ЭтапыПроизводства.ОсновнаяЕдиницаВремениДлительностиЭтапаУББВ();
	
	СписокРаспоряжений = Новый Массив;
	СписокРаспоряжений.Добавить(Объект.Распоряжение);
	УправлениеПроизводством.ОбновитьПризнакТребуетсяЗаполнитьПолеЭтапПотребитель(ЭтаФорма, СписокРаспоряжений);
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	ЗаполнитьРеквизитыПоПодразделению();
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ВыходныеИзделия");
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ПобочныеИзделия");
	
	ЗаполнитьГрафикПроизводства();
	ЗаполнитьСостояниеВыполненияОпераций();
	ЗаполнитьРеквизитыЗаказаПереработчика();
	
	ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
	ПроверитьНаличиеУточненийНоменклатуры("ПобочныеИзделия", ЕстьУточненияПобочныхИзделий);
	
	НастроитьЭлементыФормы();
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПоПодразделению(Инициализация = Истина)
	
	ПараметрыПодразделения = ПроизводствоСервер.ПараметрыПроизводственногоПодразделения(Объект.Подразделение);
	
	ЗаполнитьЗначенияСвойств(
		ЭтаФорма,
		ПараметрыПодразделения,
		"ИспользоватьПооперационноеУправление,
		|ИспользоватьПооперационноеПланирование,
		|ИспользоватьБригадныеНаряды,
		|ИспользоватьСменныеЗадания");
	
	ИнтервалПланирования = ПараметрыПодразделения.ИнтервалПланирования;
	
	Если НЕ Инициализация Тогда
		
		УправлениеДаннымиОбИзделиях.СохранитьВидыРабочихЦентров(
					ВидыРабочихЦентров, 
					Объект.ПланироватьРаботуВидовРабочихЦентров,
					Объект.ВидыРабочихЦентров,
					Объект.АльтернативныеВидыРабочихЦентров);
		
		УправлениеДаннымиОбИзделиях.ПроверитьСоответствиеРеквизитовПодразделению(Объект, "ВидыРабочихЦентров");
		
	КонецЕсли; 
	
	ЗаполнитьВидыРабочихЦентров();
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияПредварительногоБуфера.СписокВыбора);
			
	УправлениеДаннымиОбИзделиях.ЗаполнитьВыборЕдиницыИзмеренияБуфера(
			ИнтервалПланирования, 
			Элементы.ЕдиницаИзмеренияЗавершающегоБуфера.СписокВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()

	ТекущийСтатус = Объект.Статус;
	
	СпособПроизводства = ПолучитьСпособПроизводства(ЭтаФорма);
	СпособПланирования = ПолучитьСпособПланирования(ЭтаФорма);
	
	ОтметкаПланироватьНеРанее = ЗначениеЗаполнено(Объект.ПланироватьНеРанее);
	НадписьПланироватьНеРанее = ФорматированнаяСтрокаПланироватьНеРанее(
		Объект.ПланироватьНеРанее,
		ФорматДатыГрафика);
	
	НачатоВыполнениеЭтапа = (ТекущийСтатус = СтатусНачат())
		ИЛИ (ТекущийСтатус = СтатусЗавершен());
	ЗавершеноВыполнениеЭтапа = (ТекущийСтатус = СтатусЗавершен());
	
	Если ЗавершеноВыполнениеЭтапа Тогда
		ДатаСобытияЗавершение = НачалоДня(Объект.ФактическоеОкончаниеЭтапа);
	Иначе
		ДатаСобытияЗавершение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей(СписокТЧ = "", СтрокиЗаполнения = Неопределено)
	
	СтруктураТЧ = Новый Структура(СписокТЧ);
	ВсеТЧ = (СтруктураТЧ.Количество() = 0);
	
	Если СтруктураТЧ.Свойство("ВыходныеИзделия") ИЛИ ВсеТЧ Тогда
		ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ВыходныеИзделия, СтрокиЗаполнения);
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("ПобочныеИзделия") ИЛИ ВсеТЧ Тогда
		ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(Объект.ПобочныеИзделия, СтрокиЗаполнения);
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("РасходМатериаловИРабот") ИЛИ ВсеТЧ Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.РасходМатериаловИРабот,
			СтруктураДействий,
			СтрокиЗаполнения);
			
	КонецЕсли; 
	
	Если СтруктураТЧ.Свойство("ЭкономияМатериалов") ИЛИ ВсеТЧ Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
			Объект.ЭкономияМатериалов,
			СтруктураДействий,
			СтрокиЗаполнения);
			
		КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, Объект.ЭкономияМатериалов);
		Для каждого ДанныеСтроки Из КоллекцияСтрок Цикл
			ДанныеСтроки.Действия = ?(ДанныеСтроки.СписатьНаРасходы, 
										Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию, 
										Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства);
		КонецЦикла;
		
		УправлениеПроизводством.ЗаполнитьПризнакЦеховаяКладовая(Объект.ЭкономияМатериалов, "Получатель", СтрокиЗаполнения);
		
		ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ЭкономияМатериалов);
		ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ЭкономияМатериалов);
		РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.ЭкономияМатериалов);
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("ОбеспечениеМатериаламиИРаботами") ИЛИ ВсеТЧ Тогда
		
		УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыОбеспеченияЭтапаПроизводства(
			Объект.ОбеспечениеМатериаламиИРаботами, СтрокиЗаполнения);
		
		ЗаполнитьНормативы("ОбеспечениеМатериаламиИРаботами", СтрокиЗаполнения);
		
		ПараметрыЗаполнения = Новый Структура("ЕстьРаботы, ЕстьОтменено", Истина, Ложь);
		ОбеспечениеСервер.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ПараметрыЗаполнения, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
		
		ОтметитьНаличиеАналогов(СтрокиЗаполнения);
		
	КонецЕсли;
	
	Если СтруктураТЧ.Свойство("Трудозатраты") ИЛИ ВсеТЧ Тогда
		
		ЗаполнитьНормативы("Трудозатраты", СтрокиЗаполнения);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВыходныхИзделий(ТабличнаяЧасть, СтрокиЗаполнения)
	
	УправлениеПроизводством.ЗаполнитьСлужебныеРеквизитыВыходныхИзделийЭтапаПроизводства(ТабличнаяЧасть, СтрокиЗаполнения);
	
	КоллекцияСтрок = ?(СтрокиЗаполнения <> Неопределено, СтрокиЗаполнения, ТабличнаяЧасть);
	УправлениеПроизводством.ЗаполнитьНаправлениеВыпускаВТЧ(КоллекцияСтрок);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(ТабличнаяЧасть);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(ТабличнаяЧасть);
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(ТабличнаяЧасть);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыРабочихЦентров()
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьВидыРабочихЦентров(
		Объект.ВидыРабочихЦентров,
		Объект.АльтернативныеВидыРабочихЦентров,
		ВидыРабочихЦентров,
		Ложь);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(Идентификатор)
	
	ДанныеСтроки = ВидыРабочихЦентров.НайтиПоИдентификатору(Идентификатор);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСлужебныеРеквизитыВСтрокеВидовРЦ(
				Неопределено, 
				Неопределено, 
				Истина, 
				ДанныеСтроки);
	
	УправлениеДаннымиОбИзделияхКлиентСервер.ОпределитьЕстьВРЦССинхроннойЗагрузкой(
		ВидыРабочихЦентров,
		ЕстьСинхроннаяЗагрузка);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьКомментарийКонвертации(Форма)
	
	ВидимостьЭлемента = НЕ ПустаяСтрока(Форма.Объект.КомментарийПриКонвертации);
	
	Если ВидимостьЭлемента Тогда
		
		Форма.ТекстКомментарийКонвертации = Новый ФорматированнаяСтрока(
			Лев(Форма.Объект.КомментарийПриКонвертации, 60),
			" (",
			Новый ФорматированнаяСтрока(НСтр("ru = 'далее...';
											|en = 'next...'"),,,, "#Далее"),
			")");
			
	КонецЕсли;
	
	Форма.Элементы.ГруппаКомментарийКонвертации.Видимость = ВидимостьЭлемента;
	
КонецПроцедуры

&НаСервере
Функция ФорматированнаяСтрокаНадписьСпецификация()
	
	МассивСтрок = Новый Массив();
	
	Если НЕ Объект.Спецификация.Пустая() Тогда
		СтрокаСпецификация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Спецификация, "Наименование");
	Иначе
		СтрокаСпецификация = "<" + НСтр("ru = 'нет спецификации';
										|en = 'no BOM'") + ">";
	КонецЕсли;

	ОсновноеИзделиеПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
																ДанныеПартииПроизводства.ОсновноеИзделиеНоменклатура,
																ДанныеПартииПроизводства.ОсновноеИзделиеХарактеристика);
	Если ЗначениеЗаполнено(ОсновноеИзделиеПредставление) Тогда
		СтрокаСпецификация = СтрокаСпецификация + ", " + ОсновноеИзделиеПредставление;
	КонецЕсли;
	
	Если СтрДлина(СтрокаСпецификация) > 71 Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Лев(СтрокаСпецификация, 68) + "...",,,,?(Объект.Спецификация.Пустая(),"","#ОткрытьСпецификацию")));
	Иначе
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрокаСпецификация,,,,?(Объект.Спецификация.Пустая(),"","#ОткрытьСпецификацию")));
	КонецЕсли;
	
	Если ПравоДоступа("Использование", Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства) Тогда
		МассивСтрок.Добавить("  ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'показать этапы';
																|en = 'show stages'"),,,, "#ПоказатьЭтапы"));
	КонецЕсли;

	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеЭтапа(ДанныеЭтапа)
	
	Возврат Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ДанныеЭтапа);
	
КонецФункции

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ВыпускПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ВыпускПодДеятельность,
		Объект.ВыпускПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Если Не ОтражениеВыполненного Тогда
			СтрокаТабличнойЧасти.Произведено = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		СтруктураДействий.Вставить("ПроверитьОтметитьНаличиеАналогов", ПараметрыВыбораАналогов(ЭтаФорма));
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Получатель;
	ИначеЕсли ИмяТЧ = "РасходМатериаловИРабот" Тогда
		СкладДляСерий = Объект.Подразделение;
	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СкладДляСерий = СтрокаТабличнойЧасти.Склад;
	КонецЕсли;
	ПараметрыПроверкиСерий = Новый Структура;
	ПараметрыПроверкиСерий.Вставить("Склад", СкладДляСерий);
	ПараметрыПроверкиСерий.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий[ИмяТЧ]);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
	ВариантОбеспечения = Неопределено;
	Если ОтражениеВыполненного Тогда
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			СтрокаТабличнойЧасти, 
			ИмяТЧ,
			ЭтаФорма,
			Объект,
			СтруктураДействий,
			ВариантОбеспечения);
			
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(СтрокаТабличнойЧасти, СтруктураДействий);
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий, "Получатель");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", ПараметрыЗаполненияЦенПобочногоВыпуска(ЭтаФорма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);

	ИначеЕсли ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		
		ОбеспечениеКлиент.ЗаполнитьСлужебныеРеквизиты(
				Объект.ОбеспечениеМатериаламиИРаботами, 
				ДатаОтгрузкиОбязательна, 
				СкладОбязателен);
		
	ИначеЕсли ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииХарактеристики(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		
		Если Не ОтражениеВыполненного Тогда
			СтрокаТабличнойЧасти.Произведено = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьКлючСвязиСпецификации");
		СтруктураДействий.Вставить("ПроверитьОтметитьНаличиеАналогов", ПараметрыВыбораАналогов(ЭтаФорма));
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", ПараметрыЗаполненияЦенПобочногоВыпуска(ЭтаФорма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
		ДобавитьДействиеЗаполнитьДатуПроизводства(СтрокаТабличнойЧасти, СтруктураДействий);
	КонецЕсли;
	
	Если ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(Объект.Подразделение, СтруктураДействий);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, ИмяТЧ));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ЭкономияМатериалов" Тогда
		
		УправлениеПроизводствомКлиент.ЭкономияМатериаловЗаполнитьПризнакОбособленно(СтрокаТабличнойЧасти, Объект.ОбеспечениеМатериаламиИРаботами);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(СтрокаТабличнойЧасти, ИмяТЧ)

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПолучателя(СтрокаТабличнойЧасти, ИмяТЧ)
	
	УправлениеПроизводствомКлиент.ПолучательПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	УправлениеПроизводствомКлиент.ВыходныеИзделияЭтапаНаправленияВыпускаПриИзменении(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма,
		Объект,
		КэшированныеЗначения);
	
	СтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения)
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпуска(СтрокаТабличнойЧасти, ИмяТЧ)
	
	СписокВыбораЭлемента = УправлениеПроизводствомКлиент.ЗаполнитьСписокВыбораНаправлениеВыпуска(
		СтрокаТабличнойЧасти,
		ИмяТЧ,
		ЭтаФорма);
	
	Если СписокВыбораЭлемента.НайтиПоЗначению(СтрокаТабличнойЧасти.НаправлениеВыпуска) = Неопределено Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = СписокВыбораЭлемента[0].Значение;
		ПриИзмененииНаправленияВыпуска(СтрокаТабличнойЧасти, ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения)
	
	СтрокаТабличнойЧасти = Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока);
	УправлениеПроизводством.СтатьяРасходовПриИзменении(СтрокаТабличнойЧасти, Объект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(ТипыНоменклатуры(ИмяТЧ));
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			Элементы[ИмяТЧ], 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение, ИмяТЧ)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ТекущаяСтрока, 
				ИмяТЧ, 
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	СтараяВалюта                = ВалютаДокумента;
	НоваяВалюта                 = Объект.Валюта;
	ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.ФактическоеНачалоЭтапа),
		Объект.ФактическоеНачалоЭтапа, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	// Пересчитаем цену
	Для Каждого ТекСтрока Из Объект.ПобочныеИзделия Цикл
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	КонецЦикла;
	
	// Пересчитаем сумму
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)

	Если Элементы[ИмяТЧ].ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыРазбиенияСтроки.Заголовок = НСтр("ru = 'Введите количество в новой строке';
													|en = 'Enter quantity in a new line'");
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	КонецЕсли;
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(Объект[ИмяТЧ], Элементы[ИмяТЧ], Оповещение, ПараметрыРазбиенияСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" 
		ИЛИ ИмяТЧ = "ПобочныеИзделия" 
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" 
		ИЛИ ИмяТЧ = "Трудозатраты" 
		ИЛИ ИмяТЧ = "ЭкономияМатериалов" Тогда
		НоваяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" 
		ИЛИ ИмяТЧ = "ПобочныеИзделия" 
		ИЛИ ИмяТЧ = "ОбеспечениеМатериаламиИРаботами"
		ИЛИ ИмяТЧ = "ЭкономияМатериалов"
		ИЛИ ИмяТЧ = "РасходМатериаловИРабот" Тогда
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураДействий.Вставить("ПересчитатьСумму");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущиеДанные, ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()

	ЗаполнитьСтатусыУказанияСерийСервер(, Истина);
	ЗаполнитьРеквизитыПоПодразделению(Ложь);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Подразделение");

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, ИмяТЧ, Форма, СтруктураДействий)
	
	Объект = Форма.Объект;

	Если НЕ СтруктураДействий.Свойство("ПроверитьСериюРассчитатьСтатус")
		И (ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" ИЛИ ИмяТЧ = "ЭкономияМатериалов") Тогда
		
		ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий");
		ПараметрыПроверкиСерий.ПараметрыУказанияСерий = Форма.ПараметрыУказанияСерий[ИмяТЧ];
		ПараметрыПроверкиСерий.Склад = ?(ТекущаяСтрока <> Неопределено, ТекущаяСтрока.Получатель, Неопределено);
		СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
		
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьЦенуПобочногоВыпуска", ПараметрыЗаполненияЦенПобочногоВыпуска(Форма));
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	ВариантОбеспечения = Неопределено;
	Если Форма.ОтражениеВыполненного
		И ИмяТЧ = "ОбеспечениеМатериаламиИРаботами" Тогда
		ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.Отгрузить");
	КонецЕсли;
	
	УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			ТекущаяСтрока, 
			ИмяТЧ, 
			Форма,
			Объект,
			СтруктураДействий,
			ВариантОбеспечения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтруктурыДействийДляОбработкиШтрихкодов(ИмяТЧ, Форма, СтруктураДействийСДобавленнымиСтроками, СтруктураДействийСИзмененнымиСтроками)
	
	// Действия для новых строки
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
			Неопределено,
			ИмяТЧ,
			Форма,
			СтруктураДействийСДобавленнымиСтроками);
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействийСДобавленнымиСтроками);
	
	// Действия для измененных строк
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействийСИзмененнымиСтроками);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВыпускающийЭтап(Форма)
	
	Возврат УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(Форма.Объект);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусФормируется()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Формируется");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусСформирован()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Сформирован");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусКВыполнению()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.КВыполнению");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНачат()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Начат");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗавершен()
	
	Возврат ПредопределенноеЗначение("Перечисление.СтатусыЭтаповПроизводства2_2.Завершен");

КонецФункции

&НаСервере
Процедура ЗаполнитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата);

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
		
		ДанныеСтроки[ПолеДата] = НоваяДата;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуВТЧ(Знач ИмяТЧ, Знач ПолеДата, Знач НоваяДата, Знач СтараяДата = Неопределено, Знач ТолькоОтмеченные = Ложь, Знач ПолеОтметка = Неопределено)

	Если НоваяДата = '000101010000' Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ДанныеСтроки Из Объект[ИмяТЧ] Цикл
		
		Если ТолькоОтмеченные И НЕ ДанныеСтроки[ПолеОтметка]
			ИЛИ СтараяДата <> Неопределено И СтараяДата <> ДанныеСтроки[ПолеДата] Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтроки[ПолеДата] = НоваяДата;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора", УправлениеПроизводствомКлиент.ПараметрыВыбораСтатьиРасходов());
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПриИзмененииСтатуса()
	
	Возврат УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(
		Объект, ПлановаяДатаПоступления);
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерии(ИмяТЧ, Элемент)

	НеобходимоОбновитьСтатусыСерий = НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Истина);
	
	Если НеобходимоОбновитьСтатусыСерий Тогда

		ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения); // серверный вызов

		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]);
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияСтрокТЧДляКоторойЕстьСерииНаСервере(ИмяТЧ, КэшированныеЗначения)

	ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ИмяТЧ, Неопределено, КэшированныеЗначения);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВСписокИзмененныхРеквизитов(ИзмененныеРеквизиты, Реквизиты)
	
	ИзмененныеРеквизиты = ИзмененныеРеквизиты + ?(ПустаяСтрока(Реквизиты),"", ",") + Реквизиты;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандВводаНаОсновании()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	
	ЕстьТоварыКОбособленномуОбеспечению = Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	ЕстьТоварыКСтороннемуОбособленномуОбеспечению = Ложь;
	
	Если Не ЕстьТоварыКОбособленномуОбеспечению Тогда
		
		Для Каждого Строка Из Объект.ОбеспечениеМатериаламиИРаботами Цикл
			Если Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.Обособленно
				И Не Строка.Назначение.Пустая()
				И Строка.Назначение <> НазначениеДокумента Тогда
				ЕстьТоварыКСтороннемуОбособленномуОбеспечению = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьТоварыКОбособленномуОбеспечению Тогда
		Ответ = "ЕстьТоварыКОбособленномуОбеспечению";
	ИначеЕсли ЕстьТоварыКСтороннемуОбособленномуОбеспечению Тогда
		Ответ = "ЕстьТоварыКСтороннемуОбособленномуОбеспечению";
	Иначе
		Ответ = "НетТоваровКОбособленномуОбеспечению";
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров';
							|en = 'Register goods marking'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана';
							|en = 'Goods marking is not created'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1';
										|en = 'Goods marking: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры 

//Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура ПоказатьВопросИЗаполнитьПоОперациям()
	
	Модифицированность = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьВопросИЗаполнитьПоОперациямЗавершение", ЭтотОбъект, Параметры);
	ТекстВопроса = НСтр("ru = 'Заполнить по производственным операциям?';
						|en = 'Fill in according to production operations?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросИЗаполнитьПоОперациямЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Истина;
		ЗаполнитьПоОперациямНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОперациямНаСервере()
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	ДокументОбъект.ЗаполнитьПоОперациям();
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты();
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров)
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураДополнительныхПараметров.ПроверятьОстатки =
		ДокументОбъект.Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется;
	
	СтруктураРезультата = ДокументОбъект.СкорректироватьСтрокиЗаказа(СтруктураДополнительныхПараметров);
	
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	Если СтруктураДополнительныхПараметров.ЗакрыватьЗаказы Тогда
		Объект.Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
		ОбработатьИзменениеСтатусаНаСервере();
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НачалоДняТекущаяДатаСеанса()
	
	#Если Сервер Тогда
	Возврат НачалоДня(ТекущаяДатаСеанса());
	#Иначе
	Возврат НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ВидыРабочихЦентровПересчитатьВремяРаботы(ТекущиеДанные)
	
	УправлениеДаннымиОбИзделияхКлиент.ВидыРабочихЦентровПересчитатьВремяРаботы(
		ТекущиеДанные,
		ВидыРабочихЦентров,
		Объект.ПорядокРаботыВидовРабочихЦентров,
		ЕстьСинхроннаяЗагрузка,
		Истина,
		Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НаименованиеЭтапаПриИзмененииНаСервере()
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "НаименованиеЭтапа");
	
	УстановитьУсловноеОформлениеЭкономияМатериаловНазначение();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьМатериалыДляПодбораПоСпецификацииВХранилище()
	
	Таблица = Объект.ОбеспечениеМатериаламиИРаботами.Выгрузить(, "Номенклатура,Характеристика, Количество");
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПодбораМатериаловПоСпецификации(АдресВХранилище)
	
	МассивСтрок = Новый Массив;
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого Строка Из ПолучитьИзВременногоХранилища(АдресВХранилище) Цикл
		
		НоваяСтрока = Объект.ОбеспечениеМатериаламиИРаботами.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		УправлениеПроизводствомКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьОбеспечениеВЭтапеПроизводства(
			Объект, 
			НоваяСтрока, 
			ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами,
			СтруктураДействий);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("ОбеспечениеМатериаламиИРаботами", МассивСтрок, СтруктураДействий);
	
	ПроверитьНаличиеУточненийНоменклатуры("ОбеспечениеМатериаламиИРаботами", ЕстьУточненияМатериалов);
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ЕстьУточненияМатериалов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматированнаяСтрокаПланироватьНеРанее(ПланироватьНеРанее, ФорматДатыГрафика)
	
	МассивСтрок = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПланироватьНеРанее) Тогда
		
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = '<указать>';
											|en = '<specify>'"),,,,"#РедактироватьЗначение"));
		
	Иначе
		
		Если ТипЗнч(ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
		
			Представление = Документы.ЭтапПроизводства2_2.ПредставлениеЭтапа(ПланироватьНеРанее);
			
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(Представление,,,,"#ОткрытьЭтапПланироватьНеРанее"));
		
		Иначе
		
			МассивСтрок.Добавить(Формат(ПланироватьНеРанее, ФорматДатыГрафика));
			
		КонецЕсли;
		
		МассивСтрок.Добавить("  ");
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'изменить';
											|en = 'change'"),,,,"#РедактироватьЗначение"));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыЗаполненияЦенПобочногоВыпуска(Форма)
	
	ПараметрыЗаполнения = УправлениеПроизводствомКлиентСервер.ПараметрыЗаполненияЦенПобочногоВыпуска(
		Форма.Объект.ВидЦены,
		Форма.Объект.Валюта,
		Форма.Объект.ФактическоеНачалоЭтапа);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСпособаРаспределенияЗатратНаВыходныеИзделия()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбора(ТекущиеДанные, ИмяТЧ)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапПотребительНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеПроизводствомКлиент.ОткрытьФормуВыбораЭтапаПотребителя(
		Объект,
		ТекущиеДанные,
		ЭтаФорма,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапПотребительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[Параметры.ИмяТЧ].НайтиПоИдентификатору(Параметры.ИдентификаторСтроки);
	Строка.ЭтапПотребитель = Результат;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоНоменклатуреКонструктор()
	
	Возврат Справочники.РесурсныеСпецификации.ДанныеПоНоменклатуреРасширенный();
	
КонецФункции

&НаКлиенте
Функция ТипыНоменклатуры(ИмяТЧ)
	
	Если ИмяТЧ = "ВыходныеИзделия" Или ИмяТЧ = "ПобочныеИзделия" Тогда
		
		МассивТиповНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТареРаботе(Ложь);
		
	Иначе	
		
		МассивТиповНоменклатуры = НоменклатураКлиентСервер.ОтборПоТоваруМногооборотнойТаре(Ложь);
		
		Если НЕ Объект.ПроизводствоНаСтороне Тогда
			МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат МассивТиповНоменклатуры;
	
КонецФункции	

#КонецОбласти

#Область Заполнение

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the costing item.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	СтруктураТиповЗатрат = Новый Структура;
	
	СтруктураТиповЗатрат.Вставить("ПобочныеИзделия",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы")
	);
	СтруктураТиповЗатрат.Вставить("ОбеспечениеМатериаламиИРаботами",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные")
	);
	СтруктураТиповЗатрат.Вставить("РасходМатериаловИРабот",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные")
	);
	СтруктураТиповЗатрат.Вставить("Трудозатраты",
		ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда")
	);
										   
	ПараметрыОтбора = Новый Структура;
	
	Если СтруктураТиповЗатрат.Свойство(ИмяТЧ) Тогда
		ПараметрыОтбора.Вставить("ТипЗатрат", СтруктураТиповЗатрат[ИмяТЧ]);	
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.СтатьяКалькуляции = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти
