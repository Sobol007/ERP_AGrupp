#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область СтатусДокумента

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	СтатусДоИзменения = Статус;
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЭтаповПроизводства2_2[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		ЗаказыСервер.СкорректироватьСтрокиЗаказа(ЭтотОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
	Статус = ЗначениеНовогоСтатуса;
	
	ДанныеЗаполнения = УправлениеПроизводством.ДанныеЗаполненияПриИзмененииСтатуса(ЭтотОбъект);
	
	УправлениеПроизводством.ЗаполнитьРеквизитыЭтапаПриИзмененииСтатуса(
		ЭтотОбъект, 
		СтатусДоИзменения, 
		ДанныеЗаполнения);
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Корректирует строки, по которым не была оформлено поступление или складские ордера или имеются расхождения по мерным товарам.
//
// Параметры:
// 		СтруктураПараметров - Структура - Структура параметров корректировки, конструктор: ЗаказыСервер.СтруктураКорректировкиСтрокЗаказа()
// 		ЗапретитьРазделениеСтрок - Булево - Взводится при корректировке объекта (форма этапа закрыта), в случае если установлен статус Завершен,
// 											т.к. в этом статусе строки с Произведено = Ложь будут удалены, и разделение не имеет смысла.
//
// Возвращаемое значение:
// 		Структура
// 		*	КоличествоСтрок - Количество отмененных/скорректированных строк
// 		*	СуммаОтклонения - Сумма увеличения заказа из-за превышения отгрузки мерных товаров.
//
Функция СкорректироватьСтрокиЗаказа(СтруктураПараметров) Экспорт
	
	Если Не СтруктураПараметров.ОтменитьНеотработанныеСтроки И Не СтруктураПараметров.СкорректироватьМерныеТовары Тогда
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(Неопределено)
	КонецЕсли;
	
	КоличествоСкорректированныхСтрок = 0;
	
	Если Не СтруктураПараметров.ПроверятьОстатки Тогда
		
		КоличествоСкорректированныхСтрок = КоличествоСкорректированныхСтрок + ОбеспечениеМатериаламиИРаботами.Количество();
		ОбеспечениеМатериаламиИРаботами.Очистить();
		
		Возврат ЗаказыСервер.РезультатОтменыНеотработанныхСтрок(КоличествоСкорректированныхСтрок);
	КонецЕсли;
	
	ПараметрыЗаполнения = ЗаказыСервер.ПараметрыЗаполненияДляОтменыСтрок();
	ПараметрыЗаполнения.МенеджерРегистра  = РегистрыНакопления.ЗаказыМатериаловВПроизводство;
	ПараметрыЗаполнения.ИмяТабличнойЧасти = "ОбеспечениеМатериаламиИРаботами";
	
	ПараметрыОтмены = ЗаказыСервер.ПараметрыОтменыСтрокЗаказов();
	ПараметрыОтмены.УдалятьСтроки = Истина;
	ПараметрыОтмены.ОтменятьТолькоМерныеТовары = НЕ СтруктураПараметров.ОтменитьНеотработанныеСтроки
		И СтруктураПараметров.СкорректироватьМерныеТовары;
	ПараметрыОтмены.СкорректироватьМерныеТовары = СтруктураПараметров.СкорректироватьМерныеТовары;
	
	Возврат ЗаказыСервер.ОтменитьНеотработанныеСтрокиПоОтгрузке(ЭтотОбъект, ПараметрыЗаполнения, ПараметрыОтмены);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Устанавливает используемый вид РЦ среди основных и альтернативных видов РЦ.
//
// Параметры:
//  КлючСвязи			 - УникальныйИдентификатор - ключ связи вида РЦ (табличная часть ВидыРабочихЦентров).
//  ВидРабочегоЦентра	 - СправочникСсылка.ВидыРабочихЦентров - вид РЦ, который необходимо назначить используемым.
//
Процедура ЗаменитьИспользуемыйВидРЦ(КлючСвязи, ВидРабочегоЦентра) Экспорт
	
	НайденнаяСтрока = ВидыРабочихЦентров.Найти(КлючСвязи, "КлючСвязи");
	Если НЕ НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", КлючСвязи);
	НайденныеСтроки = АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НайденнаяСтрока.Использовать = (НайденнаяСтрока.ВидРабочегоЦентра = ВидРабочегоЦентра);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает используемые виды рабочих центров
//
// Возвращаемое значение:
//   - Массив - используемые виды рабочих центров.
//
Функция ИспользуемыеВидыРабочихЦентров() Экспорт
	
	УправлениеПроизводством.ИспользуемыеВидыРабочихЦентров(ЭтотОбъект);
	
КонецФункции

// Заполняет документ по данным выполненных производственных операций.
//
Процедура ЗаполнитьПоОперациям() Экспорт
	
	ДанныеОпераций = Документы.ПроизводственнаяОперация2_2.ДанныеВыполненныхОпераций(Ссылка);
	
	ПодготовитьДанныеОперацийДляЗаполненияДанных(ДанныеОпераций);
	
	НастройкиУчета = Документы.ПроизводственнаяОперация2_2.НастройкиУчета(Подразделение, МаршрутнаяКарта);
	
	Если НастройкиУчета.ИспользоватьВыходныеИзделия Тогда
		
		ЗаполнитьИзделияПоОперациям("ВыходныеИзделия", ДанныеОпераций.ВыходныеИзделия, ДанныеОпераций.ВыходныеИзделияСерии);
		ЗаполнитьИзделияПоОперациям("ПобочныеИзделия", ДанныеОпераций.ВыходныеИзделия, ДанныеОпераций.ВыходныеИзделияСерии);
		
		ЗаполнитьДатуПроизводстваИзделийВШапке();
		
	КонецЕсли;
	
	Если НастройкиУчета.ИспользоватьМатериалы Тогда
		
		ЗаполнитьМатериалыПоОперациям(ДанныеОпераций.МатериалыИРаботы);
		
	КонецЕсли;
	
	ЗаполнитьТрудозатратыПоОперациям(ДанныеОпераций.Трудозатраты);
	
	Если УправлениеПроизводствомКлиентСервер.СравнениеСтатусовЭтапа(Перечисления.СтатусыЭтаповПроизводства2_2.Начат, Статус) > 0 Тогда
		
		УстановитьСтатус("Начат", Неопределено);
		
	КонецЕсли;
	
	ТребуетсяЗаполнитьПоОперациям = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи);
	
	ПроведениеСерверУТ.УстановитьРежимПроведения(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	#Область ЗаполнениеНазначений
	
	ШаблонНазначения = Документы.ЭтапПроизводства2_2.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПроверитьЗаполнитьПередЗаписью(
		Назначение,
		ШаблонНазначения,
		ЭтотОбъект,
		"НаправлениеДеятельности,Партнер,Договор,ХозяйственнаяОперация",
		Отказ);
	Документы.ЭтапПроизводства2_2.ПроверитьЗаполнитьНазначения(ЭтотОбъект);
	
	#КонецОбласти
	
	ОчиститьНеиспользуемыеДанные();
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
	
		#Область ЗаполнениеКлючейАналитик
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
			
			// ВыходныеИзделия и ПобочныеИзделия
			// заполнение аналитики в зависимости от хозяйственной операции и типа склада получателя.
			
			МассивСкладов = Новый Массив;
			Для Каждого Строка Из ВыходныеИзделия Цикл
				Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
					МассивСкладов.Добавить(Строка.Получатель);
				КонецЕсли;
			КонецЦикла;
			Для Каждого Строка Из ПобочныеИзделия Цикл
				Если ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") Тогда
					МассивСкладов.Добавить(Строка.Получатель);
				КонецЕсли;
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Истина);
			
			РеквизитыСкладов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСкладов,"ЦеховаяКладовая,Подразделение");
			
			СтруктураАналитки = Новый Структура();
			СтруктураАналитки.Вставить("Номенклатура");
			СтруктураАналитки.Вставить("Характеристика");
			СтруктураАналитки.Вставить("Серия");
			СтруктураАналитки.Вставить("Склад");
			СтруктураАналитки.Вставить("Назначение");
			СтруктураАналитки.Вставить("СтатьяКалькуляции");
			
			Для Каждого Строка Из ВыходныеИзделия Цикл
				
				Если Строка.Отменено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
				
				Если Строка.СписатьНаРасходы Или
					ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая Или 
					ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая И Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
					Если Строка.СтатусУказанияСерийОтправитель <> 14 Тогда
						СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					СтруктураАналитки.Склад = Подразделение;
					Если Строка.СписатьНаРасходы Тогда
						СтруктураАналитки.Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаправлениеДеятельности, "Назначение");;
					КонецЕсли;
					Если ЯвляетсяНазначениемПродукции Тогда
						СтруктураАналитки.Назначение = Назначение;
					КонецЕсли;
				Иначе
					Если Строка.СтатусУказанияСерийПолучатель <> 14 Тогда
						СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					СтруктураАналитки.Склад = Строка.Получатель;
				КонецЕсли;
				
				Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
				
				Если Строка.СписатьНаРасходы Тогда
					Строка.Назначение = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка Из ПобочныеИзделия Цикл
				
				Если Строка.Отменено Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтруктураАналитки, Строка);
				
				Если Строка.СписатьНаРасходы Или
					ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И Не РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая Или 
					ТипЗнч(Строка.Получатель) = Тип("СправочникСсылка.Склады") И РеквизитыСкладов[Строка.Получатель].ЦеховаяКладовая И Подразделение <> РеквизитыСкладов[Строка.Получатель].Подразделение Тогда
					Если Строка.СтатусУказанияСерийОтправитель <> 14 Тогда
						СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					СтруктураАналитки.Склад = Подразделение;
					Если Строка.СписатьНаРасходы Тогда
						СтруктураАналитки.Назначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаправлениеДеятельности, "Назначение");;
					КонецЕсли;
					Если ЯвляетсяНазначениемПродукции Тогда
						СтруктураАналитки.Назначение = Назначение;
					КонецЕсли;
				Иначе
					Если Строка.СтатусУказанияСерийПолучатель <> 14 Тогда
						СтруктураАналитки.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
					КонецЕсли;
					СтруктураАналитки.Склад = Строка.Получатель;
				КонецЕсли;
				
				СтруктураАналитки.СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
				Строка.АналитикаУчетаНоменклатуры = РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(СтруктураАналитки);
				
				Если Строка.СписатьНаРасходы Тогда
					Строка.Назначение = Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			
			УстановитьПривилегированныйРежим(Ложь);
			
			//ОбеспечениеМатериаламиИРаботами
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
				Перечисления.ХозяйственныеОперации.ПередачаВПроизводство,
				Подразделение, Подразделение,
				Неопределено);
				
			ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
			ТекстПоляНазначение =
			"ВЫБОР 
				|		КОГДА Коллекция.ВариантОбеспечения В (
				|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно), 
				|				ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно)) 
				|			ТОГДА Коллекция.Назначение
				|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) 
				|	КОНЕЦ";
				// Аналитика отправителя содержит назначение, под которое материалы переданы в кладовую.
			ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля",ТекстПоляНазначение));
			ИменаПолей.Вставить("Произвольный", "Склад");
			ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ОбеспечениеМатериаламиИРаботами, МестаУчета, ИменаПолей);
			
			// РасходМатериаловИРабот: АУН содержит аналитику прихода
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
				Перечисления.ХозяйственныеОперации.ВыпускПродукции,
				Подразделение, Подразделение,
				Неопределено);
				
			ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
			ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(РасходМатериаловИРабот, МестаУчета, ИменаПолей);
			
			//ЭкономияМатериалов
			МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
				Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства,
				Подразделение, Подразделение,
				Неопределено);
				
			ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
			// Назначение возвращаемых материалов соответствует назначению, под которые материалы переданы под этап, то есть
			// назначением является этап.
			ИменаПолей.Вставить("Назначение", Новый Структура("ТекстПоля,Значение","&Назначение",Назначение));
			ИменаПолей.Вставить("СтатусУказанияСерий", "СтатусУказанияСерийОтправитель");
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ЭкономияМатериалов, МестаУчета, ИменаПолей);
			
			ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ВыходныеИзделия);
			ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ПобочныеИзделия);
			ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ЭкономияМатериалов);
		КонецЕсли;
		
		#КонецОбласти

		#Область ПолучениеПериодовИзмененияТабличныхЧастей
		
		// Проверим необходимость создания задания к перерасчету себестоимости, заполним периоды изменения табличных частей.
		ОписаниеТабличныхЧастей = Новый Структура;
		ОписаниеТабличныхЧастей.Вставить("РасходМатериаловИРабот", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаРасхода", Истина));
		ОписаниеТабличныхЧастей.Вставить("ОбеспечениеМатериаламиИРаботами", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаОтгрузки", Истина));
		ОписаниеТабличныхЧастей.Вставить("ЭкономияМатериалов", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество,КоличествоУпаковок", "ДатаОперации", Истина));
		ОписаниеТабличныхЧастей.Вставить("Трудозатраты", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаВыполнения", Ложь));
		ОписаниеТабличныхЧастей.Вставить("ВыходныеИзделия", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаПроизводства", Истина));
		ОписаниеТабличныхЧастей.Вставить("ПобочныеИзделия", Новый Структура("Ресурсы, Дата, ВключитьВМинимум", "Количество", "ДатаПроизводства", Истина));
		
		ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
		
		НачалоПериодаПерезаполнения = Дата(1,1,1);
		Если ПерезаполнитьВидыЗапасов И ЭтотОбъект.ДополнительныеСвойства.Свойство("НачалоПериодаПомощникаИсправленияОстатков") Тогда
			НачалоПериодаПерезаполнения = ЭтотОбъект.ДополнительныеСвойства.НачалоПериодаПомощникаИсправленияОстатков;
		КонецЕсли;
		
		РезультатПроверки = УниверсальныеМеханизмыПартийИСебестоимости.ПериодыИзмененияТабличныеЧастиДокумента(ЭтотОбъект, ОписаниеТабличныхЧастей, ПерезаполнитьВидыЗапасов, НачалоПериодаПерезаполнения);
		
		Если ЗначениеЗаполнено(РезультатПроверки.ОбщийМинимальныйПериод) Тогда
			ПериодЗаполнения = РезультатПроверки.ОбщийМинимальныйПериод;
		Иначе
			// Если после перепроведения данные документа не изменились, то все движения должны быть сохранены.
			// ПериодЗаполнения равный пустой дате соответствует режиму сохранения всех движений, фоновое задание расхода не запускается.
			// ПериодЗаполнения равный НЕОПРЕДЕЛЕНО соответствует режиму перезаписи всех движений, фоновое задание расхода не запускается.
			// ПериодЗаполнения равный началу месяца соответствует режиму сохранения движений в предидущих месяцах и формированию
			// новых начиная с начала месяца, для формирования оффлайновых движений запускается фоновое задание.
			ПериодЗаполнения = Дата('00010101');
		КонецЕсли;
		
		Если Не РезультатПроверки.ОбщийМинимальныйПериодДень = Неопределено Тогда
			ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
			НоваяСтрока = ДанныеДляПроверки.Добавить();
			НоваяСтрока.Дата   = НачалоДня(РезультатПроверки.ОбщийМинимальныйПериодДень);
			НоваяСтрока.Раздел = "Производство";
			НоваяСтрока.Объект = Организация;
			
			ОписаниеДанных = Новый Структура;
			ОписаниеДанных.Вставить("НоваяВерсия", Истина);
			ОписаниеДанных.Вставить("Данные",      Ссылка);
			
			ОписаниеОшибки = "";
			Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки, ОписаниеДанных, ОписаниеОшибки) Тогда
				Отказ = Истина;
				ВызватьИсключение ОписаниеОшибки;
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ПериодЗаполненияВидовЗапасовИСебестоимости", ПериодЗаполнения);
		ДополнительныеСвойства.Вставить("ПериодФормированияРезервовПоТоварамОрганизаций", ПериодЗаполнения);
		ДополнительныеСвойства.Вставить("СохранятьОтложенныеДвижения", Ложь);
		
		#КонецОбласти
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется
			И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Сформирован Тогда
			ЗаполнитьВидыЗапасов(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		СтарыеЗначения =  ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления");
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", СтарыеЗначения.ПометкаУдаления);
	Иначе
		ДополнительныеСвойства.Вставить("ПометкаУдаленияДоЗаписи", Ложь);
	КонецЕсли;
	
	ЗарегистрироватьОбновлениеСвязанныхДанных();
	
	ЭтапПроизводства2_2Локализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	#Область ЗаполнениеНазначений
	ШаблонНазначения = Документы.ЭтапПроизводства2_2.ШаблонНазначения(ЭтотОбъект);
	Справочники.Назначения.ПриЗаписиДокумента(Назначение, ШаблонНазначения, ЭтотОбъект, Подразделение, ВыпускПодДеятельность);
	#КонецОбласти
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		РегистрыСведений.РеестрДокументов.ИнициализироватьИЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
		
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ПометкаУдаленияДоЗаписи = ПометкаУдаления
		И ЗначениеЗаполнено(ПартияПроизводства) Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
		ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ПоляПартии =
				Документы.ЭтапПроизводства2_2.ПоляПартии(
					ЭтотОбъект,
					Документы.ЭтапПроизводства2_2.ОсновноеИзделиеЦепочкиЭтапов(Ссылка));
			
			Документы.ЭтапПроизводства2_2.ПроверитьУстановитьПометкуУдаленияПартииПроизводства(ПартияПроизводства, ПоляПартии);
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
									|en = 'Cannot lock production stages due to: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецПопытки;
		
	КонецЕсли;
	
	ПроверитьИЗаписатьРучноеРазмещениеВГрафике();
	
	ЭтапПроизводства2_2Локализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Распоряжение            = Неопределено;
	Организация             = Неопределено;
	ВыпускПодДеятельность   = Неопределено;
	НаправлениеДеятельности = Неопределено;
	Партнер                 = Неопределено;
	Договор                 = Неопределено;
	
	Спецификация = Неопределено;
	
	Назначение              = Неопределено;
	НазначениеПродукция     = Неопределено;
	НазначениеМатериалы     = Неопределено;
	НазначениеПолуфабрикаты = Неопределено;
	
	КоличествоСтрок = ОбеспечениеМатериаламиИРаботами.Количество();
	Если КоличествоСтрок > 0 Тогда
		ОбеспечениеМатериаламиИРаботами.ЗагрузитьКолонку(Новый Массив(КоличествоСтрок), "Назначение");
	КонецЕсли;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	
	ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВыпускПодДеятельность, ПараметрыЗаполнения);
	
	ЭтапПроизводства2_2Локализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);

КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
	
		Если ДанныеЗаполнения.Свойство("РеквизитыШапки") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.РеквизитыШапки);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "ЗаполнитьПоСпецификации" Тогда
			
			ЗаполнитьПоСпецификации(ДанныеЗаполнения);
			
		ИначеЕсли ДанныеЗаполнения.Свойство("СпособЗаполнения")
			И ДанныеЗаполнения.СпособЗаполнения = "РедактированиеЭтаповПроизводства" Тогда
			
			ЗаполнитьПоДаннымОбработкиРедактирования(ДанныеЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьНомерПоРаспоряжению();
	
	Дата           = ТекущаяДатаСеанса();
	Ответственный  = Пользователи.ТекущийПользователь();
	
	ВидЦены = Справочники.ВидыЦен.ВидЦеныПлановойСтоимостиТМЦ(ВидЦены);
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Справочники.ВидыЦен.ПолучитьРеквизитыВидаЦены(ВидЦены).ВалютаЦены);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров();
	КонецЕсли;
	Если Не ВыполняетсяПакетноеФормирование() Тогда
		
		Документы.ЭтапПроизводства2_2.ПроверитьЗаполнитьНазначения(ЭтотОбъект);
		
		ПараметрыЗаполнения = Документы.ЭтапПроизводства2_2.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВыпускПодДеятельность, ПараметрыЗаполнения);
		
	КонецЕсли;
	
	ЭтапПроизводства2_2Локализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		ОбязательныеРеквизиты = Документы.ЭтапПроизводства2_2.СписокОбязательныхРеквизитовВСтатусеФормируется(ЭтотОбъект);
		
		Для Индекс = -ПроверяемыеРеквизиты.Количество() + 1 По 0 Цикл
			Если ОбязательныеРеквизиты.Найти(ПроверяемыеРеквизиты[-Индекс]) = Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(-Индекс);
			КонецЕсли;
		КонецЦикла;
		
		Если ПроизводствоНаСтороне
			И ЗначениеЗаполнено(ЗаказПереработчику) Тогда
			
			ТекстОшибки = НСтр("ru = 'Проведение документа со статусом ""Формируется"" или ""Сформирован"" доступно только при отсутствии заказа переработчику.';
								|en = 'You can post a document with the Being generated or Generated status only if a tolling order is missing.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				Ссылка,
				"Статус",,
				Отказ);
			
		КонецЕсли;
		
		Возврат; // для статуса Формируется проверка выполняется в минимальном варианте
		
	КонецЕсли;
	
	Документы.ЭтапПроизводства2_2.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Отказ);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	
	Если ВыходныеИзделия.Найти(Ложь, "Отменено") = Неопределено Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	КонецЕсли;
	
	Если ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров ИЛИ РучноеРазмещениеВГрафике Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
		МассивНепроверяемыхРеквизитов.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПорядокРаботыВидовРабочихЦентров");
	Если ВыполняетсяПакетноеФормирование() Тогда
		ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ);
	КонецЕсли;
	
	Если НЕ РасходОднойДатой ИЛИ РасходМатериаловИРабот.Количество() = 0 Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ДатаРасхода");
	КонецЕсли;
	
	#Область ВыходныеИзделия
	
	Если ЭтоВыпускающийЭтап
		И Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		
		Если ВыходныеИзделия.Найти(Ложь, "Отменено") = Неопределено Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", "Заполнение",,, Ссылка.Метаданные().ТабличныеЧасти.ВыходныеИзделия.Синоним);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				"ВыходныеИзделия",, 
				Отказ);
			
		КонецЕсли;
		
	ИначеЕсли Не ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		
		Если ПроизводствоНаСтороне И ПобочныеИзделия.Найти(Ложь, "Отменено") = Неопределено Тогда
			
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				"Список", "Заполнение",,, Ссылка.Метаданные().ТабличныеЧасти.ПобочныеИзделия.Синоним);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстСообщения, 
				ЭтотОбъект, 
				"ПобочныеИзделия",, 
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область МаршрутнаяКарта
	
	Если ПроизводствоНаСтороне
		ИЛИ МаршрутнаяКарта.Пустая()
		ИЛИ ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КоэффициентМаршрутнойКарты");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПереработкаНаСтороне
	
	Если ПроизводствоНаСтороне Тогда
		
		Если ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Сборка
			И ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			Шаблон = НСтр("ru = 'Для производственного процесса типа ""%1"" не поддерживается выполнение этапа сторонними переработчиками.';
							|en = 'Third party tollers cannot execute stage for the manufacturing process of the ""%1"" type.'");
			ТекстСообщения = СтрШаблон(Шаблон, ТипПроизводственногоПроцесса);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПроизводствоНаСтороне",, Отказ);
			
		КонецЕсли;
		
		Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда // СубдавальческаяСхема
			
			ТекстСообщения = НСтр("ru = 'При производстве по заказу давальца не поддерживается выполнение этапа сторонними переработчиками.';
									|en = 'Third party tollers cannot execute stages against the order of the material provider during the production.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект, "ПроизводствоНаСтороне",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	#КонецОбласти
	
	МенеджерВременныхТаблиц = Документы.ЭтапПроизводства2_2.СформироватьВременныеТаблицыДляПроверки(ЭтотОбъект);
	Документы.ЭтапПроизводства2_2.ПроверитьЗаполнениеОбъекта(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПроверяемыеРеквизиты);
	
	Если Не ВыполняетсяПакетноеФормирование() Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ПобочныеИзделия, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.РасходМатериаловИРабот, Отказ, МассивНепроверяемыхРеквизитов);
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий.ЭкономияМатериалов, Отказ, МассивНепроверяемыхРеквизитов);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	ЭтапПроизводства2_2Локализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ВыполняетсяПакетноеФормирование() Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);
	
	// Инициализация данных документа
	Документы.ЭтапПроизводства2_2.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	ЗаказыСервер.ОтразитьУслугиДавальцуКОформлению(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьДвижениеТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыМатериаловВПроизводство(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьГрафикОтгрузкиТоваров(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКОтгрузке(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыПоставщикам(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьЗаказыКлиентов(ДополнительныеСвойства, Движения, Отказ);
	ЗаказыСервер.ОтразитьТоварыКПоступлению(ДополнительныеСвойства, Движения, Отказ);
	
	ЗатратыСервер.ОтразитьМатериалыИРаботыВПроизводстве(ДополнительныеСвойства, Движения, Отказ);
	ЗатратыСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	
	ЗапасыСервер.ОтразитьДатыПоступленияТоваровОрганизаций(ДополнительныеСвойства, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизаций(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыОрганизацийКПередаче(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьТоварыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьСвободныеОстатки(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	ЗапасыСервер.ОтразитьОбеспечениеЗаказовРаботами(ДополнительныеСвойства, Движения, Отказ);
	СкладыСервер.ОтразитьДвиженияСерийТоваров(ДополнительныеСвойства, Движения, Отказ);
	
	УправлениеПроизводством.ОтразитьРаспоряженияНаПередачуИзПроизводства(ДополнительныеСвойства, Движения, Отказ);
	
	ДоходыИРасходыСервер.ОтразитьСебестоимостьТоваров(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеРасходы(ДополнительныеСвойства, Движения, Отказ);
	ДоходыИРасходыСервер.ОтразитьПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	
	УправленческийУчетПроведениеСервер.ОтразитьДвиженияНоменклатураДоходыРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	ОперативныйУчетПроизводства.ОтразитьТрудозатратыКОформлению(ДополнительныеСвойства, Движения, Отказ);
	
	
	РегистрыНакопления.ОбеспечениеПроизводственныхПроцессов.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьДоступностьВидовРабочихЦентров(Отказ);
	
	РегистрыСведений.РеестрДокументов.ЗаписатьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ПериодЗаполнения = ДополнительныеСвойства.ПериодФормированияРезервовПоТоварамОрганизаций;
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.Проведение, ПараметрыЗаполнения);
	
	ЭтапПроизводства2_2Локализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	//++ НЕ УТКА
	МеждународныйУчетПроведениеСервер.ЗарегистрироватьКОтражению(ЭтотОбъект, ДополнительныеСвойства, Движения, Отказ);
	//-- НЕ УТКА
	
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ВыполнитьКонтрольДанныхЦепочкиЭтапов(Отказ);
	ВыполнитьКонтрольПриЗакрытииЭтапа(Отказ);
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ОбновитьСвязанныеДанные(Отказ);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости) Тогда
		РегистрыСведений.ЗаданияКРасчетуСебестоимости.СоздатьЗаписьРегистра(
			ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости,
			Ссылка,
			Организация);
	КонецЕсли;
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости) И Не Отказ Тогда
		ЗатратыСервер.ДобавитьВОчередьРасходТоваровОрганизацийНаПроизводство(
			Организация,
			Подразделение,
			Ссылка,
			ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеСерверУТ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	ПроведениеСерверУТ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	СформироватьСписокРегистровДляКонтроля();
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ПериодЗаполнения = ДополнительныеСвойства.ПериодФормированияРезервовПоТоварамОрганизаций;
	ЗапасыСервер.ПодготовитьЗаписьТоваровОрганизаций(ЭтотОбъект, РежимЗаписиДокумента.ОтменаПроведения, ПараметрыЗаполнения);
	
	ЭтапПроизводства2_2Локализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

	ПроведениеСерверУТ.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	ЗапасыСервер.СформироватьРезервыПоТоварамОрганизаций(ЭтотОбъект, Отказ, ПараметрыЗаполнения);
	
	ПроведениеСерверУТ.ВыполнитьКонтрольРезультатовПроведения(ЭтотОбъект, Отказ);
	ПроведениеСерверУТ.ЗаписатьПодчиненныеНаборамЗаписейДанные(ЭтотОбъект, Отказ);
	
	ПроведениеСерверУТ.СформироватьЗаписиРегистровЗаданий(ЭтотОбъект);
	
	ОбновитьСвязанныеДанные(Отказ, Истина);
	
	РегистрыСведений.СостоянияЗаказовКлиентов.ОтразитьСостояниеЗаказа(ЭтотОбъект, Отказ);	
	ПроведениеСерверУТ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости) И Не Отказ Тогда
		ЗатратыСервер.ДобавитьВОчередьРасходТоваровОрганизацийНаПроизводство(
			Организация,
			Подразделение,
			Ссылка,
			ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаЗаполнения

Функция ДанныеДляПроверкиЗаполнения() Экспорт
	
	ДанныеДляПроверки = УправлениеПроизводством.ДанныеЭтаповДляПроверкиЗаполнения();
	
	ИтоговаяПроверка = (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
					ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен);
	
	// Реквизиты шапки
	ЗаполнитьЗначенияСвойств(ДанныеДляПроверки.Реквизиты.Добавить(), ЭтотОбъект);
	
	// ВыходныеИзделия
	Если (ИтоговаяПроверка ИЛИ ВыходныеИзделия.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "ВыходныеИзделия")
	КонецЕсли;
	
	// ПобочныеИзделия
	Если (ИтоговаяПроверка ИЛИ ПобочныеИзделия.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "ПобочныеИзделия")
	КонецЕсли;
	
	// ОбеспечениеМатериаламиИРаботами
	Если (ИтоговаяПроверка ИЛИ ОбеспечениеМатериаламиИРаботами.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "ОбеспечениеМатериаламиИРаботами")
	КонецЕсли;
	
	// РасходМатериаловИРабот
	Если ИтоговаяПроверка Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "РасходМатериаловИРабот")
	КонецЕсли;
	
	// ЭкономияМатериалов
	Если ИтоговаяПроверка Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "ЭкономияМатериалов")
	КонецЕсли;
	
	// Трудозатраты
	Если (ИтоговаяПроверка ИЛИ Трудозатраты.Количество() > 0) Тогда
		ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, "Трудозатраты")
	КонецЕсли;
	
	Возврат ДанныеДляПроверки;
	
КонецФункции

Процедура ЗаполнитьТЧДляПроверкиЗаполнения(ДанныеДляПроверки, ИмяТЧ)
	
	ДанныеДляПроверки["ПроверятьТЧ" + ИмяТЧ] = Истина;
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		НоваяСтрока = ДанныеДляПроверки[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Ссылка = ЭтотОбъект.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтрольПроведения

Процедура СформироватьСписокРегистровДляКонтроля() Экспорт

	Массив = Новый Массив;

	// Контроль выполняется при проведении\отмене проведения не нового документа.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		
		Массив.Добавить(Движения.ЗаказыМатериаловВПроизводство);
		Массив.Добавить(Движения.РаспоряженияНаПередачуИзПроизводства);
		Массив.Добавить(Движения.ТрудозатратыКОформлению);
		Массив.Добавить(Движения.УслугиДавальцуКОформлению);
		Если ПроизводствоНаСтороне Тогда
			Массив.Добавить(Движения.ЗаказыПоставщикам);
			Массив.Добавить(Движения.ЗаказыКлиентов);
		КонецЕсли; 
		
	КонецЕсли;
	
	// Приходы в регистр (сторно расхода из регистра) контролируем при перепроведении и отмене проведения.
	Если Не ДополнительныеСвойства.ЭтоНовый Тогда
		Массив.Добавить(Движения.ТоварыОрганизаций);
	КонецЕсли;
	
	// Контроль выполняется при перепроведении, отмене проведения или если используются серии, чтобы проверить возможность
	// резервирования серий.
	Если Не ДополнительныеСвойства.ЭтоНовый
		Или ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура()) Тогда
		Массив.Добавить(Движения.ТоварыКОтгрузке);
	КонецЕсли;
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Массив.Добавить(Движения.СвободныеОстатки);
		Массив.Добавить(Движения.ГрафикОтгрузкиТоваров);
		
	КонецЕсли;
	
	Если Не ВыполняетсяПакетноеФормирование()
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
		Если ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами.ИспользоватьСерииНоменклатуры Тогда
			Массив.Добавить(Движения.ТоварыНаСкладах);
		КонецЕсли;
		
	КонецЕсли;
	
	Массив.Добавить(Движения.ОбеспечениеЗаказов);
	Массив.Добавить(Движения.ОбеспечениеЗаказовРаботами);
	
	ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);

КонецПроцедуры

Процедура ВыполнитьКонтрольДанныхЦепочкиЭтапов(Отказ)
	
	// В режиме редактирования цепочки этапов выполняются отдельные проверки
	Если ДополнительныеСвойства.Свойство("ОтключитьПроверкуРеквизитовЦепочкиЭтапов") Тогда
		Возврат;
	КонецЕсли;
	
	МассивПроверок = Новый Массив;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	Если ЭтоВыпускающийЭтап
		И Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		МассивПроверок.Добавить("ПроверитьДолиСтоимостиВыходныхИзделий");
	КонецЕсли;
	
	Если (Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен)
		И Не ПроизводствоНаСтороне Тогда
		МассивПроверок.Добавить("ПроверитьРеквизитыЦепочкиЭтапов");
	КонецЕсли;
	
	Если МассивПроверок.ВГраница() = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ПартияПроизводства", ПартияПроизводства);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages due to: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки;
	
	Если МассивПроверок.Найти("ПроверитьДолиСтоимостиВыходныхИзделий") <> Неопределено Тогда
		ПроверитьДолиСтоимостиВыходныхИзделий(Отказ);
	КонецЕсли;
	
	Если МассивПроверок.Найти("ПроверитьРеквизитыЦепочкиЭтапов") <> Неопределено Тогда
		ПроверитьРеквизитыЦепочкиЭтапов(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДолиСтоимостиВыходныхИзделий(Отказ)
	
	ПараметрыРаспределенияЗатрат = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(ЭтотОбъект);
	
	ТекстЗапроса = Документы.ЭтапПроизводства2_2.ТекстЗапросаПроверитьДолиСтоимости(
		ЭтотОбъект,	ПараметрыРаспределенияЗатрат.ПоляСвязи);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Запрос.УстановитьПараметр("СпособРаспределенияЗатратНаВыходныеИзделия", СпособРаспределенияЗатратНаВыходныеИзделия);
	
	Результат = Запрос.ВыполнитьПакет();
	КоличествоПакетов = Результат.Количество();
	
	Если Не Результат[КоличествоПакетов-1].Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Реквизит ""Способ распределения затрат на выходные изделия"" должен иметь одинаковое значение для всех выпускающих этапов.';
								|en = 'The Method of allocating finished product costs attribute must have the same value for all release stages.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					"СпособРаспределенияЗатратНаВыходныеИзделия",,
					Отказ);
		
	КонецЕсли;
	
	Если Не Результат[КоличествоПакетов-2].Пустой() Тогда
		
		Шаблон = НСтр("ru = 'При выпуске нескольких наименований выходных изделий требуется указать их долю стоимости (строка %1%2).';
						|en = 'When releasing several names of finished products, you should specify their cost share (line %1%2).'");
		
		Выборка = Результат[КоличествоПакетов-2].Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НомерСтроки = Формат(Выборка.НомерСтроки, "ЧГ=");
			
			Если Выборка.Ссылка <> Ссылка Тогда
				
				ТекстСообщения = СтрШаблон(Шаблон, НомерСтроки, ", " + Выборка.Ссылка + "");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					Выборка.Ссылка,
					Поле,
					,
					Отказ);
				
			Иначе
				
				ТекстСообщения = СтрШаблон(Шаблон, НомерСтроки, "");
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ВыходныеИзделия", Выборка.НомерСтроки, "ДоляСтоимости");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					Поле,
					,
					Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыЦепочкиЭтапов(Отказ)
	
	ТекстПодстановки = "";
	ОбщиеРеквизиты = Документы.ЭтапПроизводства2_2.ОбщиеРеквизитыЦепочкиЭтапов(Истина);
	
	Для каждого ИмяРеквизита Из ОбщиеРеквизиты Цикл
		ТекстПодстановки = ТекстПодстановки + ?(ПустаяСтрока(ТекстПодстановки),"","+") + "КОЛИЧЕСТВО(РАЗЛИЧНЫЕ " + ИмяРеквизита + ")";
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапыЦепочки
	|ГДЕ
	|	ЭтапыЦепочки.ПартияПроизводства = &ПартияПроизводства
	|	И НЕ ЭтапыЦепочки.ПометкаУдаления
	|
	|ИМЕЮЩИЕ
	|	&КоличествоПолей <> " + ТекстПодстановки + "
	|	И НЕ МАКСИМУМ(ЭтапыЦепочки.ПартияПроизводства) ЕСТЬ NULL
	|");
	Запрос.УстановитьПараметр("ПартияПроизводства", ПартияПроизводства);
	Запрос.УстановитьПараметр("КоличествоПолей", ОбщиеРеквизиты.Количество());
	
	// Общие реквизиты в одной цепочки не должны отличаться
	Если Не Запрос.Выполнить().Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Общие реквизиты одной цепочки этапов отличаются. Обратитесь к администратору.';
								|en = 'Common attributes of one stage chain are different. Contact your administrator.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения,
					ЭтотОбъект,
					,,
					Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПроизводственныйПроцесс(Отказ, РежимЗаписи)
	
	Если РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|	И Таблица.Проведен");
		
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Распоряжение);
	
	Если Запрос.Выполнить().Пустой() Тогда
		
		ТекстШаблона = НСтр("ru = 'Невозможно провести этап производства № %1 от %2, относящийся к непроведенному заказу на производство.';
							|en = 'Cannot post production stage No. %1, %2 which belongs to the unposted production order.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстШаблона,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер, Ложь, Истина),
			Формат(Дата, "ДЛФ=D"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, ,, Отказ);
		
		Возврат;
		
	КонецЕсли;
		
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Формируется Тогда
		
		Если ЭтотОбъект.НомерЭтапа >= ЭтотОбъект.НомерСледующегоЭтапа И ЭтотОбъект.НомерСледующегоЭтапа <> 0 Тогда
			
			ТекстСообщения = НСтр("ru = 'Номер следующего этапа должен быть больше номера этапа.';
									|en = 'Next stage number should be more than the stage number.'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения,
						ЭтотОбъект,,, 
						Отказ);
			
		КонецЕсли;
		
		Если ЭтотОбъект.ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Если ЭтотОбъект.ВидыРабочихЦентров.Количество() > 0 Тогда
				
				ДублиВидовРЦ = Новый Массив;
				
				ПараметрыОтбора = Новый Структура("Использовать", Истина);
				СписокВидыРабочихЦентров = ЭтотОбъект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
				Для Сч = 1 По 2 Цикл
					Для Каждого СтрокаВидРЦ Из СписокВидыРабочихЦентров Цикл
						
						Если ЗначениеЗаполнено(СтрокаВидРЦ.ВидРабочегоЦентра)
							И ДублиВидовРЦ.Найти(СтрокаВидРЦ.ВидРабочегоЦентра) = Неопределено Тогда
							
							ПараметрыОтбора.Вставить("ВидРабочегоЦентра", СтрокаВидРЦ.ВидРабочегоЦентра);
							СписокСтрок = ЭтотОбъект.ВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
							КоличествоДублей = СписокСтрок.Количество(); 
							СписокСтрок = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
							КоличествоДублей = КоличествоДублей + СписокСтрок.Количество(); 
							Если КоличествоДублей > 1 Тогда
								ДублиВидовРЦ.Добавить(СтрокаВидРЦ.ВидРабочегоЦентра);
							КонецЕсли; 
							
						КонецЕсли; 
						
					КонецЦикла;
					ПараметрыОтбора = Новый Структура("Использовать", Истина);
					СписокВидыРабочихЦентров = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(ПараметрыОтбора);
					
				КонецЦикла; 
				
				ШаблонДублиВидовРЦ = НСтр("ru = 'Вид рабочего центра ""%1"" допускается указывать не более одного раза.';
											|en = 'You can specify work center kind ""%1"" only once.'");
				
				Для Каждого ВидРЦ Из ДублиВидовРЦ Цикл
					
					ТекстСообщения = СтрШаблон(ШаблонДублиВидовРЦ, Строка(ВидРЦ));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								ТекстСообщения, 
								ЭтотОбъект, 
								"ВидыРабочихЦентров",, 
								Отказ);
					
				КонецЦикла;
				
				НомерСтроки = 0;
				Для Каждого СтрокаОсновнойВидРЦ Из ЭтотОбъект.ВидыРабочихЦентров Цикл
					
					НомерСтроки = НомерСтроки + 1;
					
					ПроверитьВидыРабочихЦентров(СтрокаОсновнойВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
					
					СтруктураПоиска = Новый Структура("КлючСвязиВидыРабочихЦентров", СтрокаОсновнойВидРЦ.КлючСвязи);
					
					Для Каждого СтрокаАльтернативныйВидРЦ Из ЭтотОбъект.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска) Цикл
						
						НомерСтроки = НомерСтроки + 1;
						
						ПроверитьВидыРабочихЦентров(СтрокаАльтернативныйВидРЦ, НомерСтроки, ЭтотОбъект, Отказ);
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе 
				
				ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Виды рабочих центров"".';
										|en = 'No line is entered into the ""Work center kinds"" list.'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстСообщения, 
							, 
							"ВидыРабочихЦентров",, 
							Отказ);
				
			КонецЕсли;
			
			ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьВидыРабочихЦентров(ТекущаяСтрока, НомерСтроки, Объект, Отказ)

	ПараметрыТабличнойЧасти = Новый Структура;
	ПараметрыТабличнойЧасти.Вставить("Имя",           "ВидыРабочихЦентров");
	ПараметрыТабличнойЧасти.Вставить("Представление", НСтр("ru = 'Виды рабочих центров';
															|en = 'Work center kinds'"));
	ПараметрыТабличнойЧасти.Вставить("НомерСтроки",   НомерСтроки);
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3"".';
							|en = 'Empty column ""%1"" of row %2 in list ""%3"".'");
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВидРабочегоЦентра) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВидРабочегоЦентра");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Вид рабочего центра';
										|en = 'Work center kind'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВремяРаботы) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ВремяРаботы");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Время работы';
										|en = 'Working time'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЕдиницаИзмерения) Тогда
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					ПараметрыТабличнойЧасти.Имя, НомерСтроки, "ЕдиницаИзмерения");
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
									НСтр("ru = 'Единица измерения времени';
										|en = 'Time unit of measure'"),
									НомерСтроки,
									ПараметрыТабличнойЧасти.Представление);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					Объект, 
					Поле,, 
					Отказ); 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПорядокРаботыВидовРабочихЦентров(Отказ)
	
	Если ПланироватьРаботуВидовРабочихЦентров
		И ЭтотОбъект.ВидыРабочихЦентров.Количество() > 1 Тогда
		
		Если ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.ПустаяСсылка() Тогда
			
			ТекстСообщения  = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				,
				,
				Ссылка.Метаданные().Реквизиты.ПорядокРаботыВидовРабочихЦентров.Синоним);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстСообщения, 
						ЭтотОбъект, 
						"ПорядокРаботыВидовРабочихЦентров",
						, 
						Отказ);
			
		ИначеЕсли ПорядокРаботыВидовРабочихЦентров = Перечисления.ПорядокРаботыВидовРабочихЦентров.Одновременно Тогда
			
			ЗначенияПроверки = Неопределено;
			ВремяРаботыОдинаковое = Истина;
			
			Для Сч = 1 По 2 Цикл
				
				Для каждого Строка Из ?(Сч = 1, ЭтотОбъект.ВидыРабочихЦентров, ЭтотОбъект.АльтернативныеВидыРабочихЦентров) Цикл
				
					Если НЕ Строка.Использовать Тогда
						Продолжить;
					КонецЕсли;
					
					Если ЗначенияПроверки = Неопределено Тогда
						
						ЗначенияПроверки = Строка;
						
					ИначеЕсли Строка.ВремяРаботы <> ЗначенияПроверки.ВремяРаботы
						ИЛИ Строка.ЕдиницаИзмерения <> ЗначенияПроверки.ЕдиницаИзмерения Тогда
						
						ВремяРаботыОдинаковое = Ложь;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ ВремяРаботыОдинаковое Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
		
			Если НЕ ВремяРаботыОдинаковое Тогда
				
				ТекстСообщения = НСтр("ru = 'При использовании порядка загрузки ""Одновременно"" время работы видов рабочих центров должно быть одинаковым.';
										|en = 'When using the Simultaneously load procedure, work duration of work center kinds should be the same.'");
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, 
					ЭтотОбъект, 
					"ПорядокРаботыВидовРабочихЦентров",
					, 
					Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольПриЗакрытииЭтапа(Отказ)
	
	Если Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	МассивТекстов = Новый Массив;
	ИндексыКонтролей = Новый Соответствие;
	
	Если Константы.НеЗакрыватьЭтапыПроизводстваБезПолнойОтгрузки.Получить() Тогда
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ
			|	ЗаказыОстатки.Распоряжение КАК Распоряжение
			|ИЗ
			|	РегистрНакопления.ЗаказыМатериаловВПроизводство.Остатки(, Распоряжение = &Ссылка) КАК ЗаказыОстатки
			|ГДЕ
			|	ЗаказыОстатки.ЗаказаноОстаток <> 0");
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Материалы документа ""%1"" отгружены не полностью.
				|Закрытие этапа возможно только с полностью отгруженными строками.';
				|en = 'Not all materials of the %1 document are shipped.
				|You can close the stage only with fully shipped lines.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
		//
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ
			|	РаспоряженияОстатки.Распоряжение КАК Распоряжение
			|ИЗ
			|	РегистрНакопления.РаспоряженияНаПередачуИзПроизводства.Остатки(, Распоряжение = &Ссылка) КАК РаспоряженияОстатки");
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Выпущенные изделия (неизрасходованные материалы) документа ""%1"" отгружены не полностью.
				|Закрытие этапа возможно только с полностью отгруженными/отмененными строками.';
				|en = 'Not all manufactured products (unused materials) of the %1 document are shipped.
				|You can close the order only with fully shipped/canceled lines.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
	КонецЕсли;
	
	Если Константы.КонтролироватьВыполнениеОперацийПриЗакрытииЭтаповПроизводства.Получить() Тогда
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	РегистрСведений.ОчередьПроизводственныхОпераций КАК Очередь
			|ГДЕ
			|	Очередь.Этап = &Ссылка
			|	И Очередь.Запланировано + Очередь.ТребуетПовторения > Очередь.Выполнено + Очередь.Пропущено
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК ДокОперация
			|ГДЕ
			|	ДокОперация.Этап = &Ссылка
			|	И ДокОперация.Проведен
			|	И НЕ ДокОперация.НаОснованииМаршрутнойКарты
			|	И ДокОперация.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется))
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА
			|ИЗ
			|	Документ.ЭтапПроизводства2_2 КАК ДокЭтап
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперация2_2 КАК ДокОперация
			|		ПО ДокЭтап.Ссылка = ДокОперация.Этап
			|			И (ДокОперация.Проведен)
			|			И (ДокОперация.НаОснованииМаршрутнойКарты)
			|ГДЕ
			|	ДокЭтап.Ссылка = &Ссылка
			|	И ДокЭтап.МаршрутнаяКарта <> ЗНАЧЕНИЕ(Справочник.МаршрутныеКарты.ПустаяСсылка)
			|	И ДокЭтап.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
			|	И ДокЭтап.Подразделение.ИспользоватьПооперационноеУправление
			|	И НЕ ДокЭтап.ПроизводствоНаСтороне
			|	И ДокОперация.Ссылка ЕСТЬ NULL");
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Операции документа ""%1"" выполнены не полностью.
				|Закрытие этапа возможно только с полностью выполненными/пропущенными операциями.';
				|en = 'Not all operations of the %1 document are performed.
				|You can close the stage only with fully performed/skipped operations.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
	Иначе
		
		МассивТекстов.Добавить(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Документ.ПроизводственнаяОперация2_2 КАК ДокОперация
			|ГДЕ
			|	ДокОперация.Этап = &Ссылка
			|	И ДокОперация.Проведен
			|	И ДокОперация.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Создана),
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыПроизводственныхОпераций.Выполняется))");
		
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'У документа ""%1"" имеются незавершенные операции.
				|Закрытие этапа возможно после перевода всех операций в следующие статусы: Выполнена, Не выполнена, Пропущена.';
				|en = 'The %1 document has unfinished operations.
				| You can close the stage only if all operations are transferred to the following statuses: Completed, Not completed, Skipped.'"),
			Ссылка);
		ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
		
	КонецЕсли;
	
	//

	МассивТекстов.Добавить(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОперацииКСозданиюСменныхЗаданий КАК НазначенныеОперации
		|ГДЕ
		|	НазначенныеОперации.Этап = &Ссылка
		|	И НазначенныеОперации.СменноеЗадание <> ЗНАЧЕНИЕ(Документ.СменноеЗадание.ПустаяСсылка)");
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'У документа ""%1"" имеются операции, назначенные формирующимся сменным заданиям.';
			|en = 'The %1 document has operations assigned for shift jobs being generated.'"),
		Ссылка);
	ИндексыКонтролей.Вставить(МассивТекстов.ВГраница(), ТекстСообщения);
	
	//
	
	Запрос = Новый Запрос(СтрСоединить(МассивТекстов, ";"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Для каждого Контроль Из ИндексыКонтролей Цикл
		
		Если МассивРезультатов[Контроль.Ключ].Пустой() Тогда
			Продолжить;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Контроль.Значение, 
				ЭтотОбъект,,, 
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСлужебныхРеквизитов

Процедура ЗаполнитьСлужебныеРеквизиты() Экспорт
	
	ЗаполнитьНомерПоРаспоряжению();
	
	НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер);
	
	ОсновнаяЗапись = Документы.ЭтапПроизводства2_2.ОсновнаяЗаписьРеестраДокументов(ЭтотОбъект);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОсновнаяЗапись);
	
	ОсновноеИзделиеНоменклатура = Неопределено;
	ОсновноеИзделиеХарактеристика = Неопределено;
	
	ЗаполнитьМаксимальнуюДатуПроизводства();
	ЗаполнитьМаксимальнуюДатуОтгрузки();
	ЗаполнитьМаксимальнуюДатуРасхода();
	
	Если ДополнительныеСвойства.Свойство(КлючЗаполненоАвтоматически()) Тогда
		ЗаполненоАвтоматически = ДополнительныеСвойства[КлючЗаполненоАвтоматически()];
	Иначе
		ЗаполненоАвтоматически = Ложь;
	КонецЕсли;
	
	Если Не ВыполняетсяПакетноеФормирование() Тогда // реквизиты заполняются в пакетном режиме отдельно
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			ДанныеПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
			Если ДанныеПодразделения <> Неопределено Тогда
				УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
					ЭтотОбъект, ДанныеПодразделения.ИнтервалПланирования);
			Иначе
				УправлениеДаннымиОбИзделиях.ЗаполнитьЕдиницуИзмеренияИДлительностьЭтапаББВ(
					ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьРеквизитЭтапПотребитель();
		
		ЕстьМаркируемаяПродукцияГИСМ = ПроизводствоСервер.ЕстьМаркируемаяПродукцияГИСМ(ЭтотОбъект, "ВыходныеИзделия,ПобочныеИзделия");
		
	КонецЕсли;
	
	ЗаполнитьФлагПередатьДавальцу(ВыходныеИзделия);
	ЗаполнитьФлагПередатьДавальцу(ПобочныеИзделия);
	
	ЗаполнитьПоследователей();
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеДанные()
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		Если ПроизводствоНаСтороне Тогда
			ПланироватьРаботуВидовРабочихЦентров = Ложь;
		КонецЕсли;
	Иначе
		РучноеРазмещениеВГрафике = Ложь;
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
	Если НЕ ПланироватьРаботуВидовРабочихЦентров
		И НЕ РучноеРазмещениеВГрафике Тогда
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
	КонецЕсли;
	
	ФактическоеНачалоЭтапа = НачалоМинуты(ФактическоеНачалоЭтапа);
	ФактическоеОкончаниеЭтапа = НачалоМинуты(ФактическоеОкончаниеЭтапа);
	
	Если РучноеРазмещениеВГрафике Тогда
		ПланироватьНеРанее = Неопределено;
	Иначе
		ЗанятостьВидовРабочихЦентров.Очистить();
	КонецЕсли;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	Если Не ЭтоВыпускающийЭтап Тогда
		ВыходныеИзделия.Очистить();
		СпособРаспределенияЗатратНаВыходныеИзделия = Неопределено;
	КонецЕсли;
	
	Если НЕ НачатоВыполнениеЭтапа() Тогда
		
		ИменаТаблицИзделия = УправлениеПроизводствомКлиентСервер.ИменаТаблицИзделия();
		Для Каждого ИмяТаблицы Из ИменаТаблицИзделия Цикл
			Для Каждого Строка Из ЭтотОбъект[ИмяТаблицы] Цикл
				Строка.Произведено = Ложь;
				Если НЕ ПроизводствоНаСтороне ИЛИ ЗаказПереработчику.Пустая() Тогда
					Строка.ДатаПроизводства = '00010101';
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Строка Из ЭтотОбъект.Трудозатраты Цикл
			Строка.Выполнено = Ложь;
			Строка.ДатаВыполнения = '00010101';
		КонецЦикла;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		
	КонецЕсли;
	
	Если ТребуетсяЗаполнитьПоОперациям Тогда
		ДанныеПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
		Если ДанныеПодразделения.ИспользоватьПооперационноеУправление Тогда
			ПроверяемыеСтатусы = Документы.ЭтапПроизводства2_2.СтатусыДоступноВыполнениеОпераций(ДанныеПодразделения);
			Если ПроверяемыеСтатусы.Найти(Статус) = Неопределено Тогда
				ТребуетсяЗаполнитьПоОперациям = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПроизводствоНаСтороне Тогда
		
		МаршрутнаяКарта = Справочники.МаршрутныеКарты.ПустаяСсылка();
		КоэффициентМаршрутнойКарты = 0;
		
		РасходМатериаловИРабот.Очистить();
		ЭкономияМатериалов.Очистить();
		Трудозатраты.Очистить();
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		ЗанятостьВидовРабочихЦентров.Очистить();
		ВидыЗапасовЭкономия.Очистить();
		
	Иначе
		
		ЗаказПереработчику = Документы.ЗаказПереработчику.ПустаяСсылка();
		
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ЭтапПроизводства2_2);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ВыходныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ПобочныеИзделия);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ОбеспечениеМатериаламиИРаботами);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.РасходМатериаловИРабот);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий.ЭкономияМатериалов);
	
КонецПроцедуры

Процедура ЗаполнитьНомерПоРаспоряжению()
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Распоряжение) Тогда
		
		Реквизиты = УправлениеПроизводствомПовтИсп.ДанныеПроизводственногоЗаказа(Распоряжение);
		
		Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(Реквизиты.Номер);
		Номер = СокрЛП(Номер);
		
		Если Не ЗначениеЗаполнено(НомерПартииЗапуска) Тогда
			НомерПартииЗапуска = Справочники.ПартииПроизводства.НомерПартииПроизводства(ПартияПроизводства);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НомерЭтапаВПартииЗапуска) Тогда
			НомерЭтапаВПартииЗапуска = Документы.ЭтапПроизводства2_2.НовыйНомерЭтапаВПартииЗапуска(ПартияПроизводства);
		КонецЕсли;
		
	Иначе
		Номер = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НомерПартииЗапуска) И ЗначениеЗаполнено(НомерЭтапаВПартииЗапуска) Тогда
		Номер = Номер
			+ "."
			+ Формат(НомерПартииЗапуска, "ЧГ=0")
			+ "."
			+ Формат(НомерЭтапаВПартииЗапуска, "ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитЭтапПотребитель()
	
	// В табличных частях <ВыходныеИзделия>, <ПобочныеИзделия> хранится служебный реквизит <ЭтапПотребитель>,
	//  используется для построения структуры заказа.
	//
	// Реквизит заполняется автоматически, кроме заказов на производство созданных до версии 2.4.6,
	//  для которых выключено обособление по этапам производства.
	//
	// При формировании этапов реквизит заполняется пакетно (передается через "данные спецификации").
	
	Отбор = Новый Структура("Отменено", Ложь);
	ИменаТЧ = Новый Массив;
	ИменаТЧ.Вставить(0, "ВыходныеИзделия");
	ИменаТЧ.Вставить(1, "ПобочныеИзделия");
	Изделия = Новый ТаблицаЗначений;
	Изделия.Колонки.Добавить("ИндексТЧ", Новый ОписаниеТипов("Число"));
	Изделия.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	Изделия.Колонки.Добавить("Назначение", Новый ОписаниеТипов("СправочникСсылка.Назначения"));
	Изделия.Колонки.Добавить("ЭтапПотребитель", Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2"));
	Изделия.Колонки.Добавить("СписатьНаРасходы", Новый ОписаниеТипов("Булево"));
	Для ИндексТЧ = 0 По ИменаТЧ.ВГраница() Цикл
		НайденныеСтроки = ЭтотОбъект[ИменаТЧ[ИндексТЧ]].НайтиСтроки(Отбор);
		Для каждого Строка Из НайденныеСтроки Цикл
			НоваяСтрока = Изделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ИндексТЧ = ИндексТЧ;
			НоваяСтрока.ИндексСтроки = Строка.НомерСтроки - 1;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.ИндексТЧ КАК ИндексТЧ,
	|	Таблица.ИндексСтроки КАК ИндексСтроки,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы
	|ПОМЕСТИТЬ Изделия
	|ИЗ
	|	&Изделия КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Изделия.ИндексТЧ КАК ИндексТЧ,
	|	Изделия.ИндексСтроки КАК ИндексСтроки,
	|	ЕСТЬNULL(ЭтапыПотребители.Ссылка, ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)) КАК ЭтапПотребитель
	|ИЗ
	|	Изделия КАК Изделия
	|	
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК ЭтапыПотребители
	|		 ПО Изделия.Назначение = ЭтапыПотребители.Назначение
	|			И НЕ Изделия.СписатьНаРасходы
	|	
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|		 ПО (ИСТИНА)
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение
	|	И НЕ Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|	И Изделия.ЭтапПотребитель <> ЕСТЬNULL(ЭтапыПотребители.Ссылка, ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка))
	|");
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Изделия", Изделия);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭтотОбъект[ИменаТЧ[Выборка.ИндексТЧ]][Выборка.ИндексСтроки].ЭтапПотребитель = Выборка.ЭтапПотребитель;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьФлагПередатьДавальцу(ТабличнаяЧасть)
	
	КоллекцияСтрок = Новый Массив;
	Назначения = Новый Массив;
	Для каждого Строка Из ТабличнаяЧасть Цикл
		// исключаем полуфабрикаты производимые в процессе
		Если Строка.ЭтапПотребитель.Пустая() И Не Строка.Назначение.Пустая() Тогда
			Назначения.Добавить(Строка.Назначение);
			КоллекцияСтрок.Добавить(Строка);
		КонецЕсли;
		Строка.ПередатьДавальцу = Ложь;
	КонецЦикла;
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(Назначения);
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		СвойстваНазначения = СвойстваНазначений.Получить(Строка.Назначение);
		Строка.ПередатьДавальцу = СвойстваНазначения <> Неопределено И СвойстваНазначения.ЭтоДавальческаяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователей() Экспорт
	
	// В табличной части <Последователи> хранятся связи двух типов
	//  - связи типа [0] определяются последовательностью производственного процесса, редактируются вручную
	//  - связи типа [1] определяются этапами-потребителями выходных изделий, заполняются автоматически через поле <Назначение> в данной процедуре
	
	СвязиЭтапов = Новый Соответствие;
	
	Для каждого Строка Из ВыходныеИзделия Цикл
		
		Если НЕ Строка.Отменено И НЕ Строка.СписатьНаРасходы И Не Строка.ЭтапПотребитель.Пустая() И Строка.ЭтапПотребитель <> Ссылка Тогда
			СвязиЭтапов.Вставить(Строка.ЭтапПотребитель, ТипСвязиПотребитель());
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Строка Из ПобочныеИзделия Цикл
		
		Если НЕ Строка.Отменено И НЕ Строка.СписатьНаРасходы И Не Строка.ЭтапПотребитель.Пустая() И Строка.ЭтапПотребитель <> Ссылка Тогда
			СвязиЭтапов.Вставить(Строка.ЭтапПотребитель, ТипСвязиПотребитель());
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс = -Последователи.Количество() + 1 По 0 Цикл
		
		Строка = Последователи[-Индекс];
		
		Если СвязиЭтапов[Строка.Этап] <> Неопределено Тогда
			
			СвязиЭтапов.Удалить(Строка.Этап);
			
		ИначеЕсли Строка.ТипСвязи = ТипСвязиПотребитель() Тогда
			
			Последователи.Удалить(-Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Связь Из СвязиЭтапов Цикл
		
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Связь.Ключ;
		НоваяСтрока.ТипСвязи = Связь.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоСпецификации

Процедура ЗаполнитьПоСпецификации(ДанныеЗаполнения)
	
	ДанныеСпецификации  = ДанныеЗаполнения.ДанныеСпецификации;
	ДанныеЭтапа         = ДанныеЗаполнения.ДанныеЭтапа;
	
	ТаблицыСвязей       = ДанныеЗаполнения.ТаблицыСвязей;
	ЭтапыЦепочки        = ДанныеЗаполнения.ЭтапыЦепочки;
	
	ВариантыОбеспечения = ДанныеЗаполнения.ВариантыОбеспечения;
	
	ЗаполнитьШапкуПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа, 
				ВариантыОбеспечения,
				ТаблицыСвязей);
	
	ЗаполнитьВидыРабочихЦентровПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьТрудозатратыПоСпецификации(
				ДанныеСпецификации, 
				ДанныеЭтапа);
	
	ЗаполнитьПоследователейПоСпецификации(
				ДанныеЭтапа, 
				ЭтапыЦепочки);
	
	ЗаполнитьПоСпецификацииПереопределяемый(
				ДанныеСпецификации,
				ДанныеЭтапа,
				ТаблицыСвязей);
	
	Если ЭтоНовый() Тогда
		
		ЭтотОбъект.УстановитьСсылкуНового(СсылкаНаТекущийЭтап(ДанныеЭтапа));
		
	КонецЕсли;
	
	ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ДополнитьПоСпецификации(ДанныеЗаполнения) Экспорт
	
	ДанныеСпецификации  = ДанныеЗаполнения.ДанныеСпецификации;
	ДанныеЭтапа         = ДанныеЗаполнения.ДанныеЭтапа;
	
	ТаблицыСвязей       = ДанныеЗаполнения.ТаблицыСвязей;
	
	ВариантыОбеспечения = ДанныеЗаполнения.ВариантыОбеспечения;

	ЭтотОбъект.Запланировано              = ДанныеСпецификации.КоличествоПартийВыпуска;
	ЭтотОбъект.КоэффициентМаршрутнойКарты = ДанныеСпецификации.КоличествоПартийВыпуска * ДанныеЭтапа.КоэффициентМаршрутнойКарты;
	
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги")
		И ОбеспечениеМатериаламиИРаботами.Количество() > 0 Тогда
		
		ОбеспечениеМатериаламиИРаботами.Очистить();
		
		ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(
					ДанныеСпецификации,
					ДанныеЭтапа,
					ВариантыОбеспечения,
					ТаблицыСвязей);
		
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		И ВидыРабочихЦентров.Количество() > 0 Тогда
		
		ВидыРабочихЦентров.Очистить();
		АльтернативныеВидыРабочихЦентров.Очистить();
		
		ЗаполнитьВидыРабочихЦентровПоСпецификации(
					ДанныеСпецификации,
					ДанныеЭтапа);
		
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("Трудозатраты")
		И Трудозатраты.Количество() > 0 Тогда
		
		Трудозатраты.Очистить();
		
		ЗаполнитьТрудозатратыПоСпецификации(
					ДанныеСпецификации, 
					ДанныеЭтапа);
		
	КонецЕсли;
	
	ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ПриЗаполненииДополненииПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей);
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ЗаполнитьСтатусыУказанияСерий();
	
	Отказ = Ложь;
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при заполнении кодов строк в табличных частях.';
								|en = 'An error occurred when filling in line codes in tabular sections.'");
	КонецЕсли;
	
	ПрочитатьКодыСтрокДляЗаполненияОбеспечения(ДанныеЭтапа, ТаблицыСвязей);
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерий()
	
	ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("ВыходныеИзделия", ПараметрыУказанияСерий);
	ЗаполнитьСтатусыУказанияСерийВТЧ("ПобочныеИзделия", ПараметрыУказанияСерий);
	ЗаполнитьСтатусыУказанияСерийВТЧ("ОбеспечениеМатериаламиИРаботами", ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьШапкуПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЭтапа,, "Партнер,КоэффициентМаршрутнойКарты");
	
	Если ДанныеЭтапа.Владелец().Колонки.Найти("ЭтапСпецификации") <> Неопределено Тогда
		ЭтотОбъект.Этап = ДанныеЭтапа.ЭтапСпецификации;
	Иначе
		ЭтотОбъект.Этап = ДанныеЭтапа.Этап;
	КонецЕсли;
	
	ЭтотОбъект.НаименованиеЭтапа = ДанныеЭтапа.ЭтапПредставление;
	
	ЭтотОбъект.Спецификация = ДанныеСпецификации.Спецификация;
	ЭтотОбъект.ТипПроизводственногоПроцесса = ДанныеСпецификации.ТипПроизводственногоПроцесса;
	
	ЭтотОбъект.Запланировано              = ДанныеСпецификации.КоличествоПартийВыпуска;
	ЭтотОбъект.КоэффициентМаршрутнойКарты = ДанныеСпецификации.КоличествоПартийВыпуска * ДанныеЭтапа.КоэффициентМаршрутнойКарты;

	ЭтотОбъект.ЕдиницаИзмеренияПартииВыпуска = ДанныеСпецификации.ЕдиницаИзмеренияПартииВыпуска;
	
	Если ПланироватьРаботуВидовРабочихЦентров
		И НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		ПланироватьРаботуВидовРабочихЦентров = Ложь;
	КонецЕсли;
	
	ЭтоВыпускающийЭтап = УправлениеПроизводствомКлиентСервер.ЭтоВыпускающийЭтап(ЭтотОбъект);
	Если ЭтоВыпускающийЭтап Тогда
		ЭтотОбъект.СпособРаспределенияЗатратНаВыходныеИзделия = ДанныеСпецификации.СпособРаспределенияЗатратНаВыходныеИзделия;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОбеспечениеМатериаламиИРаботамиПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПереченьВариантов, ТаблицыСвязей)
	
	Справочники.РесурсныеСпецификации.РаспаковатьСоставНаборов(ДанныеСпецификации);
	
	ПараметрыЗаполненияНазначений = ОбеспечениеПроизводстваКлиентСервер.
		ПараметрыДействияПроверитьЗаполнитьНазначениеОбеспеченияВЭтапеПроизводства(ЭтотОбъект);
	
	// важна последовательность обхода табличной части
	СписокТЧ = Новый Массив;
	СписокТЧ.Добавить("ВходящиеИзделия");
	СписокТЧ.Добавить("МатериалыИУслуги");
	ИндексыСтрок = Новый Массив;
	Для каждого ИмяТаблицы Из СписокТЧ Цикл
		
		Если НЕ ДанныеСпецификации.Свойство(ИмяТаблицы)
			ИЛИ ДанныеСпецификации[ИмяТаблицы].Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСпецификации[ИмяТаблицы].Колонки.Найти("ДатаОтгрузки") = Неопределено Тогда
			ЗаполнитьДатуОтгрузкиЖелаемойДатой = Истина;
		Иначе
			ЗаполнитьДатуОтгрузкиЖелаемойДатой = Ложь;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
		НайденныеСтроки = ДанныеСпецификации[ИмяТаблицы].НайтиСтроки(СтруктураПоиска);
		
		Для каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ОбеспечениеМатериаламиИРаботами.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.КлючСвязиСпецификация = Строка.КлючСвязи;
			
			Если ЗаполнитьДатуОтгрузкиЖелаемойДатой Тогда
				НоваяСтрока.ДатаОтгрузки = ЖелаемаяДатаОбеспечения;
			КонецЕсли;
			
			ОбеспечениеПроизводстваКлиентСервер.ЗаполнитьНазначениеОбеспеченияВСтрокеЭтапаПроизводства(
				НоваяСтрока,
				ПараметрыЗаполненияНазначений);
			
			Если НЕ ( НЕ ЗначениеЗаполнено(ПереченьВариантов)
				
				ИЛИ Строка.Производится
				
				ИЛИ (Строка.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется 
				 	И Строка.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа)
				
				ИЛИ Строка.ЗапрещеноИзменятьВариантОбеспечения) Тогда
				
				ИндексыСтрок.Добавить(ОбеспечениеМатериаламиИРаботами.Индекс(НоваяСтрока));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИндексыСтрок.Количество() > 0 Тогда
		
		ЭтапПроизводства = СсылкаНаТекущийЭтап(ДанныеЭтапа);
		
		Строка = ТаблицыСвязей.СтрокиДляЗаполненияОбеспечения.Найти(ЭтапПроизводства, "ЭтапПроизводства");
		
		Если Строка = Неопределено Тогда
			Строка = ТаблицыСвязей.СтрокиДляЗаполненияОбеспечения.Добавить();
			Строка.ЭтапПроизводства = ЭтапПроизводства;
		КонецЕсли;
		
		Строка.ИндексыСтрок = ИндексыСтрок;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыРабочихЦентровПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если НЕ ДанныеСпецификации.Свойство("ВидыРабочихЦентров")
		ИЛИ ДанныеСпецификации.ВидыРабочихЦентров.Количество() = 0
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяПланированиеПоПроизводственнымРесурсам() Тогда
		
		Возврат;
	КонецЕсли;
	
	ЗначенияПоУмолчанию = Новый Структура;
	Если ДанныеСпецификации.ВидыРабочихЦентров.Колонки.Найти("Использовать") = Неопределено Тогда
		ЗначенияПоУмолчанию.Вставить("Использовать", Истина);
	КонецЕсли;
	
	СоответствиеВидовРабочихЦентров = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = ЭтотОбъект.ВидыРабочихЦентров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначенияПоУмолчанию);
		
		НоваяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
		
		СоответствиеВидовРабочихЦентров.Вставить(
			НоваяСтрока.ВидРабочегоЦентра, 
			НоваяСтрока.КлючСвязи);
		
	КонецЦикла;
	
	Если ДанныеСпецификации.Свойство("АльтернативныеВидыРабочихЦентров")
		И ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.Количество() > 0 Тогда
		
		НайденныеСтроки = ДанныеСпецификации.АльтернативныеВидыРабочихЦентров.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ЭтотОбъект.АльтернативныеВидыРабочихЦентров.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.КлючСвязиВидыРабочихЦентров = СоответствиеВидовРабочихЦентров[Строка.ОсновнойВидРабочегоЦентра];
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТрудозатратыПоСпецификации(ДанныеСпецификации, ДанныеЭтапа)
	
	Если ДанныеСпецификации.Трудозатраты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.Трудозатраты.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоследователейПоСпецификации(ДанныеЭтапа, ЭтапыЦепочки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЭтапа.НомерСледующегоЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерЭтапа", ДанныеЭтапа.НомерСледующегоЭтапа);
	
	НайденныеСтроки = ЭтапыЦепочки.НайтиСтроки(СтруктураПоиска);
	Для каждого Строка Из НайденныеСтроки Цикл
		
		НоваяСтрока = Последователи.Добавить();
		НоваяСтрока.Этап     = Строка.Этап;
		НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВыходныеИзделияПоСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	ТаблицыСвязей.ПФВыпуск.Очистить();
	
	Если ДанныеСпецификации.Свойство("ВыходныеИзделия") И ДанныеСпецификации.ВыходныеИзделия.Количество() > 0 Тогда
		ЗагрузитьВыходныеИзделияСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей.ПФВыпуск);
	КонецЕсли;
	
	Если ДанныеСпецификации.Свойство("ВозвратныеОтходы") И ДанныеСпецификации.ВозвратныеОтходы.Количество() > 0 Тогда
		ЗагрузитьВозвратныеОтходыСпецификации(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей.ПФВыпуск);
	КонецЕсли;
	
	ЗаполнитьНазначенияВВыходныхИзделиях(ТаблицыСвязей, Истина);
	Документы.ЭтапПроизводства2_2.ЗаполнитьНазначениеПобочногоВыпуска(ЭтотОбъект,, ДанныеСпецификации.СхемаОбособления);
	
КонецПроцедуры

Процедура ЗаполнитьПоСпецификацииПереопределяемый(ДанныеСпецификации, ДанныеЭтапа, ТаблицыСвязей)
	
	Если Не ДанныеСпецификации.Свойство("РасходМатериаловИРабот") Тогда
		
		Возврат;
		
	КонецЕсли;
	РасходМатериаловИРабот.Загрузить(ДанныеСпецификации.РасходМатериаловИРабот);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеСпецификации, ДанныеСпецификации.ДопРеквизиты);
	
КонецПроцедуры

Процедура ЗагрузитьВыходныеИзделияСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПФВыпуск)
	
	КэшПересчетаУпаковок = Неопределено;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиПолучатель) Тогда
			
			НоваяСтрокаДокумент = ВыходныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, Строка);
			
			НоваяСтрокаПФВыпуск = ПФВыпуск.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПФВыпуск, Строка);
			
			Если Строка.ОбработатьПоСпецификации Тогда
				НоваяСтрокаПФВыпуск.Спецификация = Строка.Спецификация;
			Иначе
				НоваяСтрокаПФВыпуск.Спецификация = ДанныеСпецификации.Спецификация;
			КонецЕсли;
			
			НоваяСтрокаПФВыпуск.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
			НоваяСтрокаПФВыпуск.ИндексСтроки = ВыходныеИзделия.Индекс(НоваяСтрокаДокумент);
			
		Иначе
			
			ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, "ВыходныеИзделия", КэшПересчетаУпаковок);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьВозвратныеОтходыСпецификации(ДанныеСпецификации, ДанныеЭтапа, ПФВыпуск)
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшПересчетаУпаковок = Неопределено;
	
	СтруктураПоиска = Новый Структура("Этап", ДанныеЭтапа.Этап);
	НайденныеСтроки = ДанныеСпецификации.ВозвратныеОтходы.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Строка Из НайденныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.КлючСвязиПолучатель) Тогда
			
			НоваяСтрокаДокумент = ПобочныеИзделия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, Строка);
			
			НоваяСтрокаПФВыпуск = ПФВыпуск.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПФВыпуск, Строка);
			
			Если Строка.ОбработатьПоСпецификации Тогда
				НоваяСтрокаПФВыпуск.Спецификация = Строка.Спецификация;
			ИначеЕсли ЗначениеЗаполнено(Строка.СпецификацияРемонта) Тогда
				НоваяСтрокаПФВыпуск.Спецификация = Строка.СпецификацияРемонта;
			Иначе
				НоваяСтрокаПФВыпуск.Спецификация = ДанныеСпецификации.Спецификация;
			КонецЕсли;
			
			НоваяСтрокаПФВыпуск.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
			НоваяСтрокаПФВыпуск.ИндексСтроки = ПобочныеИзделия.Индекс(НоваяСтрокаДокумент);
			НоваяСтрокаПФВыпуск.ФиксированнаяСтоимость = Истина;
			
		Иначе
			
			ПолуфабрикатыНаЭтапе = ПроизводимыеНаЭтапеПолуфабрикаты(ДанныеСпецификации, Строка);
			
			Если ПолуфабрикатыНаЭтапе.Количество() > 0 Тогда
			
				Индекс = 0;
				КоличествоОстаток = Строка.Количество;
				
				Пока КоличествоОстаток > 0 Цикл
					
					НоваяСтрокаДокумент = ПобочныеИзделия.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаДокумент, Строка);
					
					Если Индекс < ПолуфабрикатыНаЭтапе.Количество() Тогда
						
						СтрокаПолуфабрикат = ПолуфабрикатыНаЭтапе[Индекс];
						Количество = СтрокаПолуфабрикат.Количество;
						
						НоваяСтрокаПФВыпуск = ПФВыпуск.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПФВыпуск, Строка);
						
						НоваяСтрокаПФВыпуск.Количество = Количество;
						
						Если Строка.ОбработатьПоСпецификации Тогда
							НоваяСтрокаПФВыпуск.Спецификация = Строка.Спецификация;
						Иначе
							НоваяСтрокаПФВыпуск.Спецификация = ДанныеСпецификации.Спецификация;
						КонецЕсли;
						
						НоваяСтрокаПФВыпуск.ЭтапПроизводства = ДанныеЭтапа.ЭтапПроизводства;
						НоваяСтрокаПФВыпуск.ИндексСтроки = ПобочныеИзделия.Индекс(НоваяСтрокаДокумент);
						НоваяСтрокаПФВыпуск.ФиксированнаяСтоимость = Истина;
						
						НоваяСтрокаПФВыпуск.КлючСвязиПолучатель = ДанныеСпецификации.КлючСвязи;
						НоваяСтрокаПФВыпуск.ЭтапПолучательИзделия = СтрокаПолуфабрикат.Этап;
						
					Иначе
						
						Количество = КоличествоОстаток;
						
					КонецЕсли;
					
					КоличествоДоИзменения = НоваяСтрокаДокумент.Количество;
					НоваяСтрокаДокумент.Количество = Количество;
					
					Если НЕ КоличествоДоИзменения = НоваяСтрокаДокумент.Количество Тогда
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
						НоваяСтрокаДокумент, СтруктураДействий, КэшПересчетаУпаковок);
					КонецЕсли;
					
					Индекс = Индекс + 1;
					КоличествоОстаток = КоличествоОстаток - Количество;
					
				КонецЦикла;
				
			Иначе
				
				ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, "ПобочныеИзделия", КэшПересчетаУпаковок);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуИзделий(Строка, ПФВыпуск, ИмяТаблицы, КэшПересчетаУпаковок)
	
	СуществующаяСтрокаДокумента = ПодобратьСтрокуИзделийДляДополнения(Строка, ПФВыпуск, ИмяТаблицы);
	
	Если СуществующаяСтрокаДокумента = Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), Строка);
		
	Иначе
		
		УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, СуществующаяСтрокаДокумента, Строка);
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СуществующаяСтрокаДокумента, СтруктураДействий, КэшПересчетаУпаковок);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьСтрокуИзделийДляДополнения(ЗначенияЗаполнения, ПФВыпуск, ИмяТаблицы)
	
	Результат = Неопределено;
	
	СтруктураПоискаДокумент = Новый Структура;
	
	СтруктураПоискаДокумент.Вставить("Номенклатура",    ЗначенияЗаполнения.Номенклатура);
	СтруктураПоискаДокумент.Вставить("Характеристика",  ЗначенияЗаполнения.Характеристика);
	СтруктураПоискаДокумент.Вставить("Назначение",      ЗначенияЗаполнения.Назначение);
	СтруктураПоискаДокумент.Вставить("Получатель",      ЗначенияЗаполнения.Получатель);
	СтруктураПоискаДокумент.Вставить("ЭтапПотребитель", ЗначенияЗаполнения.ЭтапПотребитель);
	СтруктураПоискаДокумент.Вставить("Отменено",        Ложь);
	
	Если ИмяТаблицы = "ВыходныеИзделия" Тогда
		СтруктураПоискаДокумент.Вставить("СписатьНаРасходы",         ЗначенияЗаполнения.СписатьНаРасходы);
		СтруктураПоискаДокумент.Вставить("СтатьяРасходов",           ЗначенияЗаполнения.СтатьяРасходов);
		СтруктураПоискаДокумент.Вставить("АналитикаРасходов",        ЗначенияЗаполнения.АналитикаРасходов);
		СтруктураПоискаДокумент.Вставить("АналитикаАктивовПассивов", ЗначенияЗаполнения.АналитикаАктивовПассивов);
	КонецЕсли;
	
	СтрокиДокумента = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(СтруктураПоискаДокумент);
	
	СтруктураПоискаКэш = Новый Структура;
	СтруктураПоискаКэш.Вставить("ЭтапПроизводства", Ссылка);
	СтруктураПоискаКэш.Вставить("ФиксированнаяСтоимость", ИмяТаблицы = "ПобочныеИзделия");
	СтруктураПоискаКэш.Вставить("ИндексСтроки");
	
	Для каждого СтрокаДокумента Из СтрокиДокумента Цикл
		
		СтруктураПоискаКэш.ИндексСтроки = ЭтотОбъект[ИмяТаблицы].Индекс(СтрокаДокумента);
		СтрокиКэша = ПФВыпуск.НайтиСтроки(СтруктураПоискаКэш);
		
		Если СтрокиКэша.Количество() = 0 Тогда
			
			Результат = СтрокаДокумента;
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПроизводимыеНаЭтапеПолуфабрикаты(ДанныеСпецификации, СтрокаВозвратныеОтходы)
	
	Если ДанныеСпецификации.Свойство("МатериалыИУслуги") Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаВозвратныеОтходы.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаВозвратныеОтходы.Характеристика);
		СтруктураПоиска.Вставить("ИсточникПолученияПолуфабриката", СтрокаВозвратныеОтходы.Этап);
		СтруктураПоиска.Вставить("СпособПолученияМатериала", Перечисления.СпособыПолученияМатериаловВСпецификации.ПроизводитсяНаЭтапе);
		
		Результат = ДанныеСпецификации.МатериалыИУслуги.НайтиСтроки(СтруктураПоиска);
		
	Иначе
		
		Результат = Новый Массив;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьНазначенияВВыходныхИзделиях(ТаблицыСвязей, СвернутьТаблицуИзделий)
	
	Если ТаблицыСвязей.ПФВыпуск.Количество() > 0 Тогда
		
		КэшПересчетаУпаковок = Неопределено;
		
		ПФВыпуск      = ТаблицыСвязей.ПФВыпуск;
		ПФПотребность = ТаблицыСвязей.ПФПотребность;
		ПФСвязи       = ТаблицыСвязей.ПФСвязи;
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
		
		Для каждого СтрокаВыпуск Из ПФВыпуск Цикл

			Если СтрокаВыпуск.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаВыпуск.ФиксированнаяСтоимость Тогда
				ИмяТаблицы = "ПобочныеИзделия";
			Иначе
				ИмяТаблицы = "ВыходныеИзделия";
			КонецЕсли;
			
			СтрокаЭтапа = ЭтотОбъект[ИмяТаблицы][СтрокаВыпуск.ИндексСтроки];
			
			СтруктураПоискаСвязи = Новый Структура;
			СтруктураПоискаСвязи.Вставить("КлючСвязиПолучатель", СтрокаВыпуск.КлючСвязиПолучатель);
			СтруктураПоискаСвязи.Вставить("ЭтапПолучательИзделия", СтрокаВыпуск.ЭтапПолучательИзделия);
			
			НайденныеСвязи = ПФСвязи.НайтиСтроки(СтруктураПоискаСвязи);
			Для каждого СтрокаСвязь Из НайденныеСвязи Цикл
				
				СтруктураПоискаПотребность = Новый Структура;
				СтруктураПоискаПотребность.Вставить("ЭтапПроизводства", СтрокаСвязь.ЭтапПроизводства);
				СтруктураПоискаПотребность.Вставить("Номенклатура", СтрокаВыпуск.Номенклатура);
				СтруктураПоискаПотребность.Вставить("Характеристика", СтрокаВыпуск.Характеристика);
				СтруктураПоискаПотребность.Вставить("Спецификация", СтрокаВыпуск.Спецификация);
				
				НайденныеПотребности = ПФПотребность.НайтиСтроки(СтруктураПоискаПотребность);
				Для каждого СтрокаПотребность Из НайденныеПотребности Цикл
					
					КоличествоПотребность = СтрокаПотребность.Количество - СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом;
					Если КоличествоПотребность = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЭтапПотребитель = СтрокаПотребность.ЭтапПроизводства;
					
					НазначениеИзделия = ТаблицыСвязей.НазначенияПолуфабрикатов.Получить(ЭтапПотребитель);
					ПолучательИзделия = СтрокаПотребность.Получатель;
					
					Если СтрокаВыпуск.Количество <= КоличествоПотребность Тогда
						
						КоличествоЗачет = СтрокаВыпуск.Количество;
						
						СтрокаЭтапа.ЭтапПотребитель = ЭтапПотребитель;
						СтрокаЭтапа.Назначение = НазначениеИзделия;
						СтрокаЭтапа.Получатель = ПолучательИзделия;
						
						ОбособленнаяСтрока = СтрокаЭтапа;
						
					Иначе
						
						КоличествоЗачет = КоличествоПотребность;
						
						НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЭтапа);
						
						НоваяСтрока.Количество = КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшПересчетаУпаковок);
						
						НоваяСтрока.ЭтапПотребитель = ЭтапПотребитель;
						НоваяСтрока.Назначение = НазначениеИзделия;
						НоваяСтрока.Получатель = ПолучательИзделия;
						
						ОбособленнаяСтрока = НоваяСтрока;
						
						СтрокаЭтапа.Количество = СтрокаЭтапа.Количество - КоличествоЗачет;
						ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаЭтапа, СтруктураДействий, КэшПересчетаУпаковок);
						
						Если ИмяТаблицы = "ВыходныеИзделия" Тогда
							
							ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, СтрокаЭтапа, СпособРаспределенияЗатратНаВыходныеИзделия);
							
						КонецЕсли;
						
					КонецЕсли;
					
					СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - КоличествоЗачет;
					СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом = СтрокаПотребность.КоличествоОбеспеченоТекущимЭтапом
						+ КоличествоЗачет;
					СтрокаПотребность.ОбеспеченаТекущимЭтапом = Истина;
					
					НоваяСтрокаПоследователи = Последователи.Добавить();
					НоваяСтрокаПоследователи.Этап     = ЭтапПотребитель;
					НоваяСтрокаПоследователи.ТипСвязи = ТипСвязиПотребитель();
					
					Если СтрокаВыпуск.Количество = 0 Тогда
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
					
				Если СтрокаВыпуск.Количество = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если СвернутьТаблицуИзделий Тогда
		СвернутьТаблицуИзделий("ВыходныеИзделия");
	КонецЕсли;
	
	УпорядочитьТаблицуИзделийПоНазначениям("ВыходныеИзделия");
	
	Если СвернутьТаблицуИзделий Тогда
		СвернутьТаблицуИзделий("ПобочныеИзделия");
	КонецЕсли;
	
	УпорядочитьТаблицуИзделийПоНазначениям("ПобочныеИзделия");
	
КонецПроцедуры

Процедура СвернутьТаблицуИзделий(ИмяТаблицы)
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы];
	
	СтруктураПоиска = Новый Структура(
		"Номенклатура, Характеристика, Получатель, Назначение, ЭтапПотребитель, Серия, СписатьНаРасходы, СтатьяРасходов, АналитикаРасходов, АналитикаАктивовПассивов");
	
	СтруктураДействий = Новый Структура("ПересчитатьКоличествоУпаковок");
	КэшПересчетаУпаковок = Неопределено;
	
	Индекс = 0;
	Пока Индекс < ТабличнаяЧасть.Количество()-1 Цикл
		
		ТекущаяСтрока = ТабличнаяЧасть[Индекс];
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущаяСтрока);
		НайденныеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.НомерСтроки = ТекущаяСтрока.НомерСтроки Тогда
					Продолжить;
				Иначе
					
					УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, ТекущаяСтрока, Строка);
					
					ТабличнаяЧасть.Удалить(Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
				ТекущаяСтрока, СтруктураДействий, КэшПересчетаУпаковок);
				
		КонецЕсли;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УпорядочитьТаблицуИзделийПоНазначениям(ИмяТаблицы)
	
	ТабличнаяЧасть = ЭтотОбъект[ИмяТаблицы];
	
	Если ТабличнаяЧасть.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;
	
	ИндексНазначение = 0;
	
	Для Индекс = 0 По ТабличнаяЧасть.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(ТабличнаяЧасть[Индекс].Назначение) Тогда
			
			Если НЕ Индекс = ИндексНазначение Тогда
				
				ТабличнаяЧасть.Сдвинуть(Индекс, ИндексНазначение - Индекс);
				
			КонецЕсли;
			
			ИндексНазначение = ИндексНазначение + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКодыСтрокДляЗаполненияОбеспечения(ДанныеЭтапа, ТаблицыСвязей)
	
	Таблица = ТаблицыСвязей.СтрокиДляЗаполненияОбеспечения;
	
	ЭтапПроизводства = СсылкаНаТекущийЭтап(ДанныеЭтапа);
	
	Строка = Таблица.Найти(ЭтапПроизводства, "ЭтапПроизводства");
	
	Если НЕ Строка = Неопределено Тогда
		
		КодыСтрок = Новый Массив;
		
		Для каждого Индекс Из Строка.ИндексыСтрок Цикл
			
			КодыСтрок.Добавить(ОбеспечениеМатериаламиИРаботами[Индекс].КодСтроки);
			
		КонецЦикла;
		
		Строка.КодыСтрок = КодыСтрок;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаТекущийЭтап(ДанныеЭтапа)
	
	Если ЭтоНовый() Тогда
		
		Результат = ДанныеЭтапа.ЭтапПроизводства;
		
	Иначе
		
		Результат = Ссылка;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УвеличитьКоличествоВТаблицеИзделий(ИмяТаблицы, Строка, ЗначенияЗаполнения)
	
	Строка.Количество = Строка.Количество + ЗначенияЗаполнения.Количество;
	
	Если ИмяТаблицы = "ВыходныеИзделия" Тогда
		
		Строка.ДоляСтоимости = Строка.ДоляСтоимости + ЗначенияЗаполнения.ДоляСтоимости;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбособитьВыпускПодРазборку(ТаблицыСвязей) Экспорт
	
	ЗаполнитьНазначенияВВыходныхИзделиях(ТаблицыСвязей, Ложь);
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("ВыходныеИзделия");
	ЗаполнитьСтатусыУказанияСерийВТЧ("ПобочныеИзделия");
	
	Отказ = Ложь;
	УстановитьКлючВСтрокахТабличныхЧастей(Отказ);
	Если Отказ Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка при заполнении кодов строк в табличных частях.';
								|en = 'An error occurred when filling in line codes in tabular sections.'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоОперациям

#Область ОбщиеДействия

Процедура ПодготовитьДанныеОперацийДляЗаполненияДанных(ДанныеОпераций)
	
	НастроитьТаблицуВыходныхИзделийОпераций(ДанныеОпераций.ВыходныеИзделия);
	
	НастроитьТаблицуВыходныхИзделийОпераций(ДанныеОпераций.ВыходныеИзделияСерии);
	
	НастроитьТаблицуМатериаловОпераций(ДанныеОпераций.МатериалыИРаботы);
	
КонецПроцедуры

Процедура НастроитьТаблицуМатериаловОпераций(Таблица)
	
	Таблица.Колонки.ДатаВыполнения.Имя = "ДатаРасхода";
	
КонецПроцедуры

Процедура НастроитьТаблицуВыходныхИзделийОпераций(Таблица)
	
	Таблица.Колонки.ДатаВыполнения.Имя = "ДатаПроизводства";
	
	ОТСтрока = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25));
	
	Таблица.Колонки.Добавить("ИмяТЧ", ОТСтрока);
	
	Для каждого Строка Из Таблица Цикл
		
		НайденнаяСтрока = ВыходныеИзделия.Найти(Строка.Номенклатура, "Номенклатура");
		
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Строка.ИмяТЧ = "ВыходныеИзделия";
		Иначе
			Строка.ИмяТЧ = "ПобочныеИзделия";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСоСтроками

Процедура СверитьКоличествоТЧСДаннымиОпераций(ДанныеОпераций, СтруктураПоискаОпераций, КоличествоТЧ)
	
	НайденныеСтроки = ДанныеОпераций.НайтиСтроки(СтруктураПоискаОпераций);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоТЧ, СтрокаОперация.Количество);
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ДанныеОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоТЧ = КоличествоТЧ - КоличествоЗачет;
		Если КоличествоТЧ = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УменьшитьВыполненноеКоличествоВСтрокеТЧ(ИмяТЧ, СтрокаТЧ, КоличествоНеПроизведено, ИмяФлагаПроизведено)
	
	Если СтрокаТЧ.Количество = КоличествоНеПроизведено Тогда
		
		СтрокаТЧ[ИмяФлагаПроизведено] = Ложь;
		
		Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			СтрокаТЧ.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		
		НоваяСтрока.КодСтроки = 0;
		НоваяСтрока.Количество = КоличествоНеПроизведено;
		НоваяСтрока[ИмяФлагаПроизведено] = Ложь;
		
		Если ИмяТЧ = "ВыходныеИзделия" ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			НоваяСтрока.Серия = Справочники.СерииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество - КоличествоНеПроизведено;
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			
			ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, СтрокаТЧ, СпособРаспределенияЗатратНаВыходныеИзделия);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуНеПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей)
	
	Перем КэшированныеЗначения;
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Для каждого СтрокаВыпуск Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(СтрокаВыпуск.Количество, ДанныеОперации.Количество);
		
		Если КоличествоЗачет = СтрокаВыпуск.Количество Тогда
			
			СтрокаВыпуск[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаВыпуск, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
		Иначе
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыпуск);
		
			НоваяСтрока.КодСтроки = 0;
			НоваяСтрока.Количество = КоличествоЗачет;
			НоваяСтрока[ИменаПолей.ФлагПроизведено] = Истина;
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеОперации, ИменаПолей.ЗаполнитьПоОперации);
			
			СтрокаВыпуск.Количество = СтрокаВыпуск.Количество - КоличествоЗачет;
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				
				ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, СтрокаВыпуск, СпособРаспределенияЗатратНаВыходныеИзделия);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеОперации.Количество = ДанныеОперации.Количество - КоличествоЗачет;
		
		Если ДанныеОперации.Количество = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьДанныеОперацииВСтрокуПроизведено(ИмяТЧ, ДанныеОперации, СтруктураПоиска, ИменаПолей)
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеОперации);
	СтруктураПоиска[ИменаПолей.ФлагПроизведено] = Истина;
	
	НайденныеСтроки = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + ДанныеОперации.Количество;
		
		ДанныеОперации.Количество = 0;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуПроизводстваПоТЧ(ИмяТЧ, ДатаТЧ, ОднаДата, ИменаПолей)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		ОбрабатыватьСтроку = НЕ ИменаПолей.Свойство("ФлагОтменено")
			ИЛИ НЕ Строка[ИменаПолей.ФлагОтменено];
		
		Если ОбрабатыватьСтроку Тогда
			
			Если ЗначениеЗаполнено(ДатаТЧ) Тогда
				
				Если ДатаТЧ = Строка[ИменаПолей.Дата] Тогда
					Продолжить;
				Иначе
					ОднаДата = Ложь;
					Прервать;
				КонецЕсли;
				
			Иначе
				ДатаТЧ = Строка[ИменаПолей.Дата];
				ОднаДата = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Материалы

Процедура ЗаполнитьМатериалыПоОперациям(МатериалыОпераций)
	
	РасходМатериаловИРабот.Очистить();
	
	Для каждого СтрокаОперация Из МатериалыОпераций Цикл
		
		НоваяСтрока = РасходМатериаловИРабот.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОперация);
		
		ЗаполнитьСтрокуРасходаПоДаннымОбеспечения(НоваяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийВТЧ("РасходМатериаловИРабот");
	
	ЗаполнитьДатуРасходаМатериаловВШапке();
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуРасходаПоДаннымОбеспечения(СтрокаРасход)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасход);
	
	НайденныеСтроки = ОбеспечениеМатериаламиИРаботами.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаРасход.СтатьяКалькуляции = НайденныеСтроки[0].СтатьяКалькуляции;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуРасходаМатериаловВШапке()
	
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	
	ИменаПолей.Вставить("Дата", "ДатаРасхода");
	ЗаполнитьДатуПроизводстваПоТЧ("РасходМатериаловИРабот", ДатаТЧ, ОднаДата, ИменаПолей);
	
	ИменаПолей.Вставить("Дата", "ДатаОперации");
	ЗаполнитьДатуПроизводстваПоТЧ("ЭкономияМатериалов", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаРасхода = ДатаТЧ;
	Иначе
		ДатаРасхода = '00010101';
	КонецЕсли;
	
	РасходОднойДатой = ОднаДата;
	
КонецПроцедуры

#КонецОбласти

#Область ВыходныеПобочныеИзделия

Процедура ЗаполнитьИзделияПоОперациям(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии)
	
	СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии);

	ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций);
	
	ЗаполнитьСерииИзделийПоОперациям(ИмяТЧ, ИзделияОперацийСерии);
	
	ОбработатьИзделияПослеЗаполненияПоОперациям(ИмяТЧ);
	
КонецПроцедуры

Процедура СверитьИзделияСДаннымиОпераций(ИмяТЧ, ИзделияОпераций, ИзделияОперацийСерии)
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено ИЛИ Строка.Отменено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СверитьВыпускСДаннымиОпераций(Строка, КоличествоОстаток, ИзделияОпераций, ИзделияОперацийСерии);
		
		Если КоличествоОстаток > 0 Тогда
			
			УменьшитьВыполненноеКоличествоВСтрокеТЧ(ИмяТЧ, Строка, КоличествоОстаток, "Произведено");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьВыпускСДаннымиОпераций(СтрокаВыпуск, КоличествоВыпуск, ИзделияОпераций, ИзделияОперацийСерии)
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
	
	НайденныеСтроки = ИзделияОпераций.НайтиСтроки(СтруктураПоиска);
		
	Для каждого СтрокаОперация Из НайденныеСтроки Цикл
		
		КоличествоЗачет = МИН(КоличествоВыпуск, СтрокаОперация.Количество);
		
		СерииСверены = СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, КоличествоЗачет);
		Если НЕ СерииСверены Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОперация.Количество = СтрокаОперация.Количество - КоличествоЗачет;
		Если СтрокаОперация.Количество = 0 Тогда
			ИзделияОпераций.Удалить(СтрокаОперация);
		КонецЕсли;
		
		КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
		Если КоличествоВыпуск = 0 Тогда
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Функция СверитьСериюВыпускаСДаннымиОпераций(СтрокаВыпуск, ИзделияОперацийСерии, Знач КоличествоВыпуск)
	
	Если ЗначениеЗаполнено(СтрокаВыпуск.Серия) Тогда
		
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства, Серия");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВыпуск);
		
		НайденныеСтроки = ИзделияОперацийСерии.НайтиСтроки(СтруктураПоиска);
		
		Количество = 0;
		Для каждого Строка Из НайденныеСтроки Цикл
			Количество = Количество + Строка.Количество;
		КонецЦикла;
		
		Если Количество >= КоличествоВыпуск Тогда
			
			СерииСверены = Истина;
			
			Для каждого Строка Из НайденныеСтроки Цикл
				
				КоличествоЗачет = Мин(КоличествоВыпуск, Строка.Количество);
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				Если Строка.Количество = 0 Тогда
					ИзделияОперацийСерии.Удалить(Строка);
				КонецЕсли;
				
				КоличествоВыпуск = КоличествоВыпуск - КоличествоЗачет;
				Если КоличествоВыпуск = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СерииСверены = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		СерииСверены = Истина;
		
	КонецЕсли;
	
	Возврат СерииСверены;
	
КонецФункции

Процедура ЗагрузитьДанныеОперацийВИзделия(ИмяТЧ, ИзделияОпераций)
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ПараметрыРаспределенияЗатрат = Документы.ЭтапПроизводства2_2.ПараметрыРаспределенияЗатрат(ЭтотОбъект);
	ПараметрыДействияПроверитьЗаполнитьНазначениеПобочногоВыхода = ОбеспечениеПроизводства.ПараметрыДействияПроверитьЗаполнитьНазначениеПобочногоВыхода(ЭтотОбъект);
	
	Для каждого Строка Из ИзделияОпераций Цикл
		
		Если НЕ Строка.ИмяТЧ = ИмяТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Произведено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаПроизводства, Серия");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", Строка.Характеристика);
		СтруктураПоиска.Вставить("Произведено", Ложь);
		СтруктураПоиска.Вставить("Отменено", Ложь);
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			ИмяТЧ, Строка, СтруктураПоиска, ИменаПолей);
		
		Если Строка.Количество > 0 Тогда
	
			НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Произведено = Истина;
			
			СтруктураДействий = Новый Структура();
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
			КонецЕсли;
			
			СтруктураДействий.Вставить("ПроверитьЗаполнитьНазначениеПобочногоВыхода",
										ПараметрыДействияПроверитьЗаполнитьНазначениеПобочногоВыхода);
			
			ПроизводствоКлиентСервер.ДобавитьВСтруктуруДействияПроверитьЗаполнитьСкладПроизводства(
				Подразделение,
				СтруктураДействий,
				"Получатель");
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзделияПослеЗаполненияПоОперациям(ИмяТЧ)
	
	Если ЭтотОбъект[ИмяТЧ].Количество() > 0 Тогда
		
		Если ИмяТЧ = "ПобочныеИзделия" Тогда
			Документы.ЭтапПроизводства2_2.ЗаполнитьЦеныПоВидуЦен(ЭтотОбъект);
		КонецЕсли;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить(
			"ПересчитатьКоличествоУпаковок",
			ОбработкаТабличнойЧастиКлиентСервер.СтруктураПересчетаКоличестваУпаковок());
		
		ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЭтотОбъект[ИмяТЧ], СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСерииИзделийПоОперациям(ИмяТЧ, ИзделияОперацийСерии)
	
	СерииДоЗагрузки = ЭтотОбъект[ИмяТЧ + "Серии"].Выгрузить();
	ЭтотОбъект[ИмяТЧ + "Серии"].Очистить();
	
	ЗагрузитьИзделияОперацийСерии(ИмяТЧ, ИзделияОперацийСерии);
	
	ВосстановитьСерииДоЗагрузки(ИмяТЧ, СерииДоЗагрузки);
	
	ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	
	ПеренестиСерииВТаблицуИзделий(ИмяТЧ);
	
КонецПроцедуры

Процедура ЗагрузитьИзделияОперацийСерии(ИмяТЧ, ИзделияОперацийСерии)
	
	Если ИзделияОперацийСерии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИзделия = ЭтотОбъект[ИмяТЧ].Выгрузить(
		Новый Структура("Произведено, Отменено", Истина, Ложь),
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Количество");
	
	ТаблицаИзделия.Свернуть(
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение", "Количество");
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ДатаПроизводства");
	
	Для каждого СтрокаСерии Из ИзделияОперацийСерии Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСерии);
		
		НайденныеСтроки = ТаблицаИзделия.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаИзделие Из НайденныеСтроки Цикл
			
			Количество = МИН(СтрокаСерии.Количество, СтрокаИзделие.Количество);
			
			НоваяСтрока = ЭтотОбъект[ИмяТЧ + "Серии"].Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСерии);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзделие, "Получатель, Назначение");
			
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.Произведено = Истина;
			
			СтрокаИзделие.Количество = СтрокаИзделие.Количество - Количество;
			Если СтрокаИзделие.Количество = 0 Тогда
				ТаблицаИзделия.Удалить(СтрокаИзделие);
			КонецЕсли;
			
			СтрокаСерии.Количество = СтрокаСерии.Количество - Количество;
			Если СтрокаСерии.Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановитьСерииДоЗагрузки(ИмяТЧ, СерииДоЗагрузки)
	
	ИсключитьСерииЗагруженныеИзОпераций(ИмяТЧ, СерииДоЗагрузки);
	
	Если СерииДоЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СерииДоЗагрузки.ЗаполнитьЗначения(Ложь, "Произведено");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Произведено", Ложь);
	СтруктураОтбора.Вставить("Отменено", Ложь);
	СтруктураОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	Измерения = "Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение";
	
	ТаблицаИзделия = ЭтотОбъект[ИмяТЧ].Выгрузить(
		СтруктураОтбора,
		Измерения + ", Количество");
	
	ТаблицаИзделия.Свернуть(Измерения, "Количество");
	
	СтруктураПоиска = Новый Структура(Измерения);
	
	Для каждого Строка Из ТаблицаИзделия Цикл
		
		КоличествоСерии = 0;
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		СтрокиСерии = СерииДоЗагрузки.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерия Из СтрокиСерии Цикл
			КоличествоСерии = КоличествоСерии + СтрокаСерия.Количество;
		КонецЦикла;
		
		Если Строка.Количество = КоличествоСерии Тогда
			
			Для каждого СтрокаСерия Из СтрокиСерии Цикл
				
				ЗаполнитьЗначенияСвойств(
					ЭтотОбъект[ИмяТЧ + "Серии"].Добавить(),
					СтрокаСерия);
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьСерииЗагруженныеИзОпераций(ИмяТЧ, СерииДоЗагрузки)
	
	Если СерииДоЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ + "Серии"] Цикл
		
		Если НЕ Строка.Произведено ИЛИ Строка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоИсключить = Строка.Количество;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура");
		СтруктураПоиска.Вставить("Характеристика");
		СтруктураПоиска.Вставить("Получатель");
		СтруктураПоиска.Вставить("Назначение");
		СтруктураПоиска.Вставить("Серия");
		СтруктураПоиска.Вставить("ДатаПроизводства");
		СтруктураПоиска.Вставить("Произведено", Истина);
			
		Для Сч = 1 По 2 Цикл
			
			Если Сч = 2 Тогда
				СтруктураПоиска.Удалить("ДатаПроизводства");
				СтруктураПоиска.Вставить("Произведено", Ложь);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка, , "Произведено");
			СтрокиДоИзменения = СерииДоЗагрузки.НайтиСтроки(СтруктураПоиска);
		
			Для каждого СтрокаДоИзменения Из СтрокиДоИзменения Цикл
				
				Если КоличествоИсключить >= СтрокаДоИзменения.Количество Тогда
					
					КоличествоИсключить = КоличествоИсключить - СтрокаДоИзменения.Количество;
					СерииДоЗагрузки.Удалить(СтрокаДоИзменения);
					
				Иначе
					
					СтрокаДоИзменения.Количество = СтрокаДоИзменения.Количество - КоличествоИсключить;
					КоличествоИсключить = 0;
					
				КонецЕсли;
			
				Если КоличествоИсключить = 0 Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если КоличествоИсключить = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиСерииВТаблицуИзделий(ИмяТЧ)
	
	ПересчитатьСтатусы = Ложь;
	СтатусСерииВТекущейТЧ = 13;
	ИмяТЧСерии = ИмяТЧ + "Серии";
	
	СтруктураПоиска = Новый Структура(
		"Номенклатура, Характеристика, ДатаПроизводства, Получатель, Назначение, Произведено");
	
	Для каждого Строка Из ЭтотОбъект[ИмяТЧ] Цикл
		
		Если НЕ Строка.Произведено
			ИЛИ Строка.Отменено
			ИЛИ Строка.СтатусУказанияСерий <> СтатусСерииВТекущейТЧ
			ИЛИ ЗначениеЗаполнено(Строка.Серия) Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьСтатусы = Истина;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		НайденныеСтроки = ЭтотОбъект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаСерии Из НайденныеСтроки Цикл
				
			КоличествоЗачет = МИН(Строка.Количество, СтрокаСерии.Количество);
			
			Если Строка.Количество = КоличествоЗачет Тогда
				
				Строка.Серия = СтрокаСерии.Серия;
				
			Иначе
			
				НоваяСтрока = ЭтотОбъект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Количество = КоличествоЗачет;
				НоваяСтрока.Серия = СтрокаСерии.Серия;
				НоваяСтрока.КодСтроки = 0;
				
				Строка.Количество = Строка.Количество - КоличествоЗачет;
				
				Если ИмяТЧ = "ВыходныеИзделия" Тогда
					
					ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, Строка, СпособРаспределенияЗатратНаВыходныеИзделия);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаСерии.Количество = КоличествоЗачет Тогда
				
				ЭтотОбъект[ИмяТЧСерии].Удалить(СтрокаСерии);
				
			Иначе
				
				СтрокаСерии.Количество = СтрокаСерии.Количество - КоличествоЗачет;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Серия) Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПересчитатьСтатусы Тогда
		ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатуПроизводстваИзделийВШапке()
	
	ДатаТЧ = '00010101';
	ОднаДата = Ложь;
	
	ИменаПолей = Новый Структура;
	ИменаПолей.Вставить("Дата", "ДатаПроизводства");
	ИменаПолей.Вставить("ФлагОтменено", "Отменено");
	
	ЗаполнитьДатуПроизводстваПоТЧ("ВыходныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	ЗаполнитьДатуПроизводстваПоТЧ("ПобочныеИзделия", ДатаТЧ, ОднаДата, ИменаПолей);
	
	Если ОднаДата Тогда
		ДатаПроизводства = ДатаТЧ;
	Иначе
		ДатаПроизводства = '00010101';
	КонецЕсли;
	
	ПроизводствоОднойДатой = ОднаДата;
	
КонецПроцедуры

#КонецОбласти

#Область Трудодзатраты

Процедура ЗаполнитьТрудозатратыПоОперациям(ТрудозатратыОпераций)
	
	СверитьТрудозатратыСДаннымиОпераций(ТрудозатратыОпераций);
	
	ЗагрузитьДанныеОперацийВТрудозатраты(ТрудозатратыОпераций);
	
КонецПроцедуры

Процедура СверитьТрудозатратыСДаннымиОпераций(ТрудозатратыОпераций)
	
	Для каждого Строка Из Трудозатраты Цикл
		
		Если НЕ Строка.Выполнено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОстаток = Строка.Количество;
		
		СверитьТрудозатратуСДаннымиОпераций(Строка, КоличествоОстаток, ТрудозатратыОпераций);
		
		Если КоличествоОстаток > 0 Тогда
			
			УменьшитьВыполненноеКоличествоВСтрокеТЧ("Трудозатраты", Строка, КоличествоОстаток, "Выполнено");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СверитьТрудозатратуСДаннымиОпераций(СтрокаТрудозатрата, КоличествоТрудозатрата, ТрудозатратыОпераций)
	
	СтруктураПоиска = Новый Структура("ВидРабот, Исполнитель, НазначениеРабот, ДатаВыполнения");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТрудозатрата);
	
	СверитьКоличествоТЧСДаннымиОпераций(ТрудозатратыОпераций, СтруктураПоиска, КоличествоТрудозатрата);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеОперацийВТрудозатраты(ТрудозатратыОпераций)
	
	Для каждого Строка Из ТрудозатратыОпераций Цикл
		
		ИменаПолей = Новый Структура;
		ИменаПолей.Вставить("ФлагПроизведено", "Выполнено");
		ИменаПолей.Вставить("ЗаполнитьПоОперации", "ДатаВыполнения, Исполнитель, НазначениеРабот");
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидРабот", Строка.ВидРабот);
		СтруктураПоиска.Вставить("Выполнено", Ложь);
		
		ДобавитьДанныеОперацииВСтрокуНеПроизведено(
			"Трудозатраты", Строка, СтруктураПоиска, ИменаПолей);
		
		Если Строка.Количество > 0 Тогда
				
			СтруктураПоискаПроизведено = Новый Структура(
				"ВидРабот, Исполнитель, НазначениеРабот, ДатаВыполнения, Выполнено");
				
			ДобавитьДанныеОперацииВСтрокуПроизведено(
				"Трудозатраты", Строка, СтруктураПоискаПроизведено, ИменаПолей);
			
		КонецЕсли;
		
		Если Строка.Количество > 0 Тогда
			
			НоваяСтрока = ЭтотОбъект.Трудозатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.Выполнено = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеВидовЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	Если ПроизводствоНаСтороне Тогда
		ВидыЗапасовОбеспечение.Очистить();
		ВидыЗапасовЭкономия.Очистить();
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

#Область ВыходныеИзделия
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаТоваров.Назначение КАК Назначение
	|
	|ПОМЕСТИТЬ ТаблицаТоваровДокумента
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                                  КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                                 КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ТекущийВидЗапасов,
	|	ЛОЖЬ                                                        КАК ЭтоВозвратнаяТара,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)          КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)              КАК Менеджер,
	|	&Подразделение                                              КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                                                КАК Назначение,
	|	&Организация                                                КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыпускПродукции)КАК ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СпрНазначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПродукцияДавальца)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ                                                       КАК ТипЗапасов,
	|	ЕСТЬNULL(СпрНазначения.Партнер,
	|		ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))             КАК ВладелецТовара,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)   КАК Соглашение,
	|	ЕСТЬNULL(СпрНазначения.Договор.Контрагент,
	|		ЕСТЬNULL(ВЫРАЗИТЬ(СпрНазначения.Заказ КАК Документ.ЗаказДавальца).Контрагент,
	|			ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)))     КАК Контрагент,
	|	ЕСТЬNULL(СпрНазначения.Договор,
	|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                    КАК Валюта,
	|	ВЫБОР
	|		КОГДА &ИспользоватьРаздельныйУчетПоНалогообложению ТОГДА
	|			&ВыпускПодДеятельность
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|	КОНЕЦ                                                       КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации                                 КАК НалогообложениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)        КАК ВидЦены
	|
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваровДокумента КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ВидыЗапасов КАК ВидыЗапасов
	|	ПО
	|		ТаблицаТоваров.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНоменклатура
	|	ПО
	|		СпрНоменклатура.Ссылка = ТаблицаТоваров.Номенклатура
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
	|	ПО
	|		ЗаказНаПроизводство.Ссылка = &Распоряжение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.Назначения КАК СпрНазначения
	|	ПО
	|		СпрНазначения.Ссылка = ТаблицаТоваров.Назначение
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.ДоговорыКонтрагентов КАК СпрДоговора
	|	ПО
	|		СпрНазначения.Договор = СпрДоговора.Ссылка
	|
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И (ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|		ИЛИ ВидыЗапасов.Организация <> &Организация
	|		ИЛИ (&ИспользоватьРаздельныйУчетПоНалогообложению
	|			И ВидыЗапасов.НалогообложениеНДС <> &ВыпускПодДеятельность
	|			И &ВыпускПодДеятельность <> &НалогообложениеОрганизации
	|			И &ВыпускПодДеятельность <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
	|		ИЛИ ВидыЗапасов.Контрагент <> ЕСТЬNULL(СпрНазначения.Договор.Контрагент, ВЫРАЗИТЬ(СпрНазначения.Заказ КАК Документ.ЗаказДавальца).Контрагент)  
	|		ИЛИ ВидыЗапасов.Договор <> ЕСТЬNULL(СпрДоговора.Ссылка, НЕОПРЕДЕЛЕНО))
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ВыходныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Назначение"));
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("Распоряжение",               Распоряжение);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", Справочники.Организации.НалогообложениеНДС(Организация, Неопределено, Дата));
	Запрос.УстановитьПараметр("ИспользоватьРаздельныйУчетПоНалогообложению",
		РегистрыСведений.УчетнаяПолитикаОрганизаций.РаздельныйУчетТоваровПоНалогообложениюНДС(Организация, Дата));
	Запрос.УстановитьПараметр("Проведен",                   Проведен);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, ВыходныеИзделия);
#КонецОбласти

#Область ПобочныеИзделия
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ПобочныеИзделия.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов, Назначение"));
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, ПобочныеИзделия);
#КонецОбласти

#Область ВидыЗапасовОбеспечение
	
	ВидыЗапасовОбеспечениеИзменены = Ложь;
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхОбеспечения();
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости) Тогда
		
		ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
		ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.МатериалДавальца);
		ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
		ПараметрыЗаполнения.ТаблицаВидыЗапасов = ВидыЗапасовОбеспечение.ВыгрузитьКолонки();
		ПараметрыЗаполнения.ПодбиратьЗапасыРазныхПериодов = Истина;
		ПараметрыЗаполнения.ПериодЗаполнения = ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости;
		ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
		ПараметрыЗаполнения.ЕстьТаблицаПриходуемыхВидовЗапасов = Истина;
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение = "Всегда";
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		Если Не Отказ Тогда
			ЗаполнитьАналитикуПолучателяОбеспечение(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область ВидыЗапасовЭкономия
	
	ВидыЗапасовЭкономияИзменены = Ложь;
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхЭкономия();
	
	Если ЗначениеЗаполнено(ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости) Тогда
		
		ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
		ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.МатериалДавальца);
		ПараметрыЗаполнения.ОтборыВидовЗапасов.ТипЗапасов.Добавить(Перечисления.ТипыЗапасов.ПродукцияДавальца);
		ПараметрыЗаполнения.ТаблицаВидыЗапасов = ВидыЗапасовЭкономия.ВыгрузитьКолонки();
		ПараметрыЗаполнения.ПодбиратьЗапасыРазныхПериодов = Истина;
		ПараметрыЗаполнения.ПериодЗаполнения = ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости;
		ПараметрыЗаполнения.ЕстьТаблицаПриходуемыхВидовЗапасов = Истина;
		ПараметрыЗаполнения.ДокументДелаетИПриходИРасход = Истина;
		ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение = "Всегда";
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		Если Не Отказ Тогда
			ЗаполнитьАналитикуПолучателяЭкономия(МенеджерВременныхТаблиц, ПараметрыЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

КонецПроцедуры

Функция ВременныеТаблицыДанныхОбеспечения() Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаТаблицыДанныхДокумента() + "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Серия                          КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий            КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель  КАК СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ВариантОбеспечения             КАК ВариантОбеспечения,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно) ТОГДА
	|			ТаблицаТоваров.Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ                                         КАК Назначение,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Серия                 		  КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий            КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Склад                          КАК Склад,
	|	ТаблицаТоваров.Назначение                     КАК Назначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.ВариантОбеспечения             КАК ВариантОбеспечения,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДатаПоступления,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ГруппаПродукции                КАК ГруппаПродукции,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)   КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|ГДЕ
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).ЦеховаяКладовая И ВЫРАЗИТЬ(ТаблицаТоваров.Склад КАК Справочник.Склады).Подразделение = &Подразделение
	|	И ТаблицаТоваров.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции                 КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                    КАК ДатаОтгрузки,
	|	&ВидыЗапасовУказаныВручную                         КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                         КАК Номенклатура,
	|	Аналитика.Характеристика                       КАК Характеристика,
	|	Аналитика.Серия                                КАК Серия,
	|	Аналитика.МестоХранения                        КАК Склад,
	|	Аналитика.Назначение                           КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)       КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                    КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                  КАК Количество,
	|	ТаблицаВидыЗапасов.Сделка                      КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции             КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                КАК ДатаОтгрузки,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную   КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПоПериодам
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПобочныеИзделия.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаПобочныеИзделия.ВидЗапасов					КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)			КАК НомерГТД,
	|	ТаблицаПобочныеИзделия.Количество					КАК Количество,
	|	ТаблицаПобочныеИзделия.ДатаПроизводства				КАК ДатаОтгрузки,
	|	ТаблицаПобочныеИзделия.Произведено					КАК Произведено
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовПобочныеИзделия
	|ИЗ
	|	&ТаблицаПобочныеИзделия КАК ТаблицаПобочныеИзделия
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	ТаблицаВидыЗапасовПобочныеИзделия.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасовПобочныеИзделия.ВидЗапасов      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасовПобочныеИзделия.НомерГТД        КАК НомерГТД,
	|	ТаблицаВидыЗапасовПобочныеИзделия.Количество      КАК Количество,
	|	КОНЕЦПЕРИОДА(ТаблицаВидыЗапасовПобочныеИзделия.ДатаОтгрузки, МЕСЯЦ) КАК Период
	|	
	|ПОМЕСТИТЬ ПриходуемыеВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасовПобочныеИзделия КАК ТаблицаВидыЗапасовПобочныеИзделия
	|ГДЕ
	|	ТаблицаВидыЗапасовПобочныеИзделия.ДатаОтгрузки >= &ПериодЗаполнения
	|	И ТаблицаВидыЗапасовПобочныеИзделия.Произведено
	|	И &Статус В (
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Начат),
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен))
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
	Запрос.УстановитьПараметр("Дата",                       Дата);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Менеджер",                   Ответственный);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",  Ложь);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",             ОбеспечениеМатериаламиИРаботами);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",         ВидыЗапасовОбеспечение);
	Запрос.УстановитьПараметр("ТаблицаПобочныеИзделия", 	ПобочныеИзделия);
	Запрос.УстановитьПараметр("ПериодЗаполнения",           ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	Запрос.УстановитьПараметр("Статус",           			Статус);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ВременныеТаблицыДанныхЭкономия() Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаТаблицыДанныхДокумента() + "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Получатель                     КАК Получатель,
	|	ТаблицаТоваров.Серия                          КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий            КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель  КАК СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ТаблицаТоваров.Получатель) = ТИП(Справочник.СтруктураПредприятия)
	|			И НЕ ТаблицаТоваров.Получатель = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваров.Получатель
	|		ИНАЧЕ &Подразделение
	|	КОНЕЦ                                         КАК Подразделение,
	|	ТаблицаТоваров.ДатаОперации                   КАК ДатаОтгрузки,
	|	&НазначениеМатериалы                          КАК Назначение,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.СписатьНаРасходы               КАК СписатьНаРасходы,
	|	ТаблицаТоваров.СтатьяРасходов                 КАК СтатьяРасходов,
	|	ТаблицаТоваров.АналитикаРасходов              КАК АналитикаРасходов,
	|	ТаблицаТоваров.АналитикаАктивовПассивов       КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.Обособить                      КАК Обособить,
	|	ТаблицаТоваров.ИдентификаторСтроки            КАК ИдентификаторСтроки,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|	
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                   КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                 КАК Характеристика,
	|	ТаблицаТоваров.Серия                		  КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий            КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры     КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Количество                     КАК Количество,
	|	ТаблицаТоваров.Подразделение                  КАК Склад,
	|	ТаблицаТоваров.Получатель                     КАК Получатель,
	|	ТаблицаТоваров.Подразделение                  КАК Подразделение,
	|	ТаблицаТоваров.ДатаОтгрузки                   КАК ДатаОтгрузки,
	|	НЕОПРЕДЕЛЕНО                                  КАК ДатаПоступления,
	|	ВЫБОР КОГДА ТаблицаТоваров.Обособить ТОГДА ТаблицаТоваров.Назначение КОНЕЦ КАК Назначение,
	|	ТаблицаТоваров.ГруппаПродукции                КАК ГруппаПродукции,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                             КАК СуммаСНДС,
	|	0                                             КАК СуммаНДС,
	|	0                                             КАК СуммаВознаграждения,
	|	0                                             КАК СуммаНДСВознаграждения,
	|	ИСТИНА                                        КАК ПодбиратьВидыЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)   КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|	ПО СпрСклады.Ссылка = ТаблицаТоваров.Получатель
	|
	|ГДЕ
	|	(ЕСТЬNULL(СпрСклады.ЦеховаяКладовая, ЛОЖЬ)
	|		И СпрСклады.Подразделение = &Подразделение
	|		ИЛИ ТаблицаТоваров.СписатьНаРасходы)
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                      КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)           КАК СкладОтгрузки,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка) КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции                 КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОперации                    КАК ДатаОтгрузки,
	|	&ВидыЗапасовУказаныВручную                         КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                 КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры  КАК АналитикаУчетаНоменклатуры,
	|	Аналитика.Номенклатура                         КАК Номенклатура,
	|	Аналитика.Характеристика                       КАК Характеристика,
	|	Аналитика.Серия                                КАК Серия,
	|	Аналитика.МестоХранения						   КАК Склад,
	|	Аналитика.Назначение                           КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)       КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.НомерГТД                    КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                  КАК Количество,
	|	ТаблицаВидыЗапасов.Сделка                      КАК Сделка,
	|	ТаблицаВидыЗапасов.ГруппаПродукции             КАК ГруппаПродукции,
	|	ТаблицаВидыЗапасов.ДатаОтгрузки                КАК ДатаОтгрузки,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную   КАК ВидыЗапасовУказаныВручную
	|	
	|ПОМЕСТИТЬ ТаблицаВидыЗапасовПоПериодам
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|
	|ГДЕ
	|	ТаблицаВидыЗапасов.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасовОбеспечение.НомерСтроки                     КАК НомерСтроки,
	|	ТаблицаВидыЗапасовОбеспечение.АналитикаУчетаНоменклатуры      КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасовОбеспечение.НазначениеПолучателя            КАК НазначениеПолучателя,
	|	ТаблицаВидыЗапасовОбеспечение.Серия                           КАК Серия,
	|	ТаблицаВидыЗапасовОбеспечение.ВидЗапасов                      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасовОбеспечение.НомерГТД                        КАК НомерГТД,
	|	ТаблицаВидыЗапасовОбеспечение.Количество                      КАК Количество,
	|	ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки                               КАК ДатаОтгрузки
	|	
	|ПОМЕСТИТЬ ВтВидыЗапасовОбеспечение
	|ИЗ
	|	&ТаблицаВидыЗапасовОбеспечение КАК ТаблицаВидыЗапасовОбеспечение
	|
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация                                  КАК Организация,
	|	АналитикаПолучателя.КлючАналитики             КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасовОбеспечение.ВидЗапасов      КАК ВидЗапасов,
	|	ТаблицаВидыЗапасовОбеспечение.НомерГТД        КАК НомерГТД,
	|	ТаблицаВидыЗапасовОбеспечение.Количество      КАК Количество,
	|	КОНЕЦПЕРИОДА(ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки, МЕСЯЦ) КАК Период
	|	
	|ПОМЕСТИТЬ ПриходуемыеВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасовОбеспечение КАК ТаблицаВидыЗапасовОбеспечение
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасовОбеспечение.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПолучателя
	|		ПО Аналитика.Номенклатура = АналитикаПолучателя.Номенклатура
	|		И Аналитика.Характеристика = АналитикаПолучателя.Характеристика
	|		И ТаблицаВидыЗапасовОбеспечение.Серия = АналитикаПолучателя.Серия
	|		И &Подразделение = АналитикаПолучателя.МестоХранения
	|		И &Назначение = АналитикаПолучателя.Назначение
	|		И ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПолучателя.СтатьяКалькуляции
	|
	|ГДЕ
	|	ТаблицаВидыЗапасовОбеспечение.ДатаОтгрузки >= &ПериодЗаполнения
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",                     Ссылка);
	Запрос.УстановитьПараметр("Дата",                       Дата);
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("Менеджер",                   Ответственный);
	Запрос.УстановитьПараметр("Подразделение",              Подразделение);
	Запрос.УстановитьПараметр("ВыпускПодДеятельность",      ВыпускПодДеятельность);
	Запрос.УстановитьПараметр("НазначениеМатериалы",        НазначениеМатериалы);
	Запрос.УстановитьПараметр("Назначение",                 Назначение);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",  Ложь);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоПодразделениямМенеджерам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоСделкам", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр("ТаблицаТоваров",             ЭкономияМатериалов);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",         ВидыЗапасовЭкономия);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасовОбеспечение", ВидыЗапасовОбеспечение.Выгрузить());
	Запрос.УстановитьПараметр("ПериодЗаполнения",           ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Процедура ЗаполнитьАналитикуПолучателяОбеспечение(МенеджерВременныхТаблиц, ПараметрыЗаполнения)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из ВидыЗапасовОбеспечение Цикл
		Если Строка.ДатаОтгрузки >= ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасовОбеспечение.Удалить(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Назначение", Назначение);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры           КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура                         КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                       КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Серия,
	|	&Подразделение                                      КАК Склад,
	|	&Назначение                                         КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) КАК СтатьяКалькуляции,
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ)    КАК Период,
	|	ТаблицаТоваров.ДатаОтгрузки                         КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА АналитикаПолучателя.КлючАналитики ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                               КАК СоздатьКлючАналитики,
	|	СУММА(ТаблицаТоваров.Количество)                    КАК Количество
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаПолучателя
	|		ПО (ТаблицаТоваров.Номенклатура = АналитикаПолучателя.Номенклатура)
	|			И (ТаблицаТоваров.Характеристика = АналитикаПолучателя.Характеристика)
	|			И (ВЫБОР
	|					КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|						ТОГДА ТаблицаТоваров.Серия
	|						ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				КОНЕЦ = АналитикаПолучателя.Серия)
	|			И (&Подразделение = АналитикаПолучателя.МестоХранения)
	|			И (&Назначение = АналитикаПолучателя.Назначение)
	|			И (ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка) = АналитикаПолучателя.СтатьяКалькуляции)
	|ГДЕ
	|	ТаблицаТоваров.Склад.ЦеховаяКладовая И ТаблицаТоваров.Склад.Подразделение = &Подразделение
	|	И ТаблицаТоваров.ВариантОбеспечения В(ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Отгрузить),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.ОтгрузитьОбособленно))
	|	И ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ДатаОтгрузки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Характеристика,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.Серия,
	|	АналитикаПолучателя.КлючАналитики
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ДатаОтгрузки,
	|	Количество";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры, Период");
	
	ТаблицаВидыЗапасов = ПараметрыЗаполнения.ТаблицаВидыЗапасов;
	ТаблицаВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период", "Количество");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ТаблицаВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасовОбеспечение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.ДатаОтгрузки = ВыборкаТовары.ДатаОтгрузки;
			НоваяСтрока.Серия = ВыборкаТовары.Серия;
			НоваяСтрока.Количество = Количество;
			НоваяСтрока.НазначениеПолучателя = Назначение;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыборкаТовары.СоздатьКлючАналитики Тогда
			РегистрыСведений.АналитикаУчетаНоменклатуры.ЗначениеКлючаАналитики(ВыборкаТовары);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуПолучателяЭкономия(МенеджерВременныхТаблиц, ПараметрыЗаполнения)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого Строка Из ВидыЗапасовЭкономия Цикл
		Если Строка.ДатаОперации >= ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости Тогда
			МассивУдаляемыхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасовЭкономия.Удалить(Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодЗаполнения", ДополнительныеСвойства.ПериодЗаполненияВидовЗапасовИСебестоимости);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры           КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДатаОтгрузки                         КАК ДатаОперации,
	|	КОНЕЦПЕРИОДА(ТаблицаТоваров.ДатаОтгрузки, МЕСЯЦ)    КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерийПолучатель = 14
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                               КАК Серия,
	|	ВЫБОР КОГДА ТаблицаТоваров.Обособить
	|			ТОГДА ТаблицаТоваров.Назначение
	|	КОНЕЦ                                               КАК НазначениеПолучателя,
	|	ТаблицаТоваров.Получатель                           КАК Получатель,
	|	ТаблицаТоваров.СтатьяРасходов                       КАК СтатьяРасходов,
	|	ТаблицаТоваров.Подразделение                        КАК Подразделение,
	|	ТаблицаТоваров.АналитикаРасходов                    КАК АналитикаРасходов,
	|	ТаблицаТоваров.СписатьНаРасходы                     КАК СписатьНаРасходы,
	|	ТаблицаТоваров.АналитикаАктивовПассивов             КАК АналитикаАктивовПассивов,
	|	ТаблицаТоваров.ИдентификаторСтроки                  КАК ИдентификаторСтроки,
	|	СУММА(ТаблицаТоваров.Количество)                    КАК Количество
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ДатаОтгрузки >= &ПериодЗаполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.ДатаОтгрузки,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.Серия,
	|	ТаблицаТоваров.СтатусУказанияСерийПолучатель,
	|	ТаблицаТоваров.Обособить,
	|	ВЫБОР КОГДА ТаблицаТоваров.Обособить ТОГДА ТаблицаТоваров.Назначение КОНЕЦ,
	|	ТаблицаТоваров.Получатель,
	|	ТаблицаТоваров.СтатьяРасходов,
	|	ТаблицаТоваров.Подразделение,
	|	ТаблицаТоваров.АналитикаРасходов,
	|	ТаблицаТоваров.СписатьНаРасходы,
	|	ТаблицаТоваров.АналитикаАктивовПассивов,
	|	ТаблицаТоваров.ИдентификаторСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикаУчетаНоменклатуры,
	|	ДатаОтгрузки,
	|	Количество";
	
	ВыборкаТовары = Запрос.Выполнить().Выбрать();
	
	ОтборТоваров = Новый Структура("АналитикаУчетаНоменклатуры, Период");
	
	ТаблицаВидыЗапасов = ПараметрыЗаполнения.ТаблицаВидыЗапасов;
	ТаблицаВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД, Период", "Количество");
	
	Пока ВыборкаТовары.Следующий() Цикл
		
		КоличествоТоваров = ВыборкаТовары.Количество;
		
		ЗаполнитьЗначенияСвойств(ОтборТоваров, ВыборкаТовары);
		
		Для Каждого СтрокаЗапасов Из ТаблицаВидыЗапасов.НайтиСтроки(ОтборТоваров) Цикл
			
			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);
			
			НоваяСтрока = ВидыЗапасовЭкономия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТовары);
			НоваяСтрока.Количество = Количество;
			
			СтрокаЗапасов.Количество = СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицыДанныхДокумента()
	
	Возврат "
	|ВЫБРАТЬ
	|	&Дата                                                     КАК Дата,
	|	&Организация                                              КАК Организация,
	|	Неопределено                                              КАК Партнер,
	|	Неопределено                                              КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)    КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                  КАК Валюта,
	|	&ВыпускПодДеятельность                                    КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства) КАК ХозяйственнаяОперация,
	|	ЛОЖЬ                                                      КАК ЕстьСделкиВТабличнойЧасти,
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Подразделение,
	|	ВЫБОР КОГДА СтруктураПредприятия.ВариантОбособленногоУчетаТоваров = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|		И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|	ТОГДА
	|		&Менеджер
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                     КАК Менеджер,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)        КАК Сделка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)                  КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|	ПО
	|		СтруктураПредприятия.Ссылка = &Подразделение
	|
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

#КонецОбласти

#Область ПараметрыОбработкиОбъекта

// При записи документа выполняется обновление нормативного графика производства,
// в случае если изменилась длительность этапа, либо его связи с другими документами
// (подробнее см. ЗарегистрироватьОбновлениеПараметровНормативногоГрафика).
// Однако такое поведение может быть нежелательно при групповом изменении этапов.
// Для отключения пересчета нормативного графика следует использовать данную процедуру.
// В этом случае пересчет нормативного графика выполнен не будет, и его требуется
// инициировать самостоятельно.
//
Процедура ОтключитьЗаполнениеНормативногоГрафикаПриЗаписи() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючНеЗаполнятьНормативныйГрафик());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не будет регистрироваться
// обработчик обновления состояния заказа на производство.
//
Процедура ОтключитьОбновлениеСостоянияЗаказа() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецПроцедуры

// Взводит служебный флаг, при наличии которого не контролируется изменение параметров размещения
// этапа в графике.
//
Процедура ОтключитьКонтрольПараметровРазмещенияВГрафике() Экспорт
	
	ДополнительныеСвойства.Вставить(
		КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецПроцедуры

// Добавляет в дополнительные свойства флаг автоматического заполнения этапа.
//
// Параметры:
//  Значение - Булево - устанавливаемое значение.
//
Процедура УстановитьФлагЗаполненоАвтоматически(Значение) Экспорт
	
	ДополнительныеСвойства.Вставить(КлючЗаполненоАвтоматически(), Значение);
	
КонецПроцедуры

// Взводит служебный флаг сигнализирующий о том, что данный документ создается
// механизмами группового формирования этапов производства.
//
Процедура УстановитьРежимПакетногоФормирования() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючПакетныйРежимФормирования());
	
КонецПроцедуры

// Взводит служебный флаг сигнализирующий о том, что данный документ обрабатывается
// механизмами групповой передачи этапов к выполнению.
//
Процедура УстановитьРежимПакетнойПередачиКВыполнению() Экспорт
	
	ДополнительныеСвойства.Вставить(КлючОтключитьОбновлениеСостоянияЗаказа());
	
	ДополнительныеСвойства.Вставить(КлючПакетныйРежимПередачиКВыполнению());
	
КонецПроцедуры

Функция ВыполняетсяПакетноеФормирование() Экспорт
	
	Возврат УправлениеПроизводством.ВыполняетсяПакетноеФормированиеЭтапов(ЭтотОбъект);
	
КонецФункции

Функция ВыполняетсяПакетнаяПередачаКВыполнению()
	
	Возврат ДополнительныеСвойства.Свойство(КлючПакетныйРежимПередачиКВыполнению());
	
КонецФункции

Функция ОтключенКонтрольПараметровРазмещенияВГрафике()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьКонтрольПараметровРазмещенияВГрафике());
	
КонецФункции

Функция ОтключеноОбновлениеСостоянияЗаказа()
	
	Возврат ДополнительныеСвойства.Свойство(КлючОтключитьОбновлениеСостоянияЗаказа());
	
КонецФункции

// Взводит служебный флаг, при наличии которого не будет выполняться проверка реквизитов цепочки этапов.
//
Процедура ОтключитьПроверкуРеквизитовЦепочкиЭтапов() Экспорт
	
	ДополнительныеСвойства.Вставить("ОтключитьПроверкуРеквизитовЦепочкиЭтапов");
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеСвязанныхДанных

#Область РегистрацияОбработчиков

Процедура ЗарегистрироватьОбновлениеСвязанныхДанных()
	
	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьОбновлениеСвязанныхДанных();
	
	ДанныеДоИзменения = ДанныеДоИзменения();
	
	ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения);
	ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения);
	
	ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения);
	
	ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения);
	ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения);
	ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения);
	
	ЗарегистрироватьОчисткуГрафикаПроизводства();
	ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства();
	ЗарегистрироватьОчисткуПризнакаНаКритическомПути();
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСостоянияЭтапов(ДанныеДоИзменения)
	
	ИзменилисьСвязиЭтапов = Ложь;
	
	ПерваяТаблица = ДанныеДоИзменения.Последователи;
	ВтораяТаблица = Последователи;
	
	Для Сч = 1 По 2 Цикл
		
		Для Каждого Строка Из ПерваяТаблица Цикл
			
			Если ВтораяТаблица.Найти(Строка.Этап, "Этап") = Неопределено Тогда
				ИзменилисьСвязиЭтапов = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИзменилисьСвязиЭтапов Тогда
			Прервать;
		Иначе
			ПерваяТаблица = Последователи;
			ВтораяТаблица = ДанныеДоИзменения.Последователи;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменилосьПланироватьНеРанее = ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее <> ЭтотОбъект.ПланироватьНеРанее
		И (
			ТипЗнч(ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
			ИЛИ ТипЗнч(ЭтотОбъект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
			);
			
	ИзмениласьМаршрутнаяКарта = ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта <> ЭтотОбъект.МаршрутнаяКарта
		И (
			ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта.Пустая()
			ИЛИ ЭтотОбъект.МаршрутнаяКарта.Пустая()
			);
	
	Если (ИзменилисьСвязиЭтапов
			ИЛИ ИзменилосьПланироватьНеРанее
			ИЛИ ИзмениласьМаршрутнаяКарта
			ИЛИ ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения)
			ИЛИ ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
			ИЛИ ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения)
		) Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ОбновитьСостоянияЭтапов", 
			Документы.ЭтапПроизводства2_2.Последователи(Ссылка));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеСостоянияЗаказа(ДанныеДоИзменения)
	
	Если ОтключеноОбновлениеСостоянияЗаказа() Тогда
		Возврат;
	КонецЕсли;
	ДобавитьОбработчикОбновленияСвязанныхДанных("ОбновитьСостояниеЗаказаВОчереди");
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетОчередиПроизводственныхОпераций(ДанныеДоИзменения)
	
	ДанныеПодразделения = ПроизводствоСерверПовтИсп.ПараметрыПроизводственногоПодразделения(Подразделение);
	Если Не ДанныеПодразделения.ИспользоватьПооперационноеУправление
		ИЛИ (ЭтотОбъект.МаршрутнаяКарта.Пустая()
			И ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта.Пустая()) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверяемыеСтатусы = УправлениеПроизводствомКлиентСервер.СтатусыДоступноПооперационноеУправление(ДанныеПодразделения);
	
	ПереходыИсключения = Новый Соответствие;
	Если ДанныеПодразделения.ИспользоватьСменныеЗадания
		ИЛИ ДанныеПодразделения.ИспользоватьПооперационноеПланирование Тогда
		ПереходыИсключения.Вставить(Перечисления.СтатусыЭтаповПроизводства2_2.Начат, ПроизводствоСервер.МассивЗначений(Перечисления.СтатусыЭтаповПроизводства2_2.КВыполнению));
	КонецЕсли;
	
	Если (ПроверяемыеСтатусы.Найти(ЭтотОбъект.Статус) <> Неопределено
			ИЛИ ПроверяемыеСтатусы.Найти(ДанныеДоИзменения.Реквизиты.Статус) <> Неопределено)
		И (ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения, ПереходыИсключения)
			ИЛИ ЭтотОбъект.МаршрутнаяКарта <> ДанныеДоИзменения.Реквизиты.МаршрутнаяКарта
			ИЛИ ЭтотОбъект.КоэффициентМаршрутнойКарты <> ДанныеДоИзменения.Реквизиты.КоэффициентМаршрутнойКарты)
		Тогда
		ДобавитьОбработчикОбновленияСвязанныхДанных("РассчитатьОчередьПроизводственныхОпераций");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровРазмещенияВГрафике(ДанныеДоИзменения)
	
	Если ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ НЕ РучноеРазмещениеВГрафике
			И Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован().Найти(Статус) = Неопределено
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзменились = ДополнительныеСвойства.ЭтоНовый;
	
	Если ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике") Тогда
		
		ПараметрыИзменились = Истина;
		ДобавитьОбработчикОбновленияСвязанныхДанных("ЗаписатьРучноеРазмещениеЭтапаВГрафике");
		
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
		ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились);
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		
		Если РучноеРазмещениеВГрафике Тогда
			ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
		КонецЕсли;
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ИзменилисьПараметрыРазмещенияВГрафике");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОбновлениеПараметровНормативногоГрафика(ДанныеДоИзменения)

	Если НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ ДополнительныеСвойства.Свойство(КлючНеЗаполнятьНормативныйГрафик()) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыИзменились = ДополнительныеСвойства.ЭтоНовый;
	
	// Проверка реквизитов шапки
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = ДанныеДоИзменения.Реквизиты.Проведен <> ЭтотОбъект.Проведен
			ИЛИ ДанныеДоИзменения.Реквизиты.ДлительностьЭтапа <> ЭтотОбъект.ДлительностьЭтапа
			ИЛИ ДанныеДоИзменения.Реквизиты.ЕдиницаИзмеренияДлительностиЭтапа <> ЭтотОбъект.ЕдиницаИзмеренияДлительностиЭтапа
			ИЛИ (
				ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее <> ЭтотОбъект.ПланироватьНеРанее
					И (ТипЗнч(ДанныеДоИзменения.Реквизиты.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")
						ИЛИ ТипЗнч(ЭтотОбъект.ПланироватьНеРанее) = Тип("ДокументСсылка.ЭтапПроизводства2_2")));
		
	КонецЕсли;
	
	// Проверка табличных частей
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи");
		
	КонецЕсли;
	
	Если НЕ ПараметрыИзменились Тогда
			
		Реквизиты = Новый Массив;
		Реквизиты.Добавить("Назначение");
		Реквизиты.Добавить("ЭтапПотребитель");
		Реквизиты.Добавить("Отменено");
		
		ПараметрыИзменились = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
			
	КонецЕсли;
	
	Если ПараметрыИзменились Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных(
			"ИзменилисьПараметрыНормативногоГрафика")
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗарегистрироватьОчисткуГрафикаПроизводства()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		ГрафикПроизводства = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
		ГрафикРассчитан = ГрафикПроизводства.Количество() > 0
			И ГрафикПроизводства[0].Рассчитан;
		
		Если ГрафикРассчитан Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьГрафикПроизводства")
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуЗаданийКРасчетуГрафикаПроизводства()
	
	Если ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства() Тогда
		
		ЕстьЗаданияКРасчетуГрафика = НЕ РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ГрафикЭтапаАктуален(Ссылка);
		
		ОтменаПроведения = ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
		
		СтатусыПланирование = Документы.ЭтапПроизводства2_2.СтатусыЭтапМожетБытьЗапланирован();
		НеМожетБытьЗапланирован = (СтатусыПланирование.Найти(Статус) = Неопределено);
		
		РедактированиеРучногоРазмещения = ОтредактированыПараметрыРучногоРазмещенияВГрафике();
		
		Если ЕстьЗаданияКРасчетуГрафика
			И (ОтменаПроведения ИЛИ НеМожетБытьЗапланирован ИЛИ РедактированиеРучногоРазмещения) Тогда
			
			ДобавитьОбработчикОбновленияСвязанныхДанных(
				"ОчиститьЗаданияКРасчетуГрафикаПроизводства");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьПроверкуГрафикаСмежныхЭтапов(ДанныеДоИзменения)
	
	Если ДополнительныеСвойства.ЭтоНовый
		ИЛИ НЕ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ ОтключенКонтрольПараметровРазмещенияВГрафике()
		ИЛИ НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеИзКэшаОбъекта("ИзменилосьРучноеРазмещениеЭтапаВГрафике")
		ИЛИ ДанныеДоИзменения.Реквизиты.ФактическоеНачалоЭтапа <> ЭтотОбъект.ФактическоеНачалоЭтапа
		ИЛИ ДанныеДоИзменения.Реквизиты.ДатаПроизводства <> ЭтотОбъект.ДатаПроизводства Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ПроверитьГрафикСмежныхЭтапов");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьОчисткуПризнакаНаКритическомПути()
	
	Если ДополнительныеСвойства.ЭтоНовый 
		ИЛИ ДополнительныеСвойства.РежимЗаписи <> РежимЗаписиДокумента.Проведение
		ИЛИ Статус <> Перечисления.СтатусыЭтаповПроизводства2_2.Завершен
		ИЛИ НЕ УправлениеПроизводствомПовтИсп.ИспользуетсяГрафикПроизводства()
		ИЛИ НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
	
	Если ЗначениеЗаполнено(ДанныеГрафика) И ДанныеГрафика[0].НаКритическомПути Тогда
		
		ДобавитьОбработчикОбновленияСвязанныхДанных("ОчиститьПризнакЭтапНаКритическомПути");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИзменений

Функция ДанныеДоИзменения()
	
	СоставРеквизитов = 
		"Статус, 
		|Проведен, 
		|МаршрутнаяКарта,
		|КоэффициентМаршрутнойКарты,
		|ДлительностьЭтапа, 
		|ЕдиницаИзмеренияДлительностиЭтапа, 
		|РучноеРазмещениеВГрафике,
		|ПланироватьНеРанее, 
		|ПланироватьРаботуВидовРабочихЦентров, 
		|ДатаОтгрузки, 
		|ПредварительныйБуфер, 
		|ЕдиницаИзмеренияПредварительногоБуфера, 
		|ЗавершающийБуфер, 
		|ЕдиницаИзмеренияЗавершающегоБуфера, 
		|Непрерывный,
		|ФактическоеНачалоЭтапа,
		|ФактическоеОкончаниеЭтапа,
		|ДатаПроизводства,
		|ПорядокРаботыВидовРабочихЦентров";
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ " + СоставРеквизитов + "
		|ИЗ
		|	Документ.ЭтапПроизводства2_2 КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Отменено        КАК Отменено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Получатель      КАК Получатель,
		|	Таблица.Назначение      КАК Назначение,
		|	Таблица.ЭтапПотребитель КАК ЭтапПотребитель,
		|	Таблица.Произведено     КАК Произведено,
		|	Таблица.Отменено        КАК Отменено,
		|	Таблица.Количество      КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Номенклатура       КАК Номенклатура,
		|	Таблица.Характеристика     КАК Характеристика,
		|	Таблица.ВариантОбеспечения КАК ВариантОбеспечения,
		|	Таблица.Производится       КАК Производится,
		|	Таблица.Склад              КАК Склад,
		|	Таблица.Количество         КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.Этап КАК Этап
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Последователи КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ВремяРаботы       КАК ВремяРаботы,
		|	Таблица.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Таблица.Использовать      КАК Использовать,
		|	Таблица.ВариантНаладки    КАК ВариантНаладки
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.АльтернативныеВидыРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабочегоЦентра КАК ВидРабочегоЦентра,
		|	Таблица.ДатаИнтервала     КАК ДатаИнтервала,
		|	Таблица.Количество        КАК Количество
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ЗанятостьВидовРабочихЦентров КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таблица.ВидРабот КАК ВидРабот,
		|	Таблица.Исполнитель КАК Исполнитель,
		|	Таблица.Количество КАК Количество,
		|	Таблица.ДатаВыполнения КАК ДатаВыполнения
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.Трудозатраты КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Таблица.НомерСтроки");
		
	Запрос.УстановитьПараметр("Ссылка", ЭтотОбъект.Ссылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ЭтотОбъект.ЭтоНовый() Тогда
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, ЭтотОбъект);
		
	Иначе
		
		Выборка = РезультатЗапроса[0].Выбрать();
		Выборка.Следующий();
		
		Реквизиты = Новый Структура(СоставРеквизитов);
		ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
		
	КонецЕсли;
	
	ДанныеДоИзменения = Новый Структура;
	
	ДанныеДоИзменения.Вставить("Реквизиты", Реквизиты);
	ДанныеДоИзменения.Вставить("ВыходныеИзделия", РезультатЗапроса[1].Выгрузить());
	ДанныеДоИзменения.Вставить("ПобочныеИзделия", РезультатЗапроса[2].Выгрузить());
	ДанныеДоИзменения.Вставить("ОбеспечениеМатериаламиИРаботами", РезультатЗапроса[3].Выгрузить());
	ДанныеДоИзменения.Вставить("Последователи", РезультатЗапроса[4].Выгрузить());
	ДанныеДоИзменения.Вставить("ВидыРабочихЦентров", РезультатЗапроса[5].Выгрузить());
	ДанныеДоИзменения.Вставить("АльтернативныеВидыРабочихЦентров", РезультатЗапроса[6].Выгрузить());
	ДанныеДоИзменения.Вставить("ЗанятостьВидовРабочихЦентров", РезультатЗапроса[7].Выгрузить());
	ДанныеДоИзменения.Вставить("Трудозатраты", РезультатЗапроса[8].Выгрузить());
	
	Возврат ДанныеДоИзменения;
	
КонецФункции

Функция ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения, ПереходыИсключения = Неопределено)
	
	Если (ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
			И НЕ ДанныеДоИзменения.Реквизиты.Проведен
		ИЛИ ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
			И ДанныеДоИзменения.Реквизиты.Проведен)
		Тогда
		Возврат Истина;
	ИначеЕсли ПереходыИсключения <> Неопределено
			И ПереходыИсключения[ЭтотОбъект.Статус] <> Неопределено
			И ПереходыИсключения[ЭтотОбъект.Статус].Найти(ДанныеДоИзменения.Реквизиты.Статус) <> Неопределено
		Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ЭтотОбъект.Статус <> ДанныеДоИзменения.Реквизиты.Статус;
	
КонецФункции

Функция ИзменилосьОбеспечениеМатериалами(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("Номенклатура");
	Реквизиты.Добавить("Характеристика");
	Реквизиты.Добавить("ВариантОбеспечения");
	Реквизиты.Добавить("Производится");
	Реквизиты.Добавить("Склад");
	Реквизиты.Добавить("Количество");
	
	Результат = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ОбеспечениеМатериаламиИРаботами", Реквизиты);
	Возврат Результат;
	
КонецФункции

Функция ИзменилисьТрудозатратыКОформлению(ДанныеДоИзменения)
	
	Реквизиты = Новый Массив;
	
	Реквизиты.Добавить("ВидРабот");
	Реквизиты.Добавить("Исполнитель");
	Реквизиты.Добавить("Количество");
	Реквизиты.Добавить("ДатаВыполнения");
	
	ИзмененаТабличнаяЧасть = ИзмененаТабличнаяЧастьДокумента(
		ДанныеДоИзменения,
		"Трудозатраты",
		Реквизиты);
	
	Результат = ИзмененаТабличнаяЧасть ИЛИ ИзменилсяСтатусИлиСостояниеДокумента(ДанныеДоИзменения);
	Возврат Результат;
	
КонецФункции

Функция ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, ИмяТаблицы, Реквизиты = Неопределено)
	
	Возврат УправлениеПроизводством.ИзмененаТабличнаяЧастьДокумента(
				ЭтотОбъект,
				ДанныеДоИзменения,
				ИмяТаблицы,
				Реквизиты);
	
КонецФункции

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеРеквизиты(ДанныеДоИзменения, ПараметрыИзменились)
	
	Реквизиты = ПараметрыРазмещенияВГрафикеРеквизиты();
	
	Для каждого Реквизит Из Реквизиты Цикл
		Если ДанныеДоИзменения.Реквизиты[Реквизит] <> ЭтотОбъект[Реквизит] Тогда
			
			Если Реквизит = "ДатаОтгрузки" Тогда
				
				ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
				
				Если ЗначениеЗаполнено(ДанныеГрафика)
					И ДанныеГрафика[0].НачалоЭтапа >= ДатаОтгрузки Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли Реквизит = "ПланироватьНеРанее"
				И ТипЗнч(ПланироватьНеРанее) = Тип("Дата")
				И ПланироватьНеРанее <> '00010101' Тогда
				
				ДанныеГрафика = ДанныеИзКэшаОбъекта("ГрафикПроизводства");
				
				Если ЗначениеЗаполнено(ДанныеГрафика)
					И ДанныеГрафика[0].НачалоЭтапа >= ПланироватьНеРанее Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыИзменились = Истина;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПараметрыИзменились Тогда
		
		ПараметрыИзменились = НЕ ДанныеДоИзменения.Реквизиты.Проведен
			И ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьИзменилисьПараметрыРазмещенияВГрафикеТаблицы(ДанныеДоИзменения, ПараметрыИзменились)
	
	ТаблицаИзменилась = Ложь;
	
	Если РучноеРазмещениеВГрафике Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ЗанятостьВидовРабочихЦентров");
		
	ИначеЕсли ПланироватьРаботуВидовРабочихЦентров Тогда
		
		ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВидыРабочихЦентров");
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "АльтернативныеВидыРабочихЦентров")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "Последователи")
			
		КонецЕсли;
		
		Если НЕ ТаблицаИзменилась Тогда
			
			Реквизиты = Новый Массив;
			Реквизиты.Добавить("Назначение");
			Реквизиты.Добавить("Отменено");
	
			ТаблицаИзменилась = ИзмененаТабличнаяЧастьДокумента(ДанныеДоИзменения, "ВыходныеИзделия", Реквизиты)
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаИзменилась Тогда
		
		ПараметрыИзменились = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыРазмещенияВГрафикеРеквизиты()
	
	Результат = Новый Массив;
	
	Результат.Добавить("РучноеРазмещениеВГрафике");
	Результат.Добавить("ПланироватьНеРанее");
	
	Если НЕ РучноеРазмещениеВГрафике Тогда
		
		Результат.Добавить("ПланироватьРаботуВидовРабочихЦентров");
		Результат.Добавить("ДатаОтгрузки");
		
		Если ПланироватьРаботуВидовРабочихЦентров Тогда
			
			Результат.Добавить("ПредварительныйБуфер");
			Результат.Добавить("ЕдиницаИзмеренияПредварительногоБуфера");
			Результат.Добавить("ЗавершающийБуфер");
			Результат.Добавить("ЕдиницаИзмеренияЗавершающегоБуфера");
			Результат.Добавить("Непрерывный");
			Результат.Добавить("ПорядокРаботыВидовРабочихЦентров");
			
		Иначе
			
			Результат.Добавить("ДлительностьЭтапа");
			Результат.Добавить("ЕдиницаИзмеренияДлительностиЭтапа");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтредактированыПараметрыРучногоРазмещенияВГрафике()
	
	Возврат РучноеРазмещениеВГрафике И ДополнительныеСвойства.Свойство("ГрафикПроизводства");
	
КонецФункции

#КонецОбласти

#Область ОбновлениеДанных

Процедура ОбновитьСвязанныеДанные(Отказ, УдалениеПроведения = Ложь)
	
	Перем ПараметрыОбработки;
	
	Если Отказ ИЛИ ОбновлениеСвязанныхДанныхНеТребуется() Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыРазмещенияВГрафике") Тогда
		
		Если РучноеРазмещениеВГрафике Тогда
			
			Если ЗанятостьВидовРабочихЦентров.Количество() > 0 Тогда
				
				КолонкиИнтервалов = "ВидРабочегоЦентра, ДатаИнтервала";
				Интервалы = ЗанятостьВидовРабочихЦентров.Выгрузить(, КолонкиИнтервалов);
				Интервалы.Свернуть(КолонкиИнтервалов);
				РегистрыНакопления.ДоступностьВидовРабочихЦентров.ПроверитьЗагрузкаНеПревышаетДоступностьГрафика(Интервалы);
				
			КонецЕсли;
			
		Иначе
			
			РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.ДобавитьЗадания(Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ПроверитьГрафикСмежныхЭтапов") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ПроверитьСоблюдениеУсловийПредшествования(Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьГрафикПроизводства") Тогда
		
		МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьГрафикЭтапов(МассивСсылок);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьЗаданияКРасчетуГрафикаПроизводства") Тогда
		
		РегистрыСведений.ЗаданияКРасчетуГрафикаПроизводства.УдалитьЗадания(Распоряжение, Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ИзменилисьПараметрыНормативногоГрафика") Тогда
		
		РегистрыСведений.НормативныйГрафикЭтаповПроизводства.РассчитатьГрафикВФоне(Распоряжение);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОчиститьПризнакЭтапНаКритическомПути") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ОчиститьПризнакЭтапНаКритическомПути(Ссылка);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("РассчитатьОчередьПроизводственныхОпераций") Тогда
		
		Если ВыполняетсяПакетнаяПередачаКВыполнению() Тогда
			РегистрыСведений.ЗаданияКРасчетуОчередиПроизводственныхОпераций.ДобавитьЗадание(Ссылка, Ложь);
		Иначе
			РегистрыСведений.ОчередьПроизводственныхОпераций.ДобавитьЗаданиеКРасчетуОчереди(Ссылка, УдалениеПроведения, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостоянияЭтапов", ПараметрыОбработки) Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПараметрыОбработки,
			Документы.ЭтапПроизводства2_2.Последователи(Ссылка),
			Истина);
		
		ЭтапыКОбновлению = ПараметрыОбработки;
		ЭтапыКОчистке = Новый Массив;
		Если УдалениеПроведения Тогда
			ЭтапыКОчистке.Добавить(Ссылка);
		Иначе
			ЭтапыКОбновлению.Добавить(Ссылка);
		КонецЕсли;
		
		РегистрыСведений.СостоянияЭтаповПроизводства.ОтразитьСостояниеЭтапов(ЭтапыКОбновлению, ЭтапыКОчистке);
		
	КонецЕсли;
	
	Если НеобходимоВыполнитьОбработчик("ОбновитьСостояниеЗаказаВОчереди") Тогда
		
		РегистрыСведений.СостоянияЗаказовНаПроизводство.ОтразитьСостояние(Распоряжение);
		
	КонецЕсли;
	
	ОчиститьСписокОбработчиковОбновленияСвязанныхДанных();
	
КонецПроцедуры

Процедура ПроверитьИЗаписатьРучноеРазмещениеВГрафике()
	
	Если НеобходимоВыполнитьОбработчик("ЗаписатьРучноеРазмещениеЭтапаВГрафике") Тогда
		
		РегистрыСведений.ГрафикЭтаповПроизводства2_2.ЗаписатьРучноеРазмещениеЭтапаВГрафике(
			Распоряжение, ЭтотОбъект.Ссылка, ДополнительныеСвойства.ГрафикПроизводства);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ИнициализироватьОбновлениеСвязанныхДанных()
	
	ДополнительныеСвойства.Вставить("ОбработчикиОбновленияСвязанныхДанных", Новый Структура);
	
КонецПроцедуры

Функция ОбновлениеСвязанныхДанныхНеТребуется()
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат (Обработчики.Количество() = 0);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьСписокОбработчиковОбновленияСвязанныхДанных()
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных") Тогда
		ДополнительныеСвойства.Удалить("ОбработчикиОбновленияСвязанныхДанных");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОбработчикОбновленияСвязанныхДанных(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	ОбработчикиОбновленияСвязанныхДанных = ДополнительныеСвойства.ОбработчикиОбновленияСвязанныхДанных;
	ОбработчикиОбновленияСвязанныхДанных.Вставить(ИмяОбработчика, ПараметрыОбработки);
	
КонецПроцедуры

Функция НеобходимоВыполнитьОбработчик(ИмяОбработчика, ПараметрыОбработки = Неопределено)
	
	Перем Обработчики;
	
	Если ДополнительныеСвойства.Свойство("ОбработчикиОбновленияСвязанныхДанных", Обработчики) Тогда
		Возврат Обработчики.Свойство(ИмяОбработчика, ПараметрыОбработки);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Константы

Функция ТипСвязиПоследователь()
	
	Возврат 0;
	
КонецФункции

Функция ТипСвязиПотребитель()
	
	Возврат 1;
	
КонецФункции

Функция КлючПакетныйРежимФормирования()
	
	Возврат УправлениеПроизводством.КлючПакетныйРежимФормированияЭтапов();
	
КонецФункции

Функция КлючПакетныйРежимПередачиКВыполнению()
	
	Возврат "ПакетныйРежимПередачиКВыполнению";
	
КонецФункции

Функция КлючЗаполненоАвтоматически()
	
	Возврат "ЗаполненоАвтоматически";
	
КонецФункции

Функция КлючОтключитьКонтрольПараметровРазмещенияВГрафике()
	
	Возврат "ОтключитьКонтрольПараметровРазмещенияВГрафике";
	
КонецФункции

Функция КлючНеЗаполнятьНормативныйГрафик()
	
	Возврат "НеЗаполнятьНормативныйГрафик"
	
КонецФункции

Функция КлючОтключитьОбновлениеСостоянияЗаказа()
	
	Возврат "ОтключитьОбновлениеСостоянияЗаказа";
	
КонецФункции

#КонецОбласти

#Область Прочее

// При переработке на стороне у всех этапов, включенных в один заказ переработчику, должен быть сквозной код строки.
//
Процедура ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ)

	Если ВыходныеИзделия.Найти(0, "КодСтроки") = Неопределено
		И ПобочныеИзделия.Найти(0, "КодСтроки") = Неопределено 
		И ОбеспечениеМатериаламиИРаботами.Найти(0, "КодСтроки") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ЭтапПроизводства2_2");
	ЭлементБлокировки.УстановитьЗначение("ЗаказПереработчику", ЗаказПереработчику);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось заблокировать этапы производства по причине: %Причина%';
								|en = 'Cannot lock production stages due to: %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		Возврат;
	КонецПопытки; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиИзделия), 0)    КАК МаксимальныйКодСтрокиИзделия,
	|	ЕСТЬNULL(МАКСИМУМ(ЭтапПроизводства2_2.МаксимальныйКодСтрокиОбеспечение),0) КАК МаксимальныйКодСтрокиОбеспечение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК ЭтапПроизводства2_2
	|ГДЕ
	|	ЭтапПроизводства2_2.ЗаказПереработчику = &ЗаказПереработчику";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗаказПереработчику", ЗаказПереработчику);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	ВыборкаКоды = Результат.Выбрать();
	ВыборкаКоды.Следующий();
	МаксимальныйКодСтрокиИзделия     = ВыборкаКоды.МаксимальныйКодСтрокиИзделия;
	МаксимальныйКодСтрокиОбеспечение = ВыборкаКоды.МаксимальныйКодСтрокиОбеспечение;
	
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ВыходныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
				
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ПобочныеИзделия, Ложь, МаксимальныйКодСтрокиИзделия);
	
	Документы.ЗаказПереработчику.ЗаполнитьКодСтрокиВТабличнойЧасти(
				ОбеспечениеМатериаламиИРаботами, Ложь, МаксимальныйКодСтрокиОбеспечение);
						
КонецПроцедуры

Процедура УстановитьКлючВСтрокахТабличныхЧастей(Отказ)
	
	Если ПроизводствоНаСтороне И НЕ ЗаказПереработчику.Пустая() Тогда
		
		ЗаполнитьНовыйКодСтрокиПриПереработкеНаСтороне(Отказ);
		
	Иначе
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ВыходныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ПобочныеИзделия", "МаксимальныйКодСтрокиИзделия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ОбеспечениеМатериаламиИРаботами", "МаксимальныйКодСтрокиОбеспечение");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "ЭкономияМатериалов", "МаксимальныйКодСтрокиЭкономия");
		
		ЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(
			ЭтотОбъект, "Трудозатраты", "МаксимальныйКодСтрокиТрудозатраты");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтразитьДоступностьВидовРабочихЦентров(Отказ)
	
	// Движения формируются при расчете графика производства.
	Если НЕ РучноеРазмещениеВГрафике Тогда
		Движения.ДоступностьВидовРабочихЦентров.Записывать = Ложь;
		Возврат;
	КонецЕсли;
	
	РегистрыНакопления.ДоступностьВидовРабочихЦентров.ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

Функция МаксимальнаяДатаПроизводстваВТЧ()
	
	Дата1 = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
		НайтиНеОтмененныеСтроки("ВыходныеИзделия"),
		"ДатаПроизводства");
	
	Дата2 = Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(
		НайтиНеОтмененныеСтроки("ПобочныеИзделия"),
		"ДатаПроизводства");
	
	Возврат Макс(Дата1, Дата2);
	
КонецФункции

Процедура ЗаполнитьМаксимальнуюДатуПроизводства() Экспорт
	
	Если НЕ ПроизводствоОднойДатой Тогда
		ДатаПроизводства = МаксимальнаяДатаПроизводстваВТЧ();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуОтгрузки() Экспорт
	
	Если НЕ НеОтгружатьЧастями Тогда
		ДатаОтгрузки = '000101010000';
		Для каждого ДанныеСтроки Из ОбеспечениеМатериаламиИРаботами Цикл
			Если ДанныеСтроки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.Отгрузить
				И ДанныеСтроки.ВариантОбеспечения <> Перечисления.ВариантыОбеспечения.ОтгрузитьОбособленно Тогда
				ДатаОтгрузки = Макс(ДанныеСтроки.ДатаОтгрузки, ДатаОтгрузки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаксимальнуюДатуРасхода() Экспорт
	
	Если НЕ РасходОднойДатой Тогда
		ДатаРасхода = Макс(Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(РасходМатериаловИРабот, "ДатаРасхода"),
								Документы.ЭтапПроизводства2_2.МаксимальнаяДатаВТЧ(ЭкономияМатериалов, "ДатаОперации"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтатусыУказанияСерийВТЧ(ИмяТЧ, ПараметрыУказанияСерий = Неопределено)
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = Документы.ЭтапПроизводства2_2.ПараметрыУказанияСерий(ЭтотОбъект);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий[ИмяТЧ]);
	
КонецПроцедуры

Процедура ЗаполнитьПоДаннымОбработкиРедактирования(ДанныеЗаполнения)
	
	Если ДанныеЗаполнения.Свойство("Реквизиты") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения.Реквизиты);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВыходныеИзделия") Тогда
		ВыходныеИзделия.Загрузить(ДанныеЗаполнения.ВыходныеИзделия);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ВыходныеИзделияСерии") Тогда
		ВыходныеИзделияСерии.Загрузить(ДанныеЗаполнения.ВыходныеИзделияСерии);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ПобочныеИзделия") Тогда
		ПобочныеИзделия.Загрузить(ДанныеЗаполнения.ПобочныеИзделия);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ПобочныеИзделияСерии") Тогда
		ПобочныеИзделияСерии.Загрузить(ДанныеЗаполнения.ПобочныеИзделияСерии);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ОбеспечениеМатериаламиИРаботами") Тогда
		ОбеспечениеМатериаламиИРаботами.Загрузить(ДанныеЗаполнения.ОбеспечениеМатериаламиИРаботами);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("РасходМатериаловИРабот") Тогда
		РасходМатериаловИРабот.Загрузить(ДанныеЗаполнения.РасходМатериаловИРабот);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЭкономияМатериалов") Тогда
		ЭкономияМатериалов.Загрузить(ДанныеЗаполнения.ЭкономияМатериалов);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("ЭкономияМатериаловСерии") Тогда
		ЭкономияМатериаловСерии.Загрузить(ДанныеЗаполнения.ЭкономияМатериаловСерии);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Трудозатраты") Тогда
		Трудозатраты.Загрузить(ДанныеЗаполнения.Трудозатраты);
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("Последователи") И ТипЗнч(ДанныеЗаполнения.Последователи) = Тип("Массив") Тогда
		
		Последователи.Очистить();
		
		Для каждого Последователь Из ДанныеЗаполнения.Последователи Цикл
			
			НоваяСтрока = Последователи.Добавить();
			НоваяСтрока.Этап     = Последователь;
			НоваяСтрока.ТипСвязи = ТипСвязиПоследователь();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НачатоВыполнениеЭтапа()
	
	Возврат Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Начат
		ИЛИ Статус = Перечисления.СтатусыЭтаповПроизводства2_2.Завершен;
	
КонецФункции

Функция ДанныеИзКэшаОбъекта(Ключ)
	
	Перем Результат, КэшированныеЗначения;
	
	Если Не ДополнительныеСвойства.Свойство("КэшированныеЗначения", КэшированныеЗначения) Тогда
		КэшированныеЗначения = Новый Структура();
		ДополнительныеСвойства.Вставить("КэшированныеЗначения", КэшированныеЗначения);
	КонецЕсли;
	
	Если Не КэшированныеЗначения.Свойство(Ключ, Результат) Тогда
		
		Если Ключ = "ГрафикПроизводства" Тогда
			
			Результат = РегистрыСведений.ГрафикЭтаповПроизводства2_2.ГрафикПроизводства(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭтотОбъект.Ссылка));
			
		ИначеЕсли Ключ = "ИзменилосьРучноеРазмещениеЭтапаВГрафике" Тогда
			
			Результат = Ложь;
			
			Если ОтредактированыПараметрыРучногоРазмещенияВГрафике() Тогда
				
				Если РегистрыСведений.ГрафикЭтаповПроизводства2_2.ИзменилосьРазмещениеЭтапаВГрафике(
					ЭтотОбъект.Ссылка, ДополнительныеСвойства.ГрафикПроизводства) Тогда
					
					Результат = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		КэшированныеЗначения.Вставить(Ключ, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НайтиНеОтмененныеСтроки(ИмяТЧ)
	
	Возврат ЭтотОбъект[ИмяТЧ].НайтиСтроки(Новый Структура("Отменено", Ложь));
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
