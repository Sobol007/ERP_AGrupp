#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

// Возвращает представление счета-фактуры с учетом состояния проведения.
//
// Параметры:
// 	НаименованиеДокумента - Строка - Наименование документа.
// 	Номер - Строка - Номер счета-фактуры.
// 	Дата - Дата - Дата счета-фактуры.
// 	Проведен - Булево - Признак проведения документа.
//
Функция ПредставлениеСчетаФактуры(НаименованиеДокумента, Номер, Дата, Проведен) Экспорт
	
	МассивПодстрок = Новый Массив;
	МассивПодстрок.Добавить(СтрШаблон(НСтр("ru = '%1 № %2 от %3 г.';
											|en = '%1 No. %2 of %3'"), НаименованиеДокумента, СокрЛП(Номер), Формат(Дата, "ДЛФ=D")));
	Если Не Проведен Тогда
		МассивПодстрок.Добавить(НСтр("ru = '(не проведен)';
									|en = '(not posted)'"));
	КонецЕсли;
	
	Возврат СтрСоединить(МассивПодстрок, " ");
	
КонецФункции

// Функция находит счета-фактуры заданного документа.
//
// Параметры:
//	Основание - ДокументСсылка - Документ, для которого необходимо найти счет-фактуру;
//	Организация - СправочникСсылка.Организации - Организация, для которой формируется счет-фактура;
//	РеквизитыСчетаФактуры - Структура - Возвращаемый. Данные счета-фактуры (Ссылка, Номер, ДатаСоставления, ВИностраннойВалюте);
//	Проведен - Булево - Поиск только проведенных счетов-фактур..
//
// Возвращаемое значение:
//	Массив - Массив найденных счетов-фактур.
//
Функция СчетаФактурыПоОснованию(Основание, Организация = Неопределено, РеквизитыСчетаФактуры = Неопределено, Проведен = Истина) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	ТаблицаОснований.НомерВходящегоДокумента КАК Номер,
	|	ТаблицаОснований.Ссылка.Дата КАК Дата,
	|	ТаблицаОснований.ДатаВходящегоДокумента КАК ДатаСоставления,
	|	НЕОПРЕДЕЛЕНО КАК НомерИсправления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаИсправления,
	|	НЕОПРЕДЕЛЕНО КАК Валюта,
	|	ТаблицаОснований.Проведен КАК Проведен,
	|	ЛОЖЬ КАК Исправление,
	|	ЛОЖЬ КАК Корректировочный
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И ТаблицаОснований.ДокументОснование = &Основание
	|	И (ТаблицаОснований.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОснований.Ссылка.НомерИсправления УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание",   Основание);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Если Проведен Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПометкаУдаления = ЛОЖЬ", "Проведен");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РеквизитыСчетаФактуры = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		РеквизитыСчетаФактуры.Вставить(Колонка.Имя);
	КонецЦикла;
	
	ТаблицаСчетовФактур = Новый ТаблицаЗначений;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ТаблицаСчетовФактур.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаСчетовФактур = РезультатЗапроса.Выгрузить();
		ЗаполнитьЗначенияСвойств(РеквизитыСчетаФактуры, ТаблицаСчетовФактур[0]);
	КонецЕсли;
	
	Возврат ТаблицаСчетовФактур;
	
КонецФункции

// Помечает на удаление счет-фактуру, если:
// - организация счета-фактуры не соответствует указанной 
// - или если документ-основание помечен на удаление
//
// Параметры:
//	Основание		- Документ - документ-основание счета-фактуры
//	ПометкаУдаления - Булево - пометка удаления документа-основания
//	Организация		- СправочникСсылка.Организации - Организация, для которой формируется счет-фактура
//
Процедура ПроверитьРеквизитыСчетФактуры(Основание, ПометкаУдаления, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Ссылка.Организация КАК Организация,
	|	КОЛИЧЕСТВО(ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|		ПО СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|ГДЕ
	|	НЕ ТаблицаОснований.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.Следующий() Цикл
		
		Если (Организация <> Неопределено И Выборка.Организация <> Организация)
		 ИЛИ ПометкаУдаления Тогда
			Если Выборка.КоличествоОснований = 1 Тогда
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(Основание);
				ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураПолученный - Счет-фактура, данные которого необходимо получить.
//
// Возвращаемое значение:
//	Структура - Реквизиты счета-фактуры
//
Функция ДанныеСчетаФактуры(СчетФактура) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА СчетФактураПолученный.Исправление ТОГДА
	|		СчетФактураПолученный.СчетФактураОснование
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                               КАК СчетФактураОснование,
	|	СчетФактураПолученный.Валюта                        КАК Валюта,
	|	СчетФактураПолученный.Организация                   КАК Организация,
	|	СчетФактураПолученный.Контрагент                    КАК Контрагент,
	|	СчетФактураПолученный.ИННКонтрагента                КАК ИННКонтрагента,
	|	СчетФактураПолученный.КППКонтрагента                КАК КППКонтрагента,
	|	СчетФактураПолученный.КодВидаОперации               КАК КодВидаОперации,
	|	СчетФактураПолученный.Корректировочный              КАК Корректировочный,
	|	СчетФактураПолученный.Номер                         КАК Номер,
	|	СчетФактураПолученный.Дата                          КАК Дата,
	|	СчетФактураПолученный.ДатаСоставления               КАК ДатаСоставления,
	|	СчетФактураПолученный.Подразделение                 КАК Подразделение,
	|	СчетФактураПолученный.ДокументыОснования.(
	|		ДокументОснование,
	|		ИсходныйДокумент,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента,
	|		НомерИсправленияИсходногоДокумента,
	|		ДатаИсправленияИсходногоДокумента,
	|		Сумма,
	|		НалоговаяБаза,
	|		СтавкаНДС,
	|		СуммаНДС
	|	)                                                 КАК ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураДанных = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
		СтруктураДанных.Вставить("ДокументыОснования", Выборка.ДокументыОснования.Выгрузить());
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Приводит состояние проведения счета-фактуры в соответствие с документом-основанием
//
// Параметры:
//	Основание				- Документ - документ-основание счета-фактуры
//	Проведен 				- Булево - Состояние проведения документа-основания
//	ТребуетсяСчетФактура	- Булево - Потребность в наличии счета-фактуры для документа-основания
//
Процедура АктуализироватьСчетФактуру(Основание, Проведен, ТребуетсяСчетФактура = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОснований.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(ТаблицаОснований.ДатаВходящегоДокумента, ДЕНЬ) КАК ДатаСоставления,
	|	ТаблицаОснований.Проведен КАК Проведен
	|ПОМЕСТИТЬ СчетаФактуры
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|ГДЕ
	|	ТаблицаОснований.ДокументОснование = &Основание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.Ссылка КАК Ссылка,
	|	СчетаФактуры.Проведен КАК Проведен,
	|	КОЛИЧЕСТВО(ТаблицаОснований.ДокументОснование) КАК КоличествоОснований
	|ИЗ
	|	СчетаФактуры КАК СчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИнойДокументПодтвержденияНДС КАК ТаблицаОснований
	|		ПО СчетаФактуры.Ссылка = ТаблицаОснований.Ссылка
	|ГДЕ
	|	НЕ ТаблицаОснований.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.Ссылка,
	|	СчетаФактуры.Проведен,
	|	СчетаФактуры.ДатаСоставления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаФактуры.ДатаСоставления
	|";
	
	Запрос.УстановитьПараметр("Основание", Основание);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ДополнительныеСвойства.Вставить("АктуализацияДвижений", Истина);
		
		Если НЕ Проведен ИЛИ НЕ ТребуетсяСчетФактура Тогда
			Если Выборка.КоличествоОснований = 1 Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				СтрокаКУдалению = ДокументОбъект.ДокументыОснования.Найти(Основание);
				ДокументОбъект.ДокументыОснования.Удалить(СтрокаКУдалению);
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			КонецЕсли;
		Иначе
			Если Выборка.Проведен Тогда
				РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Запись;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьПоказателиНачисленияНДС(Выборка);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписи);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
								|en = 'Failed to write %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТ

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
#Область НачислениеНДСНалоговогоАгента       // (Дт 76.НА :: Кт 68.52)
	НачислениеНДСНалоговогоАгента = "
	|ВЫБРАТЬ //// Начисление НДС налогового агента (Дт 76.НА :: Кт 68.52)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НДСПредъявленный.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	НДСПредъявленный.НДС КАК Сумма,
	|	НДСПредъявленный.НДСУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента) КАК СчетДт,
	|
	|	Операция.Контрагент КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров) КАК СчетКт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Начисление НДС налогового агента"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйНалоговыйАгент КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Операция.Ссылка
	|		И НЕ НДСПредъявленный.РегламентнаяОперация
	|		И НДСПредъявленный.НДС > 0
	|		И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|";
#КонецОбласти

#Область ЗакупкаНДСНалоговогоАгента         // (Дт 19.03 :: Кт 76.НА)
	ЗакупкаНДСНалоговогоАгента = "
	|ВЫБРАТЬ //// НДС при приобретении по рег. НДСПредъявленный (Дт 19.03 :: Кт 76.НА)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НДСПредъявленный.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	НДСПредъявленный.НДС КАК Сумма,
	|	НДСПредъявленный.НДСУпр КАК СуммаУУ,
	|
	// ДТ - Вид счета, Аналитика учета, Место учета
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.НДСпоПриобретеннымЦенностям) КАК ВидСчетаДт,
	|	НДСПредъявленный.ВидДеятельностиНДС КАК АналитикаУчетаДт,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент) КАК МестоУчетаДт,
	|
	// ДТ - Валюта, Подразделение, Счет
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)                               КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                 КАК ПодразделениеДт,
	|	НДСПредъявленный.НаправлениеДеятельности                               КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	
	// ДТ - Субконто
	|	Операция.Контрагент КАК СубконтоДт1,
	|	НДСПредъявленный.СчетФактура КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|	
	// ДТ - Валютная сумма, Количество, Суммы ПР,ВР,НУ
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента) КАК СчетКт,
	|
	|	Операция.Контрагент КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|	
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""НДС при приобретении товаров (налоговый агент)"" КАК Содержание
	|
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйНалоговыйАгент КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Операция.Ссылка
	|		И НЕ НДСПредъявленный.РегламентнаяОперация
	|		И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|";
#КонецОбласти

#Область УменьшениеНДСНалоговогоАгента         // (Дт 68.52 :: Кт 76.НА)
	УменьшениеНДСНалоговогоАгента = "
	|ВЫБРАТЬ // Уменьшение НДС налогового агента при корректировке в сторону уменьшения или исправлении (Дт 68.52 :: Кт 76.НА)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НДСПредъявленный.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	-НДСПредъявленный.НДС КАК Сумма,
	|	-НДСПредъявленный.НДСУпр КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСНалоговогоАгентаПоОтдельнымВидамТоваров) КАК СчетДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПлатежейВГосБюджет.Налог) КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКд3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента) КАК СчетКт,
	|
	|	Операция.Контрагент КАК СубконтоКт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	0 КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Уменьшение НДС налогового агента"" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураПолученныйНалоговыйАгент КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка 
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|	ПО
	|		НДСПредъявленный.Регистратор = Операция.Ссылка
	|		И НЕ НДСПредъявленный.РегламентнаяОперация
	|		И НДСПредъявленный.НДС < 0
	|		И НДСПредъявленный.ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ТоварыНалоговыйАгент)
	|	
	|";
#КонецОбласти

	ТекстыОтражения = Новый Массив;
	ТекстыОтражения.Добавить(НачислениеНДСНалоговогоАгента);
	ТекстыОтражения.Добавить(ЗакупкаНДСНалоговогоАгента);
	ТекстыОтражения.Добавить(УменьшениеНДСНалоговогоАгента);
	
	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц, 
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//	Строка - текст запроса
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

//-- НЕ УТ

//Определяет параметры заполнения нового счета-фактуры, вводимого на основании существующего счета-фактуры.
//
// Параметры:
//	СчетФактура - ДокументСсылка.СчетФактураПолученный - Счет-фактура, на основании которого вводится счет-фактура.
//
// Возвращаемое значение:
//	Структура - структура со следующими свойствами:
//	* Основания - Массив - Документы-основания "Корректировка поступления" нового счета-фактуры
//	* ДатаКорректировки - Дата - Дата нового корректировочного счета-фактуры
//	* Корректировочный - Булево - Истина, указывает на необходимость создания корректировочного счета-фактуры.
//	* Исправление - Булево - Истина, указывает на необходимость создания исправительного счета-фактуры.
//
Функция ПараметрыЗаполненияПоСчетуФактуре(СчетФактура) Экспорт
	
	ПараметрыЗаполнения = Новый Структура("Основания, ДатаКорректировки");
	ПараметрыЗаполнения.Вставить("Корректировочный", Ложь);
	ПараметрыЗаполнения.Вставить("Исправление", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованийКоррективочныхСФ
	|		ПО СчетФактураПолученный.Ссылка = ОснованийКоррективочныхСФ.ИсходныйДокумент
	|			И НЕ СчетФактураПолученный.Исправление
	|			И (ОснованийКоррективочныхСФ.Ссылка.Проведен)
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураПолученный.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованийКоррективочныхСФ
	|		ПО СчетФактураПолученный.СчетФактураОснование = ОснованийКоррективочныхСФ.ИсходныйДокумент
	|			И СчетФактураПолученный.Исправление
	|			И (ОснованийКоррективочныхСФ.Ссылка.Проведен)
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(КорректировкаПриобретения.ДокументОснование, ОснованияСчетаФактуры.ДокументОснование) КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ДокументыОснования
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ОснованияСчетаФактуры.ДокументОснование = КорректировкаПриобретения.Ссылка
	|ГДЕ
	|	ОснованияСчетаФактуры.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияСчетаФактуры.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ИсходныеСчетаФактуры
	|ИЗ
	|	ВТ_ДокументыОснования КАК ВТ_ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ПО ВТ_ДокументыОснования.ДокументОснование = ОснованияСчетаФактуры.ДокументОснование
	|			И ОснованияСчетаФактуры.Ссылка.Проведен
	|			И (НЕ ОснованияСчетаФактуры.Ссылка.Исправление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОснованияСчетаФактуры.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ВТ_ОснованияИсходныхСФ
	|ИЗ
	|	ВТ_ИсходныеСчетаФактуры КАК ИсходныеСчетаФактуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК ОснованияСчетаФактуры
	|		ПО ИсходныеСчетаФактуры.Ссылка = ОснованияСчетаФактуры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка                КАК Ссылка,
	|	КорректировкаПриобретения.Дата                  КАК Дата
	|ИЗ
	|	ВТ_ОснованияИсходныхСФ КАК ВТ_ОснованияИсходныхСФ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ПО ВТ_ОснованияИсходныхСФ.ДокументОснование = КорректировкаПриобретения.ДокументОснование
	|			И (КорректировкаПриобретения.ВидКорректировки В (
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИсправлениеОшибок), 
	|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон)))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТребуетсяОформлениеСчетаФактуры КАК ТребуетсяСчетФактура
	|		ПО (КорректировкаПриобретения.Ссылка = ТребуетсяСчетФактура.Основание)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("Ссылка", СчетФактура);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса[4].Пустой() Тогда
		
		Если РезультатЗапроса[0].Пустой() Тогда
			ПараметрыЗаполнения.Исправление = Истина;
		КонецЕсли;
		
	Иначе
		
		ТаблицаОснований = РезультатЗапроса[4].Выгрузить();
		ПараметрыЗаполнения.Основания = ТаблицаОснований.ВыгрузитьКолонку("Ссылка");
		ПараметрыЗаполнения.ДатаКорректировки = ТаблицаОснований[0].Дата;
		ПараметрыЗаполнения.Корректировочный = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент.Партнер, NULL КАК ИСТИНА)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("Организация", ДокументСсылка.Организация);
	
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения();
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ИнойДокументПодтвержденияНДС"));
	ЗначенияПараметровПроведения.Вставить("ХозяйственнаяОперация",  Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо);
	ЗначенияПараметровПроведения.Вставить("Валюта", ЗначениеНастроекПовтИсп.ПолучитьВалютуРегламентированногоУчета());

	Возврат ЗначенияПараметровПроведения;
	
КонецФункции


Функция ТекстЗапросаТаблицаЖурналУчетаСчетовФактур(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЖурналУчетаСчетовФактур";
	
	Если Не ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИнойДокумент.Дата КАК Период,
	|	ИнойДокумент.Организация КАК Организация,
	|	ИнойДокумент.Контрагент КАК Контрагент,
	|	ИнойДокумент.Ссылка КАК СчетФактура,
	|	ЗНАЧЕНИЕ(Перечисление.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры) КАК ЧастьЖурнала,
	|	ИнойДокумент.НомерВходящегоДокумента КАК НомерСчетаФактуры,
	|	ИнойДокумент.ДатаВходящегоДокумента КАК ДатаСчетаФактуры,
	|	ИнойДокумент.КодВидаОперации КАК КодВидаОперации,
	|	2 КАК КодВидаСделки,
	|	1 КАК КодСпособаПолучения,
	|	&Валюта КАК Валюта,
	|	ИнойДокумент.ДокументОснование.СуммаРегл КАК СуммаПоСчетуФактуре,
	|	0 КАК СуммаНДС
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ИнойДокумент
	|ГДЕ
	|	ИнойДокумент.Ссылка = &Ссылка
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                    КАК Ссылка,
	|	ДанныеДокумента.Дата                                      КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер                                     КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                                  КАК ТипСсылки,
	|	ДанныеДокумента.Организация                               КАК Организация,
	|	ДанныеДокумента.Контрагент                                КАК Контрагент,
	|	ДанныеДокумента.ДокументОснование.Подразделение           КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                                              КАК Ответственный,
	|	ВЫРАЗИТЬ(ДанныеДокумента.ДокументОснование.Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|	&Валюта                                                   КАК Валюта,
	|	ДанныеДокумента.ДокументОснование.СуммаРегл               КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                                              КАК Статус,
	|	ДанныеДокумента.Проведен                                  КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                           КАК ПометкаУдаления,
	|	""""                                                      КАК Дополнительно,
	|	ДанныеДокумента.ДатаВходящегоДокумента                    КАК ДатаПервичногоДокумента,
	|	ДанныеДокумента.НомерВходящегоДокумента                   КАК НомерПервичногоДокумента,
	|	&ХозяйственнаяОперация                                    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.ДокументОснование.Партнер                 КАК Партнер,
	|	ДанныеДокумента.ДокументОснование.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                              КАК МестоХранения,
	|	ДанныеДокумента.ДокументОснование.Договор                 КАК Договор,
	|	ЛОЖЬ                                                      КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Дата                                      КАК ДатаОтраженияВУчете
	|ИЗ
	|	Документ.ИнойДокументПодтвержденияНДС КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	&Организация                            КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)            КАК ДатаОтражения
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

//-- НЕ УТ

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ИнойДокументПодтвержденияНДС";
	СинонимТаблицыДокумента = "ДанныеДокумента";
	ВЗапросеЕстьИсточник    = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметровПроведения();
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытия

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Ссылка");
	Поля.Добавить("НаименованиеДокумента");
	Поля.Добавить("НомерВходящегоДокумента");
	Поля.Добавить("ДатаВходящегоДокумента");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Представление = СтрШаблон(НСтр("ru = '%1 %2 от %3';
										|en = '%1 %2 from %3'"), Данные.НаименованиеДокумента, СокрЛП(Данные.НомерВходящегоДокумента), Формат(Данные.ДатаВходящегоДокумента,"ДЛФ=D"));
	Иначе
		Представление = СтрШаблон(НСтр("ru = '%1 (создание)';
										|en = '%1 (creation)'"), Данные.НаименованиеДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
