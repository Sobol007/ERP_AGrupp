
&НаКлиенте
Процедура ИсточникПриИзменении(Элемент)
	
	УстановитьВидимостьПриИзмененииИсточника();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПриИзмененииИсточника()
	
	Если Объект.Источник = "Регистрация прайс-листов" Тогда
		Элементы.ЗапасыЦенаПрайс.Видимость = Ложь;
		Элементы.ЗапасыВалютаЦены.Видимость = Ложь;
		Элементы.ЗапасыОстатки.Видимость = Ложь;
		Элементы.ЗапасыКоличество.Видимость = Ложь;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость = Истина;
		Элементы.ЗапасыСумма.Видимость = Ложь;
		Элементы.ЗапасыПричинаПотери.Видимость = Ложь;
		
		Элементы.ЗагрузитьПрайсИзЭксель.Видимость = Истина;
		Элементы.ЗаполнитьПричинуПотериВсем.Видимость = Ложь;
		Элементы.СохранитьМакетПрайса.Видимость = Истина;
		Элементы.Подразделение.Видимость = Истина;
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.Покупатель.Видимость = Ложь;
		Элементы.Склад.Видимость = Ложь;

	Иначе
		Элементы.ЗапасыЦенаПрайс.Видимость = Истина;
		Элементы.ЗапасыВалютаЦены.Видимость = Истина;
		Элементы.ЗапасыОстатки.Видимость = Истина;
		Элементы.ЗапасыКоличество.Видимость = Истина;
		Элементы.ЗапасыЕдиницаИзмерения.Видимость = Истина;
		Элементы.ЗапасыСумма.Видимость = Истина;
		Элементы.ЗапасыПричинаПотери.Видимость = Истина;
		
		Элементы.ЗагрузитьПрайсИзЭксель.Видимость = Ложь;
		Элементы.ЗаполнитьПричинуПотериВсем.Видимость = Истина;
		Элементы.СохранитьМакетПрайса.Видимость = Ложь;
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.Покупатель.Видимость = Истина;
		Элементы.Склад.Видимость = Истина;

		Элементы.Склад.ТолькоПросмотр = Истина;
		Элементы.Покупатель.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
	
	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите файл!";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ВыбФайл = ДиалогОткрытияФайла.ПолноеИмяФайла;
		ИмяФайла = Прав(ВыбФайл, СтрДлина(ВыбФайл) - СтрДлина(ДиалогОткрытияФайла.Каталог));
		
		Файл = Новый ДвоичныеДанные(ВыбФайл);
		Адрес = ПоместитьВоВременноеХранилище(Файл, ЭтаФорма.УникальныйИдентификатор);
		ЗаписатьПрикрепленныйФайлНаСервере(Адрес);
		
		Объект.ИмяПрикрепленногоФайла = ИмяФайла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрикрепленныйФайлНаСервере(ФайлВХранилище)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлВХранилище);
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ПрикрепленныйФайл = Новый ХранилищеЗначения(ДвоичныеДанные);
	ДокОбъект.Записать();	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	
	ТекФайл = ОткрытьФайлнасервере();

	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекФайл);
	АдресФайла = КаталогВременныхФайлов() + Объект.ИмяПрикрепленногоФайла;
	ДвоичныеДанные.Записать(АдресФайла);
	ЗапуститьПриложение(АдресФайла);
	
КонецПроцедуры

&НаСервере
Функция ОткрытьФайлНаСервере()
	
	АдресФайла = КаталогВременныхФайлов() + Объект.ИмяПрикрепленногоФайла;
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДвоичныеДанные = ДокОбъект.ПрикрепленныйФайл.получить();
	текФайл = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Возврат текФайл;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	Если ЭтоНовый Тогда
		Если Не ЗначениеЗаполнено(Объект.Источник) ТОгда
			Объект.Источник = "Регистрация цен конкурентов";
		КонецЕсли;
		
		Объект.ТипЦен = ПолучитьТипЦенПоРегиону(Объект.Подразделение);
		Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен; 	
		
		Для Каждого текСтр Из Объект.Запасы Цикл
			текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен;
	
	Если Не ЗначениеЗаполнено(Объект.Регион) Тогда
		
		Объект.Регион = Объект.Склад.БизнесРегион;
		
		Если Не ЗначениеЗаполнено(Объект.Регион) Тогда
			Объект.Регион = Объект.Подразделение.АГ_БизнесРегионМЦ;
		КонецЕсли;
		                                       
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьПриИзмененииИсточника();
	Элементы.ЗапасыЦенаПрайс.Заголовок = ПолучитьТипЦенПоРегиону(Объект.Подразделение);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТипЦенПоРегиону(ТекПодразделение)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	               |	ПОДСТРОКА(ТипыЦенНоменклатуры.Наименование, 1, 2) КАК Код,
	               |	ПОДСТРОКА(ТипыЦенНоменклатуры.Наименование, 4, 2) КАК Код2
	               |ИЗ
	               |	Справочник.ВидыЦен КАК ТипыЦенНоменклатуры
	               |ГДЕ
	               |	ТипыЦенНоменклатуры.АГ_Подразделение = &Подразделение
	               |	И НЕ ТипыЦенНоменклатуры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Подразделение", ТекПодразделение);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ТЗ.Сортировать("Код ВОЗР, Код2 ВозР");
	
	Если НЕ ТЗ.Количество() = 0 Тогда
		Возврат ТЗ[0].ТипЦен;
	Иначе 
		Возврат Справочники.ВидыЦен.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПрайсИзЭксель(Команда)
	
	ДанныеВозврата = ОткрытьФормуМодально("Документ.АГ_РегистрацияЦенКонкурентов.Форма.ФормаНастроек");
	
	Если ДанныеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ДанныеВозврата.ПутьКФайлу;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран файл. Загрузка отменена!";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПутьКФайлу);
	Идентификатор  = Новый УникальныйИдентификатор;
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Идентификатор);
	
	ЗагрузитьИзЭксельНаСервере(АдресХранилища, ДанныеВозврата);
	
	ЭтотОбъект.ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзЭксельНаСервере(АдресХранилища, ДанныеВозврата)
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища); 
		
	ИмяФайла = Новый УникальныйИдентификатор;
	
	Попытка	
		// Записать файл на сервере
		ДвоичныеДанные.Записать(КаталогВременныхФайлов()  + "\" + ИмяФайла + ".xlsx");
	Исключение
		Возврат;
	КонецПопытки;
		
		
	ТабДок = Новый ТабличныйДокумент;	
	Попытка
		
		ТабДок.Прочитать(КаталогВременныхФайлов()  + "\" + ИмяФайла + ".xlsx");
	Исключение
		Сообщить("Монопольный доступ к файлу загрузки не может быть получен! Пожалуйста, закройте загружаемый файл в другом приложении.");	
		Возврат;
	КонецПопытки;	
		
	Стр = 2;
	КолПустыхСтрок = 0;
	
	КолонкаКода = ДанныеВозврата.Код;
	КолонкаНаименование = ДанныеВозврата.Наименование;
	КолонкаЕИ = ДанныеВозврата.ЕИ;
	
	ВсегоСтрок = ТабДок.ВысотаТаблицы;
	
	Для СчСтрок = 3 По ВсегоСтрок Цикл
		Если  СокрЛП(ТабДок.Область(СчСтрок, 2).Текст) = "" Тогда
			ПустыхСтрок = ПустыхСтрок + 1;
			Если ПустыхСтрок >= 5 Тогда
				ВсегоСтрок = СчСтрок - 5;
				Прервать;
			КонецЕсли;
		Иначе
			ПустыхСтрок = 0;
		КонецЕсли;
	КонецЦикла;
	
	Для СчетчикСтрок = 3 По (ВсегоСтрок + 1) Цикл
		Если ЗначениеЗаполнено(СокрЛП(ТабДок.Область(СчетчикСтрок, 2).Текст)) Тогда
			
			КолПустыхСтрок = 0;
			
			КонсНом = Справочники.Номенклатура.НайтиПоКоду(СокрЛП(ТабДок.Область(СчетчикСтрок, КолонкаКода).Текст));
			
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = КонсНом;
			НоваяСтрока.НоменклатураКонкурента = СокрЛП(ТабДок.Область(СчетчикСтрок, ДанныеВозврата.КолонкаНаименованиеКонкурента).Текст);
			НоваяСтрока.Валюта = ДанныеВозврата.Валюта;
			Цена = СокрЛП(ТабДок.Область(СчетчикСтрок,ДанныеВозврата.КолонкаЦена).Текст); 
			НоваяСтрока.Количество = 1;
			НоваяСтрока.ЕдиницаИзмерения = Справочники.УпаковкиЕдиницыИзмерения.НайтиПоНаименованию(СокрЛП(ТабДок.Область(СчетчикСтрок,КолонкаЕИ).Текст));
			НоваяСтрока.Цена = Цена;
			
			НоваяСтрока.Сумма = НоваяСтрока.Цена * НоваяСтрока.Количество;
			
			                                                                                 
		Иначе
			КолПустыхСтрок = КолПустыхСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаименованиеПоФормулеНаСервере(СтрФормула, РеквизитыERP)
	
	Формула = СтрФормула;
	
	Пока НЕ СтрНайти(Формула, "[",) = 0 Цикл
		
		ПервыйСмв =  СтрНайти(Формула, "[",);
		ПоследнийСмв = СтрНайти(Формула, "]",);
		
		ТекстПараметра = Сред(Формула, ПервыйСмв + 1, ПоследнийСмв - ПервыйСмв - 1);
		Значение = "";
		
		Для Каждого ТекСвойство Из РеквизитыERP Цикл
			Если ТекСвойство.Свойство = ТекстПараметра Тогда
				ТекЗнач = ТекСвойство.Значение;
				
				Значение = ?(ЗначениеЗаполнено(ТекСвойство.Значение), ТекЗнач, "");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		
		Формула =  СтрЗаменить(Формула,"[" + Строка(ТекстПараметра) + "]", """" + Значение + """"); 
		
	КонецЦикла;
	
	Формула = """""" + Формула + """""";

	Наименование = Вычислить(Формула);
	Наименование = Сред(Наименование, 2, СтрДлина(Наименование) - 2);
	
	Пока НЕ СтрНайти(Наименование, "  ",) = 0 Цикл
		Наименование = СтрЗаменить(Наименование, "  ", " ");
	КонецЦикла;
	
	Возврат СОКРЛП(Наименование);

КонецФункции

&НаКлиенте
Процедура СохранитьМакетПрайса(Команда)
	
	Парам = Новый Структура;
	Парам.Вставить("ЭтоМакет", Истина);
	ДанныеВозврата = ОткрытьФормуМодально("Документ.АГ_РегистрацияЦенКонкурентов.Форма.ФормаНастроек", Парам);
	
	Если ДанныеВозврата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ДанныеВозврата.ПутьКФайлу;
	 
	 ТабДок = СформирвоатьТабДокНаСевере(ДанныеВозврата);
	 
	 ТабДок.Записать(ПутьКФайлу, ТипФайлаТабличногоДокумента.XLSX);
	 
	 Предупреждение("Сохранение завершено");
	
КонецПроцедуры

&НаСервере
Функция СформирвоатьТабДокНаСевере(ДанныеВозврата)
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("Наименование");
	ТаблицаКолонок.Колонки.Добавить("НомерКолонки");
	ТаблицаКолонок.Колонки.Добавить("ЭтоРеквизит");
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	НовСтр = ТаблицаКолонок.Добавить();
	НовСтр.Наименование = "Код";
	НовСтр.НомерКолонки = 1;
	НовСтр.ЭтоРеквизит = Ложь;
	
	НовСтр = ТаблицаКолонок.Добавить();
	НовСтр.Наименование = "Наименование";
	НовСтр.НомерКолонки = 2;
	НовСтр.ЭтоРеквизит = Ложь;
	
	СчКол = 3;
	Для Каждого ТекКол Из ДанныеВозврата.СписокКолонок Цикл
		
		НовСтр = ТаблицаКолонок.Добавить();
		НовСтр.Наименование = ТекКол;
		СчКол = ДанныеВозврата[ТекКол];
		НовСтр.НомерКолонки = СчКол;
		НовСтр.ЭтоРеквизит = Истина;
		
		ТаблицаДанных.Колонки.Добавить(ТекКол);
		
		СчКол = СчКол + 1;
	КонецЦикла;
	
	НовСтр = ТаблицаКолонок.Добавить();
	НовСтр.Наименование = "Цена";
	НовСтр.НомерКолонки = СчКол;
	НовСтр.ЭтоРеквизит = Ложь;
	
	НовСтр = ТаблицаКолонок.Добавить();
	НовСтр.Наименование = "ЕИ";
	НовСтр.НомерКолонки = СчКол + 1;
	НовСтр.ЭтоРеквизит = Ложь;
	
	НовСтр = ТаблицаКолонок.Добавить();
	НовСтр.Наименование = "Наименование продукции конкурента";
	НовСтр.НомерКолонки = СчКол + 2;
	НовСтр.ЭтоРеквизит = Ложь;
	
	ТаблицаКолонок.Сортировать("НомерКолонки Возр");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Макет = ДокОбъект.ПолучитьМакет("МакетВыгрузкиПрайса");
	
	ОбластьМакета = макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НоменклатурнаяГруппа = ДанныеВозврата.НоменклатурнаяГруппа;
	ТабДок.Вывести(ОбластьМакета);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Вставка");
	ТабДок.Вывести(ОбластьМакета);
	
	Сч = 2;
	Для Каждого ТекСтр Из ТаблицаКолонок Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка|Колонка");
		Если ТекСтр.ЭтоРеквизит Тогда
			Областьмакета.Параметры.Свойство = СтрЗаменить(ТекСтр.Наименование, "_", " ");
		Иначе
			Областьмакета.Параметры.Свойство = ТекСтр.Наименование;
		КонецЕсли;
		ТабДок.Присоединить(ОбластьМакета);
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НоменклатураДополнительныеРеквизиты.Свойство.Заголовок КАК Свойство,
	                |	НоменклатураДополнительныеРеквизиты.Значение КАК Значение,
	                |	Номенклатура.Ссылка КАК Номенклатура
	                |ИЗ
	                |	Справочник.Номенклатура КАК Номенклатура
	                |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	                |		ПО (НоменклатураДополнительныеРеквизиты.Ссылка = Номенклатура.Ссылка)
	                |ГДЕ
	                |	НЕ Номенклатура.ЭтоГруппа
	                |	И НЕ Номенклатура.ПометкаУдаления
	                |	И Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Номенклатура.Наименование
	                |ИТОГИ ПО
	                |	Номенклатура";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", ДанныеВозврата.НоменклатурнаяГруппа);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ВыборкаНоменклатура = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ОбластьМакета = Макет.ПолучитьОбласть("Строка|Вставка");
			ТабДок.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
			ОбластьМакета.Параметры.Значение = ВыборкаНоменклатура.Номенклатура.Код;
			ТабДок.Присоединить(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
			ОбластьМакета.Параметры.Значение = ВыборкаНоменклатура.Номенклатура.Наименование;
			ТабДок.Присоединить(ОбластьМакета);
			
			Выборка = ВыборкаНоменклатура.Выбрать();
			
			Для Каждого Теккол из ТаблицаКолонок Цикл
				Если ТекКол.Наименование = "Код" ИЛИ ТекКол.Наименование = "Наименование" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ТекКол.Наименование = "Цена" Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
					ОбластьМакета.Параметры.Значение = "";
					ТабДок.Присоединить(ОбластьМакета);
					Продолжить;
				КонецЕсли;
				
				Если ТекКол.Наименование = "ЕИ" Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
					ОбластьМакета.Параметры.Значение = "т";
					ТабДок.Присоединить(ОбластьМакета);
					Продолжить;
				КонецЕсли;
					
				Если ТекКол.Наименование = "Наименование продукции конкурента" Тогда
					
					ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
					ОбластьМакета.Параметры.Значение = ВыборкаНоменклатура.Номенклатура.Наименование;
					ТабДок.Присоединить(ОбластьМакета);
					Продолжить;
					
				КонецЕсли;
				
				Выборка.Сбросить();                            
				Если Выборка.НайтиСледующий(СтрЗаменить(Теккол.Наименование, "_", " "), "Свойство") = Истина Тогда
					ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
					ОбластьМакета.Параметры.Значение = Выборка.Значение;
					ТабДок.Присоединить(ОбластьМакета);
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть("Строка|Колонка");
					ОбластьМакета.Параметры.Значение = "";
					ТабДок.Присоединить(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
		
	Возврат ТабДок;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПричинуПотериВсем(Команда)
	
	Причина = ОткрытьФормуМодально("Справочник.ПричиныОтменыЗаказовКлиентов.Форма.ФормаВыбора");
	
	Для Каждого ТекСтр Из Объект.Запасы Цикл
		ТекСтр.ПричинаПотери = Причина;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)

	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Если Не Объект.Подразделение.АГ_УровеньПодчинения = Перечисления.АГ_УровеньПодчинения.Металлоцентр Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Разрешено выбирать подразделение только с уровнем подчинения Металлоцентр!";
			Сообщение.Сообщить();
			
			Объект.Подразделение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	
	Объект.ТипЦен = ПолучитьТипЦенПоРегиону(Объект.Подразделение);
	Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен; 	
	
	Для Каждого текСтр Из Объект.Запасы Цикл
		текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
		ТекСтр.Валюта = Объект.ТипЦен.ВалютаЦены;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Регион = Объект.Подразделение.АГ_БизнесРегионМЦ;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкладПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Регион = Объект.Склад.БизнесРегион;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	СкладПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Объект.Склад = Объект.ДокументОснование.Склад;
		Объект.Покупатель = Объект.ДокументОснование.Партнер;
		Объект.Подразделение =  Объект.ДокументОснование.Склад.Подразделение;
		Объект.Регион = Объект.Склад.БизнесРегион;
		Объект.Ответственный = Объект.ДокументОснование.Менеджер;
		
		Если Не ЗначениеЗаполнено(Объект.Регион) Тогда
			 Объект.Регион = Объект.Подразделение.АГ_БизнесРегионМЦ;
		 КонецЕсли;
		 
		 Объект.ТипЦен = Объект.Склад.АГ_ОсновнойВидЦены;
		 Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен; 	
		 
		 Для Каждого текСтр Из Объект.Запасы Цикл
			 текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
		 КонецЦикла;

	КонецЕсли;
	//Заполним остатками
	ПерезаполнитьОстаткиТоварыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьОстаткиТоварыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Ном.Номенклатура
	|ПОМЕСТИТЬ СписоНом
	|ИЗ
	|	&Ном КАК Ном
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура,
	|	СУММА(ТоварыОрганизацийОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&ДатаСреза,
	|			АналитикаУчетаНоменклатуры.Номенклатура В
	|				(ВЫБРАТЬ
	|					СписоНом.Номенклатура
	|				ИЗ
	|					СписоНом КАК СписоНом)) КАК ТоварыОрганизацийОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура";
	
	Запрос.УстановитьПараметр("Ном", Объект.Запасы.Выгрузить());
	Запрос.УстановитьПараметр("ДатаСреза", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Для Каждого ТекСтр Из Объект.Запасы Цикл
		СтруктураПоиска= Новый Структура("Номенклатура");
		СтруктураПоиска.Номенклатура = ТекСтр.Номенклатура;
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ТекСтр.Остатки = Выборка.Количество;
			Объект.ПричинаПотериОбъема[ТекСтр.НомерСтроки - 1].Остатки = Выборка.Количество; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	
	ПокупательПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПокупательПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		Объект.Подразделение = ПолучитьПодразделениеИзСклада(Объект.Склад);
	ИначеЕсли ЗначениеЗаполнено(Объект.Покупатель) Тогда
		Объект.Подразделение = ПолучитьПодразделениеИзПользователя(Объект.Покупатель.ОсновнойМенеджер);
	Иначе
		Объект.Подразделение = ПолучитьПодразделениеИзПользователя(Объект.Ответственный);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Регион) Тогда
		Объект.Регион = ПолучитьрегионИзПодразделения(Объект.Подразделение);
	КонецЕсли;
	
	Объект.ТипЦен = ПолучитьТипЦенПоРегиону(Объект.Подразделение);
	Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен; 	
	
	Для Каждого текСтр Из Объект.Запасы Цикл
		текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
	КонецЦикла;

	
	Если ЗначениеЗаполнено(Объект.Покупатель) Тогда  
		Если ЗначениеЗаполнено(Объект.Покупатель.ОсновнойМенеджер) Тогда
			Объект.Ответственный = Объект.Покупатель.ОсновнойМенеджер;
		Иначе
			Объект.Ответственный = ПолучитьТекПользователя();
		КонецЕсли;
		
		Объект.Подразделение = ПолучитьПодразделениеИзПользователя(Объект.Ответственный);
		
		Если Не ЗначениеЗаполнено(Объект.Регион) Тогда
			 Объект.Регион = Объект.Подразделение.АГ_БизнесРегионМЦ
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеИзСклада(ТекСклад)
	
	Возврат ТекСклад.Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьрегионИзПодразделения(ТекПодразделение)
	
	Возврат ТекПодразделение.АГ_БизнесРегионМЦ;
	
КонецФункции

&НаСервере
Функция ПолучитьПодразделениеИзПользователя(ТекПользователь)
	
	Возврат ТекПользователь.Подразделение;
	
КонецФункции

&НаСервере
Функция ПолучитьТекПользователя()
	
	Возврат ПараметрыСеанса.ТекущийПользователь;
	
КонецФункции

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
 
	Объект.ТипЦен = ПолучитьТипЦенПоРегиону(Объект.Подразделение); 
	
	СтрокаТабличнойЧасти.ВалютаЦены = ПолучитьВалютуЦены(Объект.ТипЦен);
	СтрокаТабличнойЧасти.Валюта = СтрокаТабличнойЧасти.ВалютаЦены;
	
	СтруктураДанные = Новый Структура();
	
	СтруктураДанные.Вставить("ДатаОбработки",	 Объект.Дата);
	СтруктураДанные.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("ВалютаЦены",	 	 СтрокаТабличнойЧасти.ВалютаЦены);
	СтруктураДанные.Вставить("Коэффициент",		 1);
	СтруктураДанные.Вставить("ТипЦен",		 	 Объект.ТипЦен);

	
	СтруктураДанные.Вставить("Склад",	 	 Объект.Склад);
	СтруктураДанные.Вставить("Основание",	 Объект.ДокументОснование);
	СтруктураДанные.Вставить("Подразделение",	 	 Объект.Подразделение);
	СтруктураДанные.Вставить("ЕдиницаИзмерения",	 СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Количество = 0;
	СтрокаТабличнойЧасти.НоменклатураКонкурента = СтруктураДанные.НоменклатураКонкурента;
	СтрокаТабличнойЧасти.ЦенаПрайс = СтруктураДанные.ЦенаПрайс;
	СтрокаТабличнойЧасти.Остатки = СтруктураДанные.Остаток;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВалютуЦены(ТекТипЦен)
	
	Возврат ТекТипЦен.ВалютаЦены;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("НоменклатураКонкурента", СокрЛП(СтруктураДанные.Номенклатура.НаименованиеПолное));
	СтруктураДанные.Вставить("ЕдиницаИзмерения",СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	
	ПараметрыОтбора = новый Структура;
	ПараметрыОтбора.Вставить("Дата", СтруктураДанные.ДатаОбработки);
	ПараметрыОтбора.Вставить("Номенклатура", СтруктураДанные.Номенклатура);
	ПараметрыОтбора.Вставить("Упаковка", СтруктураДанные.ЕдиницаИзмерения);
	ПараметрыОтбора.Вставить("ВидЦены", СтруктураДанные.ТипЦен);
	ПараметрыОтбора.Вставить("Валюта", СтруктураДанные.ВалютаЦены);


	ТекЦена = ПолучитьЦенуПоОтбору(ПараметрыОтбора);
	СтруктураДанные.Вставить("ЦенаПрайс", текЦена);
	
	Попытка
		ДатаОст = СтруктураДанные.Основание.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаОст) Тогда
			ДатаОст = СтруктураДанные.ДатаОбработки;
		КонецЕсли;
	Исключение
		ДатаОст = СтруктураДанные.ДатаОбработки;
	КонецПопытки;
	
	ОстатокНоменклатуры = ПолучитьСвободныйОстатокПоНоменклатуре(СтруктураДанные.Номенклатура, ДатаОст, СтруктураДанные.Склад);
	СтруктураДанные.Вставить("Остаток", ОстатокНоменклатуры);
	
	
	Возврат СтруктураДанные;

КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСвободныйОстатокПоНоменклатуре(Номенклатура, Дата, Склад)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ВложенныйЗапрос.Остаток) КАК Остаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТоварыОрганизацийОстатки.КоличествоОстаток КАК Остаток
	|	ИЗ
	|		РегистрНакопления.ТоварыОрганизаций.Остатки(
	|				&ДатаСреза,
	|				АналитикаУчетаНоменклатуры.МестоХранения = &Склад
	|					И АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура) КАК ТоварыОрганизацийОстатки
	|	
	| )КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора)
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ЕСТЬNULL(ВЫБОР
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	                |					И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесИспользовать
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЧислитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ВесЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	                |					И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемИспользовать
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЧислитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	                |					И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьИспользовать
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЧислитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	                |					И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаИспользовать
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЧислитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА (ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
	                |					ИЛИ ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
	                |					ИЛИ ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
	                |					ИЛИ ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
	                |					И ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.ТипИзмеряемойВеличины = ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель / (ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Числитель / ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения.Знаменатель)
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	                |					И ЕСТЬNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Числитель / ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).Знаменатель КАК ЧИСЛО(15, 7))
	                |			КОГДА ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиЕдиницыИзмерения).ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	                |				ТОГДА 1
	                |			ИНАЧЕ NULL
	                |		КОНЕЦ, 1) * ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЕСТЬNULL(ВЫБОР
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	                |					И ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесИспользовать
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЕдиницаИзмерения.Числитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЧислитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ВесЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Объем)
	                |					И ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемИспользовать
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЕдиницаИзмерения.Числитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЧислитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ОбъемЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Площадь)
	                |					И ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьИспользовать
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЕдиницаИзмерения.Числитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЧислитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ПлощадьЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Длина)
	                |					И ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаИспользовать
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЕдиницаИзмерения.Числитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЧислитель, 0) <> 0
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЗнаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ((ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЕдиницаИзмерения.Числитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЕдиницаИзмерения.Знаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))) / (ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЧислитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ДлинаЗнаменатель КАК ЧИСЛО(15, 7))) КАК ЧИСЛО(15, 7))
	                |			КОГДА (ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Мощность)
	                |					ИЛИ ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Энергия)
	                |					ИЛИ ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.ЭлектрическийЗаряд)
	                |					ИЛИ ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Время))
	                |					И ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.ТипИзмеряемойВеличины = ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |				ТОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель / (ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.Числитель / ЦеныНоменклатурыСрезПоследних.Номенклатура.ЕдиницаИзмерения.Знаменатель)
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Упаковка)
	                |					И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель, 0) <> 0
	                |				ТОГДА ВЫРАЗИТЬ(ЦеныНоменклатурыСрезПоследних.Упаковка.Числитель / ЦеныНоменклатурыСрезПоследних.Упаковка.Знаменатель КАК ЧИСЛО(15, 7))
	                |			КОГДА ЦеныНоменклатурыСрезПоследних.Упаковка.ТипИзмеряемойВеличины = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.КоличествоШтук)
	                |				ТОГДА 1
	                |			ИНАЧЕ NULL
	                |		КОНЕЦ, 1) * ВЫБОР
	                |		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	                |			ТОГДА ВЫБОР
	                |					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	                |							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	                |							И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	                |							И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	                |						ТОГДА КурсыВалютыЦены.Курс * КурсыВалюты.Кратность / (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	                |					ИНАЧЕ 0
	                |				КОНЕЦ
	                |		ИНАЧЕ 1
	                |	КОНЕЦ КАК Цена
	                |ИЗ
	                |	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	                |			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
	                |			ВидЦены = (ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен))
	                |				И Номенклатура = (ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура))) КАК ЦеныНоменклатурыСрезПоследних
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	                |		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	                |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	                |		ПО (ИСТИНА)" ;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Окр(Выборка.Цена, 2);
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
КонецПроцедуры	


&НаКлиенте
Процедура ЗапасыЦенаПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	РассчитатьСуммуВСтрокеТабличнойЧасти();
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	Объект.ДокументОснование = ОткрытьФормуМодально("Документ.РеализацияТоваровУслуг.ФормаВыбора");
	
	//Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	Объект.Склад = Объект.ДокументОснование.Склад;
	//	Объект.Покупатель = Объект.ДокументОснование.Контрагент;
	//	Объект.Ответственный = Объект.ДокументОснование.Ответственный; 
	//	Объект.Подразделение =  Объект.ДокументОснование.Подразделение;
	//КонецЕсли;
	//
	////Заполним остатками
	//ПерезаполнитьОстаткиТоварыНаСервере();
	ДокументОснованиеПриИзмененииНаСервере();
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапасыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОтветственныйПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Подразделение = Объект.Ответственный.Подразделение;
		
		Объект.ТипЦен = ПолучитьТипЦенПоРегиону(Объект.Подразделение);
		Элементы.ЗапасыЦенаПрайс.Заголовок = Объект.ТипЦен; 	
		
		Для Каждого текСтр Из Объект.Запасы Цикл
			текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ТипЦенПриИзмененииНаСервере()
	
	Для Каждого текСтр Из Объект.Запасы Цикл
		текСтр.ВалютаЦены = Объект.ТипЦен.ВалютаЦены;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ТипЦенПриИзменении(Элемент)
	ТипЦенПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура ЗапасыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении1(Элемент)
	ПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если Не Объект.Партнер.Конкурент Тогда
			 Объект.Партнер = Неопределено;
			 
			 Сообщение = Новый СообщениеПользователю;
			 Сообщение.Текст = "Запрещено выбирать не конкурентов!";
			 Сообщение.Поле = "Партнер";
			 Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	ПартнерПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура Добавить(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "С незаполненным документом-основанием добавление строк в табличную часть запрещено!";
		Сообщение.Сообщить();
		Отказ = Истина;
	Иначе
		Отказ = Ложь;

	КонецЕсли;
		
	Если НЕ Отказ Тогда
		Объект.Запасы.Добавить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("Справочник.Партнеры.Форма.АГ_ФормаВыбораКонкурентов",,Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры




