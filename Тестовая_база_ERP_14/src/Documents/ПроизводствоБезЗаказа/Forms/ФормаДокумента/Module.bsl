#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление(); 
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьДоступностьКомандБуфераОбмена();
	
	Если Параметры.Свойство("ЕстьОшибки") И Параметры.ЕстьОшибки Тогда
		Для Каждого ТекОшибка Из Параметры.МассивОшибок Цикл
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка.Текст,
															ТекОшибка.КлючДанных,
															ТекОшибка.Поле,
															ТекОшибка.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ВнешниеОбработки
	// Конец СтандартныеПодсистемы.ВнешниеОбработки
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ТорговоеОборудование
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ТорговоеОборудование
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(ЭтотОбъект, Объект);
	// Конец ИнтеграцияИС
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПриЧтенииНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОбновитьПриОткрытии Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ТорговоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец СтандартныеПодсистемы.ТорговоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ГруппировкаЗатрат =
			ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются") Тогда
		Объект.ПобочныеИзделия.Очистить();
		Объект.МатериалыИРаботы.Очистить();
		Объект.Трудозатраты.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьПараметрыУказанияСерий();
	УстановитьВидимостьЭлементовСерий();
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	
	ОбновитьСписокГруппЗатрат();
	НастроитьЭлементыГруппировкиЗатрат(Ложь);
	
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(
		Объект.ВыходныеИзделия,
		"Получатель, АналитикаРасходовЗаказРеализация");
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(
		Объект.ПобочныеИзделия,
		"Получатель, АналитикаРасходовЗаказРеализация");
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеДокументаОснования(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтеграцияИС
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ПроизводствоБезЗаказа_Запись");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора <> Неопределено 
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") 
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
	ИначеЕсли НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма,
												ПараметрыУказанияСерий[ВыбранноеЗначение.ИмяТЧ],
												ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды("ВыходныеИзделия",
								МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ИмяТЧПоискПоШтрихкоду, ДанныеШтрихкодов);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда
		
		Если Параметр = Неопределено ИЛИ Параметр.Номенклатура = Неопределено Тогда
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации();
			
		Иначе
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации(Параметр.Номенклатура);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_МаркировкаТоваровГИСМ"
		И Параметр = Объект.Ссылка Тогда
		
		СформироватьНадписьМаркировкаПродукции();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияИС
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		ИмяСобытия,
		Параметр,
		Источник);
	// Конец ИнтеграцияИС
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииНаСервере()
	
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "ГруппаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаЗатратПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Событие.ГруппировкаЗатратПриИзменении");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	Если ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма);
	ГруппировкаЗатратПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ГруппировкаЗатратПриИзмененииНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.ГруппировкаЗатрат) Тогда
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
	КонецЕсли;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу Тогда
		ИндексГруппыЗатрат = 1;
	Иначе
		ИндексГруппыЗатрат = 0;
	КонецЕсли;
	
	СписокГрупп.Очистить();
	МаксимальныйНомерГруппыЗатрат = 0;
	
	Для Каждого ДанныеСтроки Из Объект.ВыходныеИзделия Цикл
		ДобавитьИзменитьГруппуЗатрат(ДанныеСтроки);
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.ПобочныеИзделия Цикл
		ДанныеСтроки.НомерГруппыЗатрат = ИндексГруппыЗатрат;
		ДанныеСтроки.ГруппаЗатрат = "";
		ДанныеСтроки.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.МатериалыИРаботы Цикл
		ДанныеСтроки.НомерГруппыЗатрат = ИндексГруппыЗатрат;
		ДанныеСтроки.ГруппаЗатрат = "";
		ДанныеСтроки.НаправлениеДеятельности = Справочники.НаправленияДеятельности.ПустаяСсылка();
	КонецЦикла;
	
	Для Каждого ДанныеСтроки Из Объект.Трудозатраты Цикл
		ДанныеСтроки.НомерГруппыЗатрат = ИндексГруппыЗатрат;
		ДанныеСтроки.ГруппаЗатрат = "";
	КонецЦикла;
	
	ОбновитьСписокГруппЗатрат();
	НастроитьЭлементыГруппировкиЗатрат(Ложь);
	
	ГруппировкаЗатратДоИзменения = Объект.ГруппировкаЗатрат;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(Объект.СпособРаспределенияЗатратНаВыходныеИзделия) Тогда
		Объект.СпособРаспределенияЗатратНаВыходныеИзделия = Перечисления.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости;
	КонецЕсли;
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если Не ПодразделениеДоИзменения = Объект.Подразделение Тогда
		ПодразделениеПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	
	Для Каждого ТекСтрока Из Объект.ВыходныеИзделия Цикл
			
		ТекСтрока.Получатель = ПолучательПоУмолчаниюНаСервере(ТекСтрока);
		ТекСтрока.Спецификация = Неопределено;
		
		ТекСтрокаСтруктура =
			Новый Структура("НомерГруппыЗатрат, ГруппаЗатрат, Номенклатура, Характеристика, Спецификация, Назначение");
		ЗаполнитьЗначенияСвойств(ТекСтрокаСтруктура, ТекСтрока);
		ДобавитьИзменитьГруппуЗатрат(ТекСтрокаСтруктура);
		
		ТекСтрока.НомерГруппыЗатрат = ТекСтрокаСтруктура.НомерГруппыЗатрат;
		ТекСтрока.ГруппаЗатрат = ТекСтрокаСтруктура.ГруппаЗатрат;
		
	КонецЦикла;
	
	ПодразделениеДоИзменения = Объект.Подразделение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ВидЦены) И Объект.ПобочныеИзделия.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидЦеныПриИзмененииЗавершение", ЭтаФорма);
		ТекстВопроса = НСтр("ru = 'Перезаполнить цены побочных изделий?';
							|en = 'Refill side product prices?'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦеныПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		// СтандартныеПодсистемы.ЗамерПроизводительности
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
			"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Событие.ВидЦеныПриИзмененииЗавершение");
		// Конец СтандартныеПодсистемы.ЗамерПроизводительности
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, Ложь, КэшированныеЗначения);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Элемент.Валюта.ПриИзменении");
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект, ВалютаДокумента, "ПобочныеИзделия") Тогда
		ВалютаПриИзмененииСервер();
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	КонецЕсли;
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер()
	
	СтараяВалюта				= ВалютаДокумента;
	НоваяВалюта					= Объект.Валюта;
	ДатаДокумента				= ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса());
	СтруктураКурсовСтаройВалюты	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
	СтруктураКурсовНовойВалюты	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
	
	// Пересчитаем цену
	Для Каждого ТекСтрока Из Объект.ПобочныеИзделия Цикл
		ТекСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекСтрока.Цена,
			СтруктураКурсовСтаройВалюты, СтруктураКурсовНовойВалюты);
	КонецЦикла;
	
	// Пересчитаем сумму
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ПобочныеИзделия, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Перем КэшированныеЗначения;
	
	//++ НЕ УТКА
	Продукция = Новый Массив;
	//-- НЕ УТКА
	
	СтрокиТЧ = НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	Для Каждого ТекСтрока Из СтрокиТЧ Цикл
		
		//++ НЕ УТКА
		Если Не Объект.ВыходныеИзделия.Индекс(ТекСтрока) = -1
			Или Не Объект.ПобочныеИзделия.Индекс(ТекСтрока) = -1 Тогда
			Продукция.Добавить(ТекСтрока);
		КонецЕсли;
		//-- НЕ УТКА
		
		Если Объект.ВыходныеИзделия.Индекс(ТекСтрока) = -1 Тогда
			Продолжить;
		КонецЕсли;
		ДобавитьИзменитьГруппуЗатрат(ТекСтрока);
		
	КонецЦикла;
	//++ НЕ УТКА
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуПоНазначениюВКоллекции(Продукция);
	//-- НЕ УТКА
	
	АктуализироватьВыпускПодДеятельность();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыпускПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстМаркировкаТоваровОбработкаНавигационнойСсылки(Элемент,
															НавигационнаяСсылкаФорматированнойСтроки,
															СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьПротоколОбмена" Тогда
		
		ИнтеграцияГИСМКлиент.ОткрытьПротоколОбмена(Объект.Ссылка, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОформитьМаркировкуТоваров" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		ОткрытьФорму("Документ.МаркировкаТоваровГИСМ.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры
//Конец ИнтеграцияГИСМ

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ПроизводствоБезЗаказа.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Событие.ВыходныеИзделияПриИзменении");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		ТекущиеДанныеСтруктура =
			Новый Структура("НомерГруппыЗатрат, ГруппаЗатрат, Номенклатура, Характеристика, Спецификация, Назначение");
		ЗаполнитьЗначенияСвойств(ТекущиеДанныеСтруктура, ТекущиеДанные);
		ДобавитьИзменитьГруппуЗатрат(ТекущиеДанныеСтруктура);
		
		ТекущиеДанные.НомерГруппыЗатрат = ТекущиеДанныеСтруктура.НомерГруппыЗатрат;
		ТекущиеДанные.ГруппаЗатрат = ТекущиеДанныеСтруктура.ГруппаЗатрат;
		
	КонецЕсли;
	
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма, "ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ВыходныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма,
																				"ВыходныеИзделия",
																				ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли (Поле = Элементы["ВыходныеИзделияСерия"] 
				ИЛИ Поле = Элементы["ВыходныеИзделияСтатусУказанияСерий"]) Тогда
		ТаблицаВыборСерии("ВыходныеИзделия", Поле, Элемент, СтандартнаяОбработка);
	ИначеЕсли (Поле = Элементы.ВыходныеИзделияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТаблицаОбработкаВыбора("ВыходныеИзделия", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ЗаполнитьСписокВыбораНаправлениеВыпуска("ВыходныеИзделия", ТекущиеДанные);
	
	Если НоваяСтрока Тогда
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные, "Получатель");
	КонецЕсли;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	ОграничитьТипПолучателя("ВыходныеИзделия", ТекущиеДанные);
	
	Если НоваяСтрока И Не Копирование Тогда
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "Получатель");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "Получатель");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ВыходныеИзделия");
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("ВыходныеИзделия", Элемент, КэшированныеЗначения, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПриОкончанииРедактирования("ВыходныеИзделия", Элемент);
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ВыходныеИзделияКешТекущейСтроки, НоваяСтрока) Тогда
		ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
		Группировки = Новый Массив;
		Группировки.Добавить(ВыходныеИзделияКешТекущейСтроки.НомерГруппыЗатрат);
		Группировки.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПередУдалением(Элемент, Отказ)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Событие.ВыходныеИзделияПередУдалением");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("ВыходныеИзделия", Элемент, КэшированныеЗначения, Ложь);
	
	УдалитьГруппуЗатрат(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТаблицаНоменклатураПриИзменении("ВыходныеИзделия", "Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТаблицаХарактеристикаПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТаблицаКоличествоУпаковокПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТаблицаУпаковкаПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияПриИзменении(Элемент)
	
	ТаблицаСерияПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ВыходныеИзделия", Элемент.ТекстРедактирования, Элементы.ВыходныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНазначениеПриИзменении(Элемент)
	
	ТаблицаНазначениеПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТаблицаНаправлениеВыпускаПриИзменении("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияНаправлениеВыпускаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаНаправлениеВыпускаНачалоВыбора("ВыходныеИзделия", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТаблицаСкладПриИзменении("ВыходныеИзделия", "Получатель", ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ТаблицаСтатьяРасходовПриИзменении("ВыходныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ВыходныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ТаблицаСтатьяРасходовНачалоВыбора("ВыходныеИзделия", Элемент, СтандартнаяОбработка, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовНачалоВыбора("ВыходныеИзделия", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовОбработкаВыбора("ВыходныеИзделия", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
													Ожидание, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовАвтоПодбор("ВыходныеИзделия", Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
																СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовОкончаниеВводаТекста("ВыходныеИзделия", Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПослеУдаления(Элемент)
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПриИзменении(Элемент)
	
	УстановитьНомерГруппыЗатратПоУмолчанию("ПобочныеИзделия");
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма, "ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПобочныеИзделияСчетРеглУчетаАктивовПассивов Тогда
		РеглУчетКлиент.ОткрытьНастройкуОтраженияВРеглУчетеАктиваПассиваСтрокиТЧ(ЭтаФорма,
																				"ПобочныеИзделия",
																				ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли (Поле = Элементы["ПобочныеИзделияСерия"] 
				ИЛИ Поле = Элементы["ПобочныеИзделияСтатусУказанияСерий"]) Тогда
		ТаблицаВыборСерии("ПобочныеИзделия", Поле, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТаблицаОбработкаВыбора("ПобочныеИзделия", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	ЗаполнитьСписокВыбораНаправлениеВыпуска("ПобочныеИзделия", ТекущиеДанные);
	
	Если НоваяСтрока Тогда
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные, "Получатель");
	КонецЕсли;
	
	ОграничитьТипПолучателя("ПобочныеИзделия", ТекущиеДанные);
	
	Если НоваяСтрока И Не Копирование Тогда
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "Получатель");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "Получатель")
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "ПобочныеИзделия");
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("ПобочныеИзделия", Элемент, КэшированныеЗначения, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПриОкончанииРедактирования("ПобочныеИзделия", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПередУдалением(Элемент, Отказ)
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("ПобочныеИзделия", Элемент, КэшированныеЗначения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратНачалоВыбора("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратОчистка("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНоменклатураПриИзменении(Элемент)
	
	ТаблицаНоменклатураПриИзменении("ПобочныеИзделия", "Получатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияХарактеристикаПриИзменении(Элемент)
	
	ТаблицаХарактеристикаПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияКоличествоУпаковокПриИзменении(Элемент)
	
	ТаблицаКоличествоУпаковокПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияУпаковкаПриИзменении(Элемент)
	
	ТаблицаУпаковкаПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияПриИзменении(Элемент)
	
	ТаблицаСерияПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("ПобочныеИзделия", Элемент.ТекстРедактирования, Элементы.ПобочныеИзделия.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНазначениеПриИзменении(Элемент)
	
	ТаблицаНазначениеПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаНаправлениеВыпускаНачалоВыбора("ПобочныеИзделия", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияНаправлениеВыпускаПриИзменении(Элемент)
	
	ТаблицаНаправлениеВыпускаПриИзменении("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад") Тогда
		ТаблицаСкладПриИзменении("ПобочныеИзделия", "Получатель", ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ТаблицаСтатьяРасходовПриИзменении("ПобочныеИзделия");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПобочныеИзделия.ТекущиеДанные;
	
	Если ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ТаблицаСтатьяРасходовНачалоВыбора("ПобочныеИзделия", Элемент, СтандартнаяОбработка, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовНачалоВыбора("ПобочныеИзделия", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовОбработкаВыбора("ПобочныеИзделия", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
													Ожидание, СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовАвтоПодбор("ПобочныеИзделия", Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
															СтандартнаяОбработка)
	
	ТаблицаАналитикаРасходовОкончаниеВводаТекста("ПобочныеИзделия", Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыПриИзменении(Элемент)
	
	УстановитьНомерГруппыЗатратПоУмолчанию("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы["МатериалыИРаботыСерия"] 
			ИЛИ Поле = Элементы["МатериалыИРаботыСтатусУказанияСерий"]) Тогда
		ТаблицаВыборСерии("МатериалыИРаботы", Поле, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТаблицаОбработкаВыбора("МатериалыИРаботы", ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные, "Склад");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.КешироватьТекущуюСтроку(ЭтотОбъект, "МатериалыИРаботы");
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("МатериалыИРаботы", Элемент, КэшированныеЗначения, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПриОкончанииРедактирования("МатериалыИРаботы", Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПередУдалением(Элемент, Отказ)
	
	ОбновитьКешированныеЗначенияДляУчетаСерий("МатериалыИРаботы", Элемент, КэшированныеЗначения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратНачалоВыбора("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратОчистка("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыНоменклатураПриИзменении(Элемент)
	
	ТаблицаНоменклатураПриИзменении("МатериалыИРаботы", "Склад");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыХарактеристикаПриИзменении(Элемент)
	
	ТаблицаХарактеристикаПриИзменении("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыКоличествоУпаковокПриИзменении(Элемент)
	
	ТаблицаКоличествоУпаковокПриИзменении("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУпаковкаПриИзменении(Элемент)
	
	ТаблицаУпаковкаПриИзменении("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияПриИзменении(Элемент)
	
	ТаблицаСерияПриИзменении("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий("МатериалыИРаботы", Элемент.ТекстРедактирования, Элементы.МатериалыИРаботы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСкладПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МатериалыИРаботы.ТекущиеДанные;
	ТаблицаСкладПриИзменении("МатериалыИРаботы", "Склад", ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудозатраты

&НаКлиенте
Процедура ТрудозатратыПриИзменении(Элемент)
	
	УстановитьНомерГруппыЗатратПоУмолчанию("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.КодСтроки = 0;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущиеДанные.Исполнитель = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыПодразделениеПриИзменении(Элемент)
	ТрудозатратыПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыГруппаЗатратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратНачалоВыбора("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыГруппаЗатратОчистка(Элемент, СтандартнаяОбработка)
	
	ТаблицаГруппаЗатратОчистка("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Исполнитель)
		И Не Объект.РаспоряжениеДляТрудозатрат Тогда
		Объект.РаспоряжениеДляТрудозатрат = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИсполнительНачалоВыбораЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		ТекущиеДанные.Подразделение,
		ТекущиеДанные.Исполнитель,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Результат) Тогда
		ТекущиеДанные.Исполнитель = Результат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
											Ожидание, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		ПараметрыОтбора = Новый Структура("Организация,Подразделение");
		ПараметрыОтбора.Организация = Объект.Организация;
		ПараметрыОтбора.Подразделение = ТекущиеДанные.Подразделение;
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, ПараметрыОтбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
													СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Трудозатраты.ТекущиеДанные;
		ПараметрыОтбора = Новый Структура("Организация,Подразделение");
		ПараметрыОтбора.Организация = Объект.Организация;
		ПараметрыОтбора.Подразделение = ТекущиеДанные.Подразделение;
		ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, ПараметрыОтбора);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицОбщие

&НаКлиенте
Процедура ТаблицаОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение)
	
	ТаблицаОбработкаВыбораПодбораНаСервере(ВыбранноеЗначение, ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаОбработкаВыбораПодбораНаСервере(ВыбранноеЗначение, ИмяТЧ)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СписокТоваров = ВыбранноеЗначение;
	Иначе
		СписокТоваров = Новый Массив;
		СписокТоваров.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для каждого СтрокаТовара Из СписокТоваров Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ТекущаяСтрока.Номенклатура = СтрокаТовара;
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ИмяТЧ, 
				ТекущаяСтрока, 
				ЭтаФорма, 
				СтруктураДействий);
				
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			ДобавитьИзменитьГруппуЗатрат(ТекущаяСтрока);
		КонецЕсли;
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;

	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыборСерии(ИмяТЧ, Поле, Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные.СтатусУказанияСерий > 0
		И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьПодборСерий(ИмяТЧ, Поле.ТекстРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПриОкончанииРедактирования(ИмяТЧ, Элемент)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ]) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ПараметрыУказанияСерий[ИмяТЧ],
																		ТекущаяСтрокаИдентификатор,
																		КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,
																	КэшированныеЗначения,
																	ПараметрыУказанияСерий[ИмяТЧ]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппаЗатратНачалоВыбора(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых будет заполнена группа затрат.';
									|en = 'Select the lines for which a cost group will be populated.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ГруппировкаЗатрат", Объект.ГруппировкаЗатрат);
	ПараметрыФормы.Вставить("НомерГруппыЗатрат", Элементы[ИмяТЧ].ТекущиеДанные.НомерГруппыЗатрат);
	ПараметрыФормы.Вставить("АдресХранилищаГруппЗатрат", АдресХранилищаГруппЗатрат());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаГруппаЗатратВыбор", ЭтотОбъект, ИмяТЧ);
	ОткрытьФорму("Документ.ПроизводствоБезЗаказа.Форма.ВыборГруппыЗатрат", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппаЗатратВыбор(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерГруппыЗатрат		= РезультатЗакрытия.НомерГруппыЗатрат;
	ГруппаЗатрат			= РезультатЗакрытия.ГруппаЗатрат;
	НаправлениеДеятельности	= РезультатЗакрытия.НаправлениеДеятельности;
	
	ВыделенныеСтроки	= Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть		= Объект[ИмяТЧ];
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ТекущиеДанные.НомерГруппыЗатрат			= НомерГруппыЗатрат;
		ТекущиеДанные.ГруппаЗатрат				= ГруппаЗатрат;
		
		Если Не ИмяТЧ = "Трудозатраты" Тогда
			ТекущиеДанные.НаправлениеДеятельности	= НаправлениеДеятельности;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГруппаЗатратОчистка(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НомерГруппыЗатрат = 0;
	ТекущиеДанные.ГруппаЗатрат = "";
	Если Не ИмяТЧ = "Трудозатраты" Тогда
		ТекущиеДанные.НаправлениеДеятельности = ПредопределенноеЗначение("Справочник.НаправленияДеятельности.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНоменклатураПриИзменении(ИмяТЧ, ИмяСклад)
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ИмяТЧ, ТекущаяСтрока, ЭтаФорма, СтруктураДействий);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, ТекущаяСтрока[ИмяСклад], ПараметрыУказанияСерий[ИмяТЧ]);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(Объект.Дата, Объект.Подразделение, ПараметрыВыбораСпецификаций);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ИмяТЧ = "ВыходныеИзделия"
		ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			
		ЗаполнитьСписокВыбораНаправлениеВыпуска(ИмяТЧ, ТекущаяСтрока);
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			ТекущаяСтрока.Получатель = ПолучательПоУмолчанию(ТекущаяСтрока);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяТЧ = "МатериалыИРаботы"
		И ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущаяСтрока.Склад = Неопределено;
		ТекущаяСтрока.ЦеховаяКладовая = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаХарактеристикаПриИзменении(ИмяТЧ)
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(Объект.Дата, Объект.Подразделение, ПараметрыВыбораСпецификаций);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	СтруктураДействий.Вставить(
		"ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы,
		ИмяТЧ));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКоличествоУпаковокПриИзменении(ИмяТЧ)
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаУпаковкаПриИзменении(ИмяТЧ)
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСерияПриИзменении(ИмяТЧ)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение						= Элементы[ИмяТЧ].ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки	= Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий[ИмяТЧ], ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНазначениеПриИзменении(ИмяТЧ)
	
	ТаблицаНазначениеПриИзмененииНаСервере(ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаНазначениеПриИзмененииНаСервере(ИмяТЧ)
	
	//++ НЕ УТКА
	ИдентификаторСтроки	= Элементы[ИмяТЧ].ТекущаяСтрока;
	ТекущиеДанные		= Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	КоллекцияСтрок = Новый Массив;
	КоллекцияСтрок.Добавить(ТекущиеДанные);
	УправлениеПроизводством.ЗаполнитьФлагПередатьДавальцуПоНазначениюВКоллекции(КоллекцияСтрок);
	//-- НЕ УТКА
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНаправлениеВыпускаНачалоВыбора(ИмяТЧ, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	ЗаполнитьСписокВыбораНаправлениеВыпуска(ИмяТЧ, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНаправлениеВыпускаПриИзменении(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеВыпуска) Тогда
		ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад");
	КонецЕсли;
	
	ТекущиеДанные.Получатель = ПолучательПоУмолчанию(ТекущиеДанные);
	ОграничитьТипПолучателя(ИмяТЧ, ТекущиеДанные);
	
	ТаблицаСтатьяРасходовПриИзменении(ИмяТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСкладПриИзменении(ИмяТЧ, ИмяСклад, ТекущиеДанные)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, ТекущиеДанные[ИмяСклад], ПараметрыУказанияСерий[ИмяТЧ]);
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		СтруктураДействий.Вставить("ЗаполнитьПризнакЦеховаяКладовая");
		СтруктураДействий.Вставить("ЗаполнитьПодразделениеЦеховойКладовой");
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатьяРасходовНачалоВыбора(ИмяТЧ, Элемент, СтандартнаяОбработка, ТекущиеДанные)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы[ИмяТЧ].ТекущаяСтрока);
	ДополнительныеПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ТаблицаСтатьяРасходовВыборЗавершение",
												ЭтотОбъект,
												ДополнительныеПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", ТекущиеДанные.Получатель);
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию")));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантов)));
	
	ПараметрыФормы.Вставить("ПараметрыВыбора", Новый ФиксированныйМассив(ПараметрыВыбораСтатьи));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект[ДополнительныеПараметры.ИмяТЧ].НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.Получатель = Результат;
	ТаблицаСтатьяРасходовПриИзмененииСервер(ДополнительныеПараметры.ИмяТЧ, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтатьяРасходовПриИзменении(ИмяТЧ)
	
	ТаблицаСтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаСтатьяРасходовПриИзмененииСервер(ИмяТЧ, КэшированныеЗначения)
	
	СтрокаТаблицы = Объект[ИмяТЧ].НайтиПоИдентификатору(Элементы[ИмяТЧ].ТекущаяСтрока);
	СтруктураДействий = Новый Структура;
	
	Если СтрокаТаблицы.Получатель = Неопределено Тогда
		СтрокаТаблицы.Получатель = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТаблицы.Получатель) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект,
															СтрокаТаблицы.Получатель,
															СтрокаТаблицы.АналитикаАктивовПассивов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СтрокаТаблицы.Получатель) = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.Получатель, СтрокаТаблицы.АналитикаРасходов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна", "Получатель, АналитикаРасходов");
	
		СтруктураСтатьи = Новый Структура;
		СтруктураСтатьи.Вставить("Получатель", "АналитикаРасходовЗаказРеализация");
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация",
								Новый Структура("Получатель", "АналитикаРасходовЗаказРеализация"));
		
	Иначе
		
		СтрокаТаблицы.АналитикаРасходов = Неопределено;
		СтрокаТаблицы.АналитикаРасходовОбязательна = Ложь;
		СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		СтрокаТаблицы.АналитикаАктивовПассивов = Неопределено;
		СтрокаТаблицы.СчетУчета = Неопределено;
		СтрокаТаблицы.Субконто1 = Неопределено;
		СтрокаТаблицы.Субконто2 = Неопределено;
		СтрокаТаблицы.Субконто3 = Неопределено;
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", 
		Новый Структура("Склад, ПараметрыУказанияСерий", СтрокаТаблицы.Получатель, ПараметрыУказанияСерий[ИмяТЧ]));
	
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи", "Получатель");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАналитикаРасходовНачалоВыбора(ИмяТЧ, Элемент, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	Если СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАналитикаРасходовОбработкаВыбора(ИмяТЧ, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыбранноеЗначение);
		СтандартнаяОбработка = Ложь;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАналитикаРасходовАвтоПодбор(ИмяТЧ, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаАналитикаРасходовОкончаниеВводаТекста(ИмяТЧ, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТаблицы = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст)
		И СтрокаТаблицы.АналитикаРасходовЗаказРеализация Тогда
		СтандартнаяОбработка = Ложь;
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки = Неопределено)
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат, Группировки);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
												НавигационнаяСсылка = Неопределено,
												СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиКомандВыходныеИзделия

&НаКлиенте
Процедура ВыходныеИзделияПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияЗагрузитьДанныеИзТСД(Команда)
	
	ПолучитьДанныеИзТСД("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияОкруглитьДоЦелойУпаковки(Команда)
	
	ОкруглитьДоЦелойУпаковки("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПоискПоШтрихкодуВыполнить(Команда)
	
	ПоискПоШтрихкодуВыполнить("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияПолучитьВес(Команда)
	
	ПолучитьВес("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияСкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ВыходныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеИзделияУказатьСерии(Команда)
	
	ОткрытьПодборСерий("ВыходныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандПобочныеИзделия

&НаКлиенте
Процедура ПобочныеИзделияПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЗагрузитьДанныеИзТСД(Команда)
	
	ПолучитьДанныеИзТСД("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияОкруглитьДоЦелойУпаковки(Команда)
	
	ОкруглитьДоЦелойУпаковки("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПоискПоШтрихкодуВыполнить(Команда)
	
	ПоискПоШтрихкодуВыполнить("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияПолучитьВес(Команда)
	
	ПолучитьВес("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияСкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияДополнитьПоСпецификации(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Команда.ПобочныеИзделияДополнитьПоСпецификации");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ДополнитьПоСпецификацииНаСервере("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЗаполнитьГруппуЗатрат(Команда)
	
	ТаблицаГруппаЗатратНачалоВыбора("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЗаполнитьЦеныПоВидуЦен(Команда)
	
	ОчиститьСообщения();
	
	ЦеныРассчитаны = ПобочныеИзделияЗаполнитьЦеныПоВидуЦенСервер(КэшированныеЗначения);
	
	Если ЦеныРассчитаны Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, Объект.ВидЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПобочныеИзделияЗаполнитьЦеныПоВидуЦенСервер(КэшированныеЗначения)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ПобочныеИзделия.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'В таблице ""Побочные изделия"" не выбрано ни одной строки. 
								|Цены не могут быть заполнены.';
								|en = 'No lines selected in the Side products table. 
								|Prices cannot be filled in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПобочныеИзделия", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидЦены) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Вид цены"".';
								|en = 'The ""Price type"" field is not filled in.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ВидЦены", "Объект", Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗаполнитьЦеныПоВидуЦенСервер(Объект.ВидЦены, Истина, КэшированныеЗначения);
	
КонецФункции

&НаКлиенте
Процедура ПобочныеИзделияУказатьСерии(Команда)
	
	ОткрытьПодборСерий("ПобочныеИзделия");
	
КонецПроцедуры

&НаКлиенте
Процедура ПобочныеИзделияЗаполнитьПодразделениеЗатрат(Команда)
	
	ЗаполнитьПодразделениеЗатрат("ПобочныеИзделия");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандМатериалыИРаботы

&НаКлиенте
Процедура МатериалыИРаботыДополнитьОбособленнымиОстатками(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Команда.МатериалыИРаботыДополнитьОбособленнымиОстатками");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	МатериалыИРаботыДополнитьОбособленнымиОстаткамиНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПодобратьТовары(Команда)
	
	ОткрытьПодборТоваров("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗагрузитьДанныеИзТСД(Команда)
	
	ПолучитьДанныеИзТСД("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыОкруглитьДоЦелойУпаковки(Команда)
	
	ОкруглитьДоЦелойУпаковки("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПоискПоШтрихкодуВыполнить(Команда)
	
	ПоискПоШтрихкодуВыполнить("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыПолучитьВес(Команда)
	
	ПолучитьВес("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыСкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыДополнитьПоСпецификации(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Команда.МатериалыИРаботыДополнитьПоСпецификации");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ДополнитьПоСпецификацииНаСервере("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьГруппуЗатрат(Команда)
	
	ТаблицаГруппаЗатратНачалоВыбора("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыУказатьСерии(Команда)
	
	ОткрытьПодборСерий("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьСклад(Команда)
	
	ЗаполнитьСклад("МатериалыИРаботы");
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыИРаботыЗаполнитьПодразделениеЗатрат(Команда)
	
	ЗаполнитьПодразделениеЗатрат("МатериалыИРаботы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандТрудозатраты

&НаКлиенте
Процедура ТрудозатратыВставитьСтроки(Команда)
	
	ПолучитьСтрокиИзБуфераОбмена("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыСкопироватьСтроки(Команда)
	
	СкопироватьСтрокиТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыРазбитьСтроку(Команда)
	
	РазбитьСтрокуТЧ("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыДополнитьПоСпецификации(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(,
		"Документ.ПроизводствоБезЗаказа.Форма.ФормаДокумента.Команда.ТрудозатратыДополнитьПоСпецификации");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ДополнитьПоСпецификацииНаСервере("Трудозатраты");
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьГруппуЗатрат(Команда)
	
	ТаблицаГруппаЗатратНачалоВыбора("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьСтатьюКалькуляции(Команда)
	
	ЗаполнитьСтатьюКалькуляции("Трудозатраты");
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьИсполнителей(Команда)
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки для заполнения исполнителей.';
									|en = 'Select lines to fill in assignees.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПерваяСтрока = Объект.Трудозатраты.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение", ЭтотОбъект);
	
	ПроизводствоКлиент.ОткрытьФормуВыбораИсполнителя(
		Объект.Организация,
		ПерваяСтрока.Подразделение,
		ПерваяСтрока.Исполнитель,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудозатратыЗаполнитьПодразделениеЗатрат(Команда)
	
	ЗаполнитьПодразделениеЗатрат("Трудозатраты");
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИС

// ИнтеграцияИС

&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		Объект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПолеИнтеграцииИСВФормеДокументаОснования(ДополнительныеПараметры)
	
	ИнтеграцияИС.ОбновитьПолеИнтеграцииВФормеДокументаОснования(ЭтотОбъект, Объект, ДополнительныеПараметры);
	
КонецПроцедуры

// Конец ИнтеграцияИС

#КонецОбласти

&НаКлиенте
Процедура ГиперСсылкаНадписьПродукцияНажатие(Элемент)
	
	ПродукцияСвернута = НЕ ПродукцияСвернута;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ВыходныеИзделия, 
		Элементы.ГиперСсылкаНадписьПродукция, 
		ПродукцияСвернута);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперСсылкаНадписьПобочныеИзделияНажатие(Элемент)
	
	ПобочныеИзделияСвернуты = НЕ ПобочныеИзделияСвернуты;
	
	УстановитьСвойстваСворачиваемойГруппы(
		Элементы.ПобочныеИзделия, 
		Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
		ПобочныеИзделияСвернуты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ГруппировкаЗатратДоИзменения	= Объект.ГруппировкаЗатрат;
	ПодразделениеДоИзменения		= Объект.Подразделение;
	
	ИспользоватьСписаниеНаРасходы	= ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов")
										ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов");
	
	ВалютаДокумента = Объект.Валюта;
	
	// Работа с сериями
	ЗаполнитьПараметрыУказанияСерий();
	ЗаполнитьСтатусыУказанияСерийСервер("МатериалыИРаботы");
	ЗаполнитьСтатусыУказанияСерийСервер("ПобочныеИзделия");
	ЗаполнитьСтатусыУказанияСерийСервер("ВыходныеИзделия");
	УстановитьВидимостьЭлементовСерий();
	
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ПроизводствоБезЗаказа.ПараметрыРаспределенияЗатрат(Объект));
	
	ОбновитьСписокГруппЗатрат();
	НастроитьЭлементыГруппировкиЗатрат(Истина);
	
	ЗаполнитьСлужебныеРеквизитыФормы();
	
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма);
	УстановитьПараметрыВыбораСтатьи();
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МетаданныеФормы =
		МенеджерОбъекта.ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	АктуализироватьВыпускПодДеятельность(Ложь);
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ПроизводствоБезЗаказа);
	УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ВыходныеИзделияСпецификация, ПараметрыВыбораСпецификаций);
	
	// ИнтеграцияГИСМ
	СформироватьНадписьМаркировкаПродукции();
	// Конец ИнтеграцияГИСМ
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область ОФормление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	#Область НаправлениеВыпуска
	
	УстановитьУсловноеОформлениеНаправлениеВыпуска("ВыходныеИзделия");
	УстановитьУсловноеОформлениеНаправлениеВыпуска("ПобочныеИзделия");
	
	#КонецОбласти

	#Область ПодразделениеРасходов
	
	УстановитьУсловноеОформлениеПодразделениеРасходов("ВыходныеИзделия", "Подразделение");
	УстановитьУсловноеОформлениеПодразделениеРасходов("ПобочныеИзделия", "ПодразделениеПолучатель");
	
	#КонецОбласти

	#Область Склад
	
	УстановитьУсловноеОформлениеПолучатель("ВыходныеИзделия");
	УстановитьУсловноеОформлениеПолучатель("ПобочныеИзделия");
	
	// поясняющая надпись для склада при потреблении работ
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыСклад.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для товаров>';
																|en = '<for goods>'"));
	
	#КонецОбласти

	#Область Подразделение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.ЦеховаяКладовая");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	#КонецОбласти

	#Область ЕдиницыИзмерения

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ВыходныеИзделияНоменклатураЕдиницаИзмерения", 
		"Объект.ВыходныеИзделия.Упаковка");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ПобочныеИзделияНоменклатураЕдиницаИзмерения", 
		"Объект.ПобочныеИзделия.Упаковка");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"МатериалыИРаботыНоменклатураЕдиницаИзмерения", 
		"Объект.МатериалыИРаботы.Упаковка");
		
	#КонецОбласти

	#Область Характеристики

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"ВыходныеИзделияХарактеристика",
		"Объект.ВыходныеИзделия.ХарактеристикиИспользуются");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"ПобочныеИзделияХарактеристика",
		"Объект.ПобочныеИзделия.ХарактеристикиИспользуются");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"МатериалыИРаботыХарактеристика",
		"Объект.МатериалыИРаботы.ХарактеристикиИспользуются");
		
	#КонецОбласти

	#Область Серии
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма,
																		Ложь,
																		"ВыходныеИзделияСтатусУказанияСерий",
																		"Объект.ВыходныеИзделия.СтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
																	Ложь,
																	"ВыходныеИзделияСерия",
																	"Объект.ВыходныеИзделия.СтатусУказанияСерий",
																	"Объект.ВыходныеИзделия.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма,
																		Ложь,
																		"ПобочныеИзделияСтатусУказанияСерий",
																		"Объект.ПобочныеИзделия.СтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
																	Ложь,
																	"ПобочныеИзделияСерия",
																	"Объект.ПобочныеИзделия.СтатусУказанияСерий",
																	"Объект.ПобочныеИзделия.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(ЭтаФорма,
																		Истина,
																		"МатериалыИРаботыСтатусУказанияСерий",
																		"Объект.МатериалыИРаботы.СтатусУказанияСерий");
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтаФорма,
																	"СерииВсегдаВТЧТовары",
																	"МатериалыИРаботыСерия",
																	"Объект.МатериалыИРаботы.СтатусУказанияСерий",
																	"Объект.МатериалыИРаботы.ТипНоменклатуры");
	
	#КонецОбласти

	#Область Назначения
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
																		"ВыходныеИзделияНазначение",
																		"Объект.ВыходныеИзделия.ТипНоменклатуры",
																		Ложь);
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
																		"ПобочныеИзделияНазначение",
																		"Объект.ПобочныеИзделия.ТипНоменклатуры",
																		Ложь);
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтаФорма,
																		"МатериалыИРаботыНазначение",
																		"Объект.МатериалыИРаботы.ТипНоменклатуры",
																		Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																|en = '<not used>'"));
	
	#КонецОбласти

	#Область СтатьиРасходов
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ВыходныеИзделия", "Получатель, АналитикаРасходов"));
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма,
																							"ВыходныеИзделия",
																							ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма,
																							"ВыходныеИзделия",
																							ТипыСтатей);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("ПобочныеИзделия", "Получатель, АналитикаРасходов"));
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(ЭтаФорма,
																							"ПобочныеИзделия",
																							ТипыСтатей);
	РеглУчетВызовСервера.УстановитьУсловноеОформлениеСчетаУчетаПриСовместномИспользованииСтатей(ЭтаФорма,
																							"ПобочныеИзделия",
																							ТипыСтатей);
	
	// текст аналитики расходов выходных изделий, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияАналитикаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВыходныеИзделия.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью>';
																|en = '<select an item>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// текст аналитики расходов побочных изделий, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияАналитикаАктивовПассивов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПобочныеИзделия.Получатель");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите статью>';
																|en = '<select an item>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	#КонецОбласти

	#Область ГруппировкаЗатрат

	// Установка видимости колонки группы затрат
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПобочныеИзделияГруппаЗатрат.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыИРаботыГруппаЗатрат.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыГруппаЗатрат.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Спецификация обязательна только для группы "По спецификациям"
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияСпецификация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям);
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Назначение обязательно только для группировок по назначениям
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияНазначение.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям);
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

	#Область ВыходныеИзделияДоляСтоимости
	
	// Установка оформления процента
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(ЭтаФорма, "Объект", "ВыходныеИзделия");
	
	// Установка видимости колонки Доля стоимости по группировке затрат
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимости.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияДоляСтоимостиПроцент.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ВыходныеИзделияЕстьОшибкиЗаполненияДолиСтоимости.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ГруппировкаЗатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции);
	СписокЗначений.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	#КонецОбласти

	#Область ТрудозатратыБригада

	// Установка отметки незаполненного поля Бригада
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудозатратыИсполнитель.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РаспоряжениеДляТрудозатрат");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаправлениеВыпуска(ИмяТЧ)
	
	// Не доступно для давальческой продукции
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ПередатьДавальцу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// На склад
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'На склад';
																|en = 'To warehouse'"));
	
	// В подразделение
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'В подразделение';
																|en = 'To department'"));

	// На статью
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "НаправлениеВыпуска"].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Списать на расходы';
																|en = 'Write off as expenses'"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПодразделениеРасходов(ИмяТЧ, ИмяПоля)
	
	// Видимость подразделения-получателя выходных изделий
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + ИмяПоля].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Подразделение-получатель выходных изделий совпадает с выпускающим
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + ИмяПоля].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + "." + ИмяПоля);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Подразделение"));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолучатель(ИмяТЧ)
	
	// поясняющая надпись для склада, если Ф.О. "Несколько складов" не используется
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ИмяТЧ + "Получатель"].Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.Номенклатура.ПустаяСсылка();
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<для работ>';
																|en = '<for works>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовкиГруппПродукции(Форма, СписокРеквизитов = "")
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	
	ВыходныеИзделияКоличество = Форма.Объект.ВыходныеИзделия.Количество();
	ПобочныеИзделияКоличество = Форма.Объект.ПобочныеИзделия.Количество();
	
	ГруппировкаБезЗатрат =
		ПредопределенноеЗначение("Перечисление.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются");
	
	Если Форма.Объект.ГруппировкаЗатрат = ГруппировкаБезЗатрат Тогда
		Форма.Элементы.ГруппаНадписьПродукция.Видимость = Ложь;
		Форма.Элементы.ГруппаНадписьПобочныеИзделия.Видимость = Ложь;
		Форма.КоличествоИзделий = ВыходныеИзделияКоличество;
		Возврат;
	Иначе
		Форма.Элементы.ГруппаНадписьПродукция.Видимость = Истина;
		Форма.Элементы.ГруппаНадписьПобочныеИзделия.Видимость = Истина;
		Форма.КоличествоИзделий = ВыходныеИзделияКоличество + ПобочныеИзделияКоличество;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВыходныеИзделия")
			ИЛИ Инициализация Тогда
		НадписьПродукция = НСтр("ru = 'Продукция по рассчитываемой стоимости%1';
								|en = 'Products at the calculated cost%1'");
		НадписьПродукция =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НадписьПродукция,
				?(ВыходныеИзделияКоличество <> 0, " (" + ВыходныеИзделияКоличество + ")", ""));
		
		Форма.НадписьПродукция = НадписьПродукция;
	КонецЕсли;
			
	Если СтруктураРеквизитов.Свойство("ПобочныеИзделия")
			ИЛИ Инициализация Тогда
		НадписьПобочныеИзделия = НСтр("ru = 'Побочный и промежуточный выпуск по фиксированной стоимости%1';
										|en = 'Side and intermediate release at fixed cost%1'");
		НадписьПобочныеИзделия =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НадписьПобочныеИзделия, ?(ПобочныеИзделияКоличество <> 0, " (" + ПобочныеИзделияКоличество + ")", ""));
		
		Форма.НадписьПобочныеИзделия = НадписьПобочныеИзделия;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыГруппировкиЗатрат(Инициализация)
	
	// Ограничим доступные значения группировки затрат
	ПараметрыВыбораГруппировкиЗатрат = Новый Массив;
	
	ИспользоватьНазначения = ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	Если Не ИспользоватьНазначения Тогда
		
		ДоступныеЗначения = Новый Массив;
		
		Если ЗначениеЗаполнено(Объект.ГруппировкаЗатрат) Тогда
			ДоступныеЗначения.Добавить(Объект.ГруппировкаЗатрат);
		КонецЕсли;
		
		ДоступныеЗначения.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются);
		ДоступныеЗначения.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу);
		ДоступныеЗначения.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукции);
		ДоступныеЗначения.Добавить(Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям);
		ДоступныеЗначения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДоступныеЗначения);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(ДоступныеЗначения));
		ПараметрыВыбораГруппировкиЗатрат.Добавить(НовыйПараметр);
		
	КонецЕсли;
	
	Элементы.ГруппировкаЗатрат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораГруппировкиЗатрат);
	
	СписокПолей = Документы.ПроизводствоБезЗаказа.ПереченьПолейГруппыЗатрат(Объект.ГруппировкаЗатрат);
	
	ПредставлениеГруппыЗатрат = "";
	
	Для Каждого ТекПоле Из СписокПолей Цикл
		ПредставлениеГруппыЗатрат = ПредставлениеГруппыЗатрат + ТекПоле.Представление + " / ";
	КонецЦикла;
	
	ПредставлениеГруппыЗатрат = " (" + Лев(ПредставлениеГруппыЗатрат, СтрДлина(ПредставлениеГруппыЗатрат) - 3) + ")";
	
	ЗаголовокГруппыЗатрат = НСтр("ru = 'Группа затрат%1';
								|en = 'Cost group%1'");
	
	Если Не СписокПолей.Количество() = 0 Тогда
		ЗаголовокГруппыЗатрат =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокГруппыЗатрат, ПредставлениеГруппыЗатрат);
	КонецЕсли;
	
	ПодсказкаГруппыПобочныеИзделия	= НСтр("ru = '%1, к которой относится возвратный отход';
											|en = '%1 to which recyclable waste belongs'");
	ПодсказкаГруппыМатериалыИРаботы	= НСтр("ru = '%1, к которой относится материал/работа';
												|en = '%1 to which material/work belongs'");
	ПодсказкаГруппыТрудозатраты		= НСтр("ru = '%1, к которой относится трудозатрата';
												|en = '%1 to which labor costs belong'");
	
	ПодсказкаГруппыПобочныеИзделия	=
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодсказкаГруппыПобочныеИзделия, ЗаголовокГруппыЗатрат);
	ПодсказкаГруппыМатериалыИРаботы	=
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодсказкаГруппыМатериалыИРаботы, ЗаголовокГруппыЗатрат);
	ПодсказкаГруппыТрудозатраты		=
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПодсказкаГруппыТрудозатраты, ЗаголовокГруппыЗатрат);
	
	Элементы.ПобочныеИзделияГруппаЗатрат.Заголовок = ЗаголовокГруппыЗатрат;
	Элементы.ПобочныеИзделияЗаполнитьГруппуЗатратРасширеннаяПодсказка.Заголовок =
												ПодсказкаГруппыПобочныеИзделия;
												
	Элементы.МатериалыИРаботыГруппаЗатрат.Заголовок = ЗаголовокГруппыЗатрат;
	Элементы.МатериалыИРаботыЗаполнитьГруппуЗатратРасширеннаяПодсказка.Заголовок =
												ПодсказкаГруппыМатериалыИРаботы;
												
	Элементы.ТрудозатратыГруппаЗатрат.Заголовок = ЗаголовокГруппыЗатрат;
	Элементы.ТрудозатратыЗаполнитьГруппуЗатратРасширеннаяПодсказка.Заголовок =
												ПодсказкаГруппыТрудозатраты;
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются Тогда
		Элементы.ВидЦены.Видимость					= Ложь;
		Элементы.Валюта.Видимость					= Ложь;
		Элементы.ГруппаПобочныеИзделия.Видимость	= Ложь;
		Элементы.ГруппаМатериалыИРаботы.Видимость	= Ложь;
		Элементы.ГруппаТрудозатраты.Видимость		= Ложь;
	Иначе
		Элементы.ВидЦены.Видимость					= Истина;
		Элементы.Валюта.Видимость					= Истина;
		Элементы.ГруппаПобочныеИзделия.Видимость	= Истина;
		Элементы.ГруппаМатериалыИРаботы.Видимость	= Истина;
		Элементы.ГруппаТрудозатраты.Видимость		= Истина;
	КонецЕсли;
	
	Если Инициализация Тогда
		ПобочныеИзделияСвернуты = Истина;
		УстановитьСвойстваСворачиваемойГруппы(
			Элементы.ПобочныеИзделия, 
			Элементы.ГиперСсылкаНадписьПобочныеИзделия, 
			ПобочныеИзделияСвернуты);
	КонецЕсли;
	
	Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость =
		Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациям
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу
		Или Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ЗатратыНеУказываются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваСворачиваемойГруппы(ЭлементГруппа, КартинкаГруппы, ГруппаСвернута)

	ЭлементГруппа.Видимость = НЕ ГруппаСвернута;
	
	Если ГруппаСвернута Тогда
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВправо;
	Иначе
		КартинкаГруппы.Картинка = БиблиотекаКартинок.СтрелкаВниз;
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСтатьи()
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыпускПродукции));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаНаправленияДеятельности);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы);
	МассивВариантов.Добавить(Перечисления.ВариантыРаспределенияРасходов.НеРаспределять);
	
	ПараметрыВыбораСтатьи.Добавить(
		Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантов)));
	
	Элементы.ВыходныеИзделияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	Элементы.ПобочныеИзделияПолучатель.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораСтатьи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОграничитьТипПолучателя(ИмяТЧ, ТекущиеДанные)

	Если ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение") Тогда
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия");
	ИначеЕсли ТекущиеДанные.НаправлениеВыпуска =
			ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию") Тогда
		ОграничениеТипа =
			Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов, ПланВидовХарактеристикСсылка.СтатьиРасходов");
	Иначе
		ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли; 
	
	Элементы[ИмяТЧ + "Получатель"].ОграничениеТипа = ОграничениеТипа;
	ТекущиеДанные.Получатель =
		Элементы[ИмяТЧ + "Получатель"].ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Получатель);

КонецПроцедуры

#КонецОбласти

#Область Серии

&НаСервере
Процедура ЗаполнитьПараметрыУказанияСерий()
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.ПроизводствоБезЗаказа));
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ИмяТЧ, ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(Объект, ПараметрыУказанияСерий[ИмяТЧ],
														ТекущиеДанныеИдентификатор,
														ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ВыходныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияСтатусУказанияСерий.Видимость =
		ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ВыходныеИзделияУказатьСерии.Видимость = ПараметрыУказанияСерий.ВыходныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.ПобочныеИзделияСерия.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияСтатусУказанияСерий.Видимость =
		ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	Элементы.ПобочныеИзделияУказатьСерии.Видимость = ПараметрыУказанияСерий.ПобочныеИзделия.ИспользоватьСерииНоменклатуры;
	
	Элементы.МатериалыИРаботыСерия.Видимость = ПараметрыУказанияСерий.МатериалыИРаботы.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыИРаботыСтатусУказанияСерий.Видимость =
		ПараметрыУказанияСерий.МатериалыИРаботы.ИспользоватьСерииНоменклатуры;
	Элементы.МатериалыИРаботыУказатьСерии.Видимость =
		ПараметрыУказанияСерий.МатериалыИРаботы.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(ИмяТЧ, Элемент, КэшированныеЗначения, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент, КэшированныеЗначения, ПараметрыУказанияСерий[ИмяТЧ], Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерий(ИмяТЧ, Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов = НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
							ЭтаФорма, 
							ПараметрыУказанияСерий[ИмяТЧ], 
							Текст, 
							ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы[ИмяТЧ].ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ИмяТЧ, ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры = Новый Структура("ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, ИмяТЧ", 
											ПараметрыУказанияСерий[ИмяТЧ], ПараметрыФормыУказанияСерий, ИмяТЧ);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(ПараметрыФормыУказанияСерий.ИмяФормы, 
						ПараметрыФормыУказанияСерий, 
						ЭтаФорма,,,,
						ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ДополнительныеПараметры.ИмяТЧ,
									ДополнительныеПараметры.ПараметрыУказанияСерий,
									ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ИмяТЧ, Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	Если ПараметрыУказанияСерий.ИмяТЧТовары = "ВыходныеИзделия"
		ИЛИ ПараметрыУказанияСерий.ИмяТЧТовары = "ПобочныеИзделия" Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ОбновлятьКоличествоТоваровПриРегистрацииСерий", Истина);
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ПараметрыУказанияСерий.ИмяТЧТовары,
			ЭтаФорма,
			СтруктураДействий);
	Иначе
		СтруктураДействий = Неопределено;
	КонецЕсли; 
	
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект, 
		ПараметрыУказанияСерий, 
		ПараметрыФормыУказанияСерий, 
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ,
											СтрокиТоваровДляОбработки = Неопределено,
											СтрокиСерийДляОбработки = Неопределено)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,
													ПараметрыУказанияСерий[ИмяТЧ],
													СтрокиТоваровДляОбработки,
													СтрокиСерийДляОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Знач ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаКлиенте
Процедура СкопироватьСтрокиТЧ(ИмяТЧ)

	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы[ИмяТЧ].ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере(ИмяТЧ);
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы[ИмяТЧ].ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокиНаСервере(ИмяТЧ)
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы[ИмяТЧ].ВыделенныеСтроки, Объект[ИмяТЧ]);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтрокиИзБуфераОбмена(ИмяТЧ)
	
	КоличествоТоваровДоВставки = Объект[ИмяТЧ].Количество();
	
	ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ);
	
	КоличествоВставленных = Объект[ИмяТЧ].Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбменаНаСервере(ИмяТЧ)
	
	ПараметрыОтбора = Новый Структура();
	
	Если ИмяТЧ = "ВыходныеИзделия" 
			ИЛИ ИмяТЧ = "ПобочныеИзделия" 
			ИЛИ ИмяТЧ = "МатериалыИРаботы" Тогда
		МассивТиповНоменклатуры = Новый Массив;
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
		ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
		
	КонецЕсли;
	
	ТаблицаСтрок = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТовара Из ТаблицаСтрок Цикл
		
		ТекущаяСтрока = Объект[ИмяТЧ].Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		
		Если ИмяТЧ = "ВыходныеИзделия" 
			ИЛИ ИмяТЧ = "ПобочныеИзделия" 
			ИЛИ ИмяТЧ = "МатериалыИРаботы" Тогда
			ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				ИмяТЧ,
				ТекущаяСтрока,
				ЭтаФорма,
				СтруктураДействий);
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				ДобавитьИзменитьГруппуЗатрат(ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	ДоступностьКоманд = НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки");
	
	Элементы.ВыходныеИзделияВставитьСтроки.Доступность = ДоступностьКоманд;
	Элементы.ВыходныеИзделияКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьКоманд;
	
	Элементы.ПобочныеИзделияВставитьСтроки.Доступность = ДоступностьКоманд;
	Элементы.ПобочныеИзделияКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьКоманд;
	
	Элементы.МатериалыИРаботыВставитьСтроки.Доступность = ДоступностьКоманд;
	Элементы.МатериалыИРаботыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьКоманд;
	
	Элементы.ТрудозатратыВставитьСтроки.Доступность = ДоступностьКоманд;
	Элементы.ТрудозатратыКонтекстноеМенюВставитьСтроки.Доступность = ДоступностьКоманд;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ВыходныеИзделияВставитьСтроки");
	МассивЭлементов.Добавить("ВыходныеИзделияКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ПобочныеИзделияВставитьСтроки");
	МассивЭлементов.Добавить("ПобочныеИзделияКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИРаботыВставитьСтроки");
	МассивЭлементов.Добавить("МатериалыИРаботыКонтекстноеМенюВставитьСтроки");
	МассивЭлементов.Добавить("ТрудозатратыВставитьСтроки");
	МассивЭлементов.Добавить("ТрудозатратыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияПриИзмененииСтрокТаблиц

// Процедуру следует использовать, если строки были добавлены программно (не интерактивно), например,
// при вставке из буфера, при заполнении по спецификации.
// Процедура выполняет действия которые зависят от данных в строках.
//
&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ,
												МассивИдентификаторовСтрок = Неопределено,
												СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = Неопределено;
	МассивГруппировок = Новый Массив;
	КоллекцияСтрок = Объект[ИмяТЧ];
	Если МассивИдентификаторовСтрок <> Неопределено Тогда
		МассивСтрок = Новый Массив;
		Для каждого ИдентификаторСтроки Из МассивИдентификаторовСтрок Цикл
			ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСтрок.Добавить(ДанныеСтроки);
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				МассивГруппировок.Добавить(ДанныеСтроки.НомерГруппыЗатрат);
			КонецЕсли;
		КонецЦикла;
		КоллекцияСтрок = МассивСтрок;
	КонецЕсли;
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если (ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "МатериалыИРаботы")
		И НЕ СтруктураРанееВыполненныхДействий.Свойство("ПроверитьСериюРассчитатьСтатус") Тогда
		ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ, МассивСтрок, МассивСтрок);
	КонецЕсли; 
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		ОбновитьСписокГруппЗатрат();
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(МассивГруппировок);
	КонецЕсли;
	
	Если ИмяТЧ = "ВыходныеИзделия"
		Или ИмяТЧ = "ПобочныеИзделия" Тогда
		ЗаполнитьСкладПоУмолчаниюВКоллекции(ЭтаФорма, МассивСтрок, "Получатель");
	КонецЕсли;
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		ЗаполнитьСкладПоУмолчаниюВКоллекции(ЭтаФорма, МассивСтрок, "Склад");
		ЗаполнитьПризнакКладовой(КоллекцияСтрок);
		ЗаполнитьПодразделениеКладовой(КоллекцияСтрок);
	КонецЕсли;
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		ЗаполнитьПодразделениеПоУмолчаниюВКоллекции(КоллекцияСтрок);
		ЗаполнитьТипИсполнителяРабот(КоллекцияСтрок);
	КонецЕсли;
	
	УстановитьЗаголовкиГруппПродукции(ЭтаФорма, ИмяТЧ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ИмяТЧ, ТекущаяСтрока, Форма, СтруктураДействий)

	Объект = Форма.Объект;
	
	Если Не ТекущаяСтрока = Неопределено Тогда
		СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	Иначе
		СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу");
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		Форма.ИмяФормы, ИмяТЧ));
		
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураПараметров = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект);
		СтруктураПараметров.Вставить("ВидЦены", Объект.ВидЦены);
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураПараметров);
		
		СтруктураДействий.Вставить("ПересчитатьСумму", "Количество");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, Форма, СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПроизводствоКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц());
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьДолюСтоимости", Форма.ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		СтруктураДействий.Вставить("ПересчитатьСумму");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Склад, ПараметрыУказанияСерий)
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

#КонецОбласти

#Область ГруппировкаЗатрат

&НаСервере
Процедура ДобавитьИзменитьГруппуЗатрат(Строка)

	СтруктураПоиска = СтруктураПоискаГруппыЗатрат(Строка);
	ПредставлениеГруппыЗатрат = ПредставлениеГруппыЗатрат(СтруктураПоиска, Объект.ГруппировкаЗатрат);
	
	НомерГруппыДоИзменения = Строка.НомерГруппыЗатрат;
	
	ОписаниеГруппыЗатрат = ОписаниеГруппыЗатрат(СтруктураПоиска);
	НомерГруппы = ОписаниеГруппыЗатрат.НомерГруппыЗатрат;
	НаправлениеДеятельности = ОписаниеГруппыЗатрат.НаправлениеДеятельности;
	
	Если НомерГруппы = 0 Тогда
		
		НоваяГруппаЗатрат = СписокГрупп.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяГруппаЗатрат, СтруктураПоиска);
		
		МаксимальныйНомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат + 1;
		
		НоваяГруппаЗатрат.НомерГруппыЗатрат = МаксимальныйНомерГруппыЗатрат;
		НоваяГруппаЗатрат.ГруппаЗатрат = ПредставлениеГруппыЗатрат;
		
		Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям
			ИЛИ Объект.ГруппировкаЗатрат =
				Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям Тогда
			НаправлениеДеятельности = НоваяГруппаЗатрат.Назначение.НаправлениеДеятельности;
			НоваяГруппаЗатрат.НаправлениеДеятельности = НаправлениеДеятельности;
		КонецЕсли;
		
		НомерГруппы = НоваяГруппаЗатрат.НомерГруппыЗатрат;
		
	КонецЕсли;
	
	ОписаниеГруппыЗатрат = Новый Структура;
	ОписаниеГруппыЗатрат.Вставить("НомерГруппыЗатрат", НомерГруппы);
	ОписаниеГруппыЗатрат.Вставить("ГруппаЗатрат", ПредставлениеГруппыЗатрат);
	ОписаниеГруппыЗатрат.Вставить("НаправлениеДеятельности", НаправлениеДеятельности);
	
	Если Не НомерГруппыДоИзменения = НомерГруппы Тогда
		
		Если КоличествоИдентифицирующихСтрок(НомерГруппыДоИзменения) = 1 Тогда
			
			ОбновитьСвязиСГруппойЗатрат(НомерГруппыДоИзменения, ОписаниеГруппыЗатрат);
			
			СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппыДоИзменения);
			
			ГруппыЗатрат = СписокГрупп.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекГруппа Из ГруппыЗатрат Цикл
				СписокГрупп.Удалить(ТекГруппа);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Строка.НомерГруппыЗатрат = НомерГруппы;
	Строка.ГруппаЗатрат = ПредставлениеГруппыЗатрат;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьГруппуЗатрат(ИдентификаторСтроки)
	
	Строка = Объект.ВыходныеИзделия.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если КоличествоИдентифицирующихСтрок(Строка.НомерГруппыЗатрат) = 1 Тогда
		
		ОписаниеГруппыЗатрат = Новый Структура;
		ОписаниеГруппыЗатрат.Вставить("НомерГруппыЗатрат", 0);
		ОписаниеГруппыЗатрат.Вставить("ГруппаЗатрат", "");
		ОписаниеГруппыЗатрат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
		
		ОбновитьСвязиСГруппойЗатрат(Строка.НомерГруппыЗатрат, ОписаниеГруппыЗатрат);
		
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", Строка.НомерГруппыЗатрат);
		
		ГруппыЗатрат = СписокГрупп.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекГруппа Из ГруппыЗатрат Цикл
			СписокГрупп.Удалить(ТекГруппа);
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНомерГруппыЗатратПоУмолчанию(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено
		И ТекущиеДанные.НомерГруппыЗатрат = 0
		И СписокГрупп.Количество() = 1 Тогда
		ТекущиеДанные.ГруппаЗатрат = СписокГрупп[0].ГруппаЗатрат;
		ТекущиеДанные.НомерГруппыЗатрат = СписокГрупп[0].НомерГруппыЗатрат;
		Если Не ИмяТЧ = "Трудозатраты" Тогда
			ТекущиеДанные.НаправлениеДеятельности = СписокГрупп[0].НаправлениеДеятельности;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиСГруппойЗатрат(ТекущийНомерГруппы, ОписаниеГруппыЗатрат)
	
	НовоеПредставлениеГруппы		= ОписаниеГруппыЗатрат.ГруппаЗатрат;
	НовыйНомерГруппы				= ОписаниеГруппыЗатрат.НомерГруппыЗатрат;
	НовоеНаправлениеДеятельности	= ОписаниеГруппыЗатрат.НаправлениеДеятельности;
	
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", ТекущийНомерГруппы);
	
	Строки = Объект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекСтрока Из Строки Цикл
		ТекСтрока.ГруппаЗатрат = НовоеПредставлениеГруппы;
		ТекСтрока.НомерГруппыЗатрат = НовыйНомерГруппы;
		ТекСтрока.НаправлениеДеятельности = НовоеНаправлениеДеятельности;
	КонецЦикла;
	
	Строки = Объект.МатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекСтрока Из Строки Цикл
		ТекСтрока.ГруппаЗатрат = НовоеПредставлениеГруппы;
		ТекСтрока.НомерГруппыЗатрат = НовыйНомерГруппы;
		ТекСтрока.НаправлениеДеятельности = НовоеНаправлениеДеятельности;
	КонецЦикла;
	
	Строки = Объект.Трудозатраты.НайтиСтроки(СтруктураПоиска);
	Для Каждого ТекСтрока Из Строки Цикл
		ТекСтрока.ГруппаЗатрат = НовоеПредставлениеГруппы;
		ТекСтрока.НомерГруппыЗатрат = НовыйНомерГруппы;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеГруппыЗатрат(СтруктураПоиска)

	ОписаниеГруппыЗатрат = Новый Структура;
	ОписаниеГруппыЗатрат.Вставить("НомерГруппыЗатрат", 0);
	ОписаниеГруппыЗатрат.Вставить("ГруппаЗатрат", "");
	ОписаниеГруппыЗатрат.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
	
	ГруппаЗатрат = СписокГрупп.НайтиСтроки(СтруктураПоиска);
	
	Если Не ГруппаЗатрат.Количество() = 0 Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеГруппыЗатрат, ГруппаЗатрат[0]);
	КонецЕсли;
	
	Возврат ОписаниеГруппыЗатрат;

КонецФункции

&НаСервере
Функция СтруктураПоискаГруппыЗатрат(Строка)
	
	СписокПолей = Документы.ПроизводствоБезЗаказа.ПереченьПолейГруппыЗатрат(Объект.ГруппировкаЗатрат);
	СтруктураПоиска = Документы.ПроизводствоБезЗаказа.СтруктураПоискаГруппыЗатрат(СписокПолей);
	
	Если Не Строка = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
	КонецЕсли;
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Функция КоличествоИдентифицирующихСтрок(НомерГруппы)
	
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", НомерГруппы);
	Строки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
	
	Возврат Строки.Количество();
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокГруппЗатрат()

	СписокПолей = Документы.ПроизводствоБезЗаказа.ПереченьПолейГруппыЗатрат(Объект.ГруппировкаЗатрат);
	
	ТекстПоляВыбораВТ = Документы.ПроизводствоБезЗаказа.ТекстЗапросаПоПолямГруппыЗатрат("ТаблицаДанных", СписокПолей);
	ТекстПоляВыбора = ТекстПоляВыбораВТ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
				   |	ТаблицаДанных.НомерГруппыЗатрат
				   |	,&ТекстПоляВыбораВТ
	               |ПОМЕСТИТЬ ВТ_ГруппыЗатрат
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных;
				   |ВЫБРАТЬ
				   |	ТаблицаДанных.НомерГруппыЗатрат
				   |	,&ТекстПоляВыбора
	               |ИЗ
				   |	ВТ_ГруппыЗатрат КАК ТаблицаДанных
				   |;
				   |/////////////////////////////////////////////////////
				   |
				   |ВЫБРАТЬ
				   |	МАКСИМУМ(ВТ_ГруппыЗатрат.НомерГруппыЗатрат) КАК НомерГруппыЗатрат
				   |ИЗ
				   |	ВТ_ГруппыЗатрат КАК ВТ_ГруппыЗатрат";
	
	Если Объект.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоПродукцииИНазначениям
		ИЛИ Объект.ГруппировкаЗатрат =
			Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоСпецификациямИНазначениям Тогда
		ТекстПоляВыбора = ТекстПоляВыбора +
			", ВЫРАЗИТЬ(ТаблицаДанных.Назначение КАК Справочник.Назначения).НаправлениеДеятельности КАК НаправлениеДеятельности";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаДанных", Объект.ВыходныеИзделия.Выгрузить());
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ТекстПоляВыбораВТ", ТекстПоляВыбораВТ);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ",&ТекстПоляВыбора", ТекстПоляВыбора);
	Результат = Запрос.ВыполнитьПакет();
	
	СписокГрупп.Загрузить(Результат[1].Выгрузить());
	
	Если Не Результат[2].Пустой() Тогда
		Выборка = Результат[2].Выбрать();
		Выборка.Следующий();
		МаксимальныйНомерГруппыЗатрат = Выборка.НомерГруппыЗатрат;
	КонецЕсли;
	
	ОбновитьПредставлениеГруппЗатрат(СписокПолей);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеГруппЗатрат(СписокПолей)
	
	СтруктураПоиска = Новый Структура("НомерГруппыЗатрат");
	
	Для Каждого ТекГруппа Из СписокГрупп Цикл
		
		ТекГруппа.ГруппаЗатрат = ПредставлениеГруппыЗатрат(ТекГруппа, Объект.ГруппировкаЗатрат);
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекГруппа);
		
		Строки = Объект.ВыходныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.ГруппаЗатрат = ТекГруппа.ГруппаЗатрат;
		КонецЦикла;
		
		Строки = Объект.ПобочныеИзделия.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.ГруппаЗатрат = ТекГруппа.ГруппаЗатрат;
			ТекСтрока.НаправлениеДеятельности = ТекГруппа.НаправлениеДеятельности;
		КонецЦикла;
		
		Строки = Объект.МатериалыИРаботы.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.ГруппаЗатрат = ТекГруппа.ГруппаЗатрат;
			ТекСтрока.НаправлениеДеятельности = ТекГруппа.НаправлениеДеятельности;
		КонецЦикла;
		
		Строки = Объект.Трудозатраты.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекСтрока Из Строки Цикл
			ТекСтрока.ГруппаЗатрат = ТекГруппа.ГруппаЗатрат;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеГруппыЗатрат(Группа, ГруппировкаЗатрат)
	
	ПредставлениеГруппы = "";
	
	ПоляГруппыЗатрат = Документы.ПроизводствоБезЗаказа.ПереченьПолейГруппыЗатрат(Объект.ГруппировкаЗатрат);
	
	Для Каждого ТекПоле Из ПоляГруппыЗатрат Цикл
		
		ТекПредставление = Строка(Группа[ТекПоле.Значение]);
		
		Если ЗначениеЗаполнено(ТекПредставление) Тогда
			ПредставлениеГруппы = ПредставлениеГруппы + ТекПредставление + " / ";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПредставлениеГруппы) Тогда
		ПредставлениеГруппы = Лев(ПредставлениеГруппы, СтрДлина(ПредставлениеГруппы) - 3);
	Иначе
		ПредставлениеГруппы = НСтр("ru = '<группа с пустыми значения>';
									|en = '<group with empty values>'");
	КонецЕсли;
	
	Возврат ПредставлениеГруппы;

КонецФункции 

&НаСервере
Функция АдресХранилищаГруппЗатрат()
	
	Возврат ПоместитьВоВременноеХранилище(СписокГрупп.Выгрузить(), ЭтаФорма.УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

#Область Заполнение

&НаКлиенте
Функция ПолучательПоУмолчанию(ТекСтрока)
	
	СтруктураСтроки = Новый Структура("НаправлениеВыпуска, Получатель");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
	
	Возврат ПолучательПоУмолчаниюНаСервере(СтруктураСтроки);
	
КонецФункции

&НаСервере
Функция ПолучательПоУмолчаниюНаСервере(ТекСтрока)
	
	Если ТекСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение
		И Не ЗначениеЗаполнено(ТекСтрока.Получатель) Тогда
		Возврат Объект.Подразделение;
	ИначеЕсли ТекСтрока.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад Тогда
		Возврат ЗначениеНастроекПовтИсп.ПолучитьЦеховуюКладовуюПоУмолчанию(Объект.Подразделение, ТекСтрока.Получатель);
	Иначе
		Возврат ТекСтрока.Получатель;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен, ПоВыделеннымСтрокам, КэшированныеЗначения)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата",			Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта",			Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены",			ВидЦен);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения",	"Цена");
	
	Если ПоВыделеннымСтрокам Тогда
		
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.ПобочныеИзделия.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.ПобочныеИзделия.НайтиПоИдентификатору(Строка));
		КонецЦикла;
		
	Иначе
		
		МассивСтрок = Неопределено;
		
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.ПобочныеИзделия,
		МассивСтрок,
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораНаправлениеВыпуска(ИмяТЧ, ТекущиеДанные)

	СписокВыбораЭлемента = Элементы[ИмяТЧ + "НаправлениеВыпуска"].СписокВыбора;
	СписокВыбораЭлемента.Очистить();
	
	Если ТекущиеДанные.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииВПодразделение"),
									НСтр("ru = 'В подразделение';
										|en = 'To department'"));
	Иначе
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыпускПродукцииНаСклад"),
									НСтр("ru = 'На склад';
										|en = 'To warehouse'"));
	КонецЕсли; 
	
	Если ИспользоватьСписаниеНаРасходы Тогда
		СписокВыбораЭлемента.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию"),
									НСтр("ru = 'Списать на расходы';
										|en = 'Write off as expenses'"));
	КонецЕсли;
	
	Если СписокВыбораЭлемента.НайтиПоЗначению(ТекущиеДанные.НаправлениеВыпуска) = Неопределено Тогда
		ТекущиеДанные.НаправлениеВыпуска = СписокВыбораЭлемента[0].Значение;
		ТаблицаНаправлениеВыпускаПриИзменении(ИмяТЧ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МатериалыИРаботыДополнитьОбособленнымиОстаткамиНаСервере(КэшированныеЗначения)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Назначения.Назначение КАК Назначение
		|ПОМЕСТИТЬ ТаблицаНазначений
		|ИЗ
		|	&Назначения КАК Назначения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СпрНазначенияДавальца.Ссылка, ТаблицаНазначений.Назначение) КАК Назначение
		|ПОМЕСТИТЬ Назначения
		|ИЗ
		|	ТаблицаНазначений КАК ТаблицаНазначений
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
		|		ПО ТаблицаНазначений.Назначение = СпрНазначения.Ссылка
		|			И (НЕ СпрНазначения.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначенияДавальца
		|		ПО (СпрНазначения.Партнер = СпрНазначенияДавальца.Партнер)
		//++ НЕ УТКА
		|ГДЕ
		|	НЕ ТИПЗНАЧЕНИЯ(ЕСТЬNULL(СпрНазначенияДавальца.Заказ, НЕОПРЕДЕЛЕНО)) = ТИП(Документ.ЗаказДавальца)
		//-- НЕ УТКА
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(СпрНазначенияДавальца.Ссылка, ТаблицаНазначений.Назначение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&Организация								КАК Организация,
		|	АналитикаУчетаНоменклатуры.Номенклатура		КАК Номенклатура,
		|	АналитикаУчетаНоменклатуры.Характеристика	КАК Характеристика,
		|	АналитикаУчетаНоменклатуры.Серия			КАК Серия,
		|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
		|	АналитикаУчетаНоменклатуры.МестоХранения	КАК Склад,
		|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая, ЛОЖЬ) КАК ЦеховаяКладовая,
		|	Назначения.Назначение						КАК Назначение,
		|	АналитикаУчетаНоменклатуры.Ссылка			КАК КлючАналитики
		|ПОМЕСТИТЬ втАналитикаУчетаНоменклатуры
		|ИЗ
		|	Назначения КАК Назначения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
		|		ПО (АналитикаУчетаНоменклатуры.Назначение = Назначения.Назначение)
		|ГДЕ
		|	АналитикаУчетаНоменклатуры.СтатьяКалькуляции = ЗНАЧЕНИЕ(Справочник.СтатьиКалькуляции.ПустаяСсылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	АналитикаУчетаНоменклатуры.Номенклатура,
		|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.СкладскаяТерритория.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)),
		|	АналитикаУчетаНоменклатуры.МестоХранения,
		|	ЕСТЬNULL(АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая, ЛОЖЬ),
		|	АналитикаУчетаНоменклатуры.Ссылка,
		|	АналитикаУчетаНоменклатуры.Характеристика,
		|	АналитикаУчетаНоменклатуры.Серия,
		|	Назначения.Назначение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&НомерГруппыЗатрат												КАК НомерГруппыЗатрат,
		|	&ГруппаЗатрат													КАК ГруппаЗатрат,
		|	втАналитикаУчетаНоменклатуры.Подразделение						КАК Подразделение,
		|	втАналитикаУчетаНоменклатуры.Склад								КАК Склад,
		|	втАналитикаУчетаНоменклатуры.ЦеховаяКладовая					КАК ЦеховаяКладовая,
		|	втАналитикаУчетаНоменклатуры.Номенклатура						КАК Номенклатура,
		|	втАналитикаУчетаНоменклатуры.Характеристика						КАК Характеристика,
		|	втАналитикаУчетаНоменклатуры.Серия								КАК Серия,
		|	втАналитикаУчетаНоменклатуры.Назначение							КАК Назначение,
		|	втАналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности	КАК НаправлениеДеятельности,
		|	СУММА(ТоварыОрганизаций.КоличествоОстаток)						КАК Количество,
		|	СУММА(ТоварыОрганизаций.КоличествоОстаток)						КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			(АналитикаУчетаНоменклатуры, Организация) В
		|				(ВЫБРАТЬ
		|					втАналитикаУчетаНоменклатуры.КлючАналитики,
		|					втАналитикаУчетаНоменклатуры.Организация
		|				ИЗ
		|					втАналитикаУчетаНоменклатуры КАК втАналитикаУчетаНоменклатуры)) КАК ТоварыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ втАналитикаУчетаНоменклатуры КАК втАналитикаУчетаНоменклатуры
		|		ПО (втАналитикаУчетаНоменклатуры.КлючАналитики = ТоварыОрганизаций.АналитикаУчетаНоменклатуры)
		|
		|СГРУППИРОВАТЬ ПО
		|	втАналитикаУчетаНоменклатуры.Подразделение,
		|	втАналитикаУчетаНоменклатуры.Склад,
		|	втАналитикаУчетаНоменклатуры.ЦеховаяКладовая,
		|	втАналитикаУчетаНоменклатуры.Серия,
		|	втАналитикаУчетаНоменклатуры.Номенклатура,
		|	втАналитикаУчетаНоменклатуры.Характеристика,
		|	втАналитикаУчетаНоменклатуры.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыОрганизаций.КоличествоОстаток) > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&НомерГруппыЗатрат									КАК НомерГруппыЗатрат,
		|	&ГруппаЗатрат										КАК ГруппаЗатрат,
		|	Работы.Подразделение								КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО										КАК Склад,
		|	ЛОЖЬ												КАК ЦеховаяКладовая,
		|	Работы.Номенклатура									КАК Номенклатура,
		|	Работы.Характеристика								КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)	КАК Серия,
		|	Работы.Назначение									КАК Назначение,
		|	Работы.Назначение.НаправлениеДеятельности			КАК НаправлениеДеятельности,
		|	СУММА(Работы.КоличествоОстаток)						КАК Количество,
		|	СУММА(Работы.КоличествоОстаток)						КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.МатериалыИРаботыВПроизводстве.Остатки(
		|			,
		|			(Организация, Номенклатура, Характеристика, Назначение) В
		|				(ВЫБРАТЬ
		|					втАналитикаУчетаНоменклатуры.Организация,
		|					втАналитикаУчетаНоменклатуры.Номенклатура,
		|					втАналитикаУчетаНоменклатуры.Характеристика,
		|					втАналитикаУчетаНоменклатуры.Назначение
		|				ИЗ
		|					втАналитикаУчетаНоменклатуры КАК втАналитикаУчетаНоменклатуры)) КАК Работы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Ссылка = Работы.Номенклатура)
		|ГДЕ
		|	СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|СГРУППИРОВАТЬ ПО
		|	Работы.Подразделение,
		|	Работы.Номенклатура,
		|	Работы.Характеристика,
		|	Работы.Назначение
		|
		|ИМЕЮЩИЕ
		|	СУММА(Работы.КоличествоОстаток) > 0";
		
	Назначения = Объект.ВыходныеИзделия.Выгрузить(, "Назначение");
	Назначения.Свернуть("Назначение");
	
	УдаляемыеСтроки = Назначения.НайтиСтроки(Новый Структура("Назначение", Справочники.Назначения.ПустаяСсылка()));
	Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
		Назначения.Удалить(ТекСтрока);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Назначения", Назначения);
	
	НомерГруппыЗатрат = ?(СписокГрупп.Количество() = 1, СписокГрупп[0].НомерГруппыЗатрат, 0);
	ГруппаЗатрат = ?(СписокГрупп.Количество() = 1, СписокГрупп[0].ГруппаЗатрат, "");
	Запрос.УстановитьПараметр("НомерГруппыЗатрат", НомерГруппыЗатрат);
	Запрос.УстановитьПараметр("ГруппаЗатрат", ГруппаЗатрат);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураДействий = Новый Структура;
	МассивСтрок = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
				"МатериалыИРаботы",
				НоваяСтрока,
				ЭтаФорма,
				СтруктураДействий);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере("МатериалыИРаботы", МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляции(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить статью калькуляции.';
									|en = 'Select the lines for which it is required to populate the costing item.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		
		ПараметрыОтбора.Вставить("ТипЗатрат", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
		
	ИначеЕсли ИмяТЧ = "МатериалыИРаботы" Тогда
		
		ПараметрыОтбора.Вставить("ТипЗатрат", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
		
	ИначеЕсли ИмяТЧ = "Трудозатраты" Тогда
		
		ПараметрыОтбора.Вставить("ТипЗатрат", ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"));
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСтатьюКалькуляцииЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтатьиКалькуляции.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтатьюКалькуляцииЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.СтатьяКалькуляции = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Трудозатраты.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.Исполнитель = Результат;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормы()
	
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	ЗаполнитьСкладПоУмолчанию();
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыПоСпецификации();
	ЗаполнитьСлужебныеРеквизитыПоСкладу();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ВыходныеИзделия,
																						"Получатель, АналитикаРасходов");
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ВыходныеИзделия, "Получатель");
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.ВыходныеИзделия);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.ПобочныеИзделия,
																						"Получатель, АналитикаРасходов");
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.ПобочныеИзделия, "Получатель");
	РеглУчетВызовСервера.ЗаполнитьПредставлениеСчетаРеглУчетаВТЧ(Объект.ПобочныеИзделия);
	
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ВыходныеИзделия");
	ОбщегоНазначенияУТ.ИнициализироватьКешТекущейСтроки(ЭтотОбъект, "ПобочныеИзделия");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
											Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакАртикул",
											Новый Структура("Номенклатура", "Артикул"));
	ПараметрыЗаполненияРеквизитов.Вставить("ЗаполнитьПризнакТипНоменклатуры",
											Новый Структура("Номенклатура", "ТипНоменклатуры"));
											
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ВыходныеИзделия,
																			ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ПобочныеИзделия,
																			ПараметрыЗаполненияРеквизитов);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.МатериалыИРаботы,
																			ПараметрыЗаполненияРеквизитов);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(СтрокиЗаполнения = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
		|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
		|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
		|	ВЫРАЗИТЬ(&ДатаДокумента КАК ДАТА) КАК НачалоПроизводства
		|ПОМЕСТИТЬ СписокНоменклатуры
		|ИЗ
		|	&КоллекцияДанных КАК Таблица
		|ГДЕ
		|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Подразделение");
		
	Если ЗначениеЗаполнено(СтрокиЗаполнения) Тогда
		
		Если ТипЗнч(СтрокиЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			СтрокиПродукции = Объект.ВыходныеИзделия.НайтиСтроки(Новый Структура("Номенклатура", СтрокиЗаполнения));
			
		Иначе
			
			СтрокиПродукции = СтрокиЗаполнения;
			
		КонецЕсли;
		
		КоллекцияДанных = Объект.ВыходныеИзделия.Выгрузить(СтрокиПродукции, "Номенклатура, Характеристика");
		
	Иначе
		
		СтрокиПродукции = Объект.ВыходныеИзделия;
		КоллекцияДанных = Объект.ВыходныеИзделия.Выгрузить(, "Номенклатура, Характеристика");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента",   НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("Подразделение",   Объект.Подразделение);
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных);
	
	СтруктураКлючаПоискаСтроки = Новый Структура("Номенклатура,
												 |Характеристика",
												 "Номенклатура",
												 "Характеристика");
												 
	УстановитьПривилегированныйРежим(Истина);
												 
	УправлениеДаннымиОбИзделиях.ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
																		Объект.ВыходныеИзделия,
																		СтруктураКлючаПоискаСтроки);
																		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПоСпецификацииНаСервере(ИмяТЧ)
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ИмяТЧ = "МатериалыИРаботы" Тогда
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаМатериалыПоГруппамЗатрат();
	ИначеЕсли ИмяТЧ = "ПобочныеИзделия" Тогда
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаВозвратныеОтходыПоГруппамЗатрат();
	Иначе
		Запрос.Текст = Документы.ПроизводствоБезЗаказа.ТекстЗапросаТрудозатратыПоГруппамЗатрат();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	Запрос.УстановитьПараметр("ЗаполнятьАвтоматически", Истина);
	
	// Подготовим таблицу продукции
	ПоляГруппировки = "НомерГруппыЗатрат, НаправлениеВыпуска, Получатель,
							|	Номенклатура, Характеристика, Серия,
							|	Назначение, Спецификация";
	ПоляСуммирования = "Количество";
	
	ТаблицаПродукции = Объект.ВыходныеИзделия.Выгрузить(, ПоляГруппировки + ", " + ПоляСуммирования);
	ТаблицаПродукции.Свернуть(ПоляГруппировки, ПоляСуммирования);
	
	ТаблицаПродукции.Колонки.Добавить("Организация",				Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПродукции.Колонки.Добавить("ГруппировкаЗатрат",			Новый ОписаниеТипов("ПеречислениеСсылка.ГруппировкиЗатратВПроизводствеБезЗаказа"));
	ТаблицаПродукции.Колонки.Добавить("Подразделение",				Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	ТаблицаПродукции.Колонки.Добавить("ОшибкаВНастройкахМодели",	Новый ОписаниеТипов("Булево"));
	ТаблицаПродукции.Колонки.Добавить("ОтражатьЗатратыДокументом",	Новый ОписаниеТипов("Булево"));
	
	ТаблицаПродукции.ЗаполнитьЗначения(Объект.Организация,			"Организация");
	ТаблицаПродукции.ЗаполнитьЗначения(Объект.ГруппировкаЗатрат,	"ГруппировкаЗатрат");
	ТаблицаПродукции.ЗаполнитьЗначения(Объект.Подразделение,		"Подразделение");
	ТаблицаПродукции.ЗаполнитьЗначения(Истина,						"ОтражатьЗатратыДокументом");
	
	// Подготовим параметры заполнения
	ДанныеШапки = Новый Структура("Дата", Объект.Дата);
	
	ПараметрыЗаполнения = Новый Структура("ДанныеШапки",	ДанныеШапки);
	ПараметрыЗаполнения.Вставить("ЗаполнятьАвтоматически",	Истина);
	
	ПереченьДанных = Новый Массив;
	Если ИмяТЧ = "ПобочныеИзделия" Тогда
		ПереченьДанных.Добавить("ВозвратныеОтходы");
	ИначеЕсли ИмяТЧ = "МатериалыИРаботы" Тогда
		ПереченьДанных.Добавить("МатериалыИУслуги");
	Иначе
		ПереченьДанных.Добавить("Трудозатраты");
	КонецЕсли;
	ПараметрыЗаполнения.Вставить("ПереченьДанных", ПереченьДанных);
	
	// Получим данные спецификаций и поместим их в ВТ.
	Документы.ПроизводствоБезЗаказа.ДанныеСпецификацииПоСпискуПродукции(ТаблицаПродукции,
																		ПараметрыЗаполнения,
																		МенеджерВременныхТаблиц);
	
	// Заполним затраты
	ТаблицаЗатрат = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаЗатрат.Количество() = 0 Тогда
		
		Если ИмяТЧ = "МатериалыИРаботы"
			ИЛИ ИмяТЧ = "ПобочныеИзделия" Тогда
			СтруктураДействий = Новый Структура;
			КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		СтруктураПоиска = Новый Структура("НомерГруппыЗатрат", 0);
		
		Для Каждого ТекЗатрата Из ТаблицаЗатрат Цикл
			
			НоваяСтрока = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЗатрата);
			
			СтруктураПоиска.НомерГруппыЗатрат = НоваяСтрока.НомерГруппыЗатрат;
			ГруппаЗатрат = СписокГрупп.НайтиСтроки(СтруктураПоиска);
			
			Если Не ГруппаЗатрат.Количество() = 0 Тогда
				НоваяСтрока.ГруппаЗатрат = ГруппаЗатрат[0].ГруппаЗатрат;
				Если Не ИмяТЧ = "Трудозатраты" Тогда
					НоваяСтрока.НаправлениеДеятельности = ГруппаЗатрат[0].НаправлениеДеятельности;
				КонецЕсли;
			КонецЕсли;
			
			Если Не ИмяТЧ = "Трудозатраты" Тогда
				ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(
					ИмяТЧ, 
					НоваяСтрока, 
					ЭтаФорма, 
					СтруктураДействий);
				
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
			КонецЕсли;
			
			МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
			
		КонецЦикла;
		
		Если ИмяТЧ = "МатериалыИРаботы"
			ИЛИ ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ИмяТЧ = "Трудозатраты" Тогда
			ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВКоллекции(Форма, МассивСтрок, ИмяПоля)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли; 

	Для каждого Строка Из МассивСтрок Цикл
		Строка[ИмяПоля] = Форма.СкладПоУмолчанию;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВСтроке(Форма, Строка, ИмяПоля)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли; 
	
	Строка[ИмяПоля] = Форма.СкладПоУмолчанию;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСклад(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить подразделение затрат.';
									|en = 'Select lines for which a cost department should be populated.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьСкладЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.Склады.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		ТекущиеДанные.Склад = РезультатЗакрытия;
		
	КонецЦикла;
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеЗатрат(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо заполнить подразделение затрат.';
									|en = 'Select lines for which a cost department should be populated.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПодразделениеЗатратЗавершение", ЭтотОбъект, ИмяТЧ);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодразделениеЗатратЗавершение(РезультатЗакрытия, ИмяТЧ) Экспорт

	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	
	Для каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТабличнаяЧасть.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ИмяТЧ = "МатериалыИРаботы"
			И ТекущиеДанные.ЦеховаяКладовая Тогда
			Продолжить;
		КонецЕсли;
		ТекущиеДанные.Подразделение = РезультатЗакрытия;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоСкладу()
	
	МассивСкладов = ОбщегоНазначения.ВыгрузитьКолонку(Объект.МатериалыИРаботы, "Склад", Истина);
	РеквизитыСкладов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивСкладов, "ЦеховаяКладовая");
	
	Для Каждого ТекСтрока Из Объект.МатериалыИРаботы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
			ТекСтрока.ЦеховаяКладовая = РеквизитыСкладов[ТекСтрока.Склад].ЦеховаяКладовая;
		Иначе
			ТекСтрока.ЦеховаяКладовая = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
			
		Группировки = Новый Массив;
		Группировки.Добавить(ТекущиеДанные.НомерГруппыЗатрат);
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Группировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьВыпускПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ПроизводствоБезЗаказа.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ВыпускПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ВыпускПодДеятельность,
		Объект.ВыпускПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыСлужебные

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОткрытьПодборТоваров(ИмяТЧ)

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	ДоступныеТипыНоменклатуры = Новый ФиксированныйМассив(МассивТиповНоменклатуры);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипНоменклатуры", ДоступныеТипыНоменклатуры));
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбора", 
			ПараметрыФормы, 
			Элементы[ИмяТЧ], 
			УникальныйИдентификатор,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзТСД(ИмяТЧ)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Результат Тогда
		ОбработатьШтрихкоды(ДополнительныеПараметры.ИмяТЧ, Результат.ТаблицаТоваров);
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(ИмяТЧ)
	
	ОчиститьСообщения();
	Оповещение = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, Новый Структура("ИмяТЧ", ИмяТЧ));
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяТЧПоискПоШтрихкоду = ДополнительныеПараметры.ИмяТЧ;
	
	ОбработатьШтрихкоды(ДополнительныеПараметры.ИмяТЧ, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВес(ИмяТЧ)
		
	ТекущаяСтрока = МенеджерОборудованияУТКлиент.ТекущаяСтрока(ЭтаФорма, ИмяТЧ);
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(
		Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока,ИмяТЧ",
																						ТекущаяСтрока, ИмяТЧ)),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		
		ДополнительныеПараметры.ТекущаяСтрока.КоличествоУпаковок = РезультатВыполнения.Вес;
		
		СтруктураДействий = Новый Структура;
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ДополнительныеПараметры.ИмяТЧ,
			ЭтаФорма,
			СтруктураДействий);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ДополнительныеПараметры.ТекущаяСтрока,
														СтруктураДействий,
														КэшированныеЗначения);
		
		Если ДополнительныеПараметры.ИмяТЧ = "ВыходныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "ПобочныеИзделия"
			ИЛИ ДополнительныеПараметры.ИмяТЧ = "МатериалыИРаботы" Тогда
			ТекущаяСтрокаИдентификатор = ДополнительныеПараметры.ТекущаяСтрока.ПолучитьИдентификатор();
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
					ПараметрыУказанияСерий[ДополнительныеПараметры.ИмяТЧ],
					ТекущаяСтрокаИдентификатор, 
					КэшированныеЗначения);
		КонецЕсли; 
		
	Иначе
		МенеджерОборудованияУТКлиент.СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкоды(ИмяТЧ, ДанныеШтрихкодов)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ИмяТЧ,
													Неопределено,
													ЭтаФорма,
													СтруктураДействийСДобавленнымиСтроками);
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействийСДобавленнымиСтроками);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействийСИзмененнымиСтроками);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.ИмяТЧ                                  = ИмяТЧ;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий[ИмяТЧ];
	СтруктураДействий.ИзменятьКоличество                     = Истина;
	СтруктураДействий.ТолькоТовары                           = Ложь;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий, КэшированныеЗначения);
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий, КэшированныеЗначения, ЭтаФорма);
	
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы[ИмяТЧ].ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,
															Объект,
															СтруктураПараметровДействия,
															КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧ(ИмяТЧ)

	Если Элементы[ИмяТЧ].ТекущиеДанные = Неопределено Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строку, которую необходимо разбить.';
									|en = 'Select the line which should be split.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Если ИмяТЧ = "Трудозатраты" Тогда
		ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуТЧЗавершение", ЭтотОбъект, ИмяТЧ);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(Объект[ИмяТЧ], Элементы[ИмяТЧ], Оповещение, ПараметрыРазбиенияСтроки);

КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуТЧЗавершение(НоваяСтрока, ИмяТЧ) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если Не ИмяТЧ = "Трудозатраты" Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
				ИмяТЧ,
				ЭтаФорма,
				СтруктураДействий);
				
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			
			НоваяСтрокаСтруктура = Новый Структура("НомерГруппыЗатрат, ГруппаЗатрат, Номенклатура,
													|Характеристика, Спецификация, Назначение");
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСтруктура, НоваяСтрока);
			ДобавитьИзменитьГруппуЗатрат(НоваяСтрокаСтруктура);
			
			НоваяСтрока.НомерГруппыЗатрат = НоваяСтрокаСтруктура.НомерГруппыЗатрат;
			НоваяСтрока.ГруппаЗатрат = НоваяСтрокаСтруктура.ГруппаЗатрат;
			
			Если ИмяТЧ = "ВыходныеИзделия" Тогда
				ПроизводствоКлиентСервер.ПересчитатьДолюСтоимостиПриРазбиенииСтроки(НоваяСтрока, ТекущиеДанные, ПараметрыРаспределенияЗатрат.СпособРаспределенияЗатратНаВыходныеИзделия);
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		НоваяСтрока.КодСтроки = 0;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	ПослеИзмененияСтрокТЧПрограммноНаСервере(ИмяТЧ, МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковки(ИмяТЧ)
	
	ВыделенныеСтроки = Элементы[ИмяТЧ].ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо выбрать строки, для которых необходимо округлить количество.';
									|en = 'Select the lines for which the quantity should be rounded off.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ВсегоСтрок = 0;
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		ВсегоСтрок = ВсегоСтрок + 1;
	КонецЦикла;
	
	Если ВсегоСтрок = 0 Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Округление не требуется';
				|en = 'Rounding is not required'"),, 
			НСтр("ru = 'В выбранных строках уже целое количество единиц.';
				|en = 'There is already a whole number of units in the selected lines.'"),
			БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'В выбранных строках количество будет округлено до целых единиц. 
							|Продолжить?';
							|en = 'The selected lines will be rounded up to integral units.
							|Continue?'");
							
	ОписаниеОповещения = Новый ОписаниеОповещения("ОкруглитьДоЦелойУпаковкиЗавершение",
													ЭтотОбъект,
													Новый Структура("ИмяТЧ", ИмяТЧ));
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Продолжить';
														|en = 'Continue'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглитьДоЦелойУпаковкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОкруглитьДоЦелойУпаковкиНаСервере(ДополнительныеПараметры.ИмяТЧ, КэшированныеЗначения);
	ТекстОповещения = НСтр("ru = 'В выбранных строках выполнено округление до целых единиц.';
							|en = 'The selected lines are rounded up to integral units.'");
	ПоказатьОповещениеПользователя(НСтр("ru = 'Выполнено округление';
										|en = 'Rounded'"),, ТекстОповещения, БиблиотекаКартинок.Успешно32);
	
КонецПроцедуры

&НаСервере
Процедура ОкруглитьДоЦелойУпаковкиНаСервере(ИмяТЧ, КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	МассивГруппировок = Новый Массив;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ИмяТЧ, ЭтаФорма, СтруктураДействий);
	
	Для Каждого ИдентификаторСтроки Из Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект[ИмяТЧ].НайтиПоИдентификатору(ИдентификаторСтроки);
		Если Цел(ДанныеСтроки.КоличествоУпаковок) = ДанныеСтроки.КоличествоУпаковок Тогда
			Продолжить;
		КонецЕсли;
		ДанныеСтроки.КоличествоУпаковок = Цел(ДанныеСтроки.КоличествоУпаковок) + 1;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ДанныеСтроки, СтруктураДействий, КэшированныеЗначения);
		Если ИмяТЧ = "ВыходныеИзделия" Тогда
			МассивГруппировок.Добавить(ДанныеСтроки.НомерГруппыЗатрат);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТЧ = "ВыходныеИзделия" Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(МассивГруппировок);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерийСервер(ИмяТЧ);
	
КонецПроцедуры

&НаСервере
Процедура ТрудозатратыПодразделениеПриИзмененииНаСервере()
	
	ТекущиеДанные = Объект.Трудозатраты.НайтиПоИдентификатору(Элементы.Трудозатраты.ТекущаяСтрока);
	
	ЗаполнитьТипИсполнителяРабот(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделениеПоУмолчаниюВКоллекции(МассивСтрок)
	
	Для Каждого Строка Из МассивСтрок Цикл
		Если Не ЗначениеЗаполнено(Строка.Подразделение) Тогда
			Строка.Подразделение = Объект.Подразделение;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипИсполнителяРабот(Коллекция)
	
	Подразделения = Объект.Трудозатраты.Выгрузить(Коллекция).ВыгрузитьКолонку("Подразделение");
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подразделения,
															"ИспользоватьБригадныеНаряды,ИспользоватьПерсональныеНаряды");
	
	Для Каждого Строка Из Коллекция Цикл
		
		Если ЗначениеЗаполнено(Строка.Подразделение)
			И Не Реквизиты[Строка.Подразделение].ИспользоватьБригадныеНаряды
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Бригады") Тогда
			Строка.Исполнитель = Справочники.ФизическиеЛица.ПустаяСсылка();
		ИначеЕсли ЗначениеЗаполнено(Строка.Подразделение)
			И Не Реквизиты[Строка.Подразделение].ИспользоватьПерсональныеНаряды
			И ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Строка.Исполнитель = Справочники.Бригады.ПустаяСсылка();
		КонецЕсли;
		
		Если Строка.Исполнитель = Неопределено Тогда
			Строка.Исполнитель = Справочники.Бригады.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсполнительПолучениеДанныхВыбора(ДанныеВыбора, Текст, Параметры)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПроизводствоСервер.ЗаполнитьДанныеВыбораПриВводеИсполнителя(ДанныеВыбора, Текст, Параметры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакКладовой(Коллекция)
	
	Склады = Объект.МатериалыИРаботы.Выгрузить(Коллекция).ВыгрузитьКолонку("Склад");
	
	Реквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Склады, "ЦеховаяКладовая");
	
	Для Каждого Строка Из Коллекция Цикл
		Строка.ЦеховаяКладовая = Реквизиты[Строка.Склад];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодразделениеКладовой(Коллекция)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки -1	КАК НомерСтроки,
	|	ТаблицаТоваров.Склад			КАК Склад
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	СпрСклады.Подразделение		КАК Подразделение
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклады
	|	ПО СпрСклады.Ссылка = ТаблицаТоваров.Склад
	|	И СпрСклады.ЦеховаяКладовая
	|";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.МатериалыИРаботы.Выгрузить(Коллекция));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект.МатериалыИРаботы[Выборка.НомерСтроки].Подразделение = Выборка.Подразделение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// ИнтеграцияГИСМ

&НаСервере
Процедура СформироватьНадписьМаркировкаПродукции()
	
	Элементы.ТекстМаркировкаТоваров.Видимость = Объект.ЕстьМаркируемаяПродукцияГИСМ;
	Если НЕ Объект.ЕстьМаркируемаяПродукцияГИСМ Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеМаркировки = Метаданные.Документы.МаркировкаТоваровГИСМ;
	ПравоДобавления      = ПравоДоступа("Добавление", МетаданныеМаркировки);
	ПравоЧтения          = ПравоДоступа("Чтение", МетаданныеМаркировки);

	Если Не ПравоЧтения Тогда
		Возврат;
	КонецЕсли;
	
	Если ПравоДобавления Тогда
		ТекстНадписи = НСтр("ru = 'Оформить маркировку товаров';
							|en = 'Register goods marking'");
		ИмяКоманды   = "ОформитьМаркировкуТоваров";
	Иначе
		ТекстНадписи = НСтр("ru = 'Маркировка товаров не создана';
							|en = 'Goods marking is not created'");
		ИмяКоманды   = "";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МаркировкаТоваровГИСМ.Ссылка,
	|	СтатусыИнформированияГИСМ.Статус
	|ИЗ
	|	Документ.МаркировкаТоваровГИСМ КАК МаркировкаТоваровГИСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыИнформированияГИСМ КАК СтатусыИнформированияГИСМ
	|		ПО (СтатусыИнформированияГИСМ.Документ = МаркировкаТоваровГИСМ.Ссылка)
	|ГДЕ
	|	МаркировкаТоваровГИСМ.Основание = &ОснованиеСсылка
	|	И НЕ МаркировкаТоваровГИСМ.ПометкаУдаления";

	Запрос.УстановитьПараметр("ОснованиеСсылка", Объект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстНадписи  = СтрШаблон(НСтр("ru = 'Маркировка товаров: %1';
										|en = 'Goods marking: %1'"), НРег (Строка(Выборка.Статус)));
		ИмяКоманды    = "ОткрытьПротоколОбмена";
		
	КонецЕсли;
	
	ТекстМаркировкаТоваров = Новый ФорматированнаяСтрока(
		ТекстНадписи,
		,
		ЦветаСтиля.ЦветГиперссылки,
		,
		ИмяКоманды);
	
КонецПроцедуры 

// Конец ИнтеграцияГИСМ

#КонецОбласти