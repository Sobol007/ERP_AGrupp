
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоКонтрольнаяТочка") Тогда
		Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка;
	КонецЕсли;
	
	Если объект.Ссылка.Пустая() Тогда
	
		Если Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап И Объект.ПродолжительностьДней = 0 Тогда
			Объект.ПродолжительностьДней = 1;
		КонецЕсли;
		Если Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("ШаблонПроекта")
			И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонПроекта.CRM_Подразделение) Тогда
			Объект.Подразделение = Параметры.ЗначенияЗаполнения.ШаблонПроекта.CRM_Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	АвтоЗаголовок = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		Заголовок = Объект.Тема;
		
	ИначеЕсли Объект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.КонтрольнаяТочка Тогда
		Заголовок = НСтр("ru = 'Новый шаблон контрольной точки...'");
		Элементы.Тема.ПодсказкаВвода = НСтр("ru = 'Введите наименование шаблона контрольной точки'");
		
	Иначе
		Заголовок = НСтр("ru = 'Новый шаблон задачи проекта...'");
		Элементы.Тема.ПодсказкаВвода = НСтр("ru = 'Введите наименование шаблона задачи проекта'");
	КонецЕсли;
		
	Элементы.ШаблонПроекта.ТолькоПросмотр = (ЗначениеЗаполнено(Объект.Ссылка) ИЛИ ЗначениеЗаполнено(Объект.ШаблонПроекта));

	СформироватьПредставлениеВложений();
	
	ОписаниеТипа = Строка(Объект.ТипЭтапа) + НСтр("ru = ' (шаблон)'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьРеквизитов();
	СформироватьПредставлениеКонтекстов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
		
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ШаблонЭтапаКалендарногоПланаПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ШаблонЭтапаКалендарногоПланаПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ШаблонЭтапаПроекта) И ТекущийОбъект.ШаблонЭтапаПроекта.ШаблонПроекта <> ТекущийОбъект.ШаблонПроекта
		Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный пакет задач не соответствует Проекту! Запись невозможна.'"),,,, Отказ);
	КонецЕсли; 
	
	Если ТекущийОбъект.ТипЭтапа = Перечисления.CRM_ТипыЭтапов.Этап и ТекущийОбъект.ПродолжительностьДней = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Длительность этапа должна быть не менее 1 дня! Запись невозможна.'"),,,, Отказ);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// Проверим что есть хотя бы один ответственный за КТ.
	Если Объект.Участники.Количество()>0 Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина));
		Если Строки.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru='Необходимо указать хотя бы одного ответственного!';en='It is necessary to specify at least one responsible for test point!'"), , "Участники[0].Ответственный" 
							, "Объект",
							Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Оповестить("ПередИзменениемШаблонаЭтапаКалендароногоПлана", Объект.ШаблонПроекта);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ИзменениеШаблонаЭтапаКалендароногоПлана", Объект.ШаблонПроекта);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьОтветственными(Команда)
	УчастникиДобавитьОтветственных();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчистить(Команда)
	
	Если Объект.Участники.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаПользователиОчиститьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Список пользователей будет очищен. Продолжить?';en='The list of users will be cleared. Continue?'"), РежимДиалогаВопрос.ОКОтмена, 60);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиОчиститьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Объект.Участники.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиПодбор(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);

КонецПроцедуры

&НаКлиенте
Процедура КомандаПользователиЗаполнитьПоПодразделению(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормы.Вставить("РазрешитьВыборКорня", Истина);
	
	ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Если не массив, то превратим в массив.
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		МассивВрем = Новый Массив;
		МассивВрем.Добавить(ВыбранноеЗначение);
		ВыбранноеЗначение =  МассивВрем;
	КонецЕсли;
	
	Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") Тогда
			
			Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", ЭлементМассива));
			Если Строки.Количество() = 0 Тогда
				НоваяСтрока = Объект.Участники.Добавить();
				НоваяСтрока.Пользователь = ЭлементМассива;
				КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
				НоваяСтрока.Адрес = КИПользователя.Адрес;
				НоваяСтрока.Телефон = КИПользователя.Телефон;
			КонецЕсли;
		
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			МассивПользователей = ПолучитьПользователейПодразделения(ЭлементМассива);
			Для каждого Элемент Из МассивПользователей Цикл
				
				Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Элемент));
				Если Строки.Количество() = 0 Тогда
					НоваяСтрока = Объект.Участники.Добавить();
					НоваяСтрока.Пользователь = Элемент;
					КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(НоваяСтрока.Пользователь);
					НоваяСтрока.Адрес = КИПользователя.Адрес;
					НоваяСтрока.Телефон = КИПользователя.Телефон;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПользователиПользовательПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Пользователь) Тогда
		КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(ТекДанные.Пользователь);
		ТекДанные.Адрес = КИПользователя.Адрес;
		ТекДанные.Телефон = КИПользователя.Телефон;
	Иначе
		ТекДанные.Адрес = "";
		ТекДанные.Телефон = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокАдресов = СформироватьСписокКИ(ТекДанные.Пользователь, "АдресЭлектроннойПочты");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Адрес");
	СписокАдресов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите адрес электронной почты'"));
КонецПроцедуры

&НаКлиенте
Процедура ПользователиТелефонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	СписокТелефонов = СформироватьСписокКИ(ТекДанные.Пользователь, "Телефон");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборКИЗавершение", ЭтотОбъект, "Телефон");
	СписокТелефонов.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru = 'Выберите телефон'"));
КонецПроцедуры

&НаКлиенте
Процедура ВыборКИЗавершение(ВыбранныйЭлемент, ИмяРеквизита) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ТекДанные = Элементы.Пользователи.ТекущиеДанные;
		ТекДанные[ИмяРеквизита] = ВыбранныйЭлемент.Значение.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Тема) Тогда
		Заголовок = Объект.Тема;
	Иначе
		Заголовок = НСтр("ru = 'Введите наименование...'");;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОтветственныйПриИзменении(Элемент)
	ТекДанные = Элементы.Пользователи.ТекущиеДанные;
	Если ТекДанные.Ответственный Тогда
		Для каждого СтрОтветственный из Объект.Участники.НайтиСтроки(Новый Структура("Ответственный", Истина)) Цикл
			СтрОтветственный.Ответственный = Ложь;
		КонецЦикла;
		ТекДанные.Ответственный = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыКонтекстаФайловПриИзменении(Элемент)
	СформироватьПредставлениеКонтекстов();
КонецПроцедуры

#КонецОбласти //ОбработчикиСобытийЭлементовФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СформироватьСписокКИ(Пользователь, ТипСтрокой)
	
	Массив = Новый Массив;
	Массив.Добавить(Пользователь);
	КИПользователя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(Массив, Перечисления.ТипыКонтактнойИнформации[ТипСтрокой]);
	
	СписокТелефонов = Новый СписокЗначений;
	
	Если НЕ КИПользователя = Неопределено Тогда
		СписокЗнач = Новый СписокЗначений;
		
		ТекСсылка = "";
		Для Каждого СтрокаТаб Из КИПользователя Цикл
			
			Если НЕ ТекСсылка = Пользователь Тогда
				СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
				СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
				СтруктураНомера.Вставить("Объект"			, Пользователь);
				СписокТелефонов.Добавить(СтруктураНомера, Строка(Пользователь));
				ТекСсылка = Пользователь;
			КонецЕсли;
			
			СтруктураНомера = ПреобразоватьСтрокуВСтруктуруПолей(СтрокаТаб.ЗначенияПолей);
			СтруктураНомера.Вставить("Представление"	, СтрокаТаб.Представление);
			СтруктураНомера.Вставить("Объект"			, Пользователь);
			СписокТелефонов.Добавить(СтруктураНомера, "   "+СокрЛП(СтрокаТаб.Вид) + ": " + СтрокаТаб.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокТелефонов;
	
КонецФункции

// Преобразовать строку полей в структуру.
//
&НаСервереБезКонтекста
Функция ПреобразоватьСтрокуВСтруктуруПолей(СтрокаПолей)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(СтрокаПолей) Тогда
		Результат = CRM_ОбщегоНазначенияСервер.КонтактнаяИнформацияВСтаруюСтруктуру(СтрокаПолей).ЗначенияПолей;
	Иначе
		Результат = Новый СписокЗначений;
		ПоследнийЭлемент = Неопределено;
		
		Для Сч = 1 По СтрЧислоСтрок(СтрокаПолей) Цикл
			Стр = СтрПолучитьСтроку(СтрокаПолей, Сч);
			Если Лев(Стр, 1) = Символы.Таб Тогда
				Если ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.Значение = ПоследнийЭлемент.Значение + Символы.ПС + Сред(Стр, 2);
				КонецЕсли;
			Иначе
				Поз = Найти(Стр, "=");
				Если Поз <> 0 Тогда
					ПоследнийЭлемент = Результат.Добавить(Сред(Стр, Поз+1), Лев(Стр, Поз-1));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Для Каждого ЭлементСписка Из Результат Цикл
		СтруктураВозврата.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьРеквизитов()
	
	Если Объект.ТипЭтапа = ПредопределенноеЗначение("Перечисление.CRM_ТипыЭтапов.КонтрольнаяТочка") Тогда
		Элементы.ПродолжительностьДней.Видимость = Ложь;
		Элементы.ДекорацияПродолжительностьДней.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ЭтапПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_ШаблонЭтапаКалендарногоПланаПрисоединенныеФайлы КАК ЭтапПрисоединенныеФайлы
	|ГДЕ
	|	ЭтапПрисоединенныеФайлы.ВладелецФайла = &Этап
	|	И НЕ ЭтапПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт

	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаСервере
// Добавляет строки участников, ответственных по проекту.
Процедура УчастникиДобавитьОтветственных()
	
	Если НЕ Объект.ШаблонПроекта.Пустая() И Не Объект.ШаблонПроекта.ЭтоГруппа И ЗначениеЗаполнено(Объект.ШаблонПроекта.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.ШаблонПроекта.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.ШаблонПроекта.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Объект.ШаблонЭтапаПроекта.Пустая() И ЗначениеЗаполнено(Объект.ШаблонЭтапаПроекта.Ответственный) Тогда
		Строки = Объект.Участники.НайтиСтроки(Новый Структура("Пользователь", Объект.ШаблонЭтапаПроекта.Ответственный));
		Если Строки.Количество() = 0 Тогда
			СтрокаПользователь = Объект.Участники.Добавить();
			СтрокаПользователь.Пользователь = Объект.ШаблонЭтапаПроекта.Ответственный;
			СтрокаПользователь.Ответственный = Истина;
			КИПользователя = CRM_УправлениеПроектамиСервер.ПолучитьКИУчастника(СтрокаПользователь.Пользователь);
			СтрокаПользователь.Адрес = КИПользователя.Адрес;
			СтрокаПользователь.Телефон = КИПользователя.Телефон;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПользователейПодразделения(Подразделение)

	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Пользователи.Ссылка
	               |ИЗ
	               |	Справочник.Пользователи КАК Пользователи
	               |ГДЕ
	               |	НЕ Пользователи.ПометкаУдаления
	               |	И Пользователи.Подразделение = &Подразделение";

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции // ПолучитьПользователейПодразделения()

&НаКлиенте
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеКонтекстов()
	
	ЧислоКонтекстов = Объект.ВариантыКонтекстаФайлов.Количество();
	Если ЧислоКонтекстов = 0 Тогда
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов'");
	Иначе
		КонтекстыПредставление = НСтр("ru='Варианты контекста файлов('") + ЧислоКонтекстов + ")"; 
	КонецЕсли;
	Элементы.ГруппаВариантыКонтекстаФайлов.Заголовок = КонтекстыПредставление;
	
КонецПроцедуры // СформироватьПредставлениеКонтекстов()

#КонецОбласти //СлужебныеПроцедурыИФункции


