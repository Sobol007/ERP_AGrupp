
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СписокВыбора = Элементы.Отрасль.СписокВыбора;
	СписокВыбора.Добавить(Справочники.CRM_Отрасли.ПустаяСсылка(), НСтр("ru = 'Все'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	CRM_Отрасли.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.CRM_Отрасли КАК CRM_Отрасли
	|ГДЕ
	|	НЕ CRM_Отрасли.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	КоличествоТоваровПартнеров();
	
	ЗаполнитьИнформациюПоПартнеру();
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.АГ_НаСогласованииДО = "";
	КонецЕсли;
	
	//<--АГ:[PLAN_001_4][03.05.2019 19:07:51][Фирсанов О.И.]
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	//-->АГ:[ PLAN_001_4]	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПериодПредставление();
	
	РасчитатьИтоги();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода;
	Диалог.Период = Новый СтандартныйПериод(Объект.Период, КонецМесяца(Объект.Период));
	Диалог.Показать(ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	СценарийПриИзмененииНаСервере();
	РасчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ОтрасльПриИзменении(Элемент)
	ОтрасльПриИзмененииНаСервере();
	РасчитатьИтоги();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ПартнерыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	ПартнерПлановаяОплатаКорректировка	= ТекущиеДанные.КорректировкаПлановогоПоступленияДС;
	//-->АГ:[ PLAN_0001_1 ]

	
	ПартнерыПриАктивизацииСтрокиНаСервере();
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Партнер", ТекущиеДанные.Партнер);
	Элементы.Услуги.ОтборСтрок = Новый ФиксированнаяСтруктура("Партнер", ТекущиеДанные.Партнер);
	
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	ПересчитатьПоказателиПоПартнеру();
	//-->АГ:[ PLAN_0001_1 ]
	
КонецПроцедуры

//<--АГ:[PLAN_0001_1][22.04.2019 19:07:51][Фирсанов О.И.]
&НаКлиенте
Процедура ПересчитатьПоказателиПоПартнеру()
	
	//<--АГ:[PLAN_0001_1][25.04.2019 21:07:51][Фирсанов О.И.]
	//ПартнерДолгНаКонец_ПоМенеджеру	= ПартнерДолгНаНачало_ПоМенеджеру+ПартнерПлановаяОплатаКорректировка;
	ПартнерДолгНаКонец_ПоМенеджеру	= ПартнерДолгНаНачало_ПоМенеджеру+ПартнерПлановаяОплатаКорректировка+ПартнерПлановаяОплата_ПоМенеджеру;
	//-->АГ:[ PLAN_0001_1]

КонецПроцедуры
//-->АГ:[ PLAN_0001_1]

&НаКлиенте
Процедура ПартнерыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ДобавленВручную Тогда
		УдалитьСтрокиПоПартнеру(ТекущиеДанные.Партнер);
		РасчитатьИтоги();
	Иначе
		ТекстОшибки = НСтр("ru = 'Удаление допустимо только для партнеров, добавленных вручную.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Партнер.Пустая() И Не ОтменаРедактирования Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Партнер"" не заполнено (для отмены нажмите ""Esc"").'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, 
			, 
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Партнеры", ТекущиеДанные.НомерСтроки, "Партнер"),
			"Объект", 
			Отказ);
	КонецЕсли;	
	
	Если Не Отказ И Не ОтменаРедактирования Тогда
		МассивПартнеров = Объект.Партнеры.НайтиСтроки(Новый Структура("Партнер", ТекущиеДанные.Партнер));
		Если МассивПартнеров.Количество() <> 1 Тогда
			ТекущиеДанные.Партнер = Неопределено;
			ТекстОшибки = НСтр("ru = 'Партнер уже выбран.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки, 
				, 
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Партнеры", ТекущиеДанные.НомерСтроки, "Партнер"),
				"Объект", 
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ПартнерыПриОкончанииРедактированияНаСервере();
		РасчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоСоСкладаПриИзменении(Элемент)
	КоличествоТоваров();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоСТранзитногоСкладаПриИзменении(Элемент)
	КоличествоТоваров();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Партнер = Элементы.Партнеры.ТекущиеДанные.Партнер;
		Элемент.ТекущиеДанные.Валюта = Объект.ВалютаДокумента;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.Номенклатура.Пустая() И Не ОтменаРедактирования Тогда
		ТекстОшибки = НСтр("ru = 'Поле ""Услуга"" не заполнено (для отмены нажмите ""Esc"").'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки, 
			, 
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Услуги", ТекущиеДанные.НомерСтроки, "Номенклатура"),
			"Объект", 
			Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	УслугиНоменклатураПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	СуммаУслуг();
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	СуммаУслуг();
КонецПроцедуры

//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
&НаКлиенте
Процедура ПартнерПлановаяОплата_ПоМенеджеруПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Партнеры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или ТекущиеДанные.Партнер.Пустая() Тогда
		ПартнерПлановаяОплатаКорректировка	= 0;
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанные.КорректировкаПлановогоПоступленияДС	= ПартнерПлановаяОплатаКорректировка;
	
	ПересчитатьПоказателиПоПартнеру();
	
КонецПроцедуры
//-->АГ:[ PLAN_0001_1 ]


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СкрытьПоказатьТовары(Команда)	
	СкрытьТовары = Не СкрытьТовары;
	Элементы.ТоварыСкрытьПоказатьТовары.Пометка = СкрытьТовары;
КонецПроцедуры


//<--АГ:[PLAN_001_4][03.05.2019 19:07:51][Фирсанов О.И.]

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры
//-->АГ:[ PLAN_001_4]

//<--АГ:[PLAN_001_3][04.05.2019 12:07:51][Фирсанов О.И.]
&НаКлиенте
Процедура ОткрытьОтчетСтатистикаПродаж(Команда)
	ТекущийПартнер	= Элементы.Партнеры.ТекущиеДанные;
	Если ТекущийПартнер=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Партнер,Менеджер",ТекущийПартнер.Партнер,Объект.Ответственный);
	
	СтрПараметры	= Новый Структура;
	СтрПараметры.Вставить("ПериодОтчета",Новый СтандартныйПериод(ДобавитьМесяц(НачалоМесяца(Объект.Период),-12),КонецМесяца(Объект.Период)));
	
	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ВаловаяПрибыльПоОплаченнымОтгрузкам",СтрПараметры);
	
	ПараметрыФормы = Новый Структура("Отбор,ПользовательскиеНастройки, СформироватьПриОткрытии", Отбор,ПользовательскиеНастройки, Истина);
    
    ОткрытьФорму("Отчет.ВаловаяПрибыльПоОплаченнымОтгрузкам.Форма", ПараметрыФормы); 
	
КонецПроцедуры
//-->АГ:[ PLAN_001_3]

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыборПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = НачалоМесяца(Результат.ДатаНачала);
	УстановитьПериодПредставление();
	
	ВыборПериодаЗавершениеНаСервере();
	
	РасчитатьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ВыборПериодаЗавершениеНаСервере() 
		
	ЗаполнитьИнформациюПоПартнеру();
	
	ПрикладнойОбъект = РеквизитФормыВЗначение("Объект");
	ПрикладнойОбъект.ЗаполнитьТовары();
	ЗначениеВРеквизитФормы(ПрикладнойОбъект, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодПредставление()
	ПериодПредставление = Формат(Объект.Период, "ДФ='MMMM yyyy ""г.""'");
КонецПроцедуры

&НаСервере
Процедура СценарийПриИзмененииНаСервере()
	
	Объект.ВалютаДокумента = Объект.Сценарий.Валюта;
	
	//++УДАЛИТЬ
	//Для Каждого Стр Из Объект.Товары Цикл
	//	Стр.Валюта = Объект.ВалютаДокумента;
	//КонецЦикла;
	//--УДАЛИТЬ
	
	ПрикладнойОбъект = РеквизитФормыВЗначение("Объект");
	ПрикладнойОбъект.ЗаполнитьТовары();
	ЗначениеВРеквизитФормы(ПрикладнойОбъект, "Объект");
	
	Для Каждого Стр Из Объект.Услуги Цикл
		Стр.Валюта = Объект.ВалютаДокумента;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтрасльПриИзмененииНаСервере()
	ПрикладнойОбъект = РеквизитФормыВЗначение("Объект");
	ПрикладнойОбъект.ЗаполнитьПартнеров(Отрасль);
	ПрикладнойОбъект.ЗаполнитьТовары();
	ЗначениеВРеквизитФормы(ПрикладнойОбъект, "Объект");
КонецПроцедуры

&НаСервере
Процедура ПартнерыПриАктивизацииСтрокиНаСервере()
		
	ЗаполнитьИнформациюПоПартнеру();
	
КонецПроцедуры

&НаСервере
Процедура КоличествоТоваровПартнеров(РассчитатьВсем = Истина)
	
	Если РассчитатьВсем Тогда
		
		Для Каждого СтрПартнер Из Объект.Партнеры Цикл
			
			СтрПартнер.Количество = 0;
			МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Партнер", СтрПартнер.Партнер));
			Для Каждого СтрТовар Из МассивТоваров Цикл
				СтрПартнер.Количество = СтрПартнер.Количество + СтрТовар.Количество;
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Идентификатор = Элементы.Партнеры.ТекущаяСтрока;
		Если Идентификатор = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Объект.Партнеры.НайтиПоИдентификатору(Идентификатор);
		Если ТекущиеДанные.Партнер.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.Количество = 0;
		МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Партнер", ТекущиеДанные.Партнер));
		Для Каждого СтрТовар Из МассивТоваров Цикл
			ТекущиеДанные.Количество = ТекущиеДанные.Количество + СтрТовар.Количество;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоПартнеру()
	
	ПартнерДолгНаНачало = 0;
	ПартнерКОплатеНаКонец = 0;
	ПартнерКОплатеНаНачало = 0;
	ПартнерКОплатеНаСледующийПериод = 0;
	ПартнерПлановаяОплата = 0;
	ПартнерДолгНаКонец = 0;
	
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	ПартнерДолгНаНачало_ПоМенеджеру = 0;
	ПартнерКОплатеНаКонец_ПоМенеджеру = 0;
	ПартнерКОплатеНаНачало_ПоМенеджеру = 0;
	ПартнерКОплатеНаСледующийПериод_ПоМенеджеру = 0;
	ПартнерДолгНаКонец_ПоМенеджеру = 0;
	//-->АГ:[ PLAN_0001_1 ]
	
	//<--АГ:[PLAN_0001_1][25.04.2019 21:07:51][Фирсанов О.И.]
	ПартнерПлановаяОплата_ПоМенеджеру	= 0;
	//-->АГ:[ PLAN_0001_1 ]
	
	Идентификатор = Элементы.Партнеры.ТекущаяСтрока;
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Партнеры.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партнер", ТекущиеДанные.Партнер);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Партнеры.Наименование КАК Партнер,
	|	Партнеры.CRM_ОсновнаяОтрасль.Представление КАК Отрасль,
	|	ЕСТЬNULL(СоглашенияСКлиентами.АГ_Договор.Номер, """") КАК ДоговорНомер,
	|	ЕСТЬNULL(СоглашенияСКлиентами.АГ_Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДоговорДата,
	|	ЕСТЬNULL(СоглашенияСКлиентами.АГ_Договор.ДопустимаяСуммаЗадолженности, НЕОПРЕДЕЛЕНО) КАК ДопустимаяСуммаЗадолженности,
	|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ЭтапыОплаты.ВариантОплаты), """") КАК ВариантОплаты,
	|	ЕСТЬNULL(ЭтапыОплаты.Сдвиг, 0) КАК Сдвиг,
	|	ЕСТЬNULL(ЭтапыОплаты.ПроцентПлатежа, 0) КАК ПроцентПлатежа
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыОплаты
	|			ПО СоглашенияСКлиентами.Ссылка = ЭтапыОплаты.Ссылка
	|				И (ЭтапыОплаты.ВариантОплаты В (ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки), ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитСдвиг)))
	|		ПО Партнеры.Ссылка = СоглашенияСКлиентами.Партнер
	|			И (СоглашенияСКлиентами.АГ_Договор.АГ_Основной)
	|			И (СоглашенияСКлиентами.АГ_Договор.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует))
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ
	|	МАКСИМУМ(Отрасль),
	|	МАКСИМУМ(ДоговорНомер),
	|	МАКСИМУМ(ДоговорДата),
	|	МАКСИМУМ(ДопустимаяСуммаЗадолженности)
	|ПО
	|	Партнер";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Выборка.Следующий();
	ПартнерИнформация = Выборка.Партнер + Символы.ПС + Выборка.Отрасль + Символы.ПС 
		+ СтрШаблон(НСтр("ru = 'Договор %1 от %2'"), Выборка.ДоговорНомер, Формат(Выборка.ДоговорДата, "ДЛФ=D")) + Символы.ПС 
		+ СтрШаблон(НСтр("ru = 'Лимит задолженности %1'"), Формат(Выборка.ДопустимаяСуммаЗадолженности, "ЧГ=3,0")) + Символы.ПС + НСтр("ru = 'Отсрочка'");
		
	ВыборкаЭтапыОплаты = Выборка.Выбрать();
	Пока ВыборкаЭтапыОплаты.Следующий() Цикл
		
		ПартнерИнформация = ПартнерИнформация + Символы.ПС + ВыборкаЭтапыОплаты.ВариантОплаты + " " 
			+ Формат(ВыборкаЭтапыОплаты.Сдвиг, "ЧФ=Ч") + НСтр("ru = ' дней '") + Формат(ВыборкаЭтапыОплаты.ПроцентПлатежа, "ЧФ=Ч%")
			
	КонецЦикла;
		
	// ДЗ на начало периода
	// Подходит оплата в плановом периоде
	// В том числе просрочено
	// Переходит на следующий период
	// Ожидаемое поступление ДС в плановом периоде
	// ДЗ на конец периода
	Запрос.УстановитьПараметр("НачалоПериода", Объект.Период);
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК ДолгНаНачало,
	|	РасчетыСКлиентамиОстаткиИОбороты.КОплатеКонечныйОстаток КАК КОплатеНаКонец,
	|	РасчетыСКлиентамиОстаткиИОбороты.КОплатеНачальныйОстаток КАК КОплатеНаНачало,
	|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеНаСледующийПериод,
	|	ЕСТЬNULL(ПланыОплатКлиентовОбороты.СуммаОборот, 0) КАК ПлановаяОплата,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК ДолгНаКонец
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	|	,РасчетыСКлиентамиОстаткиИОбороты1.СуммаНачальныйОстаток КАК ДолгНаНачало_ПоМенеджеру,
	|	РасчетыСКлиентамиОстаткиИОбороты1.КОплатеКонечныйОстаток КАК КОплатеНаКонец_ПоМенеджеру,
	|	РасчетыСКлиентамиОстаткиИОбороты1.КОплатеНачальныйОстаток КАК КОплатеНаНачало_ПоМенеджеру,
	|	РасчетыСКлиентамиОстатки1.КОплатеОстаток КАК КОплатеНаСледующийПериод_ПоМенеджеру,
	|	РасчетыСКлиентамиОстаткиИОбороты1.СуммаКонечныйОстаток КАК ДолгНаКонец_ПоМенеджеру
	//-->АГ:[ PLAN_0001_1 ]
	//<--АГ:[PLAN_0001_1][25.04.2019 13:07:51][Фирсанов О.И.]
	|	,ЕСТЬNULL(ПланыОплатКлиентовОбороты1.СуммаОборот,0) КАК ПоступлениеПоПлану
	//-->АГ:[ PLAN_0001_1 ]
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСКлиентамиОстаткиИОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
	|				ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1),
	|				АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|					ГДЕ
	|						АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСКлиентамиОстатки
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыОплатКлиентов.Обороты(&НачалоПериода, &КонецПериода, , Партнер = &Партнер) КАК ПланыОплатКлиентовОбороты
	|		ПО (ИСТИНА)
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)
	|			И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер=&Ответственный
	|			) КАК РасчетыСКлиентамиОстаткиИОбороты1
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
	|				ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1),
	|				АналитикаУчетаПоПартнерам В
	|					(ВЫБРАТЬ
	|						АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|					ИЗ
	|						РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|					ГДЕ
	|						АналитикаУчетаПоПартнерам.Партнер = &Партнер)
	|				И ВЫРАЗИТЬ(ЗаказКлиента КАК Документ.РеализацияТоваровУслуг).Менеджер=&Ответственный	
	|				) КАК РасчетыСКлиентамиОстатки1
	|		ПО (ИСТИНА)
	//-->АГ:[ PLAN_0001_1 ]
	//<--АГ:[PLAN_0001_1][25.04.2019 20:07:51][Фирсанов О.И.]
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланыОплатКлиентов.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Авто,
	|			&ДокументПроведен
	|				И Партнер = &Партнер
	|				И План = &Ссылка) КАК ПланыОплатКлиентовОбороты1
	|		ПО (ИСТИНА)
	//-->АГ:[ PLAN_0001_1 ]
	|";	
	
	//++УДАЛИТЬ Аналог запроса выше
	//"ВЫБРАТЬ
	//|	РасчетыСКлиентамиНачало.СуммаОстаток КАК ДолгНаНачало,
	//|	РасчетыСКлиентамиКонец.КОплатеОстаток КАК КОплатеНаКонец,
	//|	РасчетыСКлиентамиНачало.КОплатеОстаток КАК КОплатеНаНачало,
	//|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеНаСледующийПериод,
	//|	ПланыОплатКлиентовОбороты.СуммаОборот КАК ПлановаяОплата,
	//|	РасчетыСКлиентамиКонец.СуммаОстаток КАК ДолгНаКонец
	//|ИЗ
	//|	РегистрНакопления.ПланыОплатКлиентов.Обороты(&НачалоПериода, &КонецПериода, , Партнер = &Партнер) КАК ПланыОплатКлиентовОбороты,
	//|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	//|			ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, 1),
	//|			АналитикаУчетаПоПартнерам В
	//|				(ВЫБРАТЬ
	//|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	//|				ИЗ
	//|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	//|				ГДЕ
	//|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСКлиентамиОстатки,
	//|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	//|			&НачалоПериода,
	//|			АналитикаУчетаПоПартнерам В
	//|				(ВЫБРАТЬ
	//|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	//|				ИЗ
	//|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	//|				ГДЕ
	//|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСКлиентамиНачало,
	//|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	//|			&КонецПериода,
	//|			АналитикаУчетаПоПартнерам В
	//|				(ВЫБРАТЬ
	//|					АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	//|				ИЗ
	//|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	//|				ГДЕ
	//|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК РасчетыСКлиентамиКонец"
	//--УДАЛИТЬ Аналог запроса выше
	
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	//-->АГ:[ PLAN_0001_1 ]
	
	//<--АГ:[PLAN_0001_1][25.04.2019 20:07:51][Фирсанов О.И.]
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДокументПроведен", Объект.Проведен);
	//-->АГ:[ PLAN_0001_1 ]


	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПартнерДолгНаНачало = Выборка.ДолгНаНачало;
		ПартнерКОплатеНаКонец = Выборка.КОплатеНаКонец;
		ПартнерКОплатеНаНачало = Выборка.КОплатеНаНачало;
		ПартнерКОплатеНаСледующийПериод = Выборка.КОплатеНаСледующийПериод;
		ПартнерПлановаяОплата = Выборка.ПлановаяОплата;
		ПартнерДолгНаКонец = Выборка.ДолгНаКонец;
		
		//<--АГ:[PLAN_0001_1][25.04.2019 13:07:51][Фирсанов О.И.]
		ПартнерПлановаяОплата	= ПартнерПлановаяОплата+Выборка.ПоступлениеПоПлану;
		//-->АГ:[ PLAN_0001_1 ]
		
		//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
		ПартнерДолгНаНачало_ПоМенеджеру = Выборка.ДолгНаНачало_ПоМенеджеру;
		ПартнерКОплатеНаКонец_ПоМенеджеру = Выборка.КОплатеНаКонец_ПоМенеджеру;
		ПартнерКОплатеНаНачало_ПоМенеджеру = Выборка.КОплатеНаНачало_ПоМенеджеру;
		ПартнерКОплатеНаСледующийПериод_ПоМенеджеру = Выборка.КОплатеНаСледующийПериод_ПоМенеджеру;
		ПартнерДолгНаКонец_ПоМенеджеру = Выборка.ДолгНаКонец_ПоМенеджеру;
		//<--АГ:[PLAN_0001_1][25.04.2019 21:07:51][Фирсанов О.И.]
		//Если ПартнерПлановаяОплата<>0 И ПартнерПлановаяОплатаКорректировка=0 Тогда
		//	ПартнерПлановаяОплатаКорректировка	= ПартнерПлановаяОплата;
		Если Выборка.ПоступлениеПоПлану<>0 И ПартнерПлановаяОплатаКорректировка=0 Тогда
			ПартнерПлановаяОплатаКорректировка	= Выборка.ПоступлениеПоПлану;	
			//-->АГ:[ PLAN_0001_1 ]
			
			//<--АГ:[PLAN_0001_1][23.05.2019 21:07:51][Фирсанов О.И.]
			//ТекущиеДанные = Элементы.Партнеры.ТекущиеДанные;
			//Если ТекущиеДанные <> Неопределено Тогда
			//	ТекущиеДанные.КорректировкаПлановогоПоступленияДС	= ПартнерПлановаяОплатаКорректировка;
			//КонецЕсли;	
			ТекущиеДанные.КорректировкаПлановогоПоступленияДС	= ПартнерПлановаяОплатаКорректировка;
			//-->АГ:[ PLAN_0001_1 ]

		КонецЕсли;	
		//-->АГ:[ PLAN_0001_1 ]
		
		ПартнерПлановаяОплата_ПоМенеджеру	= ПартнерКОплатеНаСледующийПериод_ПоМенеджеру;
	
	КонецЕсли;
	
	
	//<--АГ:[PLAN_0001_1][21.04.2019 13:07:51][Фирсанов О.И.]
	ИтогСуммаТоварыУслугиПоОтбору	= 0;
	
	ПартнерКоличествоОтгружено	= 0;
	ПартнерКоличествоПоДРИМ	= 0;
	ПартнерТоварыКоличество	= 0;
	ПартнерТоварыСумма	= 0;
	ПартнерТоварыКоличествоСоСклада	= 0;
	ПартнерТоварыЗаказаноНаСклад	= 0;
	ПартнерТоварыКоличествоСТранзитногоСклада	= 0;
	ПартнерТоварыЗаказаноТранзитом	= 0;
	ПартнерТоварыЗаказаноСТранзитногоСклада	= 0;
	
	ПартнерУслугиКоличество	= 0;
	ПартнерУслугиСумма	= 0;

	СтруктураОтбораСтрок	= Новый Структура("Партнер",ТекущиеДанные.Партнер);
	мСтрокиТовары	= Объект.Товары.НайтиСтроки(СтруктураОтбораСтрок);	
	Для Каждого СтрокаТовары ИЗ мСтрокиТовары Цикл
		ИтогСуммаТоварыУслугиПоОтбору	= ИтогСуммаТоварыУслугиПоОтбору+СтрокаТовары.Сумма;
		
		ПартнерКоличествоОтгружено	= ПартнерКоличествоОтгружено+СтрокаТовары.КоличествоОтгружено;
		ПартнерКоличествоПоДРИМ	= ПартнерКоличествоПоДРИМ+СтрокаТовары.КоличествоПоДРИМ;
		ПартнерТоварыКоличество	= ПартнерТоварыКоличество+СтрокаТовары.Количество;
		ПартнерТоварыСумма	= ПартнерТоварыСумма+СтрокаТовары.Сумма;
		ПартнерТоварыКоличествоСоСклада	= ПартнерТоварыКоличествоСоСклада+СтрокаТовары.КоличествоСоСклада;
		ПартнерТоварыЗаказаноНаСклад	= ПартнерТоварыЗаказаноНаСклад+СтрокаТовары.ЗаказаноНаСклад;
		ПартнерТоварыЗаказаноСТранзитногоСклада	= ПартнерТоварыЗаказаноСТранзитногоСклада+СтрокаТовары.КоличествоСТранзитногоСклада;
		ПартнерТоварыЗаказаноТранзитом	= ПартнерТоварыЗаказаноТранзитом+СтрокаТовары.ЗаказаноТранзитом;
		
	КонецЦикла;
	мСтрокиУслуги	= Объект.Услуги.НайтиСтроки(СтруктураОтбораСтрок);	
	Для Каждого СтрокаУслуги ИЗ мСтрокиУслуги Цикл
		ИтогСуммаТоварыУслугиПоОтбору	= ИтогСуммаТоварыУслугиПоОтбору+СтрокаУслуги.Сумма;
		ПартнерУслугиКоличество	= ПартнерУслугиКоличество+СтрокаУслуги.Количество;
		ПартнерУслугиСумма	= ПартнерУслугиСумма+СтрокаУслуги.Сумма;
	КонецЦикла;
	ПартнерОтгрузкаВПлановомПериоде	= ИтогСуммаТоварыУслугиПоОтбору;
	
	ПартнерОбщаяСуммаПлановогоПоступления	= ПартнерПлановаяОплата+ПартнерКОплатеНаКонец_ПоМенеджеру;
	//-->АГ:[ PLAN_0001_1 ]	
		
КонецПроцедуры

&НаКлиенте
Процедура КоличествоТоваров()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Количество = ТекущиеДанные.КоличествоСоСклада + ТекущиеДанные.КоличествоСТранзитногоСклада;
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
	РасчитатьИтоги();
	
	КоличествоТоваровПартнеров(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиПоПартнеру(Знач Партнер)
		
	МассивТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Партнер", Партнер));
	Для Каждого Стр Из МассивТоваров Цикл
		Объект.Товары.Удалить(Стр);
	КонецЦикла;
	
	МассивУслуг = Объект.Услуги.НайтиСтроки(Новый Структура("Партнер", Партнер));
	Для Каждого Стр Из МассивУслуг Цикл
		Объект.Услуги.Удалить(Стр);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПартнерыПриОкончанииРедактированияНаСервере()
	
	Идентификатор = Элементы.Партнеры.ТекущаяСтрока;
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Партнеры.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ДобавленВручную = Истина;
	ТекущиеДанные.Статус = ТекущиеДанные.Партнер.АГ_Статус;
	
	ПрикладнойОбъект = РеквизитФормыВЗначение("Объект");
	ПрикладнойОбъект.ЗаполнитьТовары(ТекущиеДанные.Партнер);
	ЗначениеВРеквизитФормы(ПрикладнойОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УслугиНоменклатураПриИзмененииНаСервере()
	
	Идентификатор = Элементы.Услуги.ТекущаяСтрока;
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Услуги.НайтиПоИдентификатору(Идентификатор);
	Если ТекущиеДанные.Номенклатура.Пустая() Тогда
		ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = ТекущиеДанные.Номенклатура.ЕдиницаИзмерения;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СуммаУслуг()
	
	ТекущиеДанные = Элементы.Услуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Сумма = ТекущиеДанные.Количество * ТекущиеДанные.Цена;
	
	РасчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьИтоги()
	
	ИтогВведеноПланов = 0;
	ИтогОтсутствуют = 0;
	Для Каждого Стр Из Объект.Товары Цикл
		Если Стр.Количество = 0 Тогда
			ИтогОтсутствуют = ИтогОтсутствуют + 1;	
		Иначе
			ИтогВведеноПланов = ИтогВведеноПланов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ИтогСумма = Объект.Товары.Итог("Сумма") + Объект.Услуги.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменитьСогласующегоДО_ДокументооборотБизнесПроцесс" Тогда
		Если Параметр.Свойство("ОсновнойПредмет") И Параметр.Свойство("ИмяРеквизита") И Объект.Ссылка = Параметр.ОсновнойПредмет Тогда
			ИзменитьСогласующегоДОНаСервере(Параметр);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСогласующегоДОНаСервере(СтруктураПараметров)
	
	Если СтруктураПараметров.Свойство("СогласующийДО") Тогда
		Изменен = Ложь;
		ДокументОбъект = РеквизитформыВЗначение("Объект");
		Если СтруктураПараметров.Свойство("СтатусНеСогласовано") И ДокументОбъект.Статус <> Перечисления.СтатусыПланов.Отменен Тогда
			Изменен = Истина;
			ДокументОбъект.Статус = Перечисления.СтатусыПланов.Отменен;
		ИначеЕсли СтруктураПараметров.Свойство("СтатусНаСогласовании") И ДокументОбъект.Статус <> Перечисления.СтатусыПланов.НаУтверждении Тогда
			Изменен = Истина;
			ДокументОбъект.Статус = Перечисления.СтатусыПланов.НаУтверждении;
		ИначеЕсли СтруктураПараметров.Свойство("СтатусСогласовано") И ДокументОбъект.Статус <> Перечисления.СтатусыПланов.Утвержден Тогда
			Изменен = Истина;
			ДокументОбъект.Статус = Перечисления.СтатусыПланов.Утвержден;
		КонецЕсли;
		Если ДокументОбъект[СтруктураПараметров.ИмяРеквизита] <> СтруктураПараметров.СогласующийДО Тогда
			Изменен = Истина;
			ДокументОбъект[СтруктураПараметров.ИмяРеквизита] = СтруктураПараметров.СогласующийДО;
		КонецЕсли;
		Если Изменен Тогда
			Попытка
				ДокументОбъект.ОбменДанными.Загрузка = Истина;
				ДокументОбъект.Записать();
				ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

//<--АГ:[PLAN_001_3][04.05.2019 12:07:51][Фирсанов О.И.]
&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
    СтруктураНастроек = Новый Структура;
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции
//-->АГ:[ PLAN_001_3]

#КонецОбласти
