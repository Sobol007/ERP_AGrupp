&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Параметры.Свойство("СоздаватьНоменклатуру") Тогда
			Объект.СоздаватьНоменклатуру = Параметры.СоздаватьНоменклатуру;	
		КонецЕсли;
		
		Если Параметры.Свойство("СоздаватьХарактеристику") Тогда
			Объект.СоздаватьХарактеристику = Параметры.СоздаватьХарактеристику;
		КонецЕсли;

		ПриСозданииЧтенииНаСервере();
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
			Объект.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		КонецЕсли;
		
	КонецЕсли;
	
	НастроитьЭлементыМеры("Вес");
	НастроитьЭлементыМеры("Объем");
	НастроитьЭлементыМеры("Площадь");
	НастроитьЭлементыМеры("Длина");
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваяНоменклатура.ВидНоменклатуры = Объект.ВидНоменклатуры;
	НоваяНоменклатура.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	ПараметрыДополнительныхСвойств = Новый Структура;
	ПараметрыДополнительныхСвойств.Вставить("Объект", НоваяНоменклатура);
	ПараметрыДополнительныхСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ПараметрыДополнительныхСвойств.Вставить("СкрытьУдаленные", Истина);
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ПараметрыДополнительныхСвойств);
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец = Объект.ВидНоменклатуры;
	НоваяХарактеристика.ДополнительныеРеквизиты.Загрузить(Объект.РеквизитыХарактеристик.Выгрузить());
	ПараметрыДополнительныхСвойств = Новый Структура;
	ПараметрыДополнительныхСвойств.Вставить("Объект", НоваяХарактеристика);
	ПараметрыДополнительныхСвойств.Вставить("ИмяЭлементаДляРазмещения", "ГруппаРеквизитыХарактеристик");
	ПараметрыДополнительныхСвойств.Вставить("СкрытьУдаленные", Истина);
	
	ПриСозданииНаСервереРеквизитовХарактеристик(ЭтаФорма, ПараметрыДополнительныхСвойств);
	
	Если Параметры.Свойство("ТекущаяСтрокаЗадачи") Тогда
		АГ_ТекущаяСтрокаЗадачи = Параметры.ТекущаяСтрокаЗадачи;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Истина;
	Иначе
		АГ_ТекущаяСтрокаЗадачи = 9999999999;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервереРеквизитовХарактеристик(Форма, ДополнительныеПараметры = Неопределено)
	
	Если Не ИспользуютсяСвойства(Форма, ДополнительныеПараметры) Тогда
		Возврат;
	КонецЕсли;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Объект",                     Неопределено);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "");
	Контекст.Вставить("ОтложеннаяИнициализация",    Ложь);
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	Контекст.Вставить("ИмяЭлементаКоманднойПанели", "");
	Контекст.Вставить("СкрытьУдаленные",            Неопределено);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Контекст, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Контекст.Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Контекст.Объект;
	КонецЕсли;
	СоздатьОписаниеДополнительныхРеквизитов = УправлениеСвойствами.ИспользоватьДопРеквизиты(ОписаниеОбъекта.Ссылка);
	Если Не ЗначениеЗаполнено(ОписаниеОбъекта.Ссылка) И Контекст.СкрытьУдаленные = Неопределено Тогда
		Контекст.СкрытьУдаленные = Истина;
	КонецЕсли;
	
	СоздатьОсновныеОбъектыФормы(Форма, Контекст, СоздатьОписаниеДополнительныхРеквизитов);
	
	ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ОписаниеОбъекта, , Контекст.СкрытьУдаленные);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	ПриЧтенииНаСервереРеквизитовХарактеристик(ЭтаФорма, ТекущийОбъект);
	ПриСозданииЧтенииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервереРеквизитовХарактеристик(Форма, ТекущийОбъект)
	
	Структура = Новый Структура("Свойства_ИспользоватьСвойства1");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	
	Если ТипЗнч(Структура.Свойства_ИспользоватьСвойства1) = Тип("Булево")
		И Структура.Свойства_ИспользоватьСвойства1 Тогда
		
		Если Форма.ПараметрыСвойств1.Свойство("ВыполненаОтложеннаяИнициализация")
			И Не Форма.ПараметрыСвойств1.ВыполненаОтложеннаяИнициализация Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	ОбновитьКешРеквизитовВидаНоменклатуры();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	ПередЗаписьюНаСервереРеквизитовХарактеристик(ЭтаФорма, ТекущийОбъект);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереРеквизитовХарактеристик(Форма, ТекущийОбъект)
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец = Объект.ВидНоменклатуры;
	НоваяХарактеристика.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	
	ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, НоваяХарактеристика, Истина);
	
	ТекущийОбъект.РеквизитыХарактеристик.Загрузить(НоваяХарактеристика.ДополнительныеРеквизиты.Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьКнопок();
	УстановитьВидимостьДоступность();
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	ПослеЗагрузкиДополнительныхРеквизитовХарактеристик(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	УстановитьВидимостьДоступность();
КонецПроцедуры



&НаКлиенте
Процедура ПослеЗагрузкиДополнительныхРеквизитовХарактеристик(Форма)
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства1
		Или НЕ Форма.Свойства_ИспользоватьДопРеквизиты1 Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1.Количество() > 0 Тогда
		Форма.ПодключитьОбработчикОжидания("ОбновитьЗависимостиДополнительныхРеквизитов", 2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов(Форма, Объект = Неопределено)
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства1
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты1 Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	Для Каждого ОписаниеЗависимогоРеквизита Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1 Цикл
		Если ОписаниеЗависимогоРеквизита.ВыводитьВВидеГиперссылки Тогда
			ОбрабатываемыйЭлемент = СтрЗаменить(ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение, "ДополнительныйРеквизитЗначение1_", "Группа1_");
		Иначе
			ОбрабатываемыйЭлемент = ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение;
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеДоступности.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеДоступности.КодУсловия);
			
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Элемент.Доступность <> Результат Тогда
				Элемент.Доступность = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеВидимости.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеВидимости.КодУсловия);
			
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Элемент.Видимость <> Результат Тогда
				Элемент.Видимость = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно Тогда
				Продолжить;
			КонецЕсли;
			
			Параметры = Новый Структура;
			Параметры.Вставить("ЗначенияПараметров", ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.ЗначенияПараметров);
			Параметры.Вставить("Форма", Форма);
			Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
			Результат = Вычислить(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения.КодУсловия);
			
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Не ОписаниеЗависимогоРеквизита.ВыводитьВВидеГиперссылки
				И Элемент.АвтоОтметкаНезаполненного <> Результат Тогда
				Элемент.АвтоОтметкаНезаполненного = Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект = Неопределено, ПоляНадписей = Ложь, СкрытьУдаленные = Неопределено)
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства1
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СкрытьУдаленные) = Тип("Булево") Тогда
		Форма.Свойства_СкрытьУдаленные1 = СкрытьУдаленные;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта1 = Новый СписокЗначений;
	
	КлючНазначения = Неопределено;
	НаборыСвойствОбъекта = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(
		ОписаниеОбъекта, КлючНазначения);
	
	Для каждого Строка Из НаборыСвойствОбъекта Цикл
		Если УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Строка.Набор).ДополнительныеРеквизиты Тогда
			
			Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта1.Добавить(
				Строка.Набор, Строка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьКлючНазначенияФормы(Форма, КлючНазначения);
	
	ОписаниеСвойств = УправлениеСвойствамиСлужебный.ЗначенияСвойств(
		ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить(),
		Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта1,
		Ложь);
	
	ОписаниеСвойств.Колонки.Добавить("ИмяРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("СтрокаСсылочногоТипа");
	ОписаниеСвойств.Колонки.Добавить("ИмяСсылочногоРеквизитаЗначение");
	ОписаниеСвойств.Колонки.Добавить("ИмяУникальнаяЧасть");
	ОписаниеСвойств.Колонки.Добавить("ДополнительноеЗначение");
	ОписаниеСвойств.Колонки.Добавить("Булево");
	
	УдалитьСтарыеРеквизитыИЭлементы(Форма);
	
	// Создание реквизитов.
	ДобавляемыеРеквизиты = Новый Массив();
	
	Для каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ТипЗначенияСвойства = ОписаниеСвойства.ТипЗначения;
		СписокТипов = ТипЗначенияСвойства.Типы();
		СтроковыйРеквизит = (СписокТипов.Количество() = 1) И (СписокТипов[0] = Тип("Строка"));
		
		// Поддержка строк неограниченной длины.
		ИспользоватьНеограниченнуюСтроку = УправлениеСвойствамиСлужебный.ИспользоватьНеограниченнуюСтроку(
			ТипЗначенияСвойства, ОписаниеСвойства.МногострочноеПолеВвода);
		
		Если ИспользоватьНеограниченнуюСтроку Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		ИначеЕсли ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
			И ТипЗначенияСвойства.КвалификаторыСтроки.Длина = 0 Тогда
			// Если нельзя использовать неограниченную строку, а в свойствах реквизита она неограниченная,
			// то устанавливаем ограничение в 1024 символа.
			ТипЗначенияСвойства = Новый ОписаниеТипов(ОписаниеСвойства.ТипЗначения,
				,,, Новый КвалификаторыСтроки(1024));
		КонецЕсли;
		
		ОписаниеСвойства.ИмяУникальнаяЧасть = 
			СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Набор.УникальныйИдентификатор())), "-", "x")
			+ "_"
			+ СтрЗаменить(ВРег(Строка(ОписаниеСвойства.Свойство.УникальныйИдентификатор())), "-", "x");
		
		ОписаниеСвойства.ИмяРеквизитаЗначение =
			"ДополнительныйРеквизитЗначение1_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
		
		ОписаниеСвойства.СтрокаСсылочногоТипа = Ложь;
		Если СтроковыйРеквизит
			И Не ИспользоватьНеограниченнуюСтроку
			И ОписаниеСвойства.ВыводитьВВидеГиперссылки Тогда
			ФорматированнаяСтрока                           = Новый ОписаниеТипов("ФорматированнаяСтрока");
			ОписаниеСвойства.СтрокаСсылочногоТипа           = Истина;
			ОписаниеСвойства.ИмяСсылочногоРеквизитаЗначение = "СсылочныйДополнительныйРеквизитЗначение1_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
			
			Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяСсылочногоРеквизитаЗначение, ФорматированнаяСтрока, , ОписаниеСвойства.Наименование, Истина);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		Если ОписаниеСвойства.Удалено Тогда
			ТипЗначенияСвойства = Новый ОписаниеТипов("Строка");
		КонецЕсли;
		
		Реквизит = Новый РеквизитФормы(ОписаниеСвойства.ИмяРеквизитаЗначение, ТипЗначенияСвойства, , ОписаниеСвойства.Наименование, Истина);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		ОписаниеСвойства.ДополнительноеЗначение =
			УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(ТипЗначенияСвойства);
		
		ОписаниеСвойства.Булево = ОбщегоНазначения.ОписаниеТипаСостоитИзТипа(ТипЗначенияСвойства, Тип("Булево"));
	КонецЦикла;
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создание элементов формы.
	Для Каждого ОписаниеСвойства Из ОписаниеСвойств Цикл
		
		ИмяЭлементаДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения1;
		Если ТипЗнч(ИмяЭлементаДляРазмещения) <> Тип("СписокЗначений") Тогда
			Если ИмяЭлементаДляРазмещения = Неопределено Тогда
				ИмяЭлементаДляРазмещения = "";
			КонецЕсли;
			
			ЭлементРазмещения = ?(ИмяЭлементаДляРазмещения = "", Неопределено, Форма.Элементы[ИмяЭлементаДляРазмещения]);
		Иначе
			РазделыДляРазмещения = Форма.Свойства_ИмяЭлементаДляРазмещения1;
			РазмещениеНабора = РазделыДляРазмещения.НайтиПоЗначению(ОписаниеСвойства.Набор);
			Если РазмещениеНабора = Неопределено Тогда
				РазмещениеНабора = РазделыДляРазмещения.НайтиПоЗначению("ВсеОстальные");
			КонецЕсли;
			ЭлементРазмещения = Форма.Элементы[РазмещениеНабора.Представление];
		КонецЕсли;
		
		ФормаОписаниеСвойства = Форма.Свойства_ОписаниеДополнительныхРеквизитов1.Добавить();
		ЗаполнитьЗначенияСвойств(ФормаОписаниеСвойства, ОписаниеСвойства);
		
		// Заполнение таблицы зависимых дополнительных реквизитов.
		Если ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов.Количество() > 0
			И Не ОписаниеСвойства.Удалено Тогда
			ОписаниеЗависимогоРеквизита = Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1.Добавить();
			ЗаполнитьЗначенияСвойств(ОписаниеЗависимогоРеквизита, ОписаниеСвойства);
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ОписаниеСвойства.ЗависимостиДополнительныхРеквизитов Цикл
			Если СтрокаТаблицы.ЗависимоеСвойство = "ЗаполнятьОбязательно"
				И ОписаниеСвойства.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
				Продолжить;
			КонецЕсли;
			Если ОписаниеСвойства.Удалено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрокаТаблицы.Реквизит) = Тип("Строка") Тогда
				ПутьКРеквизиту = "Параметры.ОписаниеОбъекта." + СтрокаТаблицы.Реквизит;
			Иначе
				ОписаниеДополнительногоРеквизита = ОписаниеСвойств.Найти(СтрокаТаблицы.Реквизит, "Свойство");
				Если ОписаниеДополнительногоРеквизита = Неопределено Тогда
					Продолжить; // Дополнительный реквизит не существует, условие игнорируется.
				КонецЕсли;
				ПутьКРеквизиту = "Параметры.Форма." + ОписаниеДополнительногоРеквизита.ИмяРеквизитаЗначение;
			КонецЕсли;
			
			ШаблонУсловия = "";
			Если СтрокаТаблицы.Условие = "Равно" Тогда
				ШаблонУсловия = "%1 = %2";
			ИначеЕсли СтрокаТаблицы.Условие = "Не равно" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%1 <> %2";
			КонецЕсли;
			
			Если СтрокаТаблицы.Условие = "В списке" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) <> Неопределено"
			ИначеЕсли СтрокаТаблицы.Условие = "Не в списке" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "%2.НайтиПоЗначению(%1) = Неопределено"
			КонецЕсли;
			
			ПравоеЗначение = "";
			Если ЗначениеЗаполнено(ШаблонУсловия) Тогда
				ПравоеЗначение = "Параметры.ЗначенияПараметров[""" + ПутьКРеквизиту + """]";
			КонецЕсли;
			
			Если СтрокаТаблицы.Условие = "Заполнено" Тогда
				ШаблонУсловия = "ЗначениеЗаполнено(%1)";
			ИначеЕсли СтрокаТаблицы.Условие = "Не заполнено" Тогда // не ошибка, идентификатор.
				ШаблонУсловия = "Не ЗначениеЗаполнено(%1)";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПравоеЗначение) Тогда
				КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту, ПравоеЗначение);
			Иначе
				КодУсловия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонУсловия, ПутьКРеквизиту);
			КонецЕсли;
			
			Если СтрокаТаблицы.ЗависимоеСвойство = "Доступен" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеДоступности, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			ИначеЕсли СтрокаТаблицы.ЗависимоеСвойство = "Виден" Тогда
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеВидимости, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			Иначе
				УстановитьУсловиеЗависимости(ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, СтрокаТаблицы.Условие);
			КонецЕсли;
		КонецЦикла;
		
		Если ОписаниеСвойства.СтрокаСсылочногоТипа Тогда
			Если ЗначениеЗаполнено(ОписаниеСвойства.Значение) Тогда
				Значение = ОписаниеСвойства.ТипЗначения.ПривестиЗначение(ОписаниеСвойства.Значение);
				СтрокаЗначение = СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(Значение);
			Иначе
				Значение = НСтр("ru = 'не задано'");
				СсылкаРедактирования = "НеЗадано";
				СтрокаЗначение = Новый ФорматированнаяСтрока(Значение,, ЦветаСтиля.ЦветПустойГиперссылки,, СсылкаРедактирования);
			КонецЕсли;
			Форма[ОписаниеСвойства.ИмяСсылочногоРеквизитаЗначение] = СтрокаЗначение;
		КонецЕсли;
		Форма[ОписаниеСвойства.ИмяРеквизитаЗначение] = ОписаниеСвойства.Значение;
		
		Если ОписаниеСвойства.Удалено И Форма.Свойства_СкрытьУдаленные1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НаборыСвойствОбъекта.Количество() > 1 Тогда
			
			ЭлементСписка = Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов1.НайтиПоЗначению(
				ОписаниеСвойства.Набор);
			
			Если ЭлементСписка <> Неопределено Тогда
				Родитель = Форма.Элементы[ЭлементСписка.Представление];
			Иначе
				ОписаниеНабора = НаборыСвойствОбъекта.Найти(ОписаниеСвойства.Набор, "Набор");
				
				Если ОписаниеНабора = Неопределено Тогда
					ОписаниеНабора = НаборыСвойствОбъекта.Добавить();
					ОписаниеНабора.Набор     = ОписаниеСвойства.Набор;
					ОписаниеНабора.Заголовок = НСтр("ru = 'Удаленные реквизиты'")
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ОписаниеНабора.Заголовок) Тогда
					ОписаниеНабора.Заголовок = Строка(ОписаниеСвойства.Набор);
				КонецЕсли;
				
				ИмяЭлементаНабора = "НаборДополнительныхРеквизитов1" + ОписаниеСвойства.ИмяУникальнаяЧасть;
				
				Родитель = Форма.Элементы.Добавить(ИмяЭлементаНабора, Тип("ГруппаФормы"), ЭлементРазмещения);
				
				Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов1.Добавить(
					ОписаниеСвойства.Набор, Родитель.Имя);
				
				Если ТипЗнч(ЭлементРазмещения) = Тип("ГруппаФормы")
				   И ЭлементРазмещения.Вид = ВидГруппыФормы.Страницы Тогда
					
					Родитель.Вид = ВидГруппыФормы.Страница;
				Иначе
					Родитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
					Родитель.Отображение = ОтображениеОбычнойГруппы.Нет;
				КонецЕсли;
				Родитель.ОтображатьЗаголовок = Ложь;
				Родитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
				
				ЗаполненныеСвойстваГруппы = Новый Структура;
				Для каждого Колонка Из НаборыСвойствОбъекта.Колонки Цикл
					Если ОписаниеНабора[Колонка.Имя] <> Неопределено Тогда
						ЗаполненныеСвойстваГруппы.Вставить(Колонка.Имя, ОписаниеНабора[Колонка.Имя]);
					КонецЕсли;
				КонецЦикла;
				ЗаполнитьЗначенияСвойств(Родитель, ЗаполненныеСвойстваГруппы);
			КонецЕсли;
		Иначе
			Родитель = ЭлементРазмещения;
		КонецЕсли;
		
		Если ОписаниеСвойства.ВыводитьВВидеГиперссылки Тогда
			ИмяГруппыГиперссылки = "Группа1_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
			ГруппаГиперссылки = Форма.Элементы.Добавить(ИмяГруппыГиперссылки, Тип("ГруппаФормы"), Родитель);
			ГруппаГиперссылки.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаГиперссылки.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаГиперссылки.ОтображатьЗаголовок = Ложь;
			ГруппаГиперссылки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаГиперссылки.Заголовок = ОписаниеСвойства.Наименование;
			
			Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), ГруппаГиперссылки);
			
			Если Не ПоляНадписей Тогда
				ИмяКнопки = "Кнопка1_" + ОписаниеСвойства.ИмяУникальнаяЧасть;
				Кнопка = Форма.Элементы.Добавить(
					ИмяКнопки,
					Тип("КнопкаФормы"),
					ГруппаГиперссылки);
					
				Кнопка.ТолькоВоВсехДействиях = Истина;
				Кнопка.ИмяКоманды = "РедактироватьГиперссылкуРеквизита";
				Кнопка.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
			КонецЕсли;
			
			Если Не ОписаниеСвойства.СтрокаСсылочногоТипа И ЗначениеЗаполнено(ОписаниеСвойства.Значение) Тогда
				Элемент.Гиперссылка = Истина;
			КонецЕсли;
		Иначе
			Элемент = Форма.Элементы.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение, Тип("ПолеФормы"), Родитель);
		КонецЕсли;
		
		ФормаОписаниеСвойства.ЭлементФормыДобавлен = Истина;
		
		Если ОписаниеСвойства.Булево И ПустаяСтрока(ОписаниеСвойства.ФорматСвойства) Тогда
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		Иначе
			Если ПоляНадписей Тогда
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
			ИначеЕсли ОписаниеСвойства.ВыводитьВВидеГиперссылки
				И (ОписаниеСвойства.СтрокаСсылочногоТипа
					Или ЗначениеЗаполнено(ОписаниеСвойства.Значение))Тогда
				Элемент.Вид = ВидПоляФормы.ПолеНадписи;
			Иначе
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.АвтоОтметкаНезаполненного = ОписаниеСвойства.ЗаполнятьОбязательно И НЕ ОписаниеСвойства.Удалено;
			КонецЕсли;
			
			Элемент.РастягиватьПоВертикали = Ложь;
			Элемент.ПоложениеЗаголовка     = ПоложениеЗаголовкаЭлементаФормы.Лево;
		КонецЕсли;
		
		Если ОписаниеСвойства.СтрокаСсылочногоТипа Тогда
			Элемент.ПутьКДанным = ОписаниеСвойства.ИмяСсылочногоРеквизитаЗначение;
			Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_СвойстваВыполнитьКоманду1");
		Иначе
			Элемент.ПутьКДанным = ОписаниеСвойства.ИмяРеквизитаЗначение;
		КонецЕсли;
		Элемент.Подсказка   = ОписаниеСвойства.Подсказка;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииДополнительногоРеквизита1");
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода
		   И Не ИспользоватьНеограниченнуюСтроку
		   И ОписаниеСвойства.ТипЗначения.Типы().Найти(Тип("Строка")) <> Неопределено Тогда
			
			Элемент.СвязьПоТипу = Новый СвязьПоТипу("Свойства_ОписаниеДополнительныхРеквизитов1.Свойство",
				ОписаниеСвойств.Индекс(ОписаниеСвойства));
		КонецЕсли;
		
		Если ОписаниеСвойства.МногострочноеПолеВвода > 0 Тогда
			Если НЕ ПоляНадписей Тогда
				Элемент.МногострочныйРежим = Истина;
			КонецЕсли;
			Элемент.Высота = ОписаниеСвойства.МногострочноеПолеВвода;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ОписаниеСвойства.ФорматСвойства)
			И Не ОписаниеСвойства.ВыводитьВВидеГиперссылки Тогда
			Если ПоляНадписей Тогда
				Элемент.Формат = ОписаниеСвойства.ФорматСвойства;
			Иначе
				ФорматнаяСтрока = "";
				Массив = СтрРазделить(ОписаниеСвойства.ФорматСвойства, ";", Ложь);
				
				Для каждого Подстрока Из Массив Цикл
					Если СтрНайти(Подстрока, "ДП=") > 0 ИЛИ СтрНайти(Подстрока, "DE=") > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ЧН=") > 0 ИЛИ СтрНайти(Подстрока, "NZ=") > 0 Тогда
						Продолжить;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ДФ=") > 0 ИЛИ СтрНайти(Подстрока, "DF=") > 0 Тогда
						Если СтрНайти(Подстрока, "ддд") > 0 ИЛИ СтрНайти(Подстрока, "ddd") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ддд", "дд");
							Подстрока = СтрЗаменить(Подстрока, "ddd", "dd");
						КонецЕсли;
						Если СтрНайти(Подстрока, "дддд") > 0 ИЛИ СтрНайти(Подстрока, "dddd") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "дддд", "дд");
							Подстрока = СтрЗаменить(Подстрока, "dddd", "dd");
						КонецЕсли;
						Если СтрНайти(Подстрока, "МММ") > 0 ИЛИ СтрНайти(Подстрока, "MMM") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "МММ", "ММ");
							Подстрока = СтрЗаменить(Подстрока, "MMM", "MM");
						КонецЕсли;
						Если СтрНайти(Подстрока, "ММММ") > 0 ИЛИ СтрНайти(Подстрока, "MMMM") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ММММ", "ММ");
							Подстрока = СтрЗаменить(Подстрока, "MMMM", "MM");
						КонецЕсли;
					КонецЕсли;
					Если СтрНайти(Подстрока, "ДЛФ=") > 0 ИЛИ СтрНайти(Подстрока, "DLF=") > 0 Тогда
						Если СтрНайти(Подстрока, "ДД") > 0 ИЛИ СтрНайти(Подстрока, "DD") > 0 Тогда
							Подстрока = СтрЗаменить(Подстрока, "ДД", "Д");
							Подстрока = СтрЗаменить(Подстрока, "DD", "D");
						КонецЕсли;
					КонецЕсли;
					ФорматнаяСтрока = ФорматнаяСтрока + ?(ФорматнаяСтрока = "", "", ";") + Подстрока;
				КонецЦикла;
				
				Элемент.Формат = ФорматнаяСтрока;
				Элемент.ФорматРедактирования = ФорматнаяСтрока;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеСвойства.Удалено Тогда
			Элемент.ЦветТекстаЗаголовка = ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет;
			Элемент.ШрифтЗаголовка = ШрифтыСтиля.УдаленныйДополнительныйРеквизитШрифт;
			Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				Элемент.КнопкаОчистки = Истина;
				Элемент.КнопкаВыбора = Ложь;
				Элемент.КнопкаОткрытия = Ложь;
				Элемент.КнопкаВыпадающегоСписка = Ложь;
				Элемент.РедактированиеТекста = Ложь;
			КонецЕсли;
			
		ИначеЕсли НЕ ПоляНадписей Тогда
			
			ТипыДополнительныхЗначений = Новый Соответствие;
			ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"), Истина);
			ТипыДополнительныхЗначений.Вставить(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия"), Истина);
			
			ИспользуетсяТипДополнительныхЗначений = Истина;
			Для каждого Тип Из ОписаниеСвойства.ТипЗначения.Типы() Цикл
				Если ТипыДополнительныхЗначений.Получить(Тип) = Неопределено Тогда
					ИспользуетсяТипДополнительныхЗначений = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ПоляНадписей И ОписаниеСвойства.ДополнительноеЗначение И Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			ПараметрыВыбораМассив = Новый Массив;
			ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
				?(ЗначениеЗаполнено(ОписаниеСвойства.ВладелецДополнительныхЗначений),
					ОписаниеСвойства.ВладелецДополнительныхЗначений, ОписаниеСвойства.Свойство)));
			Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
		КонецЕсли;
		
	КонецЦикла;
	
	// Установка видимости, доступности и обязательности заполнения дополнительных реквизитов.
	Для Каждого ОписаниеЗависимогоРеквизита Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1 Цикл
		Если ОписаниеЗависимогоРеквизита.ВыводитьВВидеГиперссылки Тогда
			ОбрабатываемыйЭлемент = СтрЗаменить(ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение, "ДополнительныйРеквизитЗначение1_", "Группа1_");
		Иначе
			ОбрабатываемыйЭлемент = ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение;
		КонецЕсли;
		
		Если ОписаниеЗависимогоРеквизита.УсловиеДоступности <> Неопределено Тогда
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеДоступности);
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Элемент.Доступность <> Результат Тогда
				Элемент.Доступность = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеВидимости <> Неопределено Тогда
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеВидимости);
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Элемент.Видимость <> Результат Тогда
				Элемент.Видимость = Результат;
			КонецЕсли;
		КонецЕсли;
		Если ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
			Если Не ОписаниеЗависимогоРеквизита.ЗаполнятьОбязательно
				Или Форма.Элементы[ОписаниеЗависимогоРеквизита.ИмяРеквизитаЗначение].Вид = ВидПоляФормы.ПолеВвода Тогда
				Продолжить;
			КонецЕсли;
			
			Результат = РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, ОписаниеЗависимогоРеквизита.УсловиеОбязательностиЗаполнения);
			Элемент = Форма.Элементы[ОбрабатываемыйЭлемент];
			Если Не ОписаниеЗависимогоРеквизита.ВыводитьВВидеГиперссылки
				И Элемент.АвтоОтметкаНезаполненного <> Результат Тогда
				Элемент.АвтоОтметкаНезаполненного = Результат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Структура = Новый Структура("ПараметрыСвойств");
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	Если ТипЗнч(Структура.ПараметрыСвойств) = Тип("Структура")
		И Структура.ПараметрыСвойств.Свойство("ВыполненаОтложеннаяИнициализация") Тогда
		Форма.ПараметрыСвойств1.ВыполненаОтложеннаяИнициализация = Истина;
		// Удаление временной декорации, если она была добавлена.
		Если Форма.ПараметрыСвойств1.Свойство("ДобавленаПустаяДекорация") Тогда
			Для Каждого ИмяДекорации Из Форма.ПараметрыСвойств1.КоллекцияДекораций Цикл
				Форма.Элементы.Удалить(Форма.Элементы[ИмяДекорации]);
			КонецЦикла;
			Форма.ПараметрыСвойств1.Удалить("ДобавленаПустаяДекорация");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатВычисленияУсловия(Форма, ОписаниеОбъекта, Параметры)
	ПараметрыУсловия = Новый Структура;
	ПараметрыУсловия.Вставить("ЗначенияПараметров", Параметры.ЗначенияПараметров);
	ПараметрыУсловия.Вставить("Форма", Форма);
	ПараметрыУсловия.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
	
	Возврат ОбщегоНазначения.ВычислитьВБезопасномРежиме(Параметры.КодУсловия, ПараметрыУсловия);
КонецФункции

&НаСервере
Процедура УстановитьУсловиеЗависимости(СтруктураЗависимостей, ПутьКРеквизиту, СтрокаТаблицы, КодУсловия, Условие)
	Если СтруктураЗависимостей = Неопределено Тогда
		ЗначенияПараметров = Новый Соответствие;
		Если Условие = "В списке"
			Или Условие = "Не в списке" Тогда
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
		СтруктураЗависимостей = Новый Структура;
		СтруктураЗависимостей.Вставить("КодУсловия", КодУсловия);
		СтруктураЗависимостей.Вставить("ЗначенияПараметров", ЗначенияПараметров);
	ИначеЕсли (Условие = "В списке" Или Условие = "Не в списке")
		И ТипЗнч(СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту]) = Тип("СписокЗначений") Тогда
		СтруктураЗависимостей.ЗначенияПараметров[ПутьКРеквизиту].Добавить(СтрокаТаблицы.Значение);
	Иначе
		СтруктураЗависимостей.КодУсловия = СтруктураЗависимостей.КодУсловия + " И " + КодУсловия;
		Если Условие = "В списке" Или Условие = "Не в списке" Тогда
			Значение = Новый СписокЗначений;
			Значение.Добавить(СтрокаТаблицы.Значение);
		Иначе
			Значение = СтрокаТаблицы.Значение;
		КонецЕсли;
		СтруктураЗависимостей.ЗначенияПараметров.Вставить(ПутьКРеквизиту, Значение);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКлючНазначенияФормы(Форма, КлючНазначения)
	
	Если КлючНазначения = Неопределено Тогда
		КлючНазначения = КлючНаборовСвойств(Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта1);
	КонецЕсли;
	
	Если ПустаяСтрока(КлючНазначения) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКлюча = "КлючНаборовСвойств";
	КлючНаборовСвойств = НачалоКлюча + Лев(КлючНазначения + "00000000000000000000000000000000", 32);
	
	НовыйКлюч = НовыйКлючНазначения(Форма.КлючНазначенияИспользования, НачалоКлюча, КлючНаборовСвойств);
	Если НовыйКлюч = Неопределено Тогда
		// Ключ уже дополнен.
		НовыйКлюч = Форма.КлючНазначенияИспользования;
	КонецЕсли;
	
	НовыйКлючПоложения = НовыйКлючНазначения(Форма.КлючСохраненияПоложенияОкна, НачалоКлюча, КлючНаборовСвойств);
	Если НовыйКлючПоложения = Неопределено Тогда
		// Ключ уже дополнен.
		НовыйКлючПоложения = Форма.КлючСохраненияПоложенияОкна;
	КонецЕсли;
	
	СтандартныеПодсистемыСервер.УстановитьКлючНазначенияФормы(Форма, НовыйКлюч, НовыйКлючПоложения);
	
КонецПроцедуры

&НаСервере
Функция КлючНаборовСвойств(Наборы)
	
	ИдентификаторыНаборов = Новый СписокЗначений;
	
	Для каждого ЭлементСписка Из Наборы Цикл
		ИдентификаторыНаборов.Добавить(Строка(ЭлементСписка.Значение.УникальныйИдентификатор()));
	КонецЦикла;
	
	ИдентификаторыНаборов.СортироватьПоЗначению();
	СтрокаИдентификаторов = "";
	
	Для каждого ЭлементСписка Из ИдентификаторыНаборов Цикл
		СтрокаИдентификаторов = СтрокаИдентификаторов + СтрЗаменить(ЭлементСписка.Значение, "-", "");
	КонецЦикла;
	
	Возврат ОбщегоНазначения.КонтрольнаяСуммаСтрокой(СтрокаИдентификаторов);
	
КонецФункции

&НаСервере
Функция НовыйКлючНазначения(ТекущийКлюч, НачалоКлюча, КлючНаборовСвойств)
	
	Позиция = СтрНайти(ТекущийКлюч, НачалоКлюча);
	
	НовыйКлючНазначения = Неопределено;
	
	Если Позиция = 0 Тогда
		НовыйКлючНазначения = ТекущийКлюч + КлючНаборовСвойств;
	
	ИначеЕсли СтрНайти(ТекущийКлюч, КлючНаборовСвойств) = 0 Тогда
		НовыйКлючНазначения = Лев(ТекущийКлюч, Позиция - 1) + КлючНаборовСвойств
			+ Сред(ТекущийКлюч, Позиция + СтрДлина(НачалоКлюча) + 32);
	КонецЕсли;
	
	Возврат НовыйКлючНазначения;
	
КонецФункции

&НаСервере
Процедура УдалитьСтарыеРеквизитыИЭлементы(Форма)
	
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого ОписаниеСвойства Из Форма.Свойства_ОписаниеДополнительныхРеквизитов1 Цикл
		УникальнаяЧасть = СтрЗаменить(ОписаниеСвойства.ИмяРеквизитаЗначение, "ДополнительныйРеквизитЗначение1_", "");
		
		УдаляемыеРеквизиты.Добавить(ОписаниеСвойства.ИмяРеквизитаЗначение);
		Если ОписаниеСвойства.СтрокаСсылочногоТипа Тогда
			УдаляемыеРеквизиты.Добавить("СсылочныйДополнительныйРеквизитЗначение1_" + УникальнаяЧасть);
		КонецЕсли;
		Если ОписаниеСвойства.ЭлементФормыДобавлен Тогда
			Если ОписаниеСвойства.ВыводитьВВидеГиперссылки Тогда
				Форма.Элементы.Удалить(Форма.Элементы["Группа1_" + УникальнаяЧасть]);
			Иначе
				Форма.Элементы.Удалить(Форма.Элементы[ОписаниеСвойства.ИмяРеквизитаЗначение]);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если УдаляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	КонецЕсли;
	
	Для каждого ЭлементСписка Из Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов1 Цикл
		Форма.Элементы.Удалить(Форма.Элементы[ЭлементСписка.Представление]);
	КонецЦикла;
	
	Форма.Свойства_ОписаниеДополнительныхРеквизитов1.Очистить();
	Форма.Свойства_ЭлементыГруппДополнительныхРеквизитов1.Очистить();
	Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ИспользуютсяСвойства(Форма, ДополнительныеПараметры)
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений) Тогда
		ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры);
		Возврат Ложь;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ПроизвольныйОбъект")
		И ДополнительныеПараметры.ПроизвольныйОбъект Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("Объект") Тогда
		ОписаниеОбъекта = ДополнительныеПараметры.Объект;
	Иначе
		ОписаниеОбъекта = Форма.Объект;
	КонецЕсли;
	ТипОбъекта = ТипЗнч(ОписаниеОбъекта.Ссылка);
	ПолноеИмя = Метаданные.НайтиПоТипу(ТипОбъекта).ПолноеИмя();
	
	МассивИмениФормы = СтрРазделить(ПолноеИмя, ".");
	
	ИмяЭлемента = МассивИмениФормы[0] + "_" + МассивИмениФормы[1];
	НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений[ИмяЭлемента];
	
	ИспользуютсяСвойства = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НаборСвойств, "Используется");
	
	Если Не ИспользуютсяСвойства Тогда
		ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ИспользуютсяСвойства;
	
КонецФункции

&НаСервере
Процедура ОтключитьДополнительныеРеквизитыНаФорме(Форма, ДополнительныеПараметры)
	
	МассивРеквизитов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый РеквизитФормы("Свойства_ИспользоватьСвойства1", Новый ОписаниеТипов("Булево")));
	ПараметрыСвойствДобавлены = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Если ДополнительныеПараметры.Свойство("ИмяЭлементаДляРазмещения") Тогда
			Если ТипЗнч(ДополнительныеПараметры.ИмяЭлементаДляРазмещения) = Тип("СписокЗначений") Тогда
				Для Каждого ЭлементСписка Из ДополнительныеПараметры.ИмяЭлементаДляРазмещения Цикл
					Форма.Элементы[ЭлементСписка.Представление].Видимость = Ложь;
				КонецЦикла;
			Иначе
				Форма.Элементы[ДополнительныеПараметры.ИмяЭлементаДляРазмещения].Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	Форма.Свойства_ИспользоватьСвойства1 = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОсновныеОбъектыФормы(Форма, Контекст, СоздатьОписаниеДополнительныхРеквизитов)
	
	ИмяЭлементаДляРазмещения   = Контекст.ИмяЭлементаДляРазмещения;
	ИмяЭлементаКоманднойПанели = Контекст.ИмяЭлементаКоманднойПанели;
	ОтложеннаяИнициализация    = Контекст.ОтложеннаяИнициализация;
	
	Реквизиты = Новый Массив;
	
	// Проверка значения функциональной опции "Использование свойств".
	ОпцияИспользоватьСвойства = Форма.ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения");
	РеквизитИспользоватьСвойства = Новый РеквизитФормы("Свойства_ИспользоватьСвойства1", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитИспользоватьСвойства);
	РеквизитСкрытьУдаленные = Новый РеквизитФормы("Свойства_СкрытьУдаленные1", Новый ОписаниеТипов("Булево"));
	Реквизиты.Добавить(РеквизитСкрытьУдаленные);
	// Дополнительные параметры подсистемы свойства.
	РеквизитПараметрыСвойств = Новый РеквизитФормы("ПараметрыСвойств1", Новый ОписаниеТипов());
	Реквизиты.Добавить(РеквизитПараметрыСвойств);
	
	Если ОпцияИспользоватьСвойства Тогда
		
		РеквизитИспользоватьДопРеквизиты = Новый РеквизитФормы("Свойства_ИспользоватьДопРеквизиты1", Новый ОписаниеТипов("Булево"));
		Реквизиты.Добавить(РеквизитИспользоватьДопРеквизиты);
		
		Если СоздатьОписаниеДополнительныхРеквизитов Тогда
			
			// Добавление реквизита содержащего используемые наборы дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_НаборыДополнительныхРеквизитовОбъекта1", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита описания создаваемых реквизитов и элементов формы.
			ИмяОписания = "Свойства_ОписаниеДополнительныхРеквизитов1";
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
					ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ВладелецДополнительныхЗначений", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"),
					ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"МногострочноеПолеВвода", Новый ОписаниеТипов("Число"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Удалено", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Доступен", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Виден", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Наименование", Новый ОписаниеТипов("Строка"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЭлементФормыДобавлен", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ВыводитьВВидеГиперссылки", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"СтрокаСсылочногоТипа", Новый ОписаниеТипов("Булево"), ИмяОписания));
			
			// Добавление реквизита описания зависимых реквизитов.
			ТаблицаЗависимыхРеквизитов = "Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1";
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				ТаблицаЗависимыхРеквизитов, Новый ОписаниеТипов("ТаблицаЗначений")));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ИмяРеквизитаЗначение", Новый ОписаниеТипов("Строка"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Доступен", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеДоступности", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Виден", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
				
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеВидимости", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ЗаполнятьОбязательно", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"УсловиеОбязательностиЗаполнения", Новый ОписаниеТипов(), ТаблицаЗависимыхРеквизитов));
			
			Реквизиты.Добавить(Новый РеквизитФормы(
				"ВыводитьВВидеГиперссылки", Новый ОписаниеТипов("Булево"), ТаблицаЗависимыхРеквизитов));
			
			// Добавление реквизита содержащего элементы создаваемых групп дополнительных реквизитов.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ЭлементыГруппДополнительныхРеквизитов1", Новый ОписаниеТипов("СписокЗначений")));
			
			// Добавление реквизита с именем элемента в котором будут размещаться поля ввода.
			Реквизиты.Добавить(Новый РеквизитФормы(
				"Свойства_ИмяЭлементаДляРазмещения1", Новый ОписаниеТипов()));
			
			// Добавление команды формы, если установлена роль "ДобавлениеИзменениеДополнительныхРеквизитовИСведений" или это
			// полноправный пользователь.
			Если ПравоДоступа("Изменение", Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений) Тогда
				// Добавление команды.
				Команда = Форма.Команды.Добавить("РедактироватьСоставДополнительныхРеквизитов1");
				Команда.Заголовок = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Действие = "Подключаемый_СвойстваВыполнитьКоманду1";
				Команда.Подсказка = НСтр("ru = 'Изменить состав дополнительных реквизитов'");
				Команда.Картинка = БиблиотекаКартинок.НастройкаСписка;
				
				Кнопка = Форма.Элементы.Добавить(
					"РедактироватьСоставДополнительныхРеквизитов1",
					Тип("КнопкаФормы"),
					?(ИмяЭлементаКоманднойПанели = "",
						Форма.КоманднаяПанель,
						Форма.Элементы[ИмяЭлементаКоманднойПанели]));
				
				Кнопка.ТолькоВоВсехДействиях = Истина;
				Кнопка.ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов1";
			КонецЕсли;
			
			Команда = Форма.Команды.Добавить("РедактироватьГиперссылкуРеквизита1");
			Команда.Заголовок   = НСтр("ru = 'Начать/закончить редактирование'");
			Команда.Действие    = "Подключаемый_СвойстваВыполнитьКоманду1";
			Команда.Подсказка   = НСтр("ru = 'Начать/закончить редактирование'");
			Команда.Картинка    = БиблиотекаКартинок.Изменить;
			Команда.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	Форма.Свойства_ИспользоватьСвойства1 = ОпцияИспользоватьСвойства;
	
	Форма.ПараметрыСвойств1 = Новый Структура;
	
	Если ОпцияИспользоватьСвойства Тогда
		Форма.Свойства_ИспользоватьДопРеквизиты1 = СоздатьОписаниеДополнительныхРеквизитов;
	КонецЕсли;
	
	Если ОпцияИспользоватьСвойства И СоздатьОписаниеДополнительныхРеквизитов Тогда
		Форма.Свойства_ИмяЭлементаДляРазмещения1 = ИмяЭлементаДляРазмещения;
	КонецЕсли;
	
	// Если дополнительные реквизиты расположены на отдельной странице, включена
	// отложенная инициализация и свойства включены, то в страницу размещается пустая декорация.
	// Декорация удаляется автоматически при переключении на закладку.
	// Также блокируется возможность перемещения дополнительных реквизитов из группы.
	//Если ОпцияИспользоватьСвойства
	//	И ОтложеннаяИнициализация
	//	И ИмяЭлементаДляРазмещения <> "" Тогда
	//	Форма.ПараметрыСвойств.Вставить("КоллекцияДекораций");
	//	Форма.ПараметрыСвойств.КоллекцияДекораций = Новый Массив;
	//	
	//	Форма.ПараметрыСвойств.Вставить("ДобавленаПустаяДекорация", Истина);
	//	Если ТипЗнч(ИмяЭлементаДляРазмещения ) = Тип("СписокЗначений") Тогда
	//		Индекс = 0;
	//		Для Каждого ГруппаРазмещения Из ИмяЭлементаДляРазмещения Цикл
	//			ПодготовитьФормуДляОтложеннойИнициализации(Форма, Контекст, ГруппаРазмещения.Представление, Индекс);
	//			Индекс = Индекс + 1;
	//		КонецЦикла;
	//	Иначе
	//		ПодготовитьФормуДляОтложеннойИнициализации(Форма, Контекст, ИмяЭлементаДляРазмещения, "");
	//	КонецЕсли;
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект = Неопределено, ПередЗаписью = Ложь)	
	Приемник = Новый Структура;
	Приемник.Вставить("ПараметрыСвойств1", Неопределено);
	ЗаполнитьЗначенияСвойств(Приемник, Форма);
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства1
		ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты1
		ИЛИ (ТипЗнч(Приемник.ПараметрыСвойств1) = Тип("Структура")
			И Приемник.ПараметрыСвойств1.Свойство("ВыполненаОтложеннаяИнициализация")
			И Не Приемник.ПараметрыСвойств1.ВыполненаОтложеннаяИнициализация) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ОписаниеОбъекта = Форма.Объект;
	Иначе
		ОписаниеОбъекта = Объект;
	КонецЕсли;
	
	СтарыеЗначения = ОписаниеОбъекта.ДополнительныеРеквизиты.Выгрузить();
	ОписаниеОбъекта.ДополнительныеРеквизиты.Очистить();
	
	Для каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов1 Цикл
		
		Значение = Форма[Строка.ИмяРеквизитаЗначение];
		
		Если Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.ТипЗначения.Типы().Количество() = 1
		   И (НЕ ЗначениеЗаполнено(Значение) Или Значение = Ложь) Тогда
			
			Продолжить;
		КонецЕсли;
		
		Если Строка.Удалено Тогда
			Если ЗначениеЗаполнено(Значение) И Не (ПередЗаписью И Форма.Свойства_СкрытьУдаленные1) Тогда
				НайденнаяСтрока = СтарыеЗначения.Найти(Строка.Свойство, "Свойство");
				Если НайденнаяСтрока <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить(), НайденнаяСтрока);
				КонецЕсли;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		// Поддержка строк гиперссылок.
		ИспользоватьСтрокуВВидеСсылки = ИспользоватьСтрокуВВидеСсылки(
			Строка.ТипЗначения, Строка.ВыводитьВВидеГиперссылки, Строка.МногострочноеПолеВвода);
		
		НоваяСтрока = ОписаниеОбъекта.ДополнительныеРеквизиты.Добавить();
		НоваяСтрока.Свойство = Строка.Свойство;
		Если ИспользоватьСтрокуВВидеСсылки Тогда
			АдресИПредставление = АдресИПредставление(Значение);
			НоваяСтрока.Значение = АдресИПредставление.Представление;
		Иначе
			НоваяСтрока.Значение = Значение;
		КонецЕсли;
		
		// Поддержка строк неограниченной длины.
		ИспользоватьНеограниченнуюСтроку = ИспользоватьНеограниченнуюСтроку(
			Строка.ТипЗначения, Строка.МногострочноеПолеВвода);
		
		Если ИспользоватьНеограниченнуюСтроку Или ИспользоватьСтрокуВВидеСсылки Тогда
			НоваяСтрока.ТекстоваяСтрока = Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПередЗаписью Тогда
		Форма.Свойства_СкрытьУдаленные1 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИспользоватьСтрокуВВидеСсылки(ТипЗначенияСвойства, ВыводитьВВидеГиперссылки, МногострочноеПолеВвода)
	СписокТипов = ТипЗначенияСвойства.Типы();
	
	Если Не ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода)
		И СписокТипов.Количество() = 1
		И СписокТипов[0] = Тип("Строка")
		И ВыводитьВВидеГиперссылки Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИспользоватьНеограниченнуюСтроку(ТипЗначенияСвойства, МногострочноеПолеВвода)
	
	Если ТипЗначенияСвойства.СодержитТип(Тип("Строка"))
	   И ТипЗначенияСвойства.Типы().Количество() = 1
	   И (ТипЗначенияСвойства.КвалификаторыСтроки.Длина = 0
		   Или МногострочноеПолеВвода > 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция АдресИПредставление(Строка)
	
	Результат = Новый Структура;
	НачалоВыделения = СтрНайти(Строка, "<a href = ");
	
	СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 9);
	ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
	
	Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
	Если СтрНачинаетсяС(Ссылка, """") Тогда
		Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
		Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
	КонецЕсли;
	
	СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
	КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
	ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
	Результат.Вставить("Представление", ТекстСсылки);
	Результат.Вставить("Ссылка", Ссылка);
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	ОбработкаПроверкиЗаполненияРеквизитовХарактеристик(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияРеквизитовХарактеристик(Форма, Отказ, ПроверяемыеРеквизиты, Объект = Неопределено)
	
	Если НЕ Форма.Свойства_ИспользоватьСвойства1
	 ИЛИ НЕ Форма.Свойства_ИспользоватьДопРеквизиты1 Тогда
		
		Возврат;
	КонецЕсли;
	
	Приемник = Новый Структура;
	Приемник.Вставить("ПараметрыСвойств1", Неопределено);
	ЗаполнитьЗначенияСвойств(Приемник, Форма);
	
	Если ТипЗнч(Приемник.ПараметрыСвойств1) = Тип("Структура")
		И Приемник.ПараметрыСвойств1.Свойство("ВыполненаОтложеннаяИнициализация")
		И Не Приемник.ПараметрыСвойств1.ВыполненаОтложеннаяИнициализация Тогда
		ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект);
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	Для каждого Строка Из Форма.Свойства_ОписаниеДополнительныхРеквизитов1 Цикл
		Если Строка.ЗаполнятьОбязательно И НЕ Строка.Удалено Тогда
			Результат = Истина;
			Если Объект = Неопределено Тогда
				ОписаниеОбъекта = Форма.Объект;
			Иначе
				ОписаниеОбъекта = Объект;
			КонецЕсли;
			
			Для Каждого ЗависимыйРеквизит Из Форма.Свойства_ОписаниеЗависимыхДополнительныхРеквизитов1 Цикл
				Если ЗависимыйРеквизит.ИмяРеквизитаЗначение = Строка.ИмяРеквизитаЗначение
					И ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения <> Неопределено Тогда
					
					Параметры = Новый Структура;
					Параметры.Вставить("ЗначенияПараметров", ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.ЗначенияПараметров);
					Параметры.Вставить("Форма", Форма);
					Параметры.Вставить("ОписаниеОбъекта", ОписаниеОбъекта);
					Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(ЗависимыйРеквизит.УсловиеОбязательностиЗаполнения.КодУсловия, Параметры);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Результат Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Форма[Строка.ИмяРеквизитаЗначение]) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Поле ""%1"" не заполнено.'"), Строка.Наименование),
					,
					Строка.ИмяРеквизитаЗначение,
					,
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	НоваяНоменклатура = Справочники.Номенклатура.СоздатьЭлемент();
	НоваяНоменклатура.ВидНоменклатуры = Объект.ВидНоменклатуры;
	НоваяНоменклатура.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизиты.Выгрузить());
	
	НоваяХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	НоваяХарактеристика.Владелец = Объект.ВидНоменклатуры;
	НоваяХарактеристика.ДополнительныеРеквизиты.Загрузить(Объект.РеквизитыХарактеристик.Выгрузить());
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма, НоваяНоменклатура, Истина);
	ОбновитьЭлементыДополнительныхРеквизитовХарактеристик(ЭтаФорма, НоваяХарактеристика, Истина);

	НастроитьЭлементыДополнительныхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитовХарактеристик(Форма, Объект = Неопределено, СкрытьУдаленные = Неопределено) 
	
	ПеренестиЗначенияИзРеквизитовФормыВОбъект(Форма, Объект);
	
	ЗаполнитьДополнительныеРеквизитыВФорме(Форма, Объект, , СкрытьУдаленные);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыДополнительныхРеквизитов()
	
	Для Каждого Элемент Из Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из Элементы.ГруппаРеквизитыХарактеристик.ПодчиненныеЭлементы Цикл
		
		Если Элемент.Вид = ВидПоляФормы.ПолеВвода Тогда
			
			Если Элемент.МногострочныйРежим <> Истина Тогда
				
				Элемент.РастягиватьПоГоризонтали = Ложь;
				
			Иначе
				
				Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Лево;
				Элемент.РастягиватьПоВертикали   = Ложь;
				Элемент.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
			
		ИначеЕсли Элемент.Вид = ВидПоляФормы.ПолеФлажка Тогда
			
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКешРеквизитовВидаНоменклатуры()
	
	РеквизитыВидаНоменклатурыТепм = Новый Структура;
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонРабочегоНаименованияНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияРабочегоНаименованияНоменклатуры", Ложь);
	РеквизитыВидаНоменклатурыТепм.Вставить("ШаблонНаименованияДляПечатиНоменклатуры", "");
	РеквизитыВидаНоменклатурыТепм.Вставить("ЗапретРедактированияНаименованияДляПечатиНоменклатуры", Ложь);
	
	//РеквизитыВидаНоменклатурыТепм.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПустаяСсылка());
	//РеквизитыВидаНоменклатурыТепм.Вставить("СодержитДрагоценныеМатериалы", Ложь);
	//РеквизитыВидаНоменклатурыТепм.Вставить("ИспользованиеХарактеристик", Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	//РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСерии", Ложь);
	//РеквизитыВидаНоменклатурыТепм.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	//РеквизитыВидаНоменклатурыТепм.Вставить("НаборУпаковок", Справочники.НаборыУпаковок.ИндивидуальныйДляНоменклатуры);
	//РеквизитыВидаНоменклатурыТепм.Вставить("ГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	//РеквизитыВидаНоменклатурыТепм.Вставить("НаборСвойств", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	//РеквизитыВидаНоменклатурыТепм.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ИменаРеквизитов = "";
		Для Каждого КлючЗначение Из РеквизитыВидаНоменклатурыТепм Цикл
			ИменаРеквизитов = ИменаРеквизитов + КлючЗначение.Ключ + ",";
		КонецЦикла;
		
		ИменаРеквизитов = Лев(ИменаРеквизитов,СтрДлина(ИменаРеквизитов) - 1);
		
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидНоменклатуры, ИменаРеквизитов));		
	Иначе
		РеквизитыВидаНоменклатуры = Новый ФиксированнаяСтруктура(РеквизитыВидаНоменклатурыТепм);
	КонецЕсли;
	
	//ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
	
КонецПроцедуры


&НаКлиенте
Процедура ВесИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Вес");
КонецПроцедуры

&НаКлиенте
Процедура ОбъемИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Объем");
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Площадь");
КонецПроцедуры

&НаКлиенте
Процедура ДлинаИспользоватьПриИзменении(Элемент)
	МераИспользоватьПриИзмененииСервер("Длина");
КонецПроцедуры

&НаСервере
Процедура МераИспользоватьПриИзмененииСервер(Мера)
	
	Если Объект[Мера + "Использовать"] Тогда
		Объект[Мера + "Знаменатель"] = 1;
		Объект[Мера + "ЕдиницаИзмерения"] = НоменклатураСервер.ЕдиницаИзмеренияПоУмолчанию(Мера);
	КонецЕсли;
	
	Элементы["Группа"+Мера+"Значения"].Видимость = Объект[Мера + "Использовать"];
	
КонецПроцедуры

&НаКлиенте
Процедура ВесЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ВесЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Вес"));
КонецПроцедуры

&НаКлиенте
Процедура ОбъемЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ОбъемЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Объем"));
КонецПроцедуры

&НаКлиенте
Процедура ПлощадьЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ПлощадьЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Площадь"));
КонецПроцедуры

&НаКлиенте
Процедура ДлинаЕдиницаИзмеренияНажатие(Элемент, СтандартнаяОбработка)
	ЕдиницаИзмеренияНажатие("ДлинаЕдиницаИзмерения", СтандартнаяОбработка, ПредопределенноеЗначение("Перечисление.ТипыИзмеряемыхВеличин.Длина"));
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияНажатие(ИмяПоля, СтандартнаяОбработка, ТипИзмеряемойВеличины)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЕдиницаИзмеренияНажатиеЗавершение", ЭтотОбъект, Новый Структура("ИмяПоля,ТипИзмеряемойВеличины", ИмяПоля,ТипИзмеряемойВеличины));
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипИзмеряемойВеличины", ТипИзмеряемойВеличины);
	
	ОткрытьФорму("Справочник.УпаковкиЕдиницыИзмерения.ФормаВыбора",
				Новый Структура("Отбор,ТекущаяСтрока", Отбор, Объект[ИмяПоля]),
				ЭтотОбъект,
				,
				,
				,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
			
&НаКлиенте
Процедура ЕдиницаИзмеренияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда 
		Объект[ДополнительныеПараметры.ИмяПоля] = Результат;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
						
&НаСервере
Процедура НастроитьЭлементыМеры(Мера)
	
	Элементы["Группа"+Мера+"Значения"].Видимость = Объект[Мера + "Использовать"];	
	
	Если Мера = "Вес" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '                %ЕдиницаИзмерения% весит'");
	ИначеЕсли Мера = "Объем" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '%ЕдиницаИзмерения% занимает объем'");
	ИначеЕсли Мера = "Площадь" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = ' %ЕдиницаИзмерения% имеет площадь'");
	ИначеЕсли Мера = "Длина" Тогда
		ТекстЗаголовкаНадписи = НСтр("ru = '      %ЕдиницаИзмерения% имеет длину'");
	КонецЕсли;
	
	ТекстЗаголовкаНадписи = СтрЗаменить(ТекстЗаголовкаНадписи, "%ЕдиницаИзмерения%", Строка(Объект.ЕдиницаИзмерения));
	Элементы[Мера+"Надпись"].Заголовок = ТекстЗаголовкаНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	НастроитьЭлементыМеры("Вес");
	НастроитьЭлементыМеры("Объем");
	НастроитьЭлементыМеры("Площадь");
	НастроитьЭлементыМеры("Длина")
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ОбновитьЭлементыДополнительныхРеквизитов();
	ОбновитьКешРеквизитовВидаНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура СуществующаяНоменклатураПриИзменении(Элемент)
	ЗаполнитьДанныеПоСуществующейНоменклатуре();
	УстановитьВидимостьДоступность();
	ВидНоменклатурыПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьХарактеристикуПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоСуществующейНоменклатуре()
	ЗаполнитьЗначенияСвойств(Объект, Объект.СуществующаяНоменклатура,,"Наименование, НаименованиеПолное, ДополнительныеРеквизиты");
	Если ЗначениеЗаполнено(Объект.СуществующаяНоменклатура) Тогда
		Объект.ДополнительныеРеквизиты.Загрузить(Объект.СуществующаяНоменклатура.ДополнительныеРеквизиты.Выгрузить());	
		//ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтаФорма, Объект.СуществующаяНоменклатура.ПолучитьОбъект(),,Истина);
	Иначе
		ОбновитьЭлементыДополнительныхРеквизитов();
	КонецЕсли;
	ОбновитьКешРеквизитовВидаНоменклатуры();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	//НоменклатураЗаполнена = ЗначениеЗаполнено(Объект.СуществующаяНоменклатура);
	//Элементы.ГруппаПараметрыНоменклатуры.ТолькоПросмотр = НоменклатураЗаполнена;
	//Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = НоменклатураЗаполнена;
	//Элементы.ГруппаРеквизитыХарактеристик.ТолькоПросмотр = Не НоменклатураЗаполнена;
	//Элементы.ГруппаДополнительныеСвойства.ТолькоПросмотр = НоменклатураЗаполнена;
	//Элементы["ГруппаВесЗначения"].Видимость = Объект["ВесИспользовать"];
	//Элементы["ГруппаОбъемЗначения"].Видимость = Объект["ОбъемИспользовать"];
	//Элементы["ГруппаДлинаЗначения"].Видимость = Объект["ДлинаИспользовать"];
	//Элементы["ГруппаПлощадьЗначения"].Видимость = Объект["ПлощадьИспользовать"];
	//Элементы.ВесЕдиницаИзмерения.Доступность = Не НоменклатураЗаполнена;
	//Элементы.ОбъемЕдиницаИзмерения.Доступность = Не НоменклатураЗаполнена;
	//Элементы.ДлинаЕдиницаИзмерения.Доступность = Не НоменклатураЗаполнена;
	//Элементы.ПлощадьЕдиницаИзмерения.Доступность = Не НоменклатураЗаполнена;
	
	Заголовок = "Заявка на " + ?(Объект.ТипОперации = ПредопределенноеЗначение("Перечисление.АГ_ТипыОперацийЗаявок.Создание"), "создание новой", "изменение");
	Если Объект.СоздаватьНоменклатуру Тогда
		Заголовок = Заголовок + " номенклатуры";
	КонецЕсли;
	Если Объект.СоздаватьХарактеристику Тогда
		Заголовок = Заголовок + ?(Объект.СоздаватьНоменклатуру, " и", "") + " характеристики";	
	КонецЕсли;
	Заголовок = Заголовок + ?(ЗначениеЗаполнено(Объект.Номер), " " + Объект.Номер, "") + ?(ЗначениеЗаполнено(Объект.Дата), " от " + Объект.Дата, "");
	
	Элементы.СуществующаяНоменклатура.Видимость = Объект.СоздаватьХарактеристику И Не Объект.СоздаватьНоменклатуру;
	Элементы.СоздаватьХарактеристику.Видимость = Объект.СоздаватьНоменклатуру;
	Элементы.ГруппаПараметрыНоменклатуры.ТолькоПросмотр = Не Объект.СоздаватьНоменклатуру;
	Элементы.ГруппаНаименования.Видимость = Объект.СоздаватьНоменклатуру;
	Элементы.ГруппаНаименованияХарактеристики.Видимость = Объект.СоздаватьНоменклатуру И Объект.СоздаватьХарактеристику;
	Элементы.ГруппаНаименованияХарактеристики1.Видимость = Объект.СоздаватьХарактеристику И Не Объект.СоздаватьНоменклатуру;
	Элементы.ГруппаДополнительныеРеквизиты.ТолькоПросмотр = Не Объект.СоздаватьНоменклатуру;
	Элементы.ГруппаРеквизитыХарактеристик.Видимость = Объект.СоздаватьХарактеристику;
	Элементы.ГруппаДополнительныеСвойства.ТолькоПросмотр = Не Объект.СоздаватьНоменклатуру;
	Элементы["ГруппаВесЗначения"].Видимость = Объект["ВесИспользовать"];
	Элементы["ГруппаОбъемЗначения"].Видимость = Объект["ОбъемИспользовать"];
	Элементы["ГруппаДлинаЗначения"].Видимость = Объект["ДлинаИспользовать"];
	Элементы["ГруппаПлощадьЗначения"].Видимость = Объект["ПлощадьИспользовать"];
	Элементы.ВесЕдиницаИзмерения.Доступность = Объект.СоздаватьНоменклатуру;
	Элементы.ОбъемЕдиницаИзмерения.Доступность = Объект.СоздаватьНоменклатуру;
	Элементы.ДлинаЕдиницаИзмерения.Доступность = Объект.СоздаватьНоменклатуру;
	Элементы.ПлощадьЕдиницаИзмерения.Доступность = Объект.СоздаватьНоменклатуру;

КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечати");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("Рабочее");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляПечатиХарактеристикиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("ДляПечатиХарактеристики");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРабочееНаименованиеХарактеристикиПоШаблону(Команда)
	
	ЗаполнитьНаименованиеПоШаблонуСервер("РабочееХарактеристики");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеПоШаблонуСервер(ВариантФормирования)
	
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, Объект);
	
	СправочникОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ВариантФормирования = "Рабочее" Тогда
		Объект.Наименование = НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		СправочникОбъект.Наименование = Объект.Наименование;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечати" Тогда
		Объект.НаименованиеПолное = НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
		СправочникОбъект.НаименованиеПолное = Объект.НаименованиеПолное;
	КонецЕсли;
	Если ВариантФормирования = "РабочееХарактеристики" Тогда
		Объект.НаименованиеХарактеристики = НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонРабочегоНаименованияНоменклатуры, СправочникОбъект);
		СправочникОбъект.НаименованиеХарактеристики = Объект.НаименованиеХарактеристики;
	КонецЕсли;
	Если ВариантФормирования = "ДляПечатиХарактеристики" Тогда
		Объект.НаименованиеПолноеХарактеристики = НаименованиеПоШаблону(РеквизитыВидаНоменклатуры.ШаблонНаименованияДляПечатиНоменклатуры, СправочникОбъект);
		СправочникОбъект.НаименованиеПолноеХарактеристики = Объект.НаименованиеПолноеХарактеристики;
	КонецЕсли;

	//ПересчитатьНеобходимостьФормированияНаименований(ЭтотОбъект);
КонецПроцедуры

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
// Параметры:
//	ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры;
//	ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//		СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры - номенклатура или характеристика, для 
//		которой нужно получить наименование по заданному в настройках шаблону.
//
// Возвращаемое значение:
//	Строка - Наименование полученное по алгоритму расчета;
//	Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма;
//
&НаСервере
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник)
	
	ФормулаНаименованияСтруктура = НоменклатураСервер.ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	ФормулаНаименования = """"" + " + СтрЗаменить(ФормулаНаименованияСтруктура.ФормулаНаименования,
		"МассивЗначенийРеквизитов[",
		"Параметры[");
	
	Наименование = "";
	
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Наименование = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
				ФормулаНаименования,
				ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно сформировать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");			
			ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры;						
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции


&НаКлиенте
Процедура КомандаПерейтиФайлы(Команда)
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ИмяГиперссылкиПоИмениКоманды(Команда.Имя));
	ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке);
	
КонецПроцедуры

&НаКлиенте
Функция ИмяГиперссылкиПоИмениКоманды(ИмяКоманды)
	
	ИмяГиперссылки = ИмяКоманды;
	ИмяГиперссылки = СтрЗаменить(ИмяГиперссылки, "Команда", "Гиперссылка");
	
	Возврат ИмяГиперссылки;
	
КонецФункции

&НаКлиенте
Функция ПараметрыПереходаПоГиперссылке(ИмяЭлемента, Гиперссылка = "")
	
	Если ИмяЭлемента = "ГиперссылкаПерейтиФайлы" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
		
		ПараметрыПереходаПоГиперссылке = Новый Структура;
		ПараметрыПереходаПоГиперссылке.Вставить("ИмяФормы", "Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы");
		ПараметрыПереходаПоГиперссылке.Вставить("ПараметрыФормы",ПараметрыФормы);
			
	КонецЕсли;
	
	Если Не ПараметрыПереходаПоГиперссылке.Свойство("РежимОткрытияОкнаФормы") Тогда
		ПараметрыПереходаПоГиперссылке.Вставить("РежимОткрытияОкнаФормы", РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
	ПараметрыПереходаПоГиперссылке.Вставить("ИмяЭлемента", ИмяЭлемента);
	ПараметрыПереходаПоГиперссылке.Вставить("Гиперссылка", Гиперссылка);
	
	Возврат ПараметрыПереходаПоГиперссылке
КонецФункции

&НаКлиенте
Процедура ГиперссылкаПерейтиСформироватьПараметрыИВопрос(ПараметрыПереходаПоГиперссылке)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
		Или Модифицированность Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Переход к дополнительной информации возможен только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ГиперссылкаПерейтиВопросЗавершение", ЭтотОбъект, ПараметрыПереходаПоГиперссылке), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейтиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если Не ЭлементЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПереходаПоГиперссылке = ПараметрыПереходаПоГиперссылке(ДополнительныеПараметры.ИмяЭлемента,
																		ДополнительныеПараметры.Гиперссылка);
	ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке);
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПерейти(ПараметрыПереходаПоГиперссылке)
	
	Если ПараметрыПереходаПоГиперссылке.Свойство("ИмяФормы") Тогда
		//Если ПараметрыПереходаПоГиперссылке.ИмяФормы = "Справочник.Номенклатура.Форма.ФормаСписка" Тогда
		//	Оповестить("ФильтрПоАналогичнымСвойствам_Номенклатура", Объект.Ссылка, Объект.Ссылка);
		//КонецЕсли;
		
		ОткрытьФорму(ПараметрыПереходаПоГиперссылке.ИмяФормы,
			ПараметрыПереходаПоГиперссылке.ПараметрыФормы, , ЭтаФорма.УникальныйИдентификатор, , , ,
			ПараметрыПереходаПоГиперссылке.РежимОткрытияОкнаФормы);
	//ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("НавигационнаяСсылка") Тогда
	//	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(ПараметрыПереходаПоГиперссылке.НавигационнаяСсылка);
	//ИначеЕсли ПараметрыПереходаПоГиперссылке.Свойство("ИмяГруппы") Тогда
	//	Если ЕстьПравоРедактирования Тогда
	//		Элементы.СтраницыКарточкаНоменклатуры.ТекущаяСтраница = Элементы.СтраницаРеквизитыНоменклатуры;
	//		РазвернутьСворачиваемуюГруппу(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
	//		Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Показать();
	//	Иначе
	//		ТабличныйДокумент = ПредставлениеВсплывающейГруппы(ПараметрыПереходаПоГиперссылке.ИмяГруппы);
	//		ТабличныйДокумент.Показать(Элементы[ПараметрыПереходаПоГиперссылке.ИмяГруппы].Заголовок);
	//	КонецЕсли;
	Иначе
		ТекстИсключения = НСтр("ru = 'Не определено действие по гиперссылке.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
КонецПроцедуры



&НаКлиенте
Процедура ВыгрузитьВУТ(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита1(Элемент)
	ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду1(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	ВыполнитьКомандуХарактеристик(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры


&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	
	Элементы.ФормаПроверитьНаДублирование.Доступность = Объект.ЕстьДубли;
	Элементы.ФормаСогласоватьКонтрагента.Видимость = Не Объект.ЕстьДубли;
	Элементы.ФормаСогласоватьКонтрагента.Доступность = (Объект.Статус = ПредопределенноеЗначение("Перечисление.АГ_СтатусыЗаявок.ПодготовкаКПодачеЗаявки"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуХарактеристик(Форма, Элемент  = Неопределено, СтандартнаяОбработка  = Неопределено) 
	
	Если Элемент = Неопределено Тогда
		ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов1";
	ИначеЕсли ТипЗнч(Элемент) = Тип("КомандаФормы") Тогда
		ИмяКоманды = Элемент.Имя;
	Иначе
		ЗначениеРеквизита = Форма[Элемент.Имя];
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			РедактироватьГиперссылкуРеквизита(Форма, Истина, Элемент);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИмяКоманды = "РедактироватьСоставДополнительныхРеквизитов1" Тогда
		РедактироватьСоставСвойств(Форма);
	ИначеЕсли ИмяКоманды = "РедактироватьГиперссылкуРеквизита1" Тогда
		РедактироватьГиперссылкуРеквизита(Форма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСоставСвойств(Форма)
	
	Наборы = Форма.Свойства_НаборыДополнительныхРеквизитовОбъекта1;
	
	Если Наборы.Количество() = 0
	 ИЛИ НЕ ЗначениеЗаполнено(Наборы[0].Значение) Тогда
		
		ПоказатьПредупреждение(,
			НСтр("ru = 'Не удалось получить наборы дополнительных реквизитов объекта.
			           |
			           |Возможно у объекта не заполнены необходимые реквизиты.'"));
	
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
		
		ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
		
		ПараметрыПерехода = Новый Структура;
		ПараметрыПерехода.Вставить("Набор", Наборы[0].Значение);
		ПараметрыПерехода.Вставить("Свойство", Неопределено);
		ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
		
		ДлинаНачала = СтрДлина("ДополнительныйРеквизитЗначение1_");
		ЭтоПолеФормы = (ТипЗнч(Форма.ТекущийЭлемент) = Тип("ПолеФормы"));
		Если ЭтоПолеФормы И ВРег(Лев(Форма.ТекущийЭлемент.Имя, ДлинаНачала)) = ВРег("ДополнительныйРеквизитЗначение1_") Тогда
			
			ИдентификаторНабора   = СтрЗаменить(Сред(Форма.ТекущийЭлемент.Имя, ДлинаНачала +  1, 36), "x","-");
			ИдентификаторСвойства = СтрЗаменить(Сред(Форма.ТекущийЭлемент.Имя, ДлинаНачала + 38, 36), "x","-");
			
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(НРег(ИдентификаторНабора)) Тогда
				ПараметрыПерехода.Вставить("Набор", ИдентификаторНабора);
			КонецЕсли;
			
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(НРег(ИдентификаторСвойства)) Тогда
				ПараметрыПерехода.Вставить("Свойство", ИдентификаторСвойства);
			КонецЕсли;
		КонецЕсли;
		
		Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьГиперссылкуРеквизита(Форма, ПереходПоГиперссылке = Ложь, Элемент = Неопределено)
	Если Не ПереходПоГиперссылке Тогда
		ИмяКнопки = Форма.ТекущийЭлемент.Имя;
		УникальнаяЧасть = СтрЗаменить(ИмяКнопки, "Кнопка_", "");
		ИмяРеквизита = "ДополнительныйРеквизитЗначение1_" + УникальнаяЧасть;
	Иначе
		ИмяРеквизита = Элемент.Имя;
		УникальнаяЧасть = СтрЗаменить(ИмяРеквизита, "ДополнительныйРеквизитЗначение1_", "");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИмяРеквизитаЗначение", ИмяРеквизита);
	
	ОписаниеРеквизитов = Форма.Свойства_ОписаниеДополнительныхРеквизитов1.НайтиСтроки(ПараметрыОтбора);
	Если ОписаниеРеквизитов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	ОписаниеРеквизита = ОписаниеРеквизитов[0];
	
	Если Не ОписаниеРеквизита.СтрокаСсылочногоТипа Тогда
		Если Форма.Элементы[ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода Тогда
			Форма.Элементы[ИмяРеквизита].Вид = ВидПоляФормы.ПолеНадписи;
			Форма.Элементы[ИмяРеквизита].Гиперссылка = Истина;
		Иначе
			Форма.Элементы[ИмяРеквизита].Вид = ВидПоляФормы.ПолеВвода;
			Если ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектов"))
				ИЛИ ОписаниеРеквизита.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия")) Тогда
				ПараметрВыбора = ?(ЗначениеЗаполнено(ОписаниеРеквизита.ВладелецДополнительныхЗначений),
					ОписаниеРеквизита.ВладелецДополнительныхЗначений, ОписаниеРеквизита.Свойство);
				ПараметрыВыбораМассив = Новый Массив;
				ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ПараметрВыбора));
				
				Форма.Элементы[ИмяРеквизита].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяРеквизита", ИмяРеквизита);
	ПараметрыОткрытия.Вставить("ТипЗначения", ОписаниеРеквизита.ТипЗначения);
	ПараметрыОткрытия.Вставить("НаименованиеРеквизита", ОписаниеРеквизита.Наименование);
	ПараметрыОткрытия.Вставить("СтрокаСсылочногоТипа", ОписаниеРеквизита.СтрокаСсылочногоТипа);
	ПараметрыОткрытия.Вставить("ЗначениеРеквизита", Форма[ИмяРеквизита]);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	Если ОписаниеРеквизита.СтрокаСсылочногоТипа Тогда
		ПараметрыОткрытия.Вставить("ИмяРеквизитаСсылки", "СсылочныйДополнительныйРеквизитЗначение1_" + УникальнаяЧасть);
	Иначе
		ПараметрыОткрытия.Вставить("Свойство", ОписаниеРеквизита.Свойство);
		ПараметрыОткрытия.Вставить("ВладелецДополнительныхЗначений", ОписаниеРеквизита.ВладелецДополнительныхЗначений);
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьГиперссылкуРеквизитаЗавершение", УправлениеСвойствамиКлиент, Форма);
	ОткрытьФорму("ОбщаяФорма.РедактированиеГиперссылки", ПараметрыОткрытия,,,,, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьГиперссылкуРеквизитаЗавершение(Результат, ДополнительныеПараметры)
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры;
	Форма[Результат.ИмяРеквизита] = Результат.Значение;
	Если Результат.СтрокаСсылочногоТипа Тогда
		Форма[Результат.ИмяРеквизитаСсылки] = Результат.ФорматированнаяСтрока;
	КонецЕсли;
	Форма.Модифицированность = Истина;
КонецПроцедуры



#Область ПроверкаНаДублирование

&НаКлиенте
Процедура ПроверитьНаДублирование(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Наименование) Тогда
		Сообщить("Наименование не заполнено");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СуществующаяНоменклатура) Тогда
		Дубль = ПроверитьНаДублированиеНаСервереНоменклатуру(Объект.Наименование);
		Если ТипЗнч(Дубль) = Тип("СправочникСсылка.Номенклатура") Тогда
			Предупреждение("В базе существует номенклатура " + Дубль + " с указанным наименованием");
			Объект.ЕстьДубли = Истина;
		Иначе
			Сообщить("Дубли не найдены");
			Объект.ЕстьДубли = Ложь;
		КонецЕсли;
	Иначе
		Дубль = ПроверитьНаДублированиеНаСервереХарактеристику(Объект.Наименование, Объект.СуществующаяНоменклатура);
		Если ТипЗнч(Дубль) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Предупреждение("В базе существует характеристика " + Дубль + " с указанным наименованием");
			Объект.ЕстьДубли = Истина;
		Иначе
			Сообщить("Дубли не найдены");
			Объект.ЕстьДубли = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаДублированиеНаСервереНоменклатуру(Наименование)
	Возврат Документы.АГ_ЗаявкаНаСозданиеИзменениеНовогоЭлементаНоменклатуры.ПроверитьНаДублированиеНоменклатуру(Наименование);	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаДублированиеНаСервереХарактеристику(Наименование, Номенклатура)
	Возврат Документы.АГ_ЗаявкаНаСозданиеИзменениеНовогоЭлементаНоменклатуры.ПроверитьНаДублированиеХарактеристику(Наименование, Номенклатура);	
КонецФункции

#КонецОбласти

#Область Согласование

&НаКлиенте
Процедура СогласоватьНоменклатуру(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтотОбъект, Объект.Ссылка);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения,,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		СоздатьБизнесПроцесс(ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Создает бизнес-процесс. При передаче в качестве предмета ссылки на объект ИС создает связанный
// объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка - ссылка на объект интегрируемой системы, или
//           - Структура - описание объекта ДО, со свойствами:
//               id - Строка - идентификатор;
//               type - Строка - тип;
//               name - Строка - наименование предмета.
//   ГлавнаяЗадача - Ссылка - описание главной задачи бизнес-процесса:
//     id - Строка - идентификатор;
//     type - Строка - тип;
//     name - Строка - наименование главной задачи.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура СоздатьБизнесПроцесс(Предмет = Неопределено, ГлавнаяЗадача = Неопределено,
	ОписаниеОповещения = Неопределено)
	
	Параметры1 = Новый Структура;
	Параметры1.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
	Параметры1.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры1.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО",
		ЭтаФорма,
		Параметры1);
	
	Если Предмет = Неопределено
		Или ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		НачатьПоискСвязанногоОбъектаДО(Предмет, ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет поиск связанного объекта ДО, при необходимости создавая его на основании объекта ИС 
// с заполнением по правилам интеграции, если подходящее правило существует.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, для которого разыскивается связанный объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания с
//     передачей в качестве параметра Структуры (id, type, name).
//
Процедура НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения) Экспорт
	
	Результат = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(ОбъектИС);
		
	Если Результат <> Неопределено Тогда // найден
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - описание предмета-объекта ДО (id, type, name), или 
//             - Неопределено, если предмет не выбран.
//   Параметры - Структура - см. СоздатьБизнесПроцесс.
//
Процедура СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО(Результат, Параметры1) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры1.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры1.Предмет = Результат;
	КонецЕсли;
	
	// получение дерева шаблонов процессов.
	//Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		
		//ОписаниеОповещения = Параметры.ОписаниеОповещения;
		//Параметры.ОписаниеОповещения = Неопределено;
		//
		//ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",
		//	Параметры,,,,, ОписаниеОповещения);
		
	//Иначе
	//	
	//	Оповещение = Новый ОписаниеОповещения("ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение", 
	//		ЭтотОбъект, Параметры);
	//	 
	//	НачатьВыборТипаБизнесПроцесса(Оповещение);
		
	//КонецЕсли;
	
	СоздатьБизнесПроцессНаСервере(Параметры1.Предмет);
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьБизнесПроцессНаСервере(ПараметрПредмет)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();	
	
	Предмет = ПараметрПредмет.name;
	ПредметID = ПараметрПредмет.id;
	ПредметТип = ПараметрПредмет.type;
	ВидДокументаID = "";
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПолучатьВидДокумента = Ложь;
		Если НЕ ЗначениеЗаполнено(ВидДокументаID) Тогда 
			// пакетные запросы
			Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
				ПолучатьВидДокумента = Истина;
			Иначе
				Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
				ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПредметID, ПредметТип);
				Запрос.objectIds.Добавить(ОбъектИд);
				Запрос.columnSet.Добавить("documentType");
				Результат = Прокси.execute(Запрос);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
				Объект1 = Результат.objects[0];
				Если Найти(Объект1.objectID.type,"Document") <> 0 Тогда
					ВидДокумента = Объект1.documentType.name;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента);
	Иначе
		ЗаполнитьДеревоШаблонов();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента = Ложь)
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Если ПолучатьВидДокумента Тогда
		
		Пакет =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПредметID, ПредметТип);
		Запрос.objectIds.Добавить(ОбъектИд);
		Запрос.columnSet.Добавить("documentType");
		
		Пакет.requests.Добавить(Запрос);
		
	КонецЕсли;
		
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessTemplatesTreeRequest");
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = ПредметID;
		ПредметБизнесПроцессаИд.type = ПредметТип;
    	Запрос.businessProcessTargetID = ПредметБизнесПроцессаИд;
	КонецЕсли;

	Если ПолучатьВидДокумента Тогда
		Пакет.requests.Добавить(Запрос);
		Результаты = Прокси.execute(Пакет);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результаты);
		
		РезультатВидДокумента = Результаты.responses[0];
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатВидДокумента);
		Объект1 = РезультатВидДокумента.objects[0];
		Если Найти(Объект1.objectID.type,"Document") <> 0 Тогда
			ВидДокумента = Объект1.documentType.name;
		КонецЕсли;
		
		РезультатДеревоШаблонов = Результаты.responses[1];
		
	Иначе
		РезультатДеревоШаблонов = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДеревоШаблонов);
	КонецЕсли;
	
	ПорядокБизнесПроцессов = новый Массив();
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOrder");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessApproval");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessPerformance");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConsideration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessAcquaintance");
	ПорядокБизнесПроцессов.Добавить("DMComplexBusinessProcess");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessRegistration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConfirmation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInvitation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOutgoingDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInternalDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessIncomingDocumentProcessing");
	
	СкрытьПоручения = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.0.0");
	
	Для каждого Раздел из РезультатДеревоШаблонов.BusinessProcessTemplatesTree Цикл
		
		РазделДерева = Дерево.Строки.Добавить();
		РазделДерева.Наименование = Раздел.name;
		РазделДерева.Подсказка = Раздел.hint;
		РазделДерева.ЭтоЗаголовок = Истина;
		
		Если РазделДерева.Наименование = "Другие шаблоны" Тогда
			РазделДерева.Развернуть = Ложь;
		Иначе
			РазделДерева.Развернуть = Истина;
		КонецЕсли;
		
		Для каждого Шаблон из Раздел.elements Цикл
			
			Если СкрытьПоручения
				И Шаблон.businessProcessType = "DMBusinessProcessOrder" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРаздела = РазделДерева.Строки.Добавить();
			СтрокаРаздела.Наименование = Шаблон.name;
			СтрокаРаздела.Подсказка = Шаблон.hint;
			СтрокаРаздела.ЭтоЗаголовок = Ложь;
			СтрокаРаздела.ТипПроцесса = Шаблон.businessProcessType;
			Если ЗначениеЗаполнено(Шаблон.template.objectID.id) Тогда
				СтрокаРаздела.ШаблонID = Шаблон.template.objectID.id;
				СтрокаРаздела.ШаблонТип = Шаблон.template.objectID.type;
			Иначе
				СтрокаРаздела.Индекс = ПорядокБизнесПроцессов.Найти(СтрокаРаздела.ТипПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделДерева.Строки.Сортировать("Индекс");
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	
	Данные = Дерево.Строки.Найти("Согласование Заявки НСИ (Номенклатура)", "Наименование", Истина);
	Если Данные = Неопределено Тогда
		Сообщить("Не найден подходящий шаблон или процесс");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПредметБизнесПроцесса = Новый Структура;
	ПредметБизнесПроцесса.Вставить("id", ПредметID);
	ПредметБизнесПроцесса.Вставить("type", ПредметТип);
	ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
	
	Если Не ЗначениеЗаполнено(Данные.ШаблонID) Тогда
		Сообщить("Заполнены не все данные в шаблоне или процессе");
		Возврат;		
	КонецЕсли;
	
	ШаблонБизнесПроцесса = Новый Структура;
	ШаблонБизнесПроцесса.Вставить("id", Данные.ШаблонID);
	ШаблонБизнесПроцесса.Вставить("type", Данные.ШаблонТип);
	ПараметрыФормы.Вставить("Шаблон", ШаблонБизнесПроцесса);
				
	Если ЗаполнитьСтартоватьПроцесс(Данные.ТипПроцесса, ПараметрыФормы) Тогда
		Сообщить("Процесс запущен");
		Объект.Статус = Перечисления.АГ_СтатусыЗаявок.Согласование;
	Иначе
		Сообщить("Что-то пошло не так!");
	КонецЕсли;
		
				
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыЗапуска)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
	Если ПараметрыЗапуска.Свойство("Предмет") Тогда
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон, ПараметрыЗапуска.Предмет);
	Иначе
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон);
	КонецЕсли;
	
	НовыйПроцесс = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ШаблонПроцесса.ObjectId.type);
	ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйПроцесс, ШаблонПроцесса);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, НовыйПроцесс);
		
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, РезультатЗапуска, "DMError") Тогда
		Возврат Ложь;
	Иначе
		ПроцессID = РезультатЗапуска.businessProcess.ObjectID.id;
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуПервая(Команда)

	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуВторая(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласованСЗамечаниями", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуТретья(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументНеСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

#КонецОбласти



