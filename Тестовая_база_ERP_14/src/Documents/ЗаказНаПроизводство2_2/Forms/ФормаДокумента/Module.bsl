#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриЧтенииСозданииНаСервере();
		
	КонецЕсли;
	
	Если Параметры.Свойство("ВыбраннаяСтрока") Тогда
		
		ИдентификаторАктивнойСтроки = НайтиСтрокуПоДаннымСтроки(Параметры.ВыбраннаяСтрока)
		
	КонецЕсли;
	
	#Область УниверсальныеМеханизмы
	
	// Документ основание
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"ДокументОснование", "Видимость", ЗначениеЗаполнено(Объект.ДокументОснование));

	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Настройка команд буфера обмена
	УстановитьДоступностьКомандБуфераОбмена();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если ЗаказЗапланирован() Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИдентификаторАктивнойСтроки <> Неопределено Тогда
		
		Элементы.Содержание.ТекущаяСтраница = Элементы.СтраницаПродукция;
		Элементы.Продукция.ТекущаяСтрока = ИдентификаторАктивнойСтроки;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
		
		ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа" Тогда
		
		ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора <> Неопределено
		И ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВводДолиСтоимости" Тогда
		
		ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Модифицированность = Истина;
		ОбработкаВводаДолиСтоимости(ТекущийЭлемент, ТекущиеДанные, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ОсновныеСпецификации" Тогда
		
		Если Параметр = Неопределено ИЛИ Параметр.Номенклатура = Неопределено Тогда
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации();
			
		Иначе
			
			ЗаполнитьСлужебныеРеквизитыПоСпецификации(Параметр.Номенклатура);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ЭтапыПроизводства" Тогда
		
		Если Параметр = Неопределено
			ИЛИ Параметр.Свойство("Распоряжения") И Параметр.Распоряжения.Найти(Объект.Ссылка) <> Неопределено Тогда
			ПроверитьЗаблокироватьРеквизитыДокумента();
		КонецЕсли;
		
		ОбновитьСостояниеГиперссылкиЭтапыЗаказа();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеПоследовательностиЭтапов" Тогда
		
		ОбновитьСостояниеГиперссылкиЭтапыЗаказа();
		
	КонецЕсли;
	
	Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
		
		УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
		
	КонецЕсли;
	
	// Обработчик механизма "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();

	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизиты();
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Продукция);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Продукция);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Продукция);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если ЗаказЗапланирован() Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЗаказНаПроизводство", Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	СкрыватьОтмененныеСтроки = Настройки.Получить("СкрыватьОтмененныеСтроки");
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапки

&НаКлиенте
Процедура СодержаниеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ПриИзмененииДатыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ЗаполнитьСлужебныеРеквизитыПоСпецификации();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ХозяйственнаяОперацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПроизводственногоПроцессаПриИзменении(Элемент)
	
	ТипПроизводственногоПроцессаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказПодДеятельностьОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыПродукция

&НаКлиенте
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные);
		
		Если Не Копирование Тогда
			ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
			ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущиеДанные, "СтатьяРасходов");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ПроизводствоКлиент.НеобходимоРассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(
			Элемент, ПараметрыРаспределенияЗатрат, ПродукцияКешТекущейСтроки, НоваяСтрока) Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияПослеУдаления(Элемент)
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если (Поле = Элементы.ПродукцияДоляСтоимостиПроцент
			ИЛИ Поле = Элементы.ПродукцияЕстьОшибкиЗаполненияДолиСтоимости)
		И Объект.СпособРаспределенияЗатратНаВыходныеИзделия <> ПредопределенноеЗначение("Перечисление.СпособыРаспределенияЗатратНаВыходныеИзделия.ПоДолямСтоимости") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
		И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект.НачатьНеРанее,
		Объект.Подразделение,
		ПараметрыВыбораСпецификаций,
		,
		Истина);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если ТекущаяСтрока.СписатьНаРасходы
	 Или ТекущаяСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		ТекущаяСтрока.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Иначе
		ТекущаяСтрока.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	КонецЕсли;
	
	ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущаяСтрока);
	
	ПриИзмененииСписатьНаРасходы("Продукция");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	Если Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
		И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Продукция"));
	
	СтруктураЗаполненияСпецификации = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыДействияПроверитьЗаполнитьСпецификацию(
		Объект.НачатьНеРанее,
		Объект.Подразделение,
		ПараметрыВыбораСпецификаций,
		,
		Истина);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСпецификацию", СтруктураЗаполненияСпецификации);
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
		ТекущаяСтрока,
		СтруктураДействий,
		Объект.ТипПроизводственногоПроцесса,
		ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияПриИзменении(Элемент)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ЗаполнитьСлужебныеРеквизитыПоСпецификации(ДанныеСтроки.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСпецификацияОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеСтроки = Элементы.Продукция.ТекущиеДанные;
	ДанныеСтроки.ВыбранаОсновнаяСпецификация = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтмененоПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Продукция.ТекущиеДанные;
	
	Если Не ТекущаяСтрока.Отменено Тогда
		ТекущаяСтрока.ПричинаОтмены = ПредопределенноеЗначение("Справочник.ПричиныОтменыПроизводства.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСписатьНаРасходыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	Если ТекущиеДанные.ТипНоменклатуры <> ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
		
		Если ТекущиеДанные.СписатьНаРасходы Тогда
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Склад) Тогда
				ТекущиеДанные.Склад         = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
				ТекущиеДанные.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
			КонецЕсли;
			
			ЗаполнитьСкладПоУмолчаниюВСтроке(ЭтаФорма, ТекущиеДанные);
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ПриИзмененииСписатьНаРасходы("Продукция");

КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", Элементы.Продукция.ТекущаяСтрока);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СтатьяРасходовВыборЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПараметрыВыбораСтатьи = Новый Массив;
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиРасходов", Истина));
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("ДополнитьСтатьямиАктивовПассивов", Истина));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация",
								   ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеТоваровПоТребованию")));
	
	МассивВариантов = Новый Массив;
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаПроизводственныеЗатраты"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы"));
	МассивВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРаспределенияРасходов.НеРаспределять"));
	
	ПараметрыВыбораСтатьи.Добавить(Новый ПараметрВыбора("Отбор.ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантов)));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья"          , Элементы.Продукция.ТекущиеДанные.СтатьяРасходов);
	ПараметрыФормы.Вставить("ПараметрыВыбора" , Новый ФиксированныйМассив(ПараметрыВыбораСтатьи));
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьи", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяРасходовВыборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Объект.Продукция.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	Строка.СтатьяРасходов = Результат;
	
	ПродукцияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСтатьяРасходовПриИзменении(Элемент)
	
	ПродукцияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		ПродажиКлиент.НачалоВыбораАналитикиРасходов(Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтандартнаяОбработка = Ложь;
		Модифицированность   = Истина;
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(Текст) И ТекущиеДанные.АналитикаРасходовЗаказРеализация Тогда
		
		СтандартнаяОбработка = Ложь;
		
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияАналитикаРасходовОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыДополнительно

&НаКлиенте
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзменении(Элемент)
	
	СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СпособРаспределенияЗатратНаВыходныеИзделияПриИзмененииНаСервере()
	
	ПараметрыРаспределенияЗатратСтруктура = Документы.ЗаказНаПроизводство2_2.ПараметрыРаспределенияЗатрат(Объект);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(ПараметрыРаспределенияЗатратСтруктура);
	
	ПроизводствоСервер.РассчитатьДолюСтоимости(Объект, ПараметрыРаспределенияЗатрат);
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область КоманднаяПанельФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействие(Команда)
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для перехода в рабочее место ""Структура заказа"" необходимо провести документ.';
							|en = 'Post the document to go to the Order structure workplace.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСтруктуруЗаказаДействиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ОткрытьСтруктуруЗаказа();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказаДействиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		ОткрытьСтруктуруЗаказа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ПодвалФормы

&НаКлиенте
Процедура ДекорацияЭтапыЗаказаНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураБыстрогоОтбора = Новый Структура;
	СтруктураБыстрогоОтбора.Вставить("Распоряжение", Объект.Ссылка);
	
	ПараметрыСпискаЭтапов = Новый Структура;
	ПараметрыСпискаЭтапов.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму("Документ.ЭтапПроизводства2_2.ФормаСписка", ПараметрыСпискаЭтапов, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРедактироватьЭтапыНажатие(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству") Тогда
		
		ТекстСообщения = НСтр("ru = 'Планирование этапов возможно только для заказов в статусе ""%Статус%""';
								|en = 'Stage planning is available only for orders in the ""%Статус%"" status'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Статус%",
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Статус");
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для редактирования этапов заказа необходимо провести документ.';
							|en = 'Post the document to edit order stages.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияРедактироватьЭтапыНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		РедактироватьЭтапы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРедактироватьЭтапыНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		РедактироватьЭтапы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтразитьВыполненныйЭтапНажатие(Элемент)
	
	Если Не Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству") Тогда
		
		ТекстСообщения = НСтр("ru = 'Отражение выполненных этапов возможно только для заказов в статусе ""%Статус%""';
								|en = 'Recording of completed stages is available only for orders in the ""%Статус%"" status'");
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%Статус%",
			ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,, "Статус");
		
		Возврат;
		
	КонецЕсли;
	
	Если Не Объект.Проведен Или Модифицированность Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Провести и продолжить?';
													|en = 'Post and continue?'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		ТекстВопроса = НСтр("ru = 'Для отражения выполненных этапов необходимо провести документ.';
							|en = 'Post the document to record completed stages.'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияОтразитьВыполненныйЭтапНажатиеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки);
		
	Иначе
		
		ОтразитьВыполненныйЭтап();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтразитьВыполненныйЭтапНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.ПринудительноЗакрытьФорму = Ложь;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
	ПараметрыЗаписи.Вставить("ПринудительноЗакрытьФорму", Ложь);
	ПараметрыЗаписи.Вставить("НовыйОбъект", Не ЗначениеЗаполнено(Объект.Ссылка));
	
	Если Записать(ПараметрыЗаписи) Тогда
		ОтразитьВыполненныйЭтап();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтраницаПродукция

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%';
							|en = 'Select goods in %Документ%'");
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
		
	Иначе
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'заказ на производство';
																				|en = 'production order'"));
		
	КонецЕсли;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Товар"));
	
	Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
	 Или Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
	 
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.МногооборотнаяТара"));
		МассивТиповНоменклатуры.Добавить(ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа"));
	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         	 Истина);
	ПараметрыФормы.Вставить("РежимПодбораИспользоватьСкладыВТабличнойЧасти", Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    	 Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          	 Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 	 ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                     	 Объект.Дата);
	ПараметрыФормы.Вставить("Документ",                                 	 Объект.Ссылка);
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                       Новый ФиксированныйМассив(МассивТиповНоменклатуры));
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам",                          Истина);
		
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияЗаполнитьПоЗаказамДавальца(Команда)
	
	ПараметрыОтбора = Новый Структура("Организация, НаправлениеДеятельности, Партнер, Договор, ТипПроизводственногоПроцесса");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Объект);
	ПараметрыОтбора.Вставить("УправлениеПроизводством2_2", Истина);
	ПараметрыФормы = Новый Структура("Отбор, МножественныйВыбор", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ЗаказДавальца.Форма.ФормаВыбораЗаказа",ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	Если Элементы.Продукция.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРазбиенияСтроки = ОбщегоНазначенияУТКлиент.ПараметрыРазбиенияСтроки();
	ПараметрыРазбиенияСтроки.РазрешитьНулевоеКоличество = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(Объект.Продукция, Элементы.Продукция, Оповещение, ПараметрыРазбиенияСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	Если НоваяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Продукция.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
		ТекущиеДанные,
		СтруктураДействий,
		Объект.ТипПроизводственногоПроцесса,
		ПараметрыРаспределенияЗатрат);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
	МассивСтрок.Добавить(НоваяСтрока.ПолучитьИдентификатор());
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);

КонецПроцедуры

&НаКлиенте
Процедура Спецификации_НазначитьОсновной(Команда)
	
	ОчиститьСообщения();
	
	КоллекцияДанных = Новый Массив;
	НачалоПроизводства = ПериодНачалаПроизводства(Объект.НачатьНеРанее);
	
	Для каждого ИдентификаторСтроки Из Элементы.Продукция.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Объект.Продукция.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Номенклатура.Пустая() 
			ИЛИ ТекущиеДанные.Спецификация.Пустая() Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДанныеСтроки = Новый Структура;
		
		ДанныеСтроки.Вставить("Номенклатура",   ТекущиеДанные.Номенклатура);
		ДанныеСтроки.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ДанныеСтроки.Вставить("Спецификация",   ТекущиеДанные.Спецификация);
		ДанныеСтроки.Вставить("НачатьНеРанее",  НачалоПроизводства);
		ДанныеСтроки.Вставить("НомерСтроки",    ТекущиеДанные.НомерСтроки);
		
		КоллекцияДанных.Добавить(ДанныеСтроки);
		
	КонецЦикла; 
	
	// В зависимости от количества выбранных строк вызовем нужную обработку
	Если КоллекцияДанных.Количество() = 1 Тогда
		
		// Выбрана одна строка, поэтому лучше вызывать стандартную обработку
		УправлениеДаннымиОбИзделияхКлиент.НазначитьОсновнойСпецификациейДляВсехПодразделений(
														КоллекцияДанных[0].Номенклатура,
														КоллекцияДанных[0].Характеристика,
														КоллекцияДанных[0].Спецификация);
		
	ИначеЕсли КоллекцияДанных.Количество() <> 0 Тогда
		
		// Выбрано несколько строк, поэтому вызовем специальную обработку
		ЕстьОшибки = НЕ НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных);
		Если ЕстьОшибки Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не все спецификации назначены основными.';
														|en = 'Not all bills of materials are assigned as main ones.'"),,
				НСтр("ru = 'Назначить стандартную спецификацию основной';
					|en = 'Set standard BOR as the main one'")); 
		КонецЕсли;
		УправлениеДаннымиОбИзделияхКлиент.ОповеститьОЗаписиОсновнойСпецификации();
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СоздатьКорректировкуНазначенияРезервирование(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Истина, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для резервирования под назначение необходимо предварительно провести документ.';
										|en = 'To reserve for assignment, post the document first.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерРезервирования(ОписаниеКоманды);
		Иначе
			СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва(Команда)
	
	СтруктураОбъектаОснования = ПолучитьОбъектОснования();
	
	ОбъектыОснований = Новый Массив();
	ОбъектыОснований.Добавить(СтруктураОбъектаОснования.ОбъектОснования);
	
	ОписаниеКоманды = Новый Структура();
	ОписаниеКоманды.Вставить("ОбъектыОснований", ОбъектыОснований);
	ОписаниеКоманды.Вставить("Форма", ЭтаФорма);
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется") Тогда
		МинимальныйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству");
		ОбеспечениеКлиент.СообщитьОНеобходимомМинимальномСтатусеДокумента(Ложь, МинимальныйСтатус);
	ИначеЕсли Модифицированность Или Не СтруктураОбъектаОснования.Проведен Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для снятия резерва под назначение необходимо предварительно провести документ.';
										|en = 'To remove from reserve for assignment, post the document first.'"));
	Иначе
		
		Если ЕстьТоварыКОбособленномуОбеспечению() Тогда
			СозданиеНаОснованииУТКлиент.ОткрытьМастерСнятияРезерва(ОписаниеКоманды);
		Иначе
			СообщитьОбОтсутствииТовараКОбособленномуОбеспечению();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Спецификации_Заполнить(Команда)
	
	Если Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В таблице отсутствуют выделенные строки. Выделите строки для заполнения реквизита ""Спецификация""';
										|en = 'No lines are selected in the table. Select lines to fill in the BOM attribute'"));
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(Элементы.Продукция.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтроки(Команда)
	
	Если Объект.Продукция.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Табличная часть не заполнена.';
													|en = 'Tabular section is not filled in.'"));
		Возврат;
	ИначеЕсли Элементы.Продукция.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В табличной части отсутствуют выделенные строки.';
													|en = 'There are no selected lines in the tabular section.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.ПричиныОтменыПроизводства.ФормаВыбора",
		,
		,
		,
		,
		,
		Новый ОписаниеОповещения("ПродукцияОтменитьВыделенныеСтрокиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияОтменитьВыделенныеСтрокиЗавершение(ПричинаОтмены, ДополнительныеПараметры) Экспорт
	
	Если ПричинаОтмены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Продукция.ВыделенныеСтроки;
	ПродукцияОтменитьВыделенныеСтрокиЗавершениеСервер(ВыделенныеСтроки, ПричинаОтмены);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Выделенные строки отменены';
			|en = 'Selected lines are canceled'"),
		,
		НСтр("ru = 'Выделенные строки заказа отменены.';
			|en = 'Selected order lines are canceled.'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОтменитьВыделенныеСтрокиЗавершениеСервер(Знач ВыделенныеСтроки, ПричинаОтмены)
	
	Для каждого Идентификатор Из ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
		
		Если СтрокаТаблицы <> Неопределено Тогда
			
			СтрокаТаблицы.ПричинаОтмены = ПричинаОтмены;
			
			Если Не СтрокаТаблицы.Отменено Тогда
				СтрокаТаблицы.Отменено = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродукцияСкрыватьОтмененныеСтроки(Команда)
	
	СкрыватьОтмененныеСтроки = Не СкрыватьОтмененныеСтроки;
	
	Если СкрыватьОтмененныеСтроки Тогда
		Элементы.Продукция.ОтборСтрок = Новый ФиксированнаяСтруктура("Отменено", Ложь);
	Иначе
		Элементы.Продукция.ОтборСтрок = Неопределено;
	КонецЕсли;
	
	Элементы.ПродукцияСкрыватьОтмененныеСтроки.Пометка = СкрыватьОтмененныеСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область ИнтеграцияС1СДокументооборотом

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)

	ЗапретРедактированияРеквизитовОбъектовКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область БуферОбмена

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Продукция.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Продукция.Количество() - КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Продукция.ТекущаяСтрока) Тогда
		
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(
			Элементы.Продукция.ВыделенныеСтроки.Количество());
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// стандартное оформление номенклатуры
#Область НоменклатураХарактеристика

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, 
		"ПродукцияЕдиницаИзмерения", 
		"Объект.Продукция.Упаковка");
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма, 
		"ПродукцияХарактеристика",
		"Объект.Продукция.ХарактеристикиИспользуются");
		
#КонецОбласти

	// оформление склада и подразделения
#Область Получатель

	// отключение видимости склада, если работа или услуга или установлен списать на расходы
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСклад.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтбораИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыНоменклатуры.Работа;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// отключение видимости подразделения, если товар или тара или пустая или не выбран и не установлен списать на расходы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Поясняющая надпись для подразделения, если Ф.О. "Несколько складов" не используется.

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияПодразделение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьНесколькоСкладов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.ТипНоменклатуры");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	СписокЗначений.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// оформление статей и аналитики расходов
#Область СписаниеНаРасходы

	ТипСтатьиПоУмолчанию = 1;// Оформление статьи по умолчанию
	
	ТипыСтатей = Новый Массив;
	ТипыСтатей.Добавить(1); // Статьи расходов
	ТипыСтатей.Добавить(3); // Статьи активов/пассивов
	ДоходыИРасходыСервер.УстановитьУсловноеОформлениеАналитикПриСовместномИспользованииСтатей(
		ЭтаФорма, "Продукция", ТипыСтатей, ТипСтатьиПоУмолчанию);
	
	ПланыВидовХарактеристик.СтатьиРасходов.УстановитьУсловноеОформлениеАналитик(
		УсловноеОформление, Новый Структура("Продукция"));
	
	
	// видимость зависит от типа производственного процесса
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСписатьНаРасходы.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСтатьяРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаАктивовПассивов.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация"); 
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
		
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокТиповПроцесса = Новый СписокЗначений;
	СписокТиповПроцесса.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	СписокТиповПроцесса.Добавить(Перечисления.ТипыПроизводственныхПроцессов.Ремонт);
	
	ОтборЭлемента.ПравоеЗначение = СписокТиповПроцесса;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость" , Ложь);
	
	
	// отметка незаполненного статьи расходов, если списываем на расходы

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСтатьяРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного" , Истина);
	
	
	// только просмотр статьи расходов, если не списываем на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСтатьяРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	

	// поясняющая надпись, если работа и на расходы не списываем

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаРасходов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"      , НСтр("ru = '<при списании на расходы>';
																		|en = '<in case of a write-off as expense>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" , ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	

	// текст аналитики расходов, если статья не выбрана
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаРасходов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.АналитикаРасходов");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"      , НСтр("ru = '<выберите статью расходов>';
																		|en = '<select an expense item>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" , ЦветаСтиля.НезаполненноеПолеТаблицы);
	
	
	// аналитика расходов "Только просмотр", если не заполнена статья расходов
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаРасходов.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияАналитикаАктивовПассивов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Продукция.СтатьяРасходов");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	
	
	// назначение не указывается при списании на расходы
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Продукция.СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста"     , ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст"          , НСтр("ru = '<не используется при списании на расходы>';
																			|en = '<not used while writing off as expenses>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр" , Истина);
	
#КонецОбласти

	// оформление размещения выпуска
#Область РазмещениеВыпуска

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РазмещениеВыпуска.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// оформление желаемой даты выпуска
#Область ДатаПотребности

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПотребности.Имя);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РазмещениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РазмещениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// обязательное заполнение договоров
#Область Договор
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорНеОбязателен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
#КонецОбласти

	// в давальческой схеме назначение обязательно для заполнения
#Область Назначение
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НазначениеПродукция.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияНазначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ХозяйственнаяОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
#КонецОбласти

	// приоритет
	ОбщегоНазначенияУТ.УстановитьУсловноеОформлениеПриоритета(ЭтаФорма);
	
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(УсловноеОформление, Элементы.Продукция, Элементы.ПродукцияОтменено.Имя, Элементы.ПродукцияПричинаОтмены.Имя);

#Область Спецификация
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияВыбранаОсновнаяСпецификация.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПродукцияСпецификация.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПроизводственногоПроцесса");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
#КонецОбласти

#Область ДолиСтоимости

	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиПроцент(
		ЭтаФорма, "Объект", "Продукция");
		
	ПроизводствоСервер.УстановитьУсловноеОформлениеПоляДоляСтоимостиОтмененныхСтрок(
		ЭтаФорма, "Объект", "Продукция");
	
#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	ДоступноОписаниеТипаПроизводственногоПроцесса = УправлениеДаннымиОбИзделиях.ДоступноОписаниеТипаПроизводственногоПроцесса();
	Элементы.ТипПроизводственногоПроцесса.Видимость = ДоступноОписаниеТипаПроизводственногоПроцесса;
	Если ДоступноОписаниеТипаПроизводственногоПроцесса Тогда
		ПроизводствоСервер.ЗаполнитьСписокТиповПроизводственногоПроцесса(Элементы.ТипПроизводственногоПроцесса);
	КонецЕсли;
	
	Элементы.НачатьНеРанее.ФорматРедактирования = ФорматДатыГрафика;
	Элементы.ДатаПотребности.ФорматРедактирования = ФорматДатыГрафика;
	
	ОбновитьСостояниеГиперссылкиЭтапыЗаказа();
	
	Элементы.ХозяйственнаяОперация.Видимость = ИспользоватьПроизводствоИзДавальческогоСырья;
	ЗаполнитьСписокВыбораОпераций(Элементы);

	#Область УправлениеДоступом
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.РесурсныеСпецификации) Тогда
		Элементы.ПродукцияСпецификацииЗаполнить.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ОсновныеСпецификации) Тогда
		Элементы.ПродукцияСпецификацииНазначитьОсновной.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаНазначенияТоваров) Тогда
		Элементы.Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва.Видимость = Ложь;
		Элементы.Продукция_СоздатьКорректировкуНазначенияРезервирование.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Отчеты.СтруктураЗаказаНаПроизводство2_2) Тогда
		Элементы.ФормаСтруктураЗаказа.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.РедактированиеПоследовательностиЭтаповПроизводства) Тогда
		Элементы.ДекорацияРедактироватьЭтапы.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЭтапПроизводства2_2) Тогда
		Элементы.ДекорацияОтразитьВыполненныйЭтап.Доступность = Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	// Заголовок
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		ИЛИ Инициализация Тогда
		
		Форма.АвтоЗаголовок = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Шаблон = НСтр("ru = 'Заказ на производство %1 %2 от %3';
							|en = 'Production order %1 %2 dated %3'");
		Иначе
			Шаблон = НСтр("ru = 'Заказ на производство %1 (создание)';
							|en = 'Production order %1 (create)'");
		КонецЕсли;
		ПредставлениеТипа = "(" + НРег(Объект.ТипПроизводственногоПроцесса) + ")";
		Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, ПредставлениеТипа, Объект.Номер, Объект.Дата);
		
	КонецЕсли;
	
	// Назначение выходных изделий в шапке
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или Инициализация Тогда
		
		Элементы.НазначениеПродукция.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
			ИЛИ Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
	КонецЕсли;
	
	// Табличная часть "Продукция"
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или СтруктураРеквизитов.Свойство("Статус")
		Или СтруктураРеквизитов.Свойство("ХозяйственнаяОперация")
		Или Инициализация Тогда
		
		Элементы.СтраницаПродукция.Заголовок = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(Объект.ТипПроизводственногоПроцесса);
		
		Элементы.ДатаПотребности.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка");
		Элементы.РазмещениеВыпуска.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
			И Форма.ПланируетсяГрафикПроизводства;
		
		Элементы.ПродукцияНазначение.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
			И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Если Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Сборка")
		 Или Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
			Если Форма.ИспользоватьНесколькоСкладов Тогда
				Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Получатель';
																	|en = 'Beneficiary'");
			Иначе
				Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Подразделение-получатель';
																	|en = 'Receiving department'");
			КонецЕсли;
		Иначе
			Элементы.ПродукцияГруппаПолучатель.Заголовок = НСтр("ru = 'Склад';
																|en = 'Warehouse'");
		КонецЕсли;
		
		Элементы.ПродукцияОткрытьПодбор.Видимость =
			Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья");
		Элементы.ПродукцияЗаполнитьПоЗаказамДавальца.Видимость =
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья");
		
		Элементы.ПродукцияСпецификацииНазначитьОсновной.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
			И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ПродукцияСпецификацииЗаполнить.Видимость =
			Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству")
			ИЛИ Объект.ВариантОбособления = ПредопределенноеЗначение("Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства") Тогда
			Элементы.Продукция_СоздатьКорректировкуНазначенияСнятиеРезерва.Доступность = Ложь;
			Элементы.Продукция_СоздатьКорректировкуНазначенияРезервирование.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Дополнительные действия при изменении типа производственного процесса
	//  - установка параметров выбора номенклатуры
	//  - установка параметров выбора спецификаций.
	//  - установка видимости структуры заказа
	//  - установка видимости доли стоимости.
	//  - вывод в подвал гиперссылок редактирования этапов
	Если СтруктураРеквизитов.Свойство("ТипПроизводственногоПроцесса")
		Или Инициализация Тогда
		
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(Элементы.ПродукцияНоменклатура, Объект.ТипПроизводственногоПроцесса);
		УправлениеДаннымиОбИзделияхКлиентСервер.УстановитьПараметрыВыбораСпецификаций(Элементы.ПродукцияСпецификация, Форма.ПараметрыВыбораСпецификаций);
		
		Элементы.СпособРаспределенияЗатратНаВыходныеИзделия.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
			
		Элементы.ПродукцияГруппаДоляСтоимости.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ДекорацияРедактироватьЭтапы.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
		Элементы.ДекорацияОтразитьВыполненныйЭтап.Видимость =
			Объект.ТипПроизводственногоПроцесса = ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций");
		
	КонецЕсли;
	
	// Дополнительные действия при изменении хозяйственной операции
	//  - установка параметров выбора направлений деятельности
	//  - установка параметров выбора назначений.
	Если СтруктураРеквизитов.Свойство("ХозяйственнаяОперация")
		Или СтруктураРеквизитов.Свойство("Партнер")
		Или СтруктураРеквизитов.Свойство("Договор")
		Или Инициализация Тогда
		
		ЗначениеБулево =
			Объект.ХозяйственнаяОперация =
				ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья");
		
		Элементы.Договор.Видимость = ЗначениеБулево;
		Элементы.Партнер.Видимость = ЗначениеБулево;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеГиперссылкиЭтапыЗаказа()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Незаполнено"];
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Распоряжение", Объект.Ссылка);
	ЭтапыЗаказа = Документы.ЭтапПроизводства2_2.НайтиЭтапы(СтруктураОтбора, 1);
	Если ЭтапыЗаказа.Количество() = 0 Тогда
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Незаполнено"];
	Иначе
		Элементы.ДекорацияСписокЭтапов.ЦветТекста = ЦветаГиперссылок["Заполнено"];
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыОсновное

&НаСервере
Процедура ПриИзмененииДатыСервер()
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииНаСервере()
	
	НаправленияДеятельностиСервер.ПриИзмененииНаправленияДеятельностиСервер(ЭтаФорма);
	
	АктуализироватьЗаказПодДеятельность(Истина);
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьЗаказПодДеятельность(Заполнить = Истина)
	
	ПараметрыЗаполнения = Документы.ЗаказНаПроизводство2_2.ПараметрыЗаполненияВидаДеятельностиНДС(Объект);
	
	Если Заполнить Тогда
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
			Объект.ЗаказПодДеятельность,
			ПараметрыЗаполнения,
			УчетНДСКэшированныеЗначенияПараметров);
	КонецЕсли;
	
	УчетНДСУП.ЗаполнитьСписокВыбораВидаДеятельностиНДС(
		Элементы.ЗаказПодДеятельность,
		Объект.ЗаказПодДеятельность,
		ПараметрыЗаполнения,
		УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииНаСервере()
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ХозяйственнаяОперацияПриИзмененииНаСервере()
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
		
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		
	КонецЕсли;
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
	ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти();
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ХозяйственнаяОперация");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОпераций(Элементы)
	
	СписокВыбора = Элементы.ХозяйственнаяОперация.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СобственноеПроизводство"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья"));
	
КонецПроцедуры

&НаСервере
Процедура ТипПроизводственногоПроцессаПриИзмененииНаСервере()
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказНаПроизводство2_2);
	
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Разборка
		ИЛИ Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
		Объект.ДатаПотребности = '00010101';
		Объект.РазмещениеВыпуска = Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу;
	КонецЕсли;
	
	ЗаполнитьСпецификациюВТабличнойЧасти();
	
	ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти();
	
	ПроверитьОбновитьРеквизитНазначение(Истина, Истина);
	
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "ТипПроизводственногоПроцесса");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбновитьРеквизитНазначение(ОбновитьРеквизитВШапке, ОбновитьРеквизитВТабличнойЧасти)
	
	ПустоеНазначение = Справочники.Назначения.ПустаяСсылка();
	
	Если ОбновитьРеквизитВШапке Тогда
		
		Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка
			И Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			Объект.НазначениеПродукция = ПустоеНазначение;
			
		Иначе
			
			Ссылки = Новый Массив;
			Ссылки.Добавить(Объект.НазначениеПродукция);
			Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
			
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
				
				ШаблонНазначения = Новый Структура("НаправлениеДеятельности, Партнер, Договор, ТипыНазначений");
				Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
					ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
				КонецЕсли;
				ШаблонНазначения.Договор = Объект.Договор;
				ШаблонНазначения.Партнер = Объект.Партнер;
				
				ШаблонНазначения.ТипыНазначений = Новый Массив;
				ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
				ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
				ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
				
				Шаблон = Шаблоны.Получить(Объект.НазначениеПродукция);
				Если Шаблон = Неопределено
					Или ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности)
					И ШаблонНазначения.НаправлениеДеятельности <> Шаблон.НаправлениеДеятельности
					Или ШаблонНазначения.Партнер <> Шаблон.Партнер
					Или ШаблонНазначения.Договор <> Шаблон.Договор
					Или ШаблонНазначения.ТипыНазначений.Найти(Шаблон.ТипНазначения) = Неопределено Тогда
					
					Объект.НазначениеПродукция = ПустоеНазначение;
					
				КонецЕсли;
				
			Иначе
				
				ТолкающееНазначение = НаправленияДеятельностиСервер.ТолкающееНазначение(Объект.НаправлениеДеятельности);
				
				Если ЗначениеЗаполнено(ТолкающееНазначение) Тогда
					
					Объект.НазначениеПродукция = ТолкающееНазначение;
					
				Иначе
				
					Шаблон = Шаблоны.Получить(Объект.НазначениеПродукция);
					Если Шаблон = Неопределено Или Шаблон.ТипНазначения <> Перечисления.ТипыНазначений.Собственное Тогда
						
						Объект.НазначениеПродукция = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбновитьРеквизитВТабличнойЧасти Тогда
		
		Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка
			И Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций Тогда
			
			Ссылки = Объект.Продукция.Выгрузить(, "Назначение").ВыгрузитьКолонку("Назначение");
			Шаблоны = Справочники.Назначения.ШаблоныИзСсылок(Ссылки);
			
			Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
				
				ШаблонНазначения = Новый Структура("НаправлениеДеятельности, Партнер, Договор, ТипНазначения");
				Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
					ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
				КонецЕсли;
				ШаблонНазначения.Договор       = Объект.Договор;
				ШаблонНазначения.Партнер       = Объект.Партнер;
				ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеПродукция22;
				
				Для Каждого Строка Из Объект.Продукция Цикл
					
					Шаблон = Шаблоны.Получить(Строка.Назначение);
					Если Шаблон = Неопределено
							Или ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности)
								И ШаблонНазначения.НаправлениеДеятельности <> Шаблон.НаправлениеДеятельности
							Или ШаблонНазначения.Партнер <> Шаблон.Партнер
							Или ШаблонНазначения.Договор <> Шаблон.Договор
							Или ШаблонНазначения.ТипНазначения <> Шаблон.ТипНазначения Тогда
						
						Строка.Назначение = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				Для Каждого Строка Из Объект.Продукция Цикл
					
					Шаблон = Шаблоны.Получить(Строка.Назначение);
					Если Шаблон = Неопределено Или Шаблон.ТипНазначения <> Перечисления.ТипыНазначений.Собственное Тогда
						
						Строка.Назначение = ПустоеНазначение;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			Для Каждого Строка Из Объект.Продукция Цикл
				
				Строка.Назначение = ПустоеНазначение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьОбновитьРеквизитыСписаниеНаРасходыВТабличнойЧасти()
	
	Если Объект.ТипПроизводственногоПроцесса = 
		Перечисления.ТипыПроизводственныхПроцессов.Сборка 
	   И Объект.ХозяйственнаяОперация = 
	 	Перечисления.ХозяйственныеОперации.СобственноеПроизводство Тогда
			Возврат;
	КонецЕсли;	
	
	МассиыНайденныхСтрок = Объект.Продукция.НайтиСтроки(Новый Структура("СписатьНаРасходы", Истина));
	Если МассиыНайденныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Для каждого СтрокаТЧПродукция Из МассиыНайденныхСтрок Цикл
		
		СтрокаТЧПродукция.СписатьНаРасходы = Ложь;
		
		ИнициализироватьСписаниеНаРасходыВСтрокеТЧ(СтрокаТЧПродукция);
		
		Если СтрокаТЧПродукция.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Работа Тогда
			СтрокаТЧПродукция.Подразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиенте
Процедура РедактироватьЭтапы()
	
	Отказ = Ложь;
	
	Если Не Отказ
		И ЗначениеЗаполнено(Объект.ПартияПроизводства) Тогда
		
		УправлениеПроизводствомКлиент.ОткрытьФормуРедактированияЦепочкиЭтапов(
			Объект.Ссылка,
			Объект.ПартияПроизводства,,
			ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВыполненныйЭтап()
	
	УправлениеПроизводствомКлиент.ОткрытьФормуОтраженияВыполненногоЭтапаИзЗаказа(Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЗаказов(Команда)
	
	УправлениеПроизводствомКлиент.ОткрытьОчередьЗаказов(, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбслуживаниеСтраницыПродукция

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	
	МассивСтрок = Новый Массив;
	ИдентификаторыСтрок = Новый Массив;
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОсновнаяСпецификация"); // служебный признак
	
	Если Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
		И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура,
															  |Характеристика,
															  |Упаковка,
															  |КоличествоУпаковок,
															  |Склад");
		
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущаяСтрока,
			СтруктураДействий,
			Объект.ТипПроизводственногоПроцесса,
			ПараметрыРаспределенияЗатрат);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока);
		ИдентификаторыСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
		ДоходыИРасходыКлиентСервер.ИнициализироватьПустоеЗначениеСтатьиВСтрокеТЧ(ТекущаяСтрока, "СтатьяРасходов");
		ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(ТекущаяСтрока, "СтатьяРасходов");
		
	КонецЦикла;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(ИдентификаторыСтрок);
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияОбработкаВыбораПодборПоЗаказамДавальцаНаСервере(ВыбранноеЗначение)
	
	Результат = Документы.ЗаказНаПроизводство2_2.ОстаткиПродукцииКОбеспечениюДавальцу(ВыбранноеЗначение, Объект.Ссылка, Объект.ТипПроизводственногоПроцесса);
	Объект.Продукция.Загрузить(Результат.Выгрузить());
	
	ДоходыИРасходыСервер.ИнициализироватьПустоеЗначениеСтатьиВТЧ(Объект.Продукция, "СтатьяРасходов");
	
	ПослеИзмененияСтрокТЧПрограммноНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияСтрокТЧПрограммноНаСервере(КоллекцияСтрок = Неопределено, СтруктураРанееВыполненныхДействий = Неопределено)

	МассивСтрок = ПолучитьДанныеСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок);
	
	Если СтруктураРанееВыполненныхДействий = Неопределено Тогда
		СтруктураРанееВыполненныхДействий = Новый Структура;
	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакАртикул")
		ИЛИ НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры") Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(МассивСтрок);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ СтруктураРанееВыполненныхДействий.Свойство("ЗаполнитьПризнакОсновнаяСпецификация") Тогда
		
		Если МассивСтрок.Количество() > 0 Тогда
			ЗаполнитьСлужебныеРеквизитыПоСпецификации(МассивСтрок);
		Иначе
			ЗаполнитьСлужебныеРеквизитыПоСпецификации();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ТипПроизводственногоПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	КонецЕсли;
	
	ЗаполнитьСкладПоУмолчаниюВКоллекции(ЭтаФорма, ?(МассивСтрок.Количество() > 0, МассивСтрок, Объект.Продукция));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтрокПоКоллекцииСтрокТЧ(КоллекцияСтрок)
	
	МассивСтрок = Новый Массив;
	
	Если ЗначениеЗаполнено(КоллекцияСтрок) Тогда
		
		Если ТипЗнч(КоллекцияСтрок[0]) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			
			Для Каждого ЭлементКоллекции Из КоллекцияСтрок Цикл
				
				ДанныеСтроки = Объект.Продукция.НайтиПоИдентификатору(ЭлементКоллекции);
				
				Если ДанныеСтроки <> Неопределено Тогда
					МассивСтрок.Добавить(ДанныеСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Возврат КоллекцияСтрок;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивСтрок;

КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре(СтрокиЗаполнения = Неопределено)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
								Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
								Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул",
								Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Продукция, 
		СтруктураДействий, 
		СтрокиЗаполнения);
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоСпецификации(СтрокиЗаполнения = Неопределено)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(Таблица.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия) КАК Подразделение,
	|	ВЫРАЗИТЬ(&НачалоПроизводства КАК ДАТА) КАК НачалоПроизводства
	|ПОМЕСТИТЬ СписокНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица
	|ГДЕ
	|	Таблица.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Подразделение");
		
	Если ЗначениеЗаполнено(СтрокиЗаполнения) Тогда
		
		Если ТипЗнч(СтрокиЗаполнения) = Тип("СправочникСсылка.Номенклатура") Тогда 
			
			СтрокиПродукции = Объект.Продукция.НайтиСтроки(Новый Структура("Номенклатура", СтрокиЗаполнения));
			
		Иначе
			
			СтрокиПродукции = СтрокиЗаполнения;
			
		КонецЕсли;
		
		КоллекцияДанных = Объект.Продукция.Выгрузить(СтрокиПродукции, "Номенклатура, Характеристика");
		
	Иначе
		
		СтрокиПродукции = Объект.Продукция;
		КоллекцияДанных = Объект.Продукция.Выгрузить(, "Номенклатура, Характеристика");
		
	КонецЕсли;
	
	НачалоПроизводства = ПериодНачалаПроизводства(Объект.НачатьНеРанее);
	
	Запрос.УстановитьПараметр("Подразделение",      Объект.Подразделение);
	Запрос.УстановитьПараметр("НачалоПроизводства", НачалоДня(НачалоПроизводства));
	Запрос.УстановитьПараметр("КоллекцияДанных",    КоллекцияДанных);
	
	СтруктураКлючаПоискаСтроки = Новый Структура("Номенклатура,
												 |Характеристика",
												 "Номенклатура",
												 "Характеристика");
												 
	УстановитьПривилегированныйРежим(Истина);
												 
	УправлениеДаннымиОбИзделиях.ЗаполнитьОсновныеСпецификацииВКоллекции(Запрос,
																		Объект.Продукция,
																		СтруктураКлючаПоискаСтроки);
																		
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого ДанныеСтроки Из СтрокиПродукции Цикл
		
		ДанныеСтроки.ВыбранаОсновнаяСпецификация = ВыбранаОсновнаяСпецификация(ДанныеСтроки);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ТекущаяСтрока,
																СтруктураДействий,
																ТипПроцесса,
																ПараметрыРаспределенияЗатрат)
	
	ПараметрыПересчетаКоличестваЕдиниц = ПланированиеПроизводстваКлиентСервер.ПараметрыПересчетаКоличестваЕдиниц(ТекущаяСтрока, "Продукция");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", ПараметрыПересчетаКоличестваЕдиниц);
	Если ТипПроцесса =
		ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		СтруктураДействий.Вставить("ПроверитьЗаполнитьДолюСтоимости", ПараметрыРаспределенияЗатрат);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВыбранаОсновнаяСпецификация(ДанныеСтроки)
	
	Возврат ДанныеСтроки.Спецификация = ДанныеСтроки.ОсновнаяСпецификация
				И НЕ ДанныеСтроки.ОсновнаяСпецификация.Пустая();
	
КонецФункции

&НаСервере
Функция НазначитьСпецификациюОсновнойНаСервере(КоллекцияДанных)
	
	Перем МассивОшибок;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Номенклатура");
	ТаблицаДанных.Колонки.Добавить("Характеристика");
	ТаблицаДанных.Колонки.Добавить("Спецификация");
	ТаблицаДанных.Колонки.Добавить("НачатьНеРанее");
	ТаблицаДанных.Колонки.Добавить("НомерСтроки");
	
	СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Спецификация,НачатьНеРанее");
	
	// Сформируем таблицу из уникальных значений
	Для каждого ТекущиеДанные Из КоллекцияДанных Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекущиеДанные);
		
		НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), ТекущиеДанные);
			
		Иначе
			
			НайденныеСтроки[0].НомерСтроки = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	// Назначим спецификации основными
	
	МассивДанных = Новый Массив;
	
	Для каждого ТекущиеДанные Из ТаблицаДанных Цикл
		
		СтруктураЗаписи = РегистрыСведений.ОсновныеСпецификации.СтруктураЗаписи();
		
		СтруктураЗаписи.Период         = ТекущиеДанные.НачатьНеРанее;
		СтруктураЗаписи.Номенклатура   = ТекущиеДанные.Номенклатура;
		СтруктураЗаписи.Характеристика = ТекущиеДанные.Характеристика;
		СтруктураЗаписи.Спецификация   = ТекущиеДанные.Спецификация;
		
		СтруктураЗаписи.Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка(); // для всех подразделений
		
		СтруктураЗаписи.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
		
		МассивДанных.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	ЕстьОшибки = НЕ УправлениеДаннымиОбИзделияхВызовСервера.НазначитьОсновныеСпецификацииДляИзделий(МассивДанных, МассивОшибок);
	Если ЕстьОшибки Тогда
		
		Для каждого ОписаниеОшибки Из МассивОшибок Цикл
			
			Если ОписаниеОшибки.Свойство("НомерСтроки") И ОписаниеОшибки.Свойство("СтруктураОшибки") Тогда
				
				Если ОписаниеОшибки.СтруктураОшибки.Свойство("ТекстОшибки") Тогда
					ТекстОшибки = ОписаниеОшибки.СтруктураОшибки.ТекстОшибки;
				Иначе
					ТекстОшибки = НСтр("ru = 'Ошибка назначения основной спецификации.';
										|en = 'An error occurred when setting the main BOM.'");
				КонецЕсли;
				
				ПутьКСтроке = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Продукция", ОписаниеОшибки.НомерСтроки, "Спецификация");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки
					,
					,
					ПутьКСтроке);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	// Обновим служебные реквизиты
	ТаблицаДанных.Свернуть("Номенклатура");
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ТекущиеДанные Из ТаблицаДанных Цикл
		НайденныеСтроки = Объект.Продукция.НайтиСтроки(Новый Структура("Номенклатура", ТекущиеДанные.Номенклатура));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			МассивСтрок.Добавить(НайденнаяСтрока);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоСпецификации(МассивСтрок);
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВКоллекции(Форма, МассивСтрок)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли;

	Для каждого Строка Из МассивСтрок Цикл
		Если Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
			Строка.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		Иначе
			Строка.Склад = Форма.СкладПоУмолчанию;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСкладПоУмолчаниюВСтроке(Форма, Строка)
	
	Если Форма.ИспользоватьНесколькоСкладов Тогда
		Возврат;
	КонецЕсли;
	
	Если Строка.СписатьНаРасходы
	 Или Строка.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Работа") Тогда
	 
		Строка.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		
	Иначе
		Строка.Склад = Форма.СкладПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуПоДаннымСтроки(ДанныеСтроки)
	
	Идентификатор = -1;
	
	ЕстьСпецификация = ДанныеСтроки.Свойство("Спецификация") И ЗначениеЗаполнено(ДанныеСтроки.Спецификация);
	ЕстьСкладПодразделение = ДанныеСтроки.Свойство("Склад") И ЗначениеЗаполнено(ДанныеСтроки.Склад)
		ИЛИ ДанныеСтроки.Свойство("Подразделение") И ЗначениеЗаполнено(ДанныеСтроки.Подразделение);
	
	Для каждого Строка Из Объект.Продукция Цикл
		
		Если Строка.Номенклатура = ДанныеСтроки.Номенклатура
			И Строка.Характеристика = ДанныеСтроки.Характеристика
			
			И Строка.Назначение = ДанныеСтроки.Назначение
			
			И (ЕстьСпецификация И Строка.Спецификация = ДанныеСтроки.Спецификация
				ИЛИ Не ЕстьСпецификация)
			
			И (ЕстьСкладПодразделение 
				И (Строка.Склад = ДанныеСтроки.Склад 
					ИЛИ Строка.Подразделение = ДанныеСтроки.Подразделение)
				ИЛИ Не ЕстьСкладПодразделение) Тогда
				
			Идентификатор = Строка.ПолучитьИдентификатор();
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Идентификатор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпецификациюВТабличнойЧасти(Знач Идентификаторы = Неопределено)
	
	Модифицированность = Истина;
	МассивСтрок = Новый Массив;
	
	Если Идентификаторы <> Неопределено Тогда
		Для каждого Идентификатор Из Идентификаторы Цикл
			Строка = Объект.Продукция.НайтиПоИдентификатору(Идентификатор);
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	Иначе
		Для каждого Строка Из Объект.Продукция Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
	КонецЕсли;
	
	МассивДанных = Новый Массив;
	
	Для каждого ТекущаяСтрока Из МассивСтрок Цикл
		
		ДанныеПоНоменклатуре = Новый Структура;
		ДанныеПоНоменклатуре.Вставить("Подразделение", Объект.Подразделение);
		ДанныеПоНоменклатуре.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ДанныеПоНоменклатуре.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ДанныеПоНоменклатуре.Вставить("НачалоПроизводства", Объект.НачатьНеРанее);
		
		МассивДанных.Добавить(ДанныеПоНоменклатуре);
		
	КонецЦикла;
	
	УправлениеДаннымиОбИзделиях.ЗаполнитьСпецификациюВСтроках(МассивСтрок, МассивДанных, ПараметрыВыбораСпецификаций);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура АналитикаРасходовПолучениеДанныхВыбора(ДанныеВыбора, Текст)
	
	ДанныеВыбора = Новый СписокЗначений;
	ПродажиСервер.ЗаполнитьДанныеВыбораАналитикиРасходов(ДанныеВыбора, Текст);
	
КонецПроцедуры

&НаСервере
Процедура ПродукцияСтатьяРасходовПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	
	СтрокаТаблицы     = Объект.Продукция.НайтиПоИдентификатору(Элементы.Продукция.ТекущаяСтрока);
	
	Если ТипЗнч(СтрокаТаблицы.СтатьяРасходов) = Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов") Тогда
		
		ДоходыИРасходыСервер.СтатьяАктивовПассивовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаАктивовПассивов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаРасходов) Тогда
			СтрокаТаблицы.АналитикаРасходов                = Неопределено;
			СтрокаТаблицы.АналитикаРасходовОбязательна     = Ложь;
			СтрокаТаблицы.АналитикаРасходовЗаказРеализация = Ложь;
		КонецЕсли;
		
	Иначе
		
		ДоходыИРасходыСервер.СтатьяРасходовПриИзменении(Объект, СтрокаТаблицы.СтатьяРасходов, СтрокаТаблицы.АналитикаРасходов);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.АналитикаАктивовПассивов) Тогда
			СтрокаТаблицы.АналитикаАктивовПассивов     = Неопределено;
		КонецЕсли;
		
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовОбязательна");
		СтруктураДействий.Вставить("ЗаполнитьПризнакАналитикаРасходовЗаказРеализация");	
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьТипСтатьи");

	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТаблицы, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСписатьНаРасходы(ИмяТЧ)
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если Не ТекущиеДанные.СписатьНаРасходы Тогда
		ИнициализироватьСписаниеНаРасходыВСтрокеТЧ(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьСписаниеНаРасходыВСтрокеТЧ(СтрокаТЧ)

	СтрокаТЧ.СписатьНаРасходы         = Ложь;
	СтрокаТЧ.СтатьяРасходов           = ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
	
	СтрокаТЧ.АналитикаРасходов        = Неопределено;
	СтрокаТЧ.АналитикаАктивовПассивов = Неопределено;
	
	ДоходыИРасходыКлиентСервер.ЗаполнитьТипСтатьиВСтрокеТЧ(СтрокаТЧ, "СтатьяРасходов");
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуВводаДолиСтоимости(ТекущиеДанные)

	НетОшибок = ПроизводствоКлиент.ПроверитьЗаполнениеПередВводомДолиСтоимости(ТекущиеДанные, ПараметрыРаспределенияЗатрат);
	
	Если НетОшибок Тогда
		ПараметрыФормы = ПараметрыФормыВводаДолиСтоимости(ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("ОбщаяФорма.ВводДолиСтоимости",
			ПараметрыФормы,
			ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДолиСтоимости(Элемент, ТекущиеДанные, ВыбранноеЗначение)
	
	Если ТекущиеДанные.ДоляСтоимости <> ВыбранноеЗначение.ДоляСтоимости Тогда
		
		ПроизводствоКлиентСервер.ЗаполнитьДолюСтоимостиВСтроке(
			ТекущиеДанные,
			ВыбранноеЗначение);
		
		РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВводаДолиСтоимости(ТекущиеДанныеИдентификатор)
	
	ПараметрыФормы = ПроизводствоСервер.ПараметрыФормыВводаДолейСтоимости(Объект, ПараметрыРаспределенияЗатрат, ТекущиеДанныеИдентификатор);
	Возврат ПараметрыФормы;
	
КонецФункции

&НаСервере
Процедура РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия()
	
	ПроизводствоСервер.РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия(Объект, ПараметрыРаспределенияЗатрат);
	
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеМеханизмы

#Область Свойства

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Печать

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Продукция.ВыделенныеСтроки,
		Объект.Продукция);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	МассивСтрок = Новый Массив;
	ИдентификаторыСтрок = Новый Массив;
	
	МассивТиповНоменклатуры = Новый Массив;
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	Если Объект.ТипПроизводственногоПроцесса = Перечисления.ТипыПроизводственныхПроцессов.Сборка Тогда
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
		МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("ОтборПоТипуНоменклатуры", МассивТиповНоменклатуры);
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена(ПараметрыОтбора);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакОсновнаяСпецификация"); // служебный признак
	
	Если Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.Разборка")
		И Объект.ТипПроизводственногоПроцесса <> ПредопределенноеЗначение("Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций") Тогда
		НаправленияДеятельностиКлиентСервер.СтруктураДействийВставитьПриДобавленииСтроки(ЭтаФорма, СтруктураДействий);
	КонецЕсли;
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Продукция.Добавить();
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
	
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(
			ТекущаяСтрока,
			СтруктураДействий,
			Объект.ТипПроизводственногоПроцесса,
			ПараметрыРаспределенияЗатрат);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		МассивСтрок.Добавить(ТекущаяСтрока);
		ИдентификаторыСтрок.Добавить(ТекущаяСтрока.ПолучитьИдентификатор());
		
	КонецЦикла;
	
	ЗаполнитьСпецификациюВТабличнойЧасти(ИдентификаторыСтрок);
	ПослеИзмененияСтрокТЧПрограммноНаСервере(МассивСтрок, СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность", 
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ПродукцияВставитьСтроки");
	МассивЭлементов.Добавить("ПродукцияКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Обеспечение

&НаСервере
Функция ПолучитьОбъектОснования()
	
	ОбъектОснования = Объект.Ссылка;
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОбъектОснования", ОбъектОснования);
	СтруктураОтвета.Вставить("Проведен", ОбъектОснования.Проведен);
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервере
Функция ЕстьТоварыКОбособленномуОбеспечению()
	
	НазначениеДокумента = Документы.КорректировкаНазначенияТоваров.НазначениеЗаказа(Объект.Ссылка);
	Возврат Документы.КорректировкаНазначенияТоваров.ЕстьТоварыКОбособленномуОбеспечению(НазначениеДокумента);
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОтсутствииТовараКОбособленномуОбеспечению()
	
	ТекстОшибки = НСтр("ru = 'В этапах нет ни одного материала с действием ""Обеспечивать обособленно""';
						|en = 'There are no materials with the ""Provide on pegging basis"" action in stages.'");
	
	ПоказатьПредупреждение(, ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ЗаполнитьСлужебныеРеквизиты();
	
	АктуализироватьЗаказПодДеятельность(Ложь);
	
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовОбязательна(Объект.Продукция);
	ПланыВидовХарактеристик.СтатьиРасходов.ЗаполнитьПризнакАналитикаРасходовЗаказРеализация(Объект.Продукция);
	ДоходыИРасходыСервер.ЗаполнитьТипСтатьи(Объект.Продукция);
	
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	НастройкиПодсистемыПроизводство = ПроизводствоСервер.НастройкиПодсистемыПроизводство();
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиПодсистемыПроизводство);
	
	ХарактеристикиИспользуются = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьНесколькоСкладов = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	ИспользоватьПодразделения = ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения");
	ИспользоватьПроизводствоИзДавальческогоСырья = ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья");
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности();
	НаправленияДеятельностиСервер.ПриЧтенииСозданииНаСервере(ЭтаФорма);
	
	НаправлениеДеятельностиОбязательно = НаправленияДеятельностиСервер.УказаниеНаправленияДеятельностиОбязательно(Тип("ДокументСсылка.ЗаказНаПроизводство2_2"));
	
	ПараметрыВыбораСпецификаций  = УправлениеДаннымиОбИзделиях.ПараметрыВыбораСпецификаций(Объект, Документы.ЗаказНаПроизводство2_2);
	ПараметрыРаспределенияЗатрат = Новый ФиксированнаяСтруктура(Документы.ЗаказНаПроизводство2_2.ПараметрыРаспределенияЗатрат(Объект));
	
	ЦветаГиперссылок = Новый Структура;
	ЦветаГиперссылок.Вставить("Незаполнено", ЦветаСтиля.НезаполненноеПолеТаблицы);
	ЦветаГиперссылок.Вставить("Заполнено", ЦветаСтиля.ГиперссылкаЦвет);
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ЗаполнитьСкладПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаблокироватьРеквизитыДокумента()
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	Если ЗаказЗапланирован() Тогда
		ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаказЗапланирован()
	
	ЗаказЗапланирован = Документы.ЗаказНаПроизводство2_2.ЗаказЗапланирован(Объект.Ссылка);
	Возврат Не ЗаказЗапланирован = Неопределено
		И ЗаказЗапланирован;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПериодНачалаПроизводства(Знач НачатьНеРанее = '00010101')
	
	Если ЗначениеЗаполнено(НачатьНеРанее) Тогда
		Возврат НачатьНеРанее;
	КонецЕсли;
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	ЗаполнитьСлужебныеРеквизитыПоСпецификации();
	
	РассчитатьПроцентРаспределенияЗатратНаВыходныеИзделия();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	Если ИспользоватьНесколькоСкладов Тогда
		СкладПоУмолчанию = Справочники.Склады.ПустаяСсылка();
	Иначе
		СкладПоУмолчанию = ОбщегоНазначенияУТ.ПолучитьПроверитьСкладПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтруктуруЗаказа()
	
	Заказы = Новый Массив;
	Заказы.Добавить(Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура("Заказы", Заказы);
	
	ОткрытьФорму(
		"Отчет.СтруктураЗаказаНаПроизводство2_2.Форма.СтруктураЗаказа",
		ПараметрыФормы,
		,
		Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
