#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Команды

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ПлановаяКалькуляция2_2.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.РазрешениеНаЗаменуМатериалов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Заказ на производство".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Возврат УправлениеПроизводством.ДобавитьКомандуСоздатьНаОснованииЗаказ(КомандыСозданияНаОсновании);
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	Отчеты.ДиаграммаПроизводстваЗаказа.ДобавитьКомандуГрафикПроизводстваЗаказа(КомандыОтчетов);
	
	Отчеты.ДеревоСебестоимостиПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ЗаказНаПроизводство";
	КомандаПечати.Представление = НСтр("ru = 'Заказ на производство';
										|en = 'Production order'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область Очередь

// Возвращает новый номер в очереди заказов на производство.
// 
// Возвращаемое значение:
//   - Число - новый номер в очереди.
//
Функция НовыйНомерОчереди() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	(Т.Очередь + 1) КАК НовыйНомерОчереди
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Т
		|
		|УПОРЯДОЧИТЬ ПО
		|	Т.Очередь УБЫВ");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		НовыйНомерОчереди = 1;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НовыйНомерОчереди = Выборка.НовыйНомерОчереди;
		
	КонецЕсли;
	
	Возврат НовыйНомерОчереди;
	
КонецФункции

// Определяет можно ли переместить документ в очереди на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди.
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно переместить в очереди на одну позицию.
//
Функция МожноПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|
		|		ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
		|			И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
		|			И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
		|			И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
		|			И &Направление
		|			И ЗаказНаПроизводство.Проведен";
	
	Если Направление < 0 Тогда
		
		ТекстНаправление = "ЗаказНаПроизводство.Очередь < ТекущийЗаказНаПроизводство.Очередь";
		
	ИначеЕсли Направление > 0 Тогда
		
		ТекстНаправление = "ЗаказНаПроизводство.Очередь > ТекущийЗаказНаПроизводство.Очередь";
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Направление", ТекстНаправление);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Перемещает документ в очереди заказов на одну позицию
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  Направление	 - число - -1, перемещает заказ вверх по очереди
//                         +1, перемещает заказ вниз по очереди.
// 
Процедура ПереместитьДокументВОчереди(ТекущийЗаказ, Направление) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
							|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
		
	Запрос = Новый Запрос;
	
	Если Направление > 0 Тогда
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьМаксимум + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ КАК НовыйНомерОчереди
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
			|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
			|	ИЗ
			|		(ВЫБРАТЬ ПЕРВЫЕ 2
			|			ЗаказНаПроизводство.Очередь КАК Очередь
			|		ИЗ
			|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|
			|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
			|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Очередь       > ТекущийЗаказНаПроизводство.Очередь
			|					И ЗаказНаПроизводство.Проведен
			|	
			|		УПОРЯДОЧИТЬ ПО
			|			Очередь
			|		) КАК Т
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьСреднее + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ ЕСТЬ NULL ";
	Иначе
		
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
			|		Т.ОчередьМинимум / 2
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ КАК НовыйНомерОчереди
			|
			|ИЗ
			|	(ВЫБРАТЬ
			|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
			|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
			|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
			|	ИЗ
			|		(ВЫБРАТЬ ПЕРВЫЕ 2
			|			ЗаказНаПроизводство.Очередь КАК Очередь
			|
			|		ИЗ
			|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
			|
			|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &ТекущийЗаказ
			|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
			|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
			|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
			|					И ЗаказНаПроизводство.Очередь       < ТекущийЗаказНаПроизводство.Очередь
			|					И ЗаказНаПроизводство.Проведен
			|	
			|		УПОРЯДОЧИТЬ ПО
			|			Очередь УБЫВ
			|		) КАК Т
			|	) КАК Т
			|
			|ГДЕ
			|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
			|		Т.ОчередьСреднее + 1
			|	ИНАЧЕ
			|		Т.ОчередьСреднее
			|	КОНЕЦ ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущийЗаказ",        ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ЗаказОбъект.Очередь = Выборка.НовыйНомерОчереди;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
								|en = 'Failed to write %Документ%. %ОписаниеОшибки%'");
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет можно ли вставить документ в очередь
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ 
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди.
// 
// Возвращаемое значение:
//   - Булево - Истина, если документ можно вставить в указанную позицию очереди.
//
Функция МожноВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИСТИНА 
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК НоваяПозиция
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказ
		|		ПО  ТекущийЗаказ.Ссылка          = &ТекущийЗаказ
		|			И НоваяПозиция.Ссылка        = &НоваяПозиция
		|			И НоваяПозиция.Приоритет     = ТекущийЗаказ.Приоритет
		|			И НоваяПозиция.Подразделение = ТекущийЗаказ.Подразделение
		|			И НоваяПозиция.Статус        = &СтатусКПроизводству
		|			И ТекущийЗаказ.Статус        = &СтатусКПроизводству
		|			И НоваяПозиция.Проведен
		|			И ТекущийЗаказ.Проведен");
		
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

// Вставляет документ в очередь заказов
//
// Параметры:
//  ТекущийЗаказ - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  НоваяПозиция - ДокументСсылка.ЗаказНаПроизводство2_2 - новая позиция в очереди.
//
Процедура ВставитьДокументВОчередь(ТекущийЗаказ, НоваяПозиция) Экспорт
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийЗаказ);
	Исключение
		ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
							|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
		Возврат;
	КонецПопытки;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
		|		Т.ОчередьМинимум / 2
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ КАК НовыйНомерОчереди
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(Т.Очередь) КАК ОчередьМинимум,
		|		СРЕДНЕЕ(Т.Очередь) КАК ОчередьСреднее,
		|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 2
		|			ЗаказНаПроизводство.Очередь КАК Очередь
		|
		|		ИЗ
		|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|
		|				ПО ТекущийЗаказНаПроизводство.Ссылка    = &НоваяПозиция
		|					И ЗаказНаПроизводство.Приоритет     = ТекущийЗаказНаПроизводство.Приоритет
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение
		|					И ЗаказНаПроизводство.Статус        = &СтатусКПроизводству
		|					И ЗаказНаПроизводство.Очередь       <= ТекущийЗаказНаПроизводство.Очередь
		|					И ЗаказНаПроизводство.Проведен
		|	
		|		УПОРЯДОЧИТЬ ПО
		|			Очередь УБЫВ
		|		) КАК Т
		|	) КАК Т
		|
		|ГДЕ
		|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
		|		Т.ОчередьСреднее + 1
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("НоваяПозиция", НоваяПозиция);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		Попытка
			
			ЗаказОбъект = ТекущийЗаказ.ПолучитьОбъект();
			ЗаказОбъект.Очередь = Выборка.НовыйНомерОчереди;
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ШаблонОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
								|en = 'Failed to write %Документ%. %ОписаниеОшибки%'");
			
			ТекстОшибки = СтрЗаменить(ШаблонОшибки, "%Документ%", ТекущийЗаказ);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекущийЗаказ);
			Возврат;
			
		КонецПопытки
		
	КонецЕсли;
	
КонецПроцедуры

// Рассчитывает номер очереди для вставки перед документами
//
// Параметры:
//  Заказы - Массив - заказы на производство.
// 
// Возвращаемое значение:
//   - Число - номер очереди для вставки перед документами.
//
Функция НомерОчередиДляВставкиПередДокументами(Заказы) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Граница.Приоритет     КАК Приоритет,
		|	Граница.Подразделение КАК Подразделение,
		|	Граница.Статус        КАК Статус,
		|	Граница.Очередь       КАК Очередь
		|ПОМЕСТИТЬ ВТГраница
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Граница
		|ГДЕ
		|	Граница.Ссылка В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				Т.Ссылка КАК Ссылка
		|			ИЗ
		|				Документ.ЗаказНаПроизводство2_2 КАК Т
		|			ГДЕ
		|				Т.Ссылка В (&Заказы)
		|				И Т.Статус = &СтатусКПроизводству
		|				И Т.Проведен
		|			УПОРЯДОЧИТЬ ПО
		|				-Т.Приоритет.РеквизитДопУпорядочивания УБЫВ,
		|				Т.Подразделение.РеквизитДопУпорядочивания,
		|				Т.Очередь)
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМинимум ТОГДА
		|		Т.ОчередьМинимум / 2
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ КАК НомерОчереди
		|
		|ИЗ
		|	(ВЫБРАТЬ
		|		МИНИМУМ(Т.Очередь)  КАК ОчередьМинимум,
		|		СРЕДНЕЕ(Т.Очередь)  КАК ОчередьСреднее,
		|		МАКСИМУМ(Т.Очередь) КАК ОчередьМаксимум
		|	ИЗ
		|		(ВЫБРАТЬ ПЕРВЫЕ 2
		|			ЗаказНаПроизводство.Очередь КАК Очередь
		|
		|		ИЗ
		|			Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТГраница КАК Граница
		|
		|				ПО ЗаказНаПроизводство.Приоритет        = Граница.Приоритет
		|					И ЗаказНаПроизводство.Подразделение = Граница.Подразделение
		|					И ЗаказНаПроизводство.Статус        = Граница.Статус
		|					И ЗаказНаПроизводство.Очередь      <= Граница.Очередь
		|					И ЗаказНаПроизводство.Проведен
		|	
		|		УПОРЯДОЧИТЬ ПО
		|			Очередь УБЫВ
		|		) КАК Т
		|	) КАК Т
		|
		|ГДЕ
		|	НЕ ВЫБОР КОГДА Т.ОчередьСреднее = Т.ОчередьМаксимум ТОГДА
		|		Т.ОчередьСреднее + 1
		|	ИНАЧЕ
		|		Т.ОчередьСреднее
		|	КОНЕЦ ЕСТЬ NULL");
	
	Запрос.УстановитьПараметр("Заказы",              Заказы);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НомерОчереди = 0;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НомерОчереди = Выборка.НомерОчереди;
		
	КонецЕсли;
	
	Возврат НомерОчереди;

КонецФункции

// Возвращает очередь заказов для планирования по указанный заказ
//
// Параметры:
//  ТекущийЗаказ			 - ДокументСсылка.ЗаказНаПроизводство2_2 - текущий заказ
//  ПодразделениеДиспетчер	 - СправочникСсылка.СтруктураПредприятия - для какого подразделения-диспетчера нужно получить очередь заказов.
// 
// Возвращаемое значение:
//   - Массив - очередь планирования.
//
Функция ОчередьПланирования(ТекущийЗаказ, ПодразделениеДиспетчер = Неопределено) Экспорт
	
	Запрос = Новый Запрос( 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказНаПроизводство.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК ТекущийЗаказНаПроизводство
		|		ПО (ТекущийЗаказНаПроизводство.Ссылка = &ТекущийЗаказ)
		|			И (ЗаказНаПроизводство.Проведен)
		|			И (ЗаказНаПроизводство.Статус = &СтатусКПроизводству)
		|			И (НЕ &ЕстьОтборПоПодразделению
		|				ИЛИ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Подразделение = ТекущийЗаказНаПроизводство.Подразделение)
		|			И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|				ИЛИ НЕ &ЕстьОтборПоПодразделению
		|					И ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания < ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания
		|				ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания
		|					И (&ЕстьОтборПоПодразделению
		|						ИЛИ НЕ &ЕстьОтборПоПодразделению
		|							И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания = ТекущийЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания)
		|					И ЗаказНаПроизводство.Очередь <= ТекущийЗаказНаПроизводство.Очередь)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания,
		|	ЗаказНаПроизводство.Очередь");
	
	Запрос.УстановитьПараметр("ТекущийЗаказ", ТекущийЗаказ);
	Запрос.УстановитьПараметр("СтатусКПроизводству", СтатусЗаказаКПроизводству());
	
	Запрос.УстановитьПараметр("ПодразделениеДиспетчер", ПодразделениеДиспетчер);
	Запрос.УстановитьПараметр("ЕстьОтборПоПодразделению", ЗначениеЗаполнено(ПодразделениеДиспетчер));
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует временную таблицу с заказами, приоритет которых выше чем у заданного заказа.
// Выбираются проведенные документы во всех статусах кроме Завершен/Закрыт.
//
// Параметры:
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер, в который будет помещена
//		сформированная временная таблица.
//  ИмяВременнойТаблицы	- Строка - имя сформированной временной таблицы.
//  Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ, относительно которого требуется получить
//		более приоритетные заказы.
//
Процедура СоздатьВТЗаказыСБольшимПриоритетом(МенеджерВременныхТаблиц, ИмяВременнойТаблицы, Заказ) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания КАК ПриоритетНомер,
	|	ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания КАК ПодразделениеНомер,
	|	ЗаказНаПроизводство2_2.Очередь КАК Очередь
	|ПОМЕСТИТЬ ВТДанныеРаспоряжения
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Ссылка = &Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТЗаказыСБольшимПриоритетом
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство2_2.Проведен
	|	И ЗаказНаПроизводство2_2.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)
	|	И (ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПодразделениеНомер
	|			ИЛИ ЗаказНаПроизводство2_2.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство2_2.Подразделение.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПодразделениеНомер
	|				И ЗаказНаПроизводство2_2.Очередь < ВТДанныеРаспоряжения.Очередь)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРаспоряжения КАК ВТДанныеРаспоряжения
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЗаказНаПроизводство.Проведен
	|	И ЗаказНаПроизводство.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство.Закрыт)
	|	И (ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания < ВТДанныеРаспоряжения.ПриоритетНомер
	|			ИЛИ ЗаказНаПроизводство.Приоритет.РеквизитДопУпорядочивания = ВТДанныеРаспоряжения.ПриоритетНомер
	|				И ЗаказНаПроизводство.Подразделение.РеквизитДопУпорядочивания <= ВТДанныеРаспоряжения.ПодразделениеНомер)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТЗаказыСБольшимПриоритетом", ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Выполнить();
	
КонецПроцедуры

#КонецОбласти

#Область СхемыОбособления 

// Создает временную таблицу схем обособления продукции в производстве
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц
//  Распоряжения			 - Массив					 - список заказов на производство.
//
Процедура СоздатьВтСхемыОбособленияВПроизводстве(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоРаспоряжению();
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ПОМЕСТИТЬ", "ПОМЕСТИТЬ") + " ИНДЕКСИРОВАТЬ ПО Распоряжение, Назначение ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

// Получает схемы обособления продукции заказа на производство
//
// Параметры:
//  Распоряжения - Массив	 - список заказов на производство.
// 
// Возвращаемое значение:
//   Соответствие -
//    * Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//    * Назначение   - СправочникСсылка.Назначения - назначение продукции заказа на производство.
//
//    * Обособленно - Булево - Истина, если производственный процесс должен быть разделен по назначениям.
//
//    * НазначениеПродукция - СправочникСсылка.Назначения - разделитель учета (целевое назначение продукции)
//    * НазначениеМатериалы - СправочникСсылка.Назначения - назначение обособленного обеспечения этапов материалами и работами.
//
Функция СхемыОбособленияЗаказов(Распоряжения) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоРаспоряжению();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	СхемыОбособления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если СхемыОбособления[Выборка.Распоряжение] = Неопределено Тогда
			СхемыОбособления.Вставить(Выборка.Распоряжение, Новый Соответствие);
		КонецЕсли;
		
		СхемыОбособления[Выборка.Распоряжение].Вставить(Выборка.Назначение, СоздатьСхемуОбособления(Выборка));
		
	КонецЦикла;
	
	Возврат СхемыОбособления;
	
КонецФункции

// Получает схему обособления продукции заказа на производство
//
// Параметры:
//  Распоряжение		 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  НазначениеПродукция	 - СправочникСсылка.Назначения			 - назначение продукции заказа на производство.
// 
// Возвращаемое значение:
//  Структура - схема обособления, см. метод СоздатьСхемуОбособления()
//
Функция СхемаОбособления(Распоряжение, НазначениеПродукция) Экспорт
	
	ТекстЗапроса = ТекстЗапросаСхемыОбособленияПоНазначению();
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Назначение",   НазначениеПродукция);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка.Следующий();
	
	СхемаОбособления = СоздатьСхемуОбособления(Выборка);
	Возврат СхемаОбособления;
	
КонецФункции

#КонецОбласти

#Область УправлениеЗаказами

// Выполняет замену спецификаций в заказах
//  Поддерживается замена спецификаций для продукции.
//
// Параметры:
//  ДанныеЗамены			 - Массив	 - содержит структуру параметров замены:
//  	** Заказ - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  	** НомерСтроки - Число - номер строки заказа на производство
//  	** Спецификация - СправочникСсылка.РесурсныеСпецификации - исходная спецификация
//  	** НоваяСпецификация - СправочникСсылка.РесурсныеСпецификации - новая спецификация
//  ДоступнаЧастичнаяЗамена	 - Булево	 - Признак, доступна частичная замена.
// 
// Возвращаемое значение:
//   Структура - результат замены.
//
Функция ЗаменитьСпецификации(ДанныеЗамены, ДоступнаЧастичнаяЗамена = Ложь) Экспорт
	
	Заказы = Новый Массив;
	Замены = Новый Соответствие;
	
	Для каждого Данные Из ДанныеЗамены Цикл
		
		Замена = Новый Структура("НомерСтроки, Спецификация, НоваяСпецификация");
		ЗаполнитьЗначенияСвойств(Замена, Данные);
		
		Если Замены[Данные.Заказ] <> Неопределено Тогда
			Замены[Данные.Заказ].Добавить(Замена);
		Иначе
			Замены.Вставить(Данные.Заказ, УправлениеПроизводствомКлиентСервер.МассивЗначений(Замена));
			Заказы.Добавить(Данные.Заказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Структура("ЕстьОшибки, Ошибки, ВыполненоЗамен", Ложь, Новый Массив, 0);
	
	Для каждого Заказ Из Заказы Цикл
		
		ВыполненоЗаменВЗаказе = 0;
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.ЗаказНаПроизводство2_2");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Заказ);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОбеспечениеПроизводственныхПроцессов");
			ЭлементБлокировки.УстановитьЗначение("Распоряжение", Заказ);
			
			Блокировка.Заблокировать();
			
			ЗаказОбъект = Заказ.ПолучитьОбъект();
			Если ЗаказОбъект = Неопределено ИЛИ ЗаказЗапланирован(Заказ) Тогда
				ВызватьИсключение НСтр("ru = 'Заказ на производство запланирован (сформированы этапы).';
										|en = 'Production order is planned (stages are generated)'");
			КонецЕсли;
			
			ЗаменыЗаказа = Замены[Заказ];
			
			Для каждого Строка Из ЗаказОбъект.Продукция Цикл
				
				КоличествоЗамен = ЗаменыЗаказа.Количество();
				Если КоличествоЗамен = 0 Тогда
					Прервать;
				КонецЕсли;
				
				Для Индекс = -КоличествоЗамен + 1 По 0 Цикл
					
					Замена = ЗаменыЗаказа[-Индекс];
					
					Если Замена.НомерСтроки = Строка.НомерСтроки
						И (Замена.Спецификация = Строка.Спецификация
							ИЛИ Не ЗначениеЗаполнено(Замена.Спецификация)) Тогда
						
						Строка.Спецификация = Замена.НоваяСпецификация;
						ВыполненоЗаменВЗаказе = ВыполненоЗаменВЗаказе + 1;
						
						ЗаменыЗаказа.Удалить(-Индекс);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаменаЗавершена = Ложь;
			Если (ВыполненоЗаменВЗаказе > 0 И ДоступнаЧастичнаяЗамена) ИЛИ ЗаменыЗаказа.ВГраница() = -1 Тогда
				
				Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
					
					Если ЗаказОбъект.Проведен Тогда
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
					Иначе
						ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли;
					ЗаменаЗавершена = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ЗаменаЗавершена Тогда
				Результат.Ошибки.Добавить(Заказ);
				ВыполненоЗаменВЗаказе = 0;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			СобытиеЖурналаРегистрации = ПроизводствоСервер.СобытиеЗаменаСпецификаций();
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать документ: %1 по причине: %2';
											|en = 'Cannot process the document: %1 due to: %2'"),
								Заказ,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка, Заказ.Метаданные(), Заказ, ТекстСообщения);
			
			Результат.Ошибки.Добавить(Заказ);
			Продолжить;
			
		КонецПопытки;
		Результат.ВыполненоЗамен = Результат.ВыполненоЗамен + ВыполненоЗаменВЗаказе;
		
	КонецЦикла;
	
	Результат.ЕстьОшибки = Результат.Ошибки.Количество() > 0;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УправлениеЭтапами

// Функция проверяет, требуется ли уточнить этапы для заказов
//
// Параметры:
//  Заказы - ДокументСсылка.ЗаказНаПроизводство2_2, Массив - Заказы на производство.
// 
// Возвращаемое значение:
//   - Истина - требуется уточнить этапы.
//
Функция ТребуетсяУточнитьЭтапы(Заказы) Экспорт
	
	Возврат Документы.ЭтапПроизводства2_2.ТребуетсяУточнитьЭтапы(Заказы);
	
КонецФункции

// Функция проверяет, требуется ли сформировать этапы по спецификации для заказов на производство
//
// Параметры:
//  Распоряжения - Массив	 - Заказы на производство.
// 
// Возвращаемое значение:
//   - Истина - требуется сформировать этапы.
//
Функция ТребуетсяСформироватьЭтапыПоСпецификации(Распоряжения) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СоздатьВтДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, Распоряжения);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заказы.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|ГДЕ
	|	Заказы.Ссылка В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				Таблица.Распоряжение
	|			ИЗ
	|				ВтДанныеДляФормированияЭтапов КАК Таблица
	|			ГДЕ
	|				Таблица.Распоряжение = Заказы.Ссылка
	|				И Таблица.Спецификация <> ЗНАЧЕНИЕ(Справочник.РесурсныеСпецификации.ПустаяСсылка)
	|				И Таблица.Количество > 0)
	|	И Заказы.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству))
	|");
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

#КонецОбласти

#Область СтатусДокумента

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2[НовыйСтатус];
	
	Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		Тогда
		КонтролироватьВыполнениеЗаказов = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыНаПроизводствоБезПолнойОтработки");
	Иначе
		КонтролироватьВыполнениеЗаказов = Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением,
	|	&КонтрольЗакрытияЗаказа КАК ЕстьОстаткиПоЗаказу
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ТаблицаДокументов
	|	&СоединениеКонтрольЗакрытияЗаказа
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивСсылок)
	|";
	Если ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаДокументов.ДатаПотребности
		|";
	КонецЕсли;
	ВыполнитьПодстановкуТекстЗапросаКонтрольЗакрытияЗаказа(ТекстЗапроса, КонтролироватьВыполнениеЗаказов);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивДокументов);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Перечисление - Новый статус
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат Не Отказ;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("КонтрольВыполненияЗаказа")
		И ВыборкаПроверки.ЕстьОстаткиПоЗаказу Тогда
		
		ТекстОшибки = НСтр("ru = 'У документа %Документ% статус ""%Статус%"" не установлен, т.к. заказ отработан не полностью';
							|en = 'The ""%Статус%"" status of the %Документ% document is not set as the order is not fully processed'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ВыборкаПроверки.Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", ВыборкаПроверки.ПредставлениеНовогоСтатуса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ВыборкаПроверки.Ссылка);
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область Представление

// Формирует представление заказа на производство.
// Формат: "Заказ № %1 от %2".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс.
// 
// Возвращаемое значение:
//  Строка - представление заказа на производство.
//
Функция ПредставлениеЗаказа(Ссылка, Префикс = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ';
															|en = 'Order'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2';
																			|en = 'No. %1 from %2'");
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Номер,Дата");
	
	НомерЗаказа     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	ДатаЗаказа      = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа);
	
КонецФункции

// Формирует полное представление заказа на производство.
// Формат: "Заказ № %1 от %2, дата потребности %3".
//
// Параметры:
//  Ссылка	 - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство
//  Префикс	 - Строка								 - префикс.
// 
// Возвращаемое значение:
//  Строка - полное представление заказа на производство.
//
Функция ПолноеПредставлениеЗаказа(Ссылка, Префикс = Неопределено) Экспорт
	
	ШаблонПрефикс = ?(Префикс <> Неопределено, Префикс, НСтр("ru = 'Заказ';
															|en = 'Order'"));
	Шаблон = ШаблонПрефикс + ?(ПустаяСтрока(ШаблонПрефикс),""," ") + НСтр("ru = '№ %1 от %2, дата потребности %3';
																			|en = 'No. %1, %2, demand date %3'");
	
	РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,"Номер,Дата,ДатаПотребности");
	
	НомерЗаказа     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыЗаказа.Номер, Ложь, Истина);
	ДатаЗаказа      = Формат(РеквизитыЗаказа.Дата, "ДЛФ=D");
	ДатаПотребности = Формат(РеквизитыЗаказа.ДатаПотребности, "ДЛФ=D");
	
	Возврат СтрШаблон(Шаблон, НомерЗаказа, ДатаЗаказа, ДатаПотребности);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значание:
//	Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	
	Результат.Добавить("Номер");
	Результат.Добавить("Подразделение");
	Результат.Добавить("ТипПроизводственногоПроцесса");
	
	Результат.Добавить("Организация");
	Результат.Добавить("ЗаказПодДеятельность");
	Результат.Добавить("НаправлениеДеятельности");
	
	Результат.Добавить("НазначениеПродукция");
	
	Результат.Добавить("ХозяйственнаяОперация");
	Результат.Добавить("Партнер");
	Результат.Добавить("Договор");
	
	Результат.Добавить("СпособРаспределенияЗатратНаВыходныеИзделия");
	
	Возврат Результат;
	
КонецФункции

// Определяет есть ли право доступа на добавление документа
// 
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на добавление.
//
Функция ПравоДоступаДобавление() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет есть ли право доступа на изменение документа
// 
// Возвращаемое значение:
//   - Булево - Истина, если есть право доступа на изменение.
//
Функция ПравоДоступаИзменение() Экспорт
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2);
	
КонецФункции

// Определяет наличие права доступа "УправлениеОчередьюЗаказовНаПроизводство" для текущего пользователя.
// 
// Возвращаемое значение:
//   - Булево - Истина, если управление очередью доступно.
//
Функция ДоступноУправлениеОчередью() Экспорт
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеКоманды.УправлениеОчередьюЗаказовНаПроизводство);
	
КонецФункции

// Функция проверяет, запланированы ли этапы заказа на производство
//
// Параметры:
//  Ссылка - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
// 
// Возвращаемое значение:
//  Булево - Истина, если заказ запланирован.
//
Функция ЗаказЗапланирован(Ссылка) Экспорт
	
	МассивСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	Возврат ЗаказыЗапланированы(МассивСсылок)[Ссылка];
	
КонецФункции

// Функция проверяет, запланированы ли этапы заказов на производство
//
// Параметры:
//  МассивСсылок - Массив - заказы на производство.
// 
// Возвращаемое значение:
//  Соответствие - соответствие состояния заказов.
//
Функция ЗаказыЗапланированы(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаказыНаПроизводство.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					Документ.ЭтапПроизводства2_2 КАК Этапы
	|				ГДЕ
	|					Этапы.Распоряжение = ЗаказыНаПроизводство.Ссылка
	|					И Этапы.Проведен)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Запланирован
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
	|ГДЕ
	|	ЗаказыНаПроизводство.Ссылка В (&МассивСсылок)");
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат = Новый Соответствие;

	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.Запланирован);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция рассчитывает количество заказов на производство по структуре отбора
//
// Параметры:
//  СтруктураОтборов - Структура - Структура отборов
//   *Статус
//   *Подразделение
//   *Приоритет
//   *Ответственный.
// 
// Возвращаемое значение:
//   - Число - Количество заказов в определенном статусе.
//
Функция КоличествоЗаказов(СтруктураОтборов = Неопределено) Экспорт
	
	КоличествоЗаказов = 0;
	
	Запрос = Новый Запрос;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СхемаЗапроса.УстановитьТекстЗапроса("
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Заказы.Ссылка) КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Проведен");
		
	ОператорВыбораЗаказов = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
	
	Если СтруктураОтборов.Свойство("Статус") Тогда
		
		Запрос.УстановитьПараметр("Статус", СтруктураОтборов.Статус);
		ОператорВыбораЗаказов.Отбор.Добавить("Статус = &Статус");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Подразделение") Тогда
		
		Запрос.УстановитьПараметр("Подразделение", СтруктураОтборов.Подразделение);
		ОператорВыбораЗаказов.Отбор.Добавить("Подразделение = &Подразделение");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Приоритет") Тогда
		
		Запрос.УстановитьПараметр("Приоритет", СтруктураОтборов.Приоритет);
		ОператорВыбораЗаказов.Отбор.Добавить("Приоритет = &Приоритет");
		
	КонецЕсли;
	
	Если СтруктураОтборов.Свойство("Ответственный") Тогда
		
		Запрос.УстановитьПараметр("Ответственный", СтруктураОтборов.Ответственный);
		ОператорВыбораЗаказов.Отбор.Добавить("Ответственный = &Ответственный");
		
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		КоличествоЗаказов = Выборка.Количество;
		
	КонецЕсли;
	
	Возврат КоличествоЗаказов;
	
КонецФункции

// Формирует массив заказов на производство подходящих под параметры поиска
//
// Параметры:
//  Текст	 - Строка	 - текст поиска.
// 
// Возвращаемое значение:
//  Массив - массив, содержащий заказы на производство.
//
Функция АвтоПодборЗаказовНаПроизводство(Текст, СтруктураОтбора = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 7
	|	Таблица.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	НЕ Таблица.ПометкаУдаления
	|	И Таблица.Номер ПОДОБНО &Текст
	|	//Отбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.Дата УБЫВ, Таблица.Ссылка");
	Запрос.УстановитьПараметр("Текст", "%" + Текст + "%");
	
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		ТекстОтбора = "";
		Для каждого КлючИЗначение Из СтруктураОтбора Цикл
			ТекстОтбора = ТекстОтбора + "И Таблица."+КлючИЗначение.Ключ + " В (&"+КлючИЗначение.Ключ + ") ";
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//Отбор", ТекстОтбора);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
// 
//  Возвращаемое значение:
//  Структура - структура параметров, см. Справочники.Назначения.МакетФормыВыбораНазначений().
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СобственноеПроизводство)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.Продукция.Назначение");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы, "Объект.НазначениеПродукция");
	ШаблонНазначения.УсловиеИспользования     = "Объект.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.Партнер                  = "Объект.Партнер";
	ШаблонНазначения.Договор                  = "Объект.Договор";
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеПродукция22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалы22);
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22);
	
	// Потребности в продукции на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад            = "Объект.Продукция.Склад";
	
	// Потребности в производимых работах в подразделении-получателе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботами", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Продукция.Подразделение";
	
	// Потребности в продукции на всех складах.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовВсеСклады", Истина, "Объект.Продукция.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Продукция.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Продукция.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Продукция.Характеристика";
	
	// Все назначения для поля НазначениеПродукция в шапке документа.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.НазначениеПродукция");
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает параметры выбора спецификаций для изделий, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров выбора спецификаций.
//
// Возвращаемое значение:
//   Структура - Структура, переопределяющая умолчания, заданные в функции УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций().
//
Функция ПараметрыВыбораСпецификаций(Объект) Экспорт
	
	ПараметрыВыбораСпецификаций = УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций();
	
	ПараметрыВыбораСпецификаций.ДоступныеТипы.Добавить(Объект.ТипПроизводственногоПроцесса);
	ПараметрыВыбораСпецификаций.ДоступныеСтатусы.Добавить(Перечисления.СтатусыСпецификаций.Действует);
	
	Если Объект.ТипПроизводственногоПроцесса <> Перечисления.ТипыПроизводственныхПроцессов.Разборка Тогда
		ПараметрыВыбораСпецификаций.СпецификацииПоФиксированнойСтоимости = "Показывать";
	КонецЕсли;
	
	Возврат ПараметрыВыбораСпецификаций;
	
КонецФункции

// Имена реквизитов, от значений которых зависят параметры выбора спецификаций
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровВыбораСпецификаций() Экспорт
	
	ИменаРеквизитов = "ТипПроизводственногоПроцесса";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Инициализирует параметры заполнения вида деятельности НДС
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство2_2, ДанныеФормыСтруктура	 - документ, для которого необходимо получить параметры.
// 
// Возвращаемое значение:
//  Структура - структура параметров, см. УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ПараметрыЗаполнения.Организация             = Объект.Организация;
	ПараметрыЗаполнения.Дата                    = Объект.Дата;
	ПараметрыЗаполнения.Склад                   = Неопределено;
	ПараметрыЗаполнения.Договор                 = Неопределено;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	ПараметрыЗаполнения.ВыпускПродукцииИРабот = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает параметры распределения затрат на выходные изделия.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров распределения затрат.
// 
// Возвращаемое значение:
//  Структура - параметры, уточняющие особенности распределения затрат на выходные изделия.
//
Функция ПараметрыРаспределенияЗатрат(Объект) Экспорт
	
	ПараметрыРаспределенияЗатрат = ПроизводствоКлиентСервер.ПараметрыРаспределенияЗатратНаВыходныеИзделия("Продукция", Объект.СпособРаспределенияЗатратНаВыходныеИзделия);
	
	ПараметрыРаспределенияЗатрат.ЕстьПолеОтменено = Истина;
	
	ПараметрыРаспределенияЗатрат.РассчитыватьПолеДоляСтоимостиПроцент = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакЕстьОшибкиЗаполнения = Истина;
	ПараметрыРаспределенияЗатрат.РассчитыватьПризнакДоляСтоимостиОбязательна = Истина;
	
	Возврат ПараметрыРаспределенияЗатрат;
	
КонецФункции

// Функция возвращает крайние номера партии запуска, используется при пакетном формировании этапов производства
//
// Параметры:
//  Распоряжение - ДокументСсылка.ЗаказНаПроизводство2_2 - заказ на производство.
// 
// Возвращаемое значение:
//  Соответствие - крайние номера партии запуска цепочки по заказу на производство.
//
Функция НомераПартийЗапуска(Распоряжения) Экспорт
	
	Результат = Новый Соответствие;
	Если ТипЗнч(Распоряжения) = Тип("Массив") Тогда
		Для каждого Ссылка Из Распоряжения Цикл
			Результат.Вставить(Ссылка, 1);
		КонецЦикла;
	Иначе
		Результат.Вставить(Распоряжения, 1);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.Документ                     КАК Распоряжение,
	|	ISNULL(МАКСИМУМ(Таблица.Код), 0) + 1 КАК НомерПартииЗапуска
	|ИЗ
	|	Справочник.ПартииПроизводства КАК Таблица
	|ГДЕ
	|	Таблица.Документ В (&Распоряжения)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Документ");
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Вставить(Выборка.Распоряжение, Выборка.НомерПартииЗапуска);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область НаправленияДеятельности

Функция ОписаниеФормыДокументаДляЗаполненияРеквизитовСвязанныхСНаправлениемДеятельности() Экспорт
	
	СтруктураОбъекта = НаправленияДеятельностиСервер.СтруктураОбъекта();
	СтруктураОбъекта.ЭтоИсточникПотребности = Истина;
	СтруктураОбъекта.ОформляетсяПоЗаказу = Ложь;
	
	ФильтрХозОперация = Новый Массив();
	ФильтрХозОперация.Добавить("ПОСТУПЛЕНИЕ");
	ОписаниеТабЧасти = Новый Структура("ФильтрХозОперация, ОформляетсяПоЗаказу", ФильтрХозОперация, Ложь);
	
	СтруктураОбъекта.ТабЧасти = Новый Структура();
	СтруктураОбъекта.ТабЧасти.Вставить("Продукция", ОписаниеТабЧасти);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

#КонецОбласти

#Область Проведение

#Область Инициализация

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	// Создание запроса инициализации движений и заполенение его параметров.
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	// Формирование текста запроса.
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры);
	
	// Исполнение запроса и выгрузка полученных таблиц для движений.
	ПроведениеСерверУТ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Дата                         КАК Период,
	|	Таблица.Организация                  КАК Организация,
	|	Таблица.Статус                       КАК СтатусДокумента,
	|	Таблица.Подразделение                КАК Подразделение,
	|	Таблица.ДатаПотребности              КАК ДатаПотребности,
	|	Таблица.НачатьНеРанее                КАК НачатьНеРанее,
	|	Таблица.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
	|	Таблица.НазначениеПродукция          КАК НазначениеПродукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустаяСсылкаНазначение",    Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаСклад",         Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСсылкаПодразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("СтатусФормируется",   Перечисления.СтатусыЗаказовНаПроизводство2_2.Формируется);
	Запрос.УстановитьПараметр("СтатусКПроизводству", Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству);
	Запрос.УстановитьПараметр("СтатусЗакрыт",        Перечисления.СтатусыЗаказовНаПроизводство2_2.Закрыт);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовПроведения

Функция ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                              КАК Период,
	|	ТабличнаяЧасть.НомерСтроки           КАК НомерСтроки,
	|
	|	&Ссылка                              КАК Распоряжение,
	|
	|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
	|	ТабличнаяЧасть.Спецификация          КАК Спецификация,
	|
	|	ВЫБОР
	|		КОГДА НЕ ТабличнаяЧасть.СписатьНаРасходы
	|			И &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|			ТОГДА &НазначениеПродукция
	|		ИНАЧЕ ТабличнаяЧасть.Назначение
	|	КОНЕЦ                                КАК Назначение,
	|
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры В (
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)) 
	|			И НЕ ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|		ТабличнаяЧасть.Склад
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	КОНЕЦ КАК Склад,
	|
	|	ВЫБОР 
	|		КОГДА ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|		  ИЛИ ТабличнаяЧасть.СписатьНаРасходы ТОГДА
	|		ТабличнаяЧасть.Подразделение
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|
	|	ТабличнаяЧасть.СписатьНаРасходы         КАК СписатьНаРасходы,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.АналитикаРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК АналитикаРасходов,
	|
	|	ВЫБОР
	|		КОГДА ТабличнаяЧасть.СписатьНаРасходы 
	|			ТОГДА ТабличнаяЧасть.АналитикаАктивовПассивов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ  									КАК АналитикаАктивовПассивов,
	|
	|	ВЫБОР КОГДА &ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) ТОГДА
	|		ТабличнаяЧасть.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                КАК Требуется,
	|
	|	ВЫБОР КОГДА &ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка) ТОГДА
	|		ТабличнаяЧасть.Количество
	|	ИНАЧЕ
	|		0
	|	КОНЕЦ                                КАК ТребуетсяРазборка
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
	|ГДЕ
	|	ТабличнаяЧасть.Ссылка = &Ссылка
	|	И &СтатусДокумента В (
	|		&СтатусКПроизводству,
	|		&СтатусЗакрыт)
	|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвижениеТоваров";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса =
		// График поступления выходных изделий.
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПотребности = ДАТАВРЕМЯ(1,1,1)
		|			ТОГДА &Период
		|		ИНАЧЕ &ДатаПотребности
		|	КОНЕЦ                                КАК Период,
		|	&Ссылка                              КАК Распоряжение,
		|	ТабличнаяЧасть.Назначение            КАК Назначение,
		|	ТабличнаяЧасть.Номенклатура          КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика        КАК Характеристика,
		|	ТабличнаяЧасть.Склад                 КАК Склад,
		|	
		|	0                                    КАК ПланируемоеПоступление,
		|	0                                    КАК ПланируемоеПоступлениеПодЗаказ,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ТабличнаяЧасть.Количество
		|			ИНАЧЕ
		|				0
		|		КОНЕЦ                            КАК ПланируемоеПоступлениеСНеподтвержденными,
		|	
		|	ВЫБОР КОГДА ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				0
		|			ИНАЧЕ
		|				ТабличнаяЧасть.Количество
		|		КОНЕЦ                            КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными,
		|	&Период                              КАК ДатаРаспоряжения
		|	
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|	И НЕ ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И &СтатусДокумента В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))
		|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
		|	И НЕ ТабличнаяЧасть.СписатьНаРасходы
		|	И НЕ ТабличнаяЧасть.Отменено";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаОбеспечениеЗаказовРаботами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОбеспечениеЗаказовРаботами";
	
	Если НЕ ПроведениеСерверУТ.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 

	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА &ДатаПотребности = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &Период
		|		ИНАЧЕ &ДатаПотребности
		|	КОНЕЦ                                	КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
		|	ТабличнаяЧасть.Подразделение            КАК Подразделение,
		|	ТабличнаяЧасть.Номенклатура             КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика           КАК Характеристика,
		|	ТабличнаяЧасть.Назначение               КАК Назначение,
		|	ТабличнаяЧасть.Количество               КАК КОбеспечению
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|
		|	И ТабличнаяЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|	И ТабличнаяЧасть.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|
		|	И &СтатусДокумента В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))
		|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|															ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
		|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство2_2";
	СинонимТаблицыДокумента = "ТабличнаяЧасть";
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("СтатусДокумента", "ТабличнаяЧасть.Ссылка.Статус");
	ПереопределениеРасчетаПараметров.Вставить("СтатусФормируется", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется)");
	ПереопределениеРасчетаПараметров.Вставить("СтатусКПроизводству", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству)");
	ПереопределениеРасчетаПараметров.Вставить("СтатусЗакрыт", "ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)");
	
	Если ИмяРегистра = "ДвижениеТоваров" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДвижениеТоваров(Запрос, ТекстыЗапроса, ИмяРегистра);
	
	ИначеЕсли ИмяРегистра = "ОбеспечениеПроизводственныхПроцессов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаОбеспечениеПроизводственныхПроцессов(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвижениеТоваровДляОбновленияИБ() Экспорт
	
	ТекстЗапроса =
		// График поступления выходных изделий.
		"ВЫБРАТЬ
		|	&Ссылка                       КАК Распоряжение,
		|	ТабличнаяЧасть.Назначение     КАК Назначение,
		|	ТабличнаяЧасть.Номенклатура   КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Склад          КАК Склад,
		|	
		|	0                             КАК ПланируемоеПоступлениеПодЗаказ,
		|	ТабличнаяЧасть.Количество     КАК ПланируемоеПоступлениеПодЗаказСНеподтвержденными
		|	
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка.Проведен
		|	И НЕ ТабличнаяЧасть.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И НЕ ТабличнаяЧасть.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	И &Статус В(
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.КПроизводству),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Формируется),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт))
		|	И ТабличнаяЧасть.Ссылка.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка)
		|	И НЕ ТабличнаяЧасть.Отменено";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Ссылка", "ТабличнаяЧасть.Ссылка");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Статус", "ТабличнаяЧасть.Ссылка.Статус");
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПартияПроизводства

Функция ПоляПартии(Объект) Экспорт
	
	ПоляПартии = Справочники.ПартииПроизводства.ОписаниеПартииПроизводства();
	
	ПоляПартии.Документ = Объект.Ссылка;
	ПоляПартии.ГруппировкаЗатрат = Перечисления.ГруппировкиЗатратВПроизводствеБезЗаказа.ПоДокументу;
	
	ПоляПартии.ТипПроцесса = Перечисления.ТипыПроизводственныхПроцессов.БезСпецификаций;
	ПоляПартии.Спецификация = Справочники.РесурсныеСпецификации.ПустаяСсылка();
	
	ПоляПартии.Организация = Объект.Организация;
	ПоляПартии.ВидДеятельностиНДС = Объект.ЗаказПодДеятельность;
	
	ПоляПартии.Назначение = Объект.НазначениеПродукция;
	ПоляПартии.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(Объект.НазначениеПродукция) Тогда
		НаправлениеДеятельности = УправлениеПроизводствомПовтИсп.НаправлениеДеятельностиНазначенияПродукции(Объект.НазначениеПродукция);
		ПоляПартии.НаправлениеДеятельности = НаправлениеДеятельности;
	КонецЕсли;
	
	Строки = Объект.Продукция.НайтиСтроки(Новый Структура("Отменено", Ложь));
	Если Строки.Количество() > 0 Тогда
		ПоляПартии.ОсновноеИзделиеНоменклатура = Строки[0].Номенклатура;
		ПоляПартии.ОсновноеИзделиеХарактеристика = Строки[0].Характеристика;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляПартии.ОсновноеИзделиеНоменклатура) Тогда
		ПоляПартии.ГруппаПродукции =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строки[0].Номенклатура, "ГруппаАналитическогоУчета");
	КонецЕсли;
	
	Возврат ПоляПартии;
	
КонецФункции

#КонецОбласти

#Область СхемыОбособления 

Функция ТекстЗапросаСхемыОбособленияПоРаспоряжению()
	
	// Текст запроса модифицируется программно
	//  - создание временной таблицы ВтСхемыОбособленияВПроизводстве
	//  - подстановка параметров.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	СхемыОбособления.Распоряжение КАК Распоряжение,
	|	СхемыОбособления.Назначение   КАК Назначение,
	|
	|	СхемыОбособления.Обособленно КАК Обособленно,
	|
	|	СхемыОбособления.НазначениеПродукция КАК НазначениеПродукция,
	|	СхемыОбособления.НазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	СхемыОбособления.НазначениеМатериалы КАК НазначениеМатериалы,
	|
	|	СхемыОбособления.Распоряжение.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|//ПОМЕСТИТЬ ВтСхемыОбособленияВПроизводстве
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		// настройки для обособленных строк (по табличной части)
	|	
	|		Товары.Ссылка КАК Распоряжение,
	|		Товары.Назначение КАК Назначение,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК Обособленно,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ КАК НазначениеПродукция,
	|	
	|		&ТекстНазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Товары.Назначение
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|						ТОГДА Заказы.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ КАК НазначениеМатериалы
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2.Продукция КАК Товары
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|				ПО Товары.Ссылка = Заказы.Ссылка
	|
	|	ГДЕ
	|		Товары.Ссылка В(&Распоряжения) 
	|		И Товары.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		И Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ // настройки для обособленных строк (по шапки документа)
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка,
	|		Заказы.НазначениеПродукция,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Заказы.НазначениеПродукция
	|			ИНАЧЕ
	|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ,
	|
	|		&ТекстНазначениеПобочногоВыхода,
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА Заказы.НазначениеПродукция
	|			ИНАЧЕ
	|				ВЫБОР
	|					КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|														ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|						ТОГДА Заказы.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		КОНЕЦ
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|		И Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций),
	|													ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|		И Заказы.НазначениеПродукция <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ // настройки для необособленных строк
	|	
	|	ВЫБРАТЬ
	|		Заказы.Ссылка,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|
	|		ВЫБОР
	|			КОГДА &ТекстОбособленно
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|		&ТекстНазначениеПобочногоВыхода,
	|		ВЫБОР
	|			КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|												ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|				ТОГДА Заказы.Назначение
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		КОНЕЦ
	|
	|	ИЗ
	|		Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|	ГДЕ
	|		Заказы.Ссылка В(&Распоряжения)
	|
	|) КАК СхемыОбособления";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно", ТекстЗапросаПолеОбособленно());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстНазначениеПобочногоВыхода", ТекстЗапросаНазначениеПобочногоВыхода());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСхемыОбособленияПоНазначению()
	
	ТекстЗапроса =
	// настройки для обособленных строк
	"ВЫБРАТЬ
	|
	|	Заказы.Ссылка КАК Распоряжение,
	|	&Назначение КАК Назначение,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Обособленно,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА &Назначение
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК НазначениеПродукция,
	|	
	|	&ТекстНазначениеПобочногоВыхода КАК НазначениеПобочногоВыхода,
	|	
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА &Назначение
	|		ИНАЧЕ
	|			ВЫБОР
	|				КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|													ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|					ТОГДА Заказы.Назначение
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК НазначениеМатериалы,
	|
	|	Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение 
	|	И &Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	// настройки для необособленных строк
	|ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|
	|	Заказы.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка),
	|	
	|	&ТекстНазначениеПобочногоВыхода,
	|	
	|	ВЫБОР
	|		КОГДА Заказы.ВариантОбособления В (ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|			ТОГДА Заказы.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ,
	|
	|	Заказы.ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется КАК ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|
	|ИЗ
	|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
	|
	|ГДЕ
	|	Заказы.Ссылка = &Распоряжение
	|	И &Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно",               ТекстЗапросаПолеОбособленно());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстНазначениеПобочногоВыхода", ТекстЗапросаНазначениеПобочногоВыхода());
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаПолеОбособленно(ПутьКДаннымПолеРаспоряжение = Неопределено) Экспорт
	
	ТекстЗапроса = "Заказы.ВариантОбособления = ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции)
				|И Заказы.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)";
	
	Если ПутьКДаннымПолеРаспоряжение <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Заказы", ПутьКДаннымПолеРаспоряжение);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНазначениеПобочногоВыхода()
	
	ТекстЗапроса =
	"ВЫБОР
	|	
	|	КОГДА Заказы.ТипПроизводственногоПроцесса В (ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка))
	|			И Заказы.НазначениеПродукция <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|		ТОГДА
	|			Заказы.НазначениеПродукция
	|	
	|	КОГДА Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
	|			И Заказы.ВариантОбособления В ( ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.НазначениеПродукции),
	|											ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство))
	|	
	|		ТОГДА
	|			Заказы.Назначение
	|	
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	
	|КОНЕЦ";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СоздатьСхемуОбособления(ЗначенияЗаполнения)
	
	СхемаОбособления = Новый Структура("
	|
	|Распоряжение,
	|Назначение,
	|
	|Обособленно,
	|
	|НазначениеПродукция,
	|НазначениеПобочногоВыхода,
	|НазначениеМатериалы,
	|
	|ОбособлениеПолуфабрикатовПоНазначениюЭтаповНеиспользуется
	|");
	ЗаполнитьЗначенияСвойств(СхемаОбособления, ЗначенияЗаполнения);
	
	Возврат СхемаОбособления;
	
КонецФункции

#КонецОбласти

#Область ОбеспечениеПроизводственныхПроцессов

Функция ТекстЗапросаВТНоменклатураКПроизводству(ЕстьОтборПоПериоду = Истина, ТекстОтбораПоИзмерениям = "", СоздатьВременнуюТаблицу = Истина, ИмяВременнойТаблицы = "ВтНоменклатураКПроизводству")
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|
	|	Таблица.Распоряжение     КАК Распоряжение,
	|
	|	Таблица.Номенклатура     КАК Номенклатура,
	|	Таблица.Характеристика   КАК Характеристика,
	|
	|	Таблица.Назначение       КАК Назначение,
	|	Таблица.Этап             КАК Этап,
	|
	|	Таблица.Склад            КАК Склад,
	|	Таблица.Подразделение    КАК Подразделение,
	|
	|	Таблица.СписатьНаРасходы КАК СписатьНаРасходы,
	|
	|	(Таблица.ТребуетсяОборот
	|		- Таблица.ЗапланированоОборот
	|		- Таблица.ПереданоКПроизводствуОборот
	|		- Таблица.ПроизводитсяОборот
	|		- Таблица.ПроизведеноОборот) КАК ТребуетсяПроизводство,
	|
	|	(Таблица.ТребуетсяРазборкаОборот
	|		- (ВЫБОР 
	|			КОГДА Таблица.ЗапланированаРазборкаОборот - Таблица.ГотовКРазборкеОборот > 0
	|				ТОГДА
	|					Таблица.ЗапланированаРазборкаОборот - Таблица.ГотовКРазборкеОборот
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ)) КАК ТребуетсяРазборка
	|
	|ПОМЕСТИТЬ ВтНоменклатураКПроизводству
	|
	|ИЗ
	|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(
	|		&НачалоПериода,
	|		&КонецПериода,
	|		,
	|		&ОтборПоИзмерениям) КАК Таблица
	|ГДЕ
	|	
	|	((Таблица.ТребуетсяОборот
	|		- Таблица.ЗапланированоОборот
	|		- Таблица.ПереданоКПроизводствуОборот
	|		- Таблица.ПроизводитсяОборот
	|		- Таблица.ПроизведеноОборот)
	|		- (Таблица.ТребуетсяОборот * (&ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров / 100))) > 0
	|	
	|	ИЛИ
	|	
	|	(Таблица.ТребуетсяРазборкаОборот
	|		- (ВЫБОР 
	|			КОГДА Таблица.ЗапланированаРазборкаОборот - Таблица.ГотовКРазборкеОборот > 0
	|				ТОГДА
	|					Таблица.ЗапланированаРазборкаОборот - Таблица.ГотовКРазборкеОборот
	|			ИНАЧЕ
	|				0
	|			КОНЕЦ)) > 0
	|";
	
	Если Не ЕстьОтборПоПериоду Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НачалоПериода", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИзмерениям", ТекстОтбораПоИзмерениям);
	
	Если СоздатьВременнуюТаблицу Тогда
		
		Если ИмяВременнойТаблицы <> "ВтНоменклатураКПроизводству" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВтНоменклатураКПроизводству", ИмяВременнойТаблицы);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение,
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Подразделение,
		|	Назначение,
		|	Этап,
		|	СписатьНаРасходы
		|";
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ВтНоменклатураКПроизводству", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СоздатьВтДанныеДляФормированияЭтапов(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	СписокЗапросов = Новый СписокЗначений();
	
	ТекстЗапроса = ТекстЗапросаВТНоменклатураКПроизводству(Истина, " ( Распоряжение В (&Распоряжения) ) ");
	СписокЗапросов.Добавить(ТекстЗапроса, "");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	(Таблица.ТребуетсяОборот
		|		- Таблица.ЗапланированоОборот
		|		- Таблица.ПереданоКПроизводствуОборот
		|		- Таблица.ПроизводитсяОборот
		|		- Таблица.ПроизведеноОборот) КАК Количество
		|
		|ПОМЕСТИТЬ ВтНоменклатураКПроизводствуДетальныеЗаписи
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			(Распоряжение, Номенклатура, Характеристика, Назначение, Этап, Склад, Подразделение, СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.Склад,
		|						Таблица.Подразделение,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяПроизводство > 0)) КАК Таблица
		|ГДЕ
		|	(Таблица.ТребуетсяОборот
		|		- Таблица.ЗапланированоОборот
		|		- Таблица.ПереданоКПроизводствуОборот
		|		- Таблица.ПроизводитсяОборот
		|		- Таблица.ПроизведеноОборот) <> 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "");
	
	ТекстЗапроса = СтрЗаменить(
		"ВЫБРАТЬ
		|	&ТекстИсточник                   КАК Источник,
		|
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	Таблица.Количество               КАК Количество
		|ИЗ
		|	ВтНоменклатураКПроизводствуДетальныеЗаписи КАК Таблица
		|ГДЕ
		|	Таблица.Количество > 0
		|",
		"&ТекстИсточник",
		Документы.ЭтапПроизводства2_2.ТекстЗапросаПолеЭтапИсточник(
			"Таблица.Распоряжение",
			"Таблица.Этап",
			"Таблица.Назначение"));
	СписокЗапросов.Добавить(ТекстЗапроса, "ТребуетсяПроизводство");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Распоряжение             КАК Распоряжение,
		|
		|	Таблица.Номенклатура             КАК Номенклатура,
		|	Таблица.Характеристика           КАК Характеристика,
		|
		|	Таблица.Назначение               КАК Назначение,
		|	Таблица.Этап                     КАК Этап,
		|
		|	Таблица.Склад                    КАК Склад,
		|	Таблица.Подразделение            КАК Подразделение,
		|
		|	Таблица.Спецификация             КАК Спецификация,
		|
		|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
		|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
		|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	-Таблица.Количество              КАК Количество
		|ИЗ
		|	ВтНоменклатураКПроизводствуДетальныеЗаписи КАК Таблица
		|ГДЕ
		|	Таблица.Количество < 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ЗапланированоПроизводство");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|
		|	ВЫБОР
		|		КОГДА Движения.Регистратор ССЫЛКА Документ.ЭтапПроизводства2_2 ТОГДА
		|			Движения.Регистратор
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
		|	КОНЕЦ                             КАК Источник,
		|
		|	Движения.Распоряжение             КАК Распоряжение,
		|
		|	Движения.Номенклатура             КАК Номенклатура,
		|	Движения.Характеристика           КАК Характеристика,
		|
		|	Движения.Назначение               КАК Назначение,
		|	Движения.Этап                     КАК Этап,
		|
		|	Движения.Склад                    КАК Склад,
		|
		|	Движения.Спецификация             КАК Спецификация,
		|
		|	Движения.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Движения.СтатьяРасходов           КАК СтатьяРасходов,
		|	Движения.АналитикаРасходов        КАК АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	СУММА(Движения.ТребуетсяРазборка) КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Движения
		|ГДЕ
		|	(Движения.Распоряжение, Движения.Номенклатура, Движения.Характеристика, Движения.Назначение, Движения.Этап, Движения.Склад, Движения.Подразделение, Движения.СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.Склад,
		|						Таблица.Подразделение,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяРазборка > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Регистратор,
		|	Движения.Распоряжение,
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Назначение,
		|	Движения.Этап,
		|	Движения.Склад,
		|	Движения.Спецификация,
		|	Движения.СписатьНаРасходы,
		|	Движения.СтатьяРасходов,
		|	Движения.АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов
		|
		|ИМЕЮЩИЕ
		|	СУММА(Движения.ТребуетсяРазборка) > 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ТребуетсяРазборка");
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|
		|	Движения.Распоряжение             КАК Распоряжение,
		|
		|	Движения.Номенклатура             КАК Номенклатура,
		|	Движения.Характеристика           КАК Характеристика,
		|
		|	Движения.Склад                    КАК Склад,
		|
		|	Движения.Этап                     КАК Этап,
		|	Движения.Назначение               КАК Назначение,
		|
		|	Движения.Спецификация             КАК Спецификация,
		|
		|	Движения.СписатьНаРасходы         КАК СписатьНаРасходы,
		|	Движения.СтатьяРасходов           КАК СтатьяРасходов,
		|	Движения.АналитикаРасходов        КАК АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|
		|	СУММА(ВЫБОР
		|		КОГДА Движения.ЗапланированаРазборка - Движения.ГотовКРазборке > 0
		|			ТОГДА
		|				Движения.ЗапланированаРазборка - Движения.ГотовКРазборке
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ)                        КАК Количество
		|ИЗ
		|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Движения
		|ГДЕ
		|	(Движения.Распоряжение, Движения.Номенклатура, Движения.Характеристика, Движения.Назначение, Движения.Этап, Движения.Склад, Движения.Подразделение, Движения.СписатьНаРасходы) В
		|					(ВЫБРАТЬ
		|						Таблица.Распоряжение,
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Назначение,
		|						Таблица.Этап,
		|						Таблица.Склад,
		|						Таблица.Подразделение,
		|						Таблица.СписатьНаРасходы
		|					ИЗ
		|						ВтНоменклатураКПроизводству КАК Таблица
		|					ГДЕ 
		|						Таблица.ТребуетсяРазборка > 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	Движения.Распоряжение,
		|	Движения.Номенклатура,
		|	Движения.Характеристика,
		|	Движения.Назначение,
		|	Движения.Этап,
		|	Движения.Склад,
		|	Движения.Спецификация,
		|	Движения.СписатьНаРасходы,
		|	Движения.СтатьяРасходов,
		|	Движения.АналитикаРасходов,
		|	Движения.АналитикаАктивовПассивов
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|		КОГДА Движения.ЗапланированаРазборка - Движения.ГотовКРазборке > 0
		|			ТОГДА
		|				Движения.ЗапланированаРазборка - Движения.ГотовКРазборке
		|		ИНАЧЕ
		|			0
		|		КОНЕЦ) > 0
		|";
	СписокЗапросов.Добавить(ТекстЗапроса, "ЗапланированаРазборка");
	
	ДанныеДляФормирования = СтруктураДанныхДляФормированияЭтаповКонструктор();
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	ГраницыОборотов = ОбщегоНазначенияУТ.ГраницыОборотовРегистра("ОбеспечениеПроизводственныхПроцессов", "Распоряжение В (&Распоряжения)", Новый Структура("Распоряжения", Распоряжения));
	Запрос.Параметры.Вставить("НачалоПериода", ГраницыОборотов.МинимальнаяДата);
	Запрос.Параметры.Вставить("КонецПериода", ГраницыОборотов.МаксимальнаяДата);
	ДопустимоеОтклонение = Константы.ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров.Получить();
	Запрос.УстановитьПараметр("ДопустимоеОтклонениеОтгрузкиПриемкиМерныхТоваров", ДопустимоеОтклонение);
	
	РезультатЗапроса = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, СписокЗапросов,, Истина);
	
	Если РезультатЗапроса["ТребуетсяПроизводство"].Количество() > 0 Тогда
		
		ПорядокРасчета = Новый Массив();
		ПорядокРасчета.Добавить("Распоряжение,Номенклатура,Характеристика,Назначение,Этап,Склад,Подразделение,СписатьНаРасходы");
		
		Требуется     = РезультатЗапроса["ТребуетсяПроизводство"];
		Запланировано = РезультатЗапроса["ЗапланированоПроизводство"];
		Запланировано.Индексы.Добавить(ПорядокРасчета[0]);
		
		СтрокиКОбеспечению = Новый Массив();
		РаспределитьКоличество(Требуется, Запланировано, ПорядокРасчета[0], СтрокиКОбеспечению);
		
		ДобавитьСтрокиВДанныеДляФормированияЭтапов(СтрокиКОбеспечению, ДанныеДляФормирования, 1);
		
	КонецЕсли;
	
	Если РезультатЗапроса["ТребуетсяРазборка"].Количество() > 0 Тогда
		
		ПорядокРасчета = Новый Массив();
		ПорядокРасчета.Добавить("Распоряжение,Номенклатура,Характеристика,Назначение,Этап,Склад");
		
		Требуется     = РезультатЗапроса["ТребуетсяРазборка"];
		Запланировано = РезультатЗапроса["ЗапланированаРазборка"];
		Запланировано.Индексы.Добавить(ПорядокРасчета[0]);
		
		СтрокиКОбеспечению = Новый Массив();
		РаспределитьКоличество(Требуется, Запланировано, ПорядокРасчета[0], СтрокиКОбеспечению);
		
		ДобавитьСтрокиВДанныеДляФормированияЭтапов(СтрокиКОбеспечению, ДанныеДляФормирования, -1);
		
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	Таблица.Спецификация КАК Спецификация,
	|
	|	Таблица.Отправитель  КАК Отправитель,
	|	Таблица.Получатель   КАК Получатель,
	|
	|	Таблица.ЭтапИсточник КАК ЭтапИсточник,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	Таблица.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ДанныеДляФормирования
	|ИЗ
	|	&ДанныеДляФормирования КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Распоряжение,
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Обособленно,
	|
	|	ВЫБОР
	|		КОГДА &ТекстОбособленно
	|			ТОГДА ВЫБОР
	|					КОГДА Таблица.ЭтапИсточник = ЗНАЧЕНИЕ(Документ.ЭтапПроизводства2_2.ПустаяСсылка)
	|						ТОГДА ВЫБОР
	|								КОГДА Таблица.Распоряжение.ТипПроизводственногоПроцесса В (
	|												ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
	|												ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
	|									ТОГДА Таблица.Назначение
	|								ИНАЧЕ Таблица.Распоряжение.НазначениеПродукция
	|							КОНЕЦ
	|					ИНАЧЕ Таблица.ЭтапИсточник.НазначениеПродукция
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК НазначениеПродукция,
	|
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение     КАК Назначение,
	|
	|	Таблица.Спецификация КАК Спецификация,
	|
	|	Таблица.Отправитель  КАК Отправитель,
	|	Таблица.Получатель   КАК Получатель,
	|
	|	Таблица.ЭтапИсточник КАК ЭтапИсточник,
	|
	|	Таблица.СписатьНаРасходы         КАК СписатьНаРасходы,
	|	Таблица.СтатьяРасходов           КАК СтатьяРасходов,
	|	Таблица.АналитикаРасходов        КАК АналитикаРасходов,
	|	Таблица.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|
	|	Таблица.Количество КАК Количество
	|
	|ПОМЕСТИТЬ ВтДанныеДляФормированияЭтапов
	|ИЗ
	|	ДанныеДляФормирования КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеДляФормирования
	|";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбособленно", ТекстЗапросаПолеОбособленно("Таблица.Распоряжение"));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеДляФормирования", ДанныеДляФормирования);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура РаспределитьКоличество(Требуется, Запланировано, Аналитика, Остаток = Неопределено)
	
	Отбор = Новый Структура(Аналитика);
	
	Для каждого СтрокаТребуется Из Требуется Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТребуется);
		Остатки = Запланировано.НайтиСтроки(Отбор);
		
		Для каждого СтрокаОстаток Из Остатки Цикл
			Если СтрокаОстаток.Количество > 0 Тогда
				Сторно = Мин(СтрокаТребуется.Количество, СтрокаОстаток.Количество);
				СтрокаОстаток.Количество = СтрокаОстаток.Количество - Сторно;
				СтрокаТребуется.Количество = СтрокаТребуется.Количество - Сторно;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаТребуется.Количество > 0 И Остаток <> Неопределено Тогда
			Остаток.Добавить(СтрокаТребуется);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтруктураДанныхДляФормированияЭтаповКонструктор()
	
	Результат = Новый ТаблицаЗначений;
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЗаказНаПроизводство2_2");
	Результат.Колонки.Добавить("Распоряжение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Результат.Колонки.Добавить("Номенклатура", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	Результат.Колонки.Добавить("Характеристика", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.РесурсныеСпецификации");
	Результат.Колонки.Добавить("Спецификация", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.СтруктураПредприятия"));
	МассивТипов.Добавить(Тип("СправочникСсылка.Склады"));

	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("Получатель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Результат.Колонки.Добавить("Отправитель", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("СправочникСсылка.Назначения");
	Результат.Колонки.Добавить("Назначение", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("ДокументСсылка.ЭтапПроизводства2_2");
	Результат.Колонки.Добавить("ЭтапИсточник", ОписаниеТипов);
	
	ОписаниеТипов = Новый ОписаниеТипов("Булево");
	Результат.Колонки.Добавить("СписатьНаРасходы", ОписаниеТипов);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	МассивТипов.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиАктивовПассивов"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Результат.Колонки.Добавить("СтатьяРасходов", ОписаниеТипов);
	                                    
	Результат.Колонки.Добавить("АналитикаРасходов", Метаданные.ПланыВидовХарактеристик.СтатьиРасходов.Тип);
	
	Результат.Колонки.Добавить("АналитикаАктивовПассивов", Метаданные.ПланыВидовХарактеристик.СтатьиАктивовПассивов.Тип);
	
	ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный);
	Результат.Колонки.Добавить("Количество", ОписаниеТипов);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокиВДанныеДляФормированияЭтапов(Строки, Таблица, Направление)
	
	Для каждого Строка Из Строки Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(
			НоваяСтрока,
			Строка,
			"Распоряжение,
			|Номенклатура,
			|Характеристика,
			|Спецификация,
			|СписатьНаРасходы,
			|СтатьяРасходов,
			|АналитикаРасходов,
			|АналитикаАктивовПассивов,
			|Количество");

		Если Направление > 0 Тогда

			НоваяСтрока.Назначение   = Строка.Назначение;
			НоваяСтрока.ЭтапИсточник = Строка.Источник;

			НоваяСтрока.Отправитель = Справочники.Склады.ПустаяСсылка();
			НоваяСтрока.Получатель = ?(ЗначениеЗаполнено(Строка.Склад), Строка.Склад, Строка.Подразделение);

		ИначеЕсли Направление < 0 Тогда
			
			НоваяСтрока.Назначение   = Справочники.Назначения.ПустаяСсылка();
			НоваяСтрока.ЭтапИсточник = Строка.Источник;
			
			НоваяСтрока.Отправитель = Строка.Склад;
			НоваяСтрока.Получатель  = Справочники.Склады.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьПодстановкуТекстЗапросаКонтрольЗакрытияЗаказа(ТекстЗапроса, КонтролироватьВыполнениеЗаказов)
	
	Если Не КонтролироватьВыполнениеЗаказов Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрольЗакрытияЗаказа", "ЛОЖЬ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоединениеКонтрольЗакрытияЗаказа", "");
		
		Возврат;
	КонецЕсли;
	
	ПолеПодстановки = "
	|	ВЫБОР
	|		КОГДА ВтКонтрольЗакрытияЗаказа.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонтрольЗакрытияЗаказа", ПолеПодстановки);
	
	ПолеПодстановки = "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВтКонтрольЗакрытияЗаказа
	|ПО
	|	ВтКонтрольЗакрытияЗаказа.Ссылка = ТаблицаДокументов.Ссылка";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СоединениеКонтрольЗакрытияЗаказа", ПолеПодстановки);
	
	Пакет = Новый Массив;
	Пакет.Добавить(ТекстЗапросаКонтрольЗакрытияЗаказа("ВтКонтрольЗакрытияЗаказа"));
	Пакет.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(Пакет, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
КонецПроцедуры

Функция ТекстЗапросаВТНезавершенныеЗаказы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	Таблица.Распоряжение   КАК Распоряжение,
	|	Таблица.Номенклатура   КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Назначение     КАК Назначение,
	|	Таблица.Склад          КАК Склад,
	|	Таблица.Подразделение  КАК Подразделение
	|
	|ПОМЕСТИТЬ ВтОтборПоПродукции
	|ИЗ
	|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Таблица
	|ГДЕ
	|	Таблица.Регистратор В (&МассивСсылок) И Таблица.Требуется > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Склад,
	|	Подразделение
	|;
	|
	|ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Ссылка
	|
	|ПОМЕСТИТЬ ВтНезавершенныеЗаказы
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Распоряжение   КАК Распоряжение,
	|		Таблица.Номенклатура   КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Назначение     КАК Назначение,
	|		Таблица.Склад          КАК Склад,
	|		Таблица.Подразделение  КАК Подразделение
	|	ИЗ
	|		РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(
	|				,
	|				,
	|				,
	|				(Распоряжение,Номенклатура,Характеристика,Назначение,Склад,Подразделение) В(
	|					ВЫБРАТЬ
	|						Отбор.Распоряжение   КАК Распоряжение,
	|						Отбор.Номенклатура   КАК Номенклатура,
	|						Отбор.Характеристика КАК Характеристика,
	|						Отбор.Назначение     КАК Назначение,
	|						Отбор.Склад          КАК Склад,
	|						Отбор.Подразделение  КАК Подразделение
	|					ИЗ
	|						ВтОтборПоПродукции КАК Отбор)) КАК Таблица
	|
	|	ГДЕ
	|		Таблица.ТребуетсяОборот > Таблица.ПроизведеноОборот
	|	
	|	) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаКонтрольЗакрытияЗаказа(ИмяВременнойТаблицы = "") Экспорт
	
	Список = Новый Массив;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Распоряжение КАК Ссылка
	|// ПОМЕСТИТЬ ВТ1
	|ИЗ
	|	ВТНоменклатураКПроизводству КАК Таблица";
	
	Подстановка = ?(ПустаяСтрока(ИмяВременнойТаблицы), "", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "// ПОМЕСТИТЬ ВТ1", Подстановка);
	
	Подстановка = " ( " + ТекстЗапросаВТНоменклатураКПроизводству(Ложь, " ( Распоряжение В (&МассивСсылок) ) ", Ложь) + " ) ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНоменклатураКПроизводству", Подстановка);
	
	Список.Добавить(ТекстЗапроса); // номенклатура к производству
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Распоряжение
	|ИЗ
	|	Документ.ЭтапПроизводства2_2 КАК Таблица
	|ГДЕ
	|	Таблица.Распоряжение В (&МассивСсылок)
	|	И Таблица.Проведен
	|	И Таблица.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭтаповПроизводства2_2.Завершен)";
	
	Список.Добавить(ТекстЗапроса); // номенклатура в работе
	
	ТекстЗапроса = СтрСоединить(Список, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТребуетсяСформироватьЭтапы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ ВтТребуетсяСформироватьЭтапы
	|ИЗ
	|	ВТНоменклатураКПроизводству КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Распоряжение
	|
	|ИМЕЮЩИЕ
	|	(ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.ЗаказНаПроизводство2_2 КАК Т
	|			ГДЕ
	|				Т.Ссылка = Таблица.Распоряжение
	|				И Т.ТипПроизводственногоПроцесса <> ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций))
	|		ИЛИ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ОбеспечениеПроизводственныхПроцессов КАК Т
	|			ГДЕ
	|				Т.Распоряжение = Таблица.Распоряжение
	|				И Т.Запланировано + Т.ПереданоКПроизводству + Т.Производится + Т.Произведено > 0)
	|)";
	
	Подстановка = " ( " + ТекстЗапросаВТНоменклатураКПроизводству(Ложь, " ( Распоряжение В (&МассивСсылок) ) ", Ложь) + " ) ";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТНоменклатураКПроизводству", Подстановка);
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура СоздатьВТЭтапыОбеспечивающиеЗаказы(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТабличнаяЧасть.Ссылка КАК Заказ,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение КАК Назначение,
		|	ТабличнаяЧасть.Склад КАК Склад,
		|	ТабличнаяЧасть.Спецификация КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА Документ.ТипПроизводственногоПроцесса = &Разборка
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ КАК ТипПроцесса,
		|	МИНИМУМ(ТабличнаяЧасть.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТНоменклатураЗаказано
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Ссылка,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Спецификация,
		|	ВЫБОР
		|		КОГДА Документ.ТипПроизводственногоПроцесса = &Разборка
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документ.Распоряжение КАК Заказ,
		|	Документ.Ссылка КАК Этап,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ КАК ТипПроцесса,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ТабличнаяЧасть.Назначение КАК Назначение,
		|	ТабличнаяЧасть.Получатель КАК Склад,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
		|	ТабличнаяЧасть.Произведено КАК Произведено
		|ПОМЕСТИТЬ ВТВыпуск
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ВыходныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	Документ.Ссылка,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Произведено
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Документ.Распоряжение,
		|	Документ.Ссылка,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Получатель,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	СУММА(ТабличнаяЧасть.Количество),
		|	ТабличнаяЧасть.Произведено
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ПобочныеИзделия КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И НЕ ТабличнаяЧасть.Отменено
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Получатель,
		|	ТабличнаяЧасть.Назначение,
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Номенклатура,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА ТабличнаяЧасть.Спецификация
		|		ИНАЧЕ Документ.Спецификация
		|	КОНЕЦ,
		|	Документ.Ссылка,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ОбработатьПоСпецификации
		|			ТОГДА &Разборка
		|		ИНАЧЕ &Сборка
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Произведено
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Документ.Распоряжение КАК Заказ,
		|	Документ.Ссылка КАК Этап,
		|	&Сборка КАК ТипПроцесса,
		|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
		|	ТабличнаяЧасть.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ КАК Назначение,
		|	ТабличнаяЧасть.Склад КАК Склад,
		|	ТабличнаяЧасть.Спецификация КАК Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество) КАК Количество
		|ПОМЕСТИТЬ ВТОбеспечение
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И ТабличнаяЧасть.Производится
		|	И ТабличнаяЧасть.Спецификация <> &ПустаяСпецификация
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабличнаяЧасть.Характеристика,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Номенклатура,
		|	Документ.Ссылка,
		|	ТабличнаяЧасть.Спецификация,
		|	Документ.Распоряжение,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Документ.Распоряжение,
		|	Документ.Ссылка,
		|	&Разборка,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Характеристика,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ,
		|	ТабличнаяЧасть.Склад,
		|	Документ.Спецификация,
		|	СУММА(ТабличнаяЧасть.Количество)
		|ИЗ
		|	Документ.ЭтапПроизводства2_2.ОбеспечениеМатериаламиИРаботами КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭтапПроизводства2_2 КАК Документ
		|		ПО ТабличнаяЧасть.Ссылка = Документ.Ссылка
		|ГДЕ
		|	Документ.Распоряжение В(&Заказы)
		|	И Документ.Проведен
		|	И Документ.ТипПроизводственногоПроцесса = &Разборка
		|	И НЕ ТабличнаяЧасть.Производится
		|
		|СГРУППИРОВАТЬ ПО
		|	Документ.Ссылка,
		|	ТабличнаяЧасть.Номенклатура,
		|	ТабличнаяЧасть.Склад,
		|	ТабличнаяЧасть.Характеристика,
		|	Документ.Распоряжение,
		|	Документ.Спецификация,
		|	ВЫБОР
		|		КОГДА ТабличнаяЧасть.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|			ТОГДА ТабличнаяЧасть.Назначение
		|		ИНАЧЕ &ПустоеНазначение
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТЗаказано.Номенклатура КАК Номенклатура,
		|	ВТЗаказано.Характеристика КАК Характеристика,
		|	ВТЗаказано.Назначение КАК Назначение,
		|	ВТЗаказано.Склад КАК Склад,
		|	ВТЗаказано.Спецификация КАК Спецификация,
		|	ВТЗаказано.Заказ КАК Заказ,
		|	ВТВыпуск.Этап КАК Этап
		|ПОМЕСТИТЬ ВТЭтапыОбеспечивающиеЗаказы
		|	
		|ИЗ
		|	ВТНоменклатураЗаказано КАК ВТЗаказано
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТВыпуск КАК ВТВыпуск
		|		ПО ВТЗаказано.Заказ = ВТВыпуск.Заказ
		|			И ВТЗаказано.Номенклатура = ВТВыпуск.Номенклатура
		|			И ВТЗаказано.Характеристика = ВТВыпуск.Характеристика
		|			И ВТЗаказано.Назначение = ВТВыпуск.Назначение
		|			И ВТЗаказано.Склад = ВТВыпуск.Склад
		|			И ВТЗаказано.Спецификация = ВТВыпуск.Спецификация
		|			И ВТЗаказано.ТипПроцесса = ВТВыпуск.ТипПроцесса
		|ГДЕ
		|	ВТЗаказано.ТипПроцесса = &Сборка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТЗаказано.Номенклатура,
		|	ВТЗаказано.Характеристика,
		|	ВТЗаказано.Назначение,
		|	ВТЗаказано.Склад,
		|	ВТЗаказано.Спецификация,
		|	ВТЗаказано.Заказ,
		|	ВТОбеспечение.Этап
		|ИЗ
		|	ВТНоменклатураЗаказано КАК ВТЗаказано
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбеспечение КАК ВТОбеспечение
		|		ПО ВТЗаказано.Заказ = ВТОбеспечение.Заказ
		|			И ВТЗаказано.Номенклатура = ВТОбеспечение.Номенклатура
		|			И ВТЗаказано.Характеристика = ВТОбеспечение.Характеристика
		|			И ВТЗаказано.Назначение = ВТОбеспечение.Назначение
		|			И ВТЗаказано.Склад = ВТОбеспечение.Склад
		|			И ВТЗаказано.Спецификация = ВТОбеспечение.Спецификация
		|			И ВТЗаказано.ТипПроцесса = ВТОбеспечение.ТипПроцесса
		|ГДЕ
		|	ВТЗаказано.ТипПроцесса = &Разборка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Заказы", Распоряжения);
	Запрос.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСпецификация", Справочники.РесурсныеСпецификации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Сборка", Перечисления.ТипыПроизводственныхПроцессов.Сборка);
	Запрос.УстановитьПараметр("Разборка", Перечисления.ТипыПроизводственныхПроцессов.Разборка);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВтСпособыПолученияМатериалов2_2(МенеджерВременныхТаблиц, Распоряжения) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаВтСпособыПолученияМатериалов2_2());
	Запрос.УстановитьПараметр("Распоряжения", Распоряжения);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаВтСпособыПолученияМатериалов2_2() Экспорт
	
	Возврат
		"ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка 	 КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО 					 КАК Назначение,
		|	ТаблицаМатериалы.Номенклатура    КАК Номенклатура,
		|	ТаблицаМатериалы.Характеристика  КАК Характеристика,
		|	МАКСИМУМ(ТаблицаМатериалы.Склад) КАК Склад,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно) КАК ВариантОбеспечения
		|ПОМЕСТИТЬ ВтСпособыПолученияМатериалов
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ПродукцияЗаказаНаПроизводство
		|		ПО ПродукцияЗаказаНаПроизводство.Ссылка = ЗаказыНаПроизводство.Ссылка
		|		 И НЕ ПродукцияЗаказаНаПроизводство.Отменено
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца КАК ЗаказыДавальца
		|		ПО ЗаказыДавальца.Назначение = ПродукцияЗаказаНаПроизводство.Назначение
		|		 И ЗаказыДавальца.Проведен
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказДавальца.Материалы КАК ТаблицаМатериалы
		|		ПО ТаблицаМатериалы.Ссылка = ЗаказыДавальца.Ссылка
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В(&Распоряжения)
		|	И ЗаказыНаПроизводство.ТипПроизводственногоПроцесса В (
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Сборка),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Ремонт))
		|	И ЗаказыНаПроизводство.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья)
		|	И НЕ ТаблицаМатериалы.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.Ссылка,
		|	ТаблицаМатериалы.Номенклатура,
		|	ТаблицаМатериалы.Характеристика
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗаказыНаПроизводство.Ссылка 	              КАК Распоряжение,
		|	НЕОПРЕДЕЛЕНО 					              КАК Назначение,
		|	ПродукцияЗаказаНаПроизводство.Номенклатура    КАК Номенклатура,
		|	ПродукцияЗаказаНаПроизводство.Характеристика  КАК Характеристика,
		|	МАКСИМУМ(ПродукцияЗаказаНаПроизводство.Склад) КАК Склад,
		|	НЕОПРЕДЕЛЕНО                                  КАК ВариантОбеспечения
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказыНаПроизводство
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2.Продукция КАК ПродукцияЗаказаНаПроизводство
		|		ПО ПродукцияЗаказаНаПроизводство.Ссылка = ЗаказыНаПроизводство.Ссылка
		|			И НЕ ПродукцияЗаказаНаПроизводство.Отменено
		|ГДЕ
		|	ЗаказыНаПроизводство.Ссылка В(&Распоряжения)
		|	И ЗаказыНаПроизводство.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.Разборка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.Ссылка,
		|	ПродукцияЗаказаНаПроизводство.Номенклатура,
		|	ПродукцияЗаказаНаПроизводство.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Распоряжение, Назначение, Номенклатура, Характеристика, Склад";
	
КонецФункции

#КонецОбласти

#Область Давалец

// Формирует результат запроса по непоставленной части заказов
//
// Параметры:
//	ЗаказДавальца - ДокументСсылка.ЗаказДавальца - Заказ давальца, для которого необходимо создать/перезаполнить заказ на производство продукции по заказу давальца.
//	ТекущийДокумент - ДокументСсылка.ЗаказНаПроизводство - Заказ на производство, который необходимо перезаполнить продукцией.
//	ТипПроизводственногоПроцесса - ПеречислениеСсылка.ТипыПроизводственныхПроцессов - отбор строк по типу производственного процесса.
//
// Вовращаемое значение:
//	Результат запроса - результат запроса для заполнения табличной части продукции заказа на производство по заказу давальца.
//
Функция ОстаткиПродукцииКОбеспечениюДавальцу(МассивЗаказов, ТекущийДокумент = Неопределено, ТипПроизводственногоПроцесса = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Таблица.Номенклатура      КАК Номенклатура,
		|	Таблица.Характеристика    КАК Характеристика,
		|	Таблица.Ссылка.Назначение КАК Назначение,
		|	Таблица.Склад             КАК Склад,
		|	СУММА(Таблица.Количество) КАК Количество,
		|	МАКСИМУМ(Таблица.Спецификация) КАК Спецификация,
		|	МАКСИМУМ(Таблица.Упаковка)     КАК Упаковка,
		|	
		|	МИНИМУМ(ВЫБОР КОГДА Таблица.Ссылка.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1,1,1) ТОГДА
		|				Таблица.ДатаОтгрузки
		|			ИНАЧЕ
		|				Таблица.Ссылка.ЖелаемаяДатаОтгрузки
		|		КОНЕЦ)                     КАК ДатаПотребности
		|ПОМЕСТИТЬ ВтЗаказДавальца
		|ИЗ
		|	Документ.ЗаказДавальца.Продукция КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В(&МассивЗаказов)
		|	И Таблица.ВариантОбеспечения = ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.Обособленно)
		|	И (&ТипПроизводственногоПроцесса <> НЕОПРЕДЕЛЕНО И Таблица.Ссылка.ТипПроизводственногоПроцесса = &ТипПроизводственногоПроцесса
		|		ИЛИ &ТипПроизводственногоПроцесса = НЕОПРЕДЕЛЕНО)
		|	И НЕ Таблица.Отменено
		|СГРУППИРОВАТЬ ПО
		|	Таблица.Номенклатура, Таблица.Характеристика, Таблица.Склад, Таблица.Ссылка.Назначение
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Набор.Назначение     КАК Назначение,
		|	Набор.Номенклатура   КАК Номенклатура,
		|	Набор.Характеристика КАК Характеристика,
		|	Набор.Склад          КАК Склад,
		|	СУММА(Набор.Количество) КАК Количество
		|ПОМЕСТИТЬ ВтОстатки
		|ИЗ(
		|	ВЫБРАТЬ
		|		ТаблицаОстатков.Назначение     КАК Назначение,
		|		ТаблицаОстатков.Номенклатура   КАК Номенклатура,
		|		ТаблицаОстатков.Характеристика КАК Характеристика,
		|		ТаблицаОстатков.Склад          КАК Склад,
		|		ТаблицаОстатков.КЗаказуОстаток КАК Количество
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|			(Номенклатура, Характеристика, Склад, Назначение) В(
		|				ВЫБРАТЬ
		|					Таблица.Номенклатура   КАК Номенклатура,
		|					Таблица.Характеристика КАК Характеристика,
		|					Таблица.Склад          КАК Склад,
		|					Таблица.Назначение     КАК Назначение
		|				ИЗ
		|					ВтЗаказДавальца КАК Таблица)) КАК ТаблицаОстатков
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|		
		|	ВЫБРАТЬ
		|		Движения.Назначение     КАК Назначение,
		|		Движения.Номенклатура   КАК Номенклатура,
		|		Движения.Характеристика КАК Характеристика,
		|		Движения.Склад          КАК Склад,
		|		-ВЫБОР КОГДА Движения.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|					Движения.КЗаказу
		|				ИНАЧЕ
		|					-Движения.КЗаказу
		|			КОНЕЦ               КАК Количество
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов КАК Движения
		|			
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаказДавальца КАК Фильтр
		|			ПО Фильтр.Номенклатура        = Движения.Номенклатура
		|			 И Фильтр.Характеристика = Движения.Характеристика
		|			 И Фильтр.Склад          = Движения.Склад
		|			 И Фильтр.Назначение     = Движения.Назначение
		|		
		|	ГДЕ
		|		Движения.Активность
		|		И Движения.Регистратор = &ТекущийДокумент
		|		И НЕ Фильтр.Назначение ЕСТЬ NULL) КАК Набор
		|СГРУППИРОВАТЬ ПО
		|	Набор.Номенклатура, Набор.Характеристика, Набор.Склад, Набор.Назначение
		|ИМЕЮЩИЕ
		|	СУММА(Набор.Количество) > 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказТовары.Назначение      КАК Назначение,
		|	ЗаказТовары.Номенклатура    КАК Номенклатура,
		|	ЗаказТовары.Характеристика  КАК Характеристика,
		|	ЗаказТовары.Склад           КАК Склад,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ                   КАК Количество,
		|	
		|	ВЫБОР КОГДА ЗаказТовары.Количество <= ТаблицаОстатки.Количество ТОГДА
		|				ЗаказТовары.Количество
		|			ИНАЧЕ
		|				ЕСТЬNULL(ТаблицаОстатки.Количество, 0)
		|		КОНЕЦ / ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки, 1) КАК КоличествоУпаковок,
		|	
		|	ЗаказТовары.Спецификация    КАК Спецификация,
		|	ЗаказТовары.Упаковка        КАК Упаковка,
		|	
		|	ЗаказТовары.ДатаПотребности КАК ДатаПотребности,
		|	
		|	ЛОЖЬ               КАК ИзмененияЗапрещены,
		|	&РазмещениеВыпуска КАК РазмещениеВыпуска,
		|	&НачатьНеРанее     КАК НачатьНеРанее
		|ИЗ
		|	ВтЗаказДавальца КАК ЗаказТовары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстатки КАК ТаблицаОстатки
		|		ПО ТаблицаОстатки.Номенклатура   = ЗаказТовары.Номенклатура
		|		 И ТаблицаОстатки.Характеристика = ЗаказТовары.Характеристика
		|		 И ТаблицаОстатки.Склад          = ЗаказТовары.Склад
		|		 И ТаблицаОстатки.Назначение     = ЗаказТовары.Назначение
		|ГДЕ
		|	НЕ ТаблицаОстатки.Номенклатура ЕСТЬ NULL";
	
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЗаказТовары.Упаковка", "ЗаказТовары.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки", Подстановка);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивЗаказов",     МассивЗаказов);
	Запрос.УстановитьПараметр("НачатьНеРанее",     НачалоДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("РазмещениеВыпуска", Перечисления.СпособыПривязкиОперацийПроизводства.КНачалу);
	Запрос.УстановитьПараметр("ТекущийДокумент",   ТекущийДокумент);
	Запрос.УстановитьПараметр("ТипПроизводственногоПроцесса", ТипПроизводственногоПроцесса);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаПроизводство") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ЗаказНаПроизводство",
			НСтр("ru = 'Заказ на производство';
				|en = 'Production order'"),
			СформироватьПечатнуюФормуЗаказНаПроизводство(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки,
		МассивОбъектов,
		КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуЗаказНаПроизводство(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаказНаПроизводство2_2_ЗаказНаПроизводство";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаказНаПроизводство2_2.ПФ_MXL_ЗаказНаПроизводство");
	ПервыйДокумент = Истина;
	
	ДанныеДляПечати = ДанныеДляПечатиЗаказНаПроизводство(МассивОбъектов);
	ВыборкаШапка = ДанныеДляПечати.ВыборкаШапка;
	ВыборкаПродукция = ДанныеДляПечати.ВыборкаПродукция;
	
	Пока ВыборкаШапка.Следующий() Цикл
	
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Шапка - Заголовок
		
		Область = Макет.ПолучитьОбласть("Заголовок");
		
		Область.Параметры.ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
			ВыборкаШапка,
			СтрШаблон(НСтр("ru = 'Заказ на производство (%1)';
							|en = 'Production order (%1)'"), НРег(ВыборкаШапка.ТипПроизводственногоПроцесса)));
		Область.Параметры.Ссылка = ВыборкаШапка.Ссылка;
		
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(
			ТабличныйДокумент,
			Макет,
			Область,
			ВыборкаШапка.Ссылка);
	
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Организация
		
		Область = Макет.ПолучитьОбласть("Организация");
		Область.Параметры.Заполнить(ВыборкаШапка);
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Диспетчер
		
		Область = Макет.ПолучитьОбласть("Диспетчер");
		Область.Параметры.Заполнить(ВыборкаШапка);
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка - Давалец
		
		Если ВыборкаШапка.ПроизводствоИзДавальческогоСырья Тогда
			
			Область = Макет.ПолучитьОбласть("Давалец");
			Область.Параметры.Заполнить(ВыборкаШапка);
			ТабличныйДокумент.Вывести(Область);
			
		КонецЕсли;
		
		// Таблица
		
		Если ВыборкаПродукция.НайтиСледующий(Новый Структура("Ссылка", ВыборкаШапка.Ссылка)) Тогда
			
			КолонкаКодов = ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
			ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);
	
			Если ВыводитьКоды Тогда
		    	
				ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы_СКодом");
				ОбластьШапка.Параметры.ИмяКолонкиКодов = КолонкаКодов;
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы_СКодом");
				
			Иначе
				
				ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы_БезКода");
				ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы_БезКода");
		
			КонецЕсли;
			
			ОбластьШапка.Параметры.ИмяКолонкиНоменклатура = ПроизводствоКлиентСервер.ЗаголовокТабличнойЧастиПоТипуПроцесса(
				ВыборкаШапка.ТипПроизводственногоПроцесса);
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			НомерСтроки = 0;
			Выборка = ВыборкаПродукция.Выбрать();
			Пока Выборка.Следующий() Цикл
		
				ОбластьСтрока.Параметры.Заполнить(Выборка);
				
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
		
				Если ВыводитьКоды Тогда
					ОбластьСтрока.Параметры.Артикул = Выборка[КолонкаКодов];
				КонецЕсли;
						
				ОбластьСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименованиеПолное);
		
				ТабличныйДокумент.Вывести(ОбластьСтрока);
		
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ПодвалТаблицы"));
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент,
			НомерСтрокиНачало,
			ОбъектыПечати,
			ВыборкаШапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиЗаказНаПроизводство(Ссылки)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Заказы.Ссылка                       КАК Ссылка,
		|	Заказы.Номер                        КАК Номер,
		|	Заказы.Дата                         КАК Дата,
		|	Заказы.Организация                  КАК Организация,
		|	Заказы.Организация.Представление    КАК ОрганизацияПредставление,
		|	Заказы.Подразделение                КАК Диспетчер,
		|	Заказы.Подразделение.Представление  КАК ДиспетчерПредставление,
		|	Заказы.Партнер                      КАК Давалец,
		|	Заказы.Партнер.Представление        КАК ДавалецПредставление,
		|	Заказы.ТипПроизводственногоПроцесса КАК ТипПроизводственногоПроцесса,
		|	Заказы.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья) КАК ПроизводствоИзДавальческогоСырья
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка В(&Ссылки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Продукция.Ссылка                            КАК Ссылка,
		|	Продукция.Номенклатура                      КАК Номенклатура,
		|	Продукция.Номенклатура.Код                  КАК Код,
		|	Продукция.Номенклатура.Артикул              КАК Артикул,
		|	Продукция.Номенклатура.НаименованиеПолное   КАК НоменклатураНаименованиеПолное,
		|	Продукция.Характеристика.НаименованиеПолное КАК ХарактеристикаНаименованиеПолное,
		|	Продукция.Спецификация                      КАК Спецификация,
		|	Продукция.Спецификация.Представление        КАК СпецификацияПредставление,
		|	&ТекстЗапросаЕдиницаИзмерения               КАК ЕдиницаИзмерения,
		|	Продукция.КоличествоУпаковок                КАК Количество
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2.Продукция КАК Продукция
		|ГДЕ
		|	Продукция.Ссылка В(&Ссылки)
		|	И Продукция.Отменено = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	Продукция.НомерСтроки
		|ИТОГИ ПО
		|	Ссылка";
	
	ТекстЕдИзм = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
		"Наименование",
		"Продукция.Упаковка",
		"Продукция.Номенклатура");
			
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса,
		"&ТекстЗапросаЕдиницаИзмерения",
		ТекстЕдИзм);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", Ссылки);
	
	УстановитьПривилегированныйРежим(Истина);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДляПечати = Новый Структура;
	ДанныеДляПечати.Вставить("ВыборкаШапка", МассивРезультатов[0].Выбрать());
	ДанныеДляПечати.Вставить("ВыборкаПродукция", МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат ДанныеДляПечати;
	
КонецФункции

#КонецОбласти

#Область Прочее

#Область ФормированиеГиперссылкиВЖурналеПроизводства

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Не ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаПроизводство2_2) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказНаПроизводство2_2.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство2_2 КАК ЗаказНаПроизводство2_2
		|ГДЕ
		|	НЕ ЗаказНаПроизводство2_2.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
		|	И (ЗаказНаПроизводство2_2.Организация = &Организация
		|		ИЛИ &ВсеОрганизации)
		|	И (ЗаказНаПроизводство2_2.Подразделение = &Подразделение
		|		ИЛИ &ВсеПодразделения)";
	
	Запрос.УстановитьПараметр("ВсеОрганизации", Не ЗначениеЗаполнено(Параметры.Организация));
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("ВсеПодразделения", Не ЗначениеЗаполнено(Параметры.Подразделение));
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеПроизводством") Тогда
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство 2.2';
								|en = 'Production orders 2.2'");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Заказы на производство';
								|en = 'Production orders'");
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			"Документ.ЗаказНаПроизводство2_2.Форма.ФормаСписка");
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			"Документ.ЗаказНаПроизводство2_2.Форма.ФормаСписка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

// Возврашает шаблон для генерации назначения документа
//
// Параметры:
//  Объект	 - ДокументОбъект.ЗаказНаПроизводство2_2 - заказ.
// 
// Возвращаемое значение:
//  Структура - (см. функцию Справочники.Назначения.ШаблонНового).
//
Функция ШаблонНазначения(Объект) Экспорт
	
	ШаблонНазначения = Справочники.Назначения.ШаблонНового();
	
	ВариантОбособления = УправлениеПроизводством.ВариантОбособленияМатериаловВПроизводстве();
	
	Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЭтапПроизводства Тогда
		
		Если НаправленияДеятельностиСервер.ЭтоНаправлениеДеятельностиСОбособлениемТоваровИРабот(Объект.НаправлениеДеятельности) Тогда
			ШаблонНазначения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		КонецЕсли;
		
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья Тогда
			
			ШаблонНазначения.Партнер = Объект.Партнер;
			ШаблонНазначения.Договор = Объект.Договор;
			
			Если ВариантОбособления = Перечисления.ВариантыОбособленияМатериаловВПроизводстве.ЗаказНаПроизводство Тогда
				
				ШаблонНазначения.Заказ = Объект.Ссылка;
				ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалыПодЭтап22;
				
			Иначе //НаправлениеДеятельности и НазначениеПродукции
				
				ШаблонНазначения.ТипНазначения = Перечисления.ТипыНазначений.ДавальческоеМатериалы22;
				
			КонецЕсли;
			
		Иначе
			
			Если ВариантОбособления <> Перечисления.ВариантыОбособленияМатериаловВПроизводстве.НаправлениеДеятельности
				Или Не ЗначениеЗаполнено(ШаблонНазначения.НаправлениеДеятельности) Тогда
				
				ШаблонНазначения.Заказ = Объект.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ШаблонНазначения;
	
КонецФункции

Функция СтатусЗаказаКПроизводству()
	
	Возврат Перечисления.СтатусыЗаказовНаПроизводство2_2.КПроизводству;
	
КонецФункции

// Возвращает текст запроса, результатом выполнения которого является перечень заказов (в разрезе продукции),
// по которым произведена часть продукции, а производство оставшейся части не запланировано.
// 
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВТНезапланированнаяПродукцияЗаказа() Экспорт
	
	ТекстыЗапроса = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыНаПроизводство.Распоряжение КАК Распоряжение
	|ПОМЕСТИТЬ ЗаказыСОборотами
	|ИЗ
	|	РегистрНакопления.ОбеспечениеПроизводственныхПроцессов.Обороты(&НачалоПериода, &КонецПериода) КАК ЗаказыНаПроизводство
	|ГДЕ
	|	НЕ ЗаказыНаПроизводство.ПроизведеноОборот = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыСОборотами.Распоряжение КАК Ссылка
	|ПОМЕСТИТЬ ЗаказыТребующиеПроверки
	|ИЗ
	|	ЗаказыСОборотами КАК ЗаказыСОборотами
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыЗаказа
	|	ПО РеквизитыЗаказа.Ссылка = ЗаказыСОборотами.Распоряжение
	|	
	|ГДЕ
	|	РеквизитыЗаказа.Организация В (&МассивОрганизаций)
	|	И НЕ РеквизитыЗаказа.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовНаПроизводство2_2.Закрыт)
	|	И РеквизитыЗаказа.ТипПроизводственногоПроцесса = ЗНАЧЕНИЕ(Перечисление.ТипыПроизводственныхПроцессов.БезСпецификаций)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ТекстЗапросаВТНоменклатураКПроизводству(
		Ложь, 
		"	Распоряжение В (ВЫБРАТЬ
		|						Распоряжения.Ссылка
		|					ИЗ
		|						ЗаказыТребующиеПроверки КАК Распоряжения)");
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РеквизитыЗаказа.Организация					КАК Организация,
	|	ВтНоменклатураКПроизводству.Распоряжение	КАК ЗаказНаПроизводство,
	|	ВтНоменклатураКПроизводству.Номенклатура	КАК Номенклатура,
	|	ВтНоменклатураКПроизводству.Характеристика	КАК Характеристика,
	|	ВтНоменклатураКПроизводству.Назначение		КАК Назначение
	|ПОМЕСТИТЬ НезапланированнаяПродукцияБезСпецификаций
	|ИЗ
	|	ВтНоменклатураКПроизводству КАК ВтНоменклатураКПроизводству
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство2_2 КАК РеквизитыЗаказа
	|	ПО РеквизитыЗаказа.Ссылка = ВтНоменклатураКПроизводству.Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	РеквизитыЗаказа.Организация,
	|	ВтНоменклатураКПроизводству.Распоряжение,
	|	ВтНоменклатураКПроизводству.Номенклатура,
	|	ВтНоменклатураКПроизводству.Характеристика,
	|	ВтНоменклатураКПроизводству.Назначение
	|";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	Возврат СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
КонецФункции

#КонецОбласти 

#Область ОбновлениеИнформационнойБазы

#Область Обработчик_СписатьНаРасходы

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
