#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииПереопределяемый.ДобавитьКомандуСоздатьНаОснованииБизнесПроцессЗадание(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Сверка взаиморасчетов".
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СверкаВзаиморасчетов) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СверкаВзаиморасчетов.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СверкаВзаиморасчетов);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	Отчеты.РасчетыСПартнерами.ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

// Заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров заполнения.
//		* РасшифровкаПоЗаказам - Булево - Признак расшифровки по заказам.
//		* РасшифровкаПоПартнерам - Булево - Признак расшифровки по партнерам.
//		* РасшифровкаПоДоговорам - Булево - Признак расшифровки по договорам.
//		* Партнер - СправочникСсылка.Партнеры - Партнер документа.
//		* Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор документа.
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции.
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(СтруктураПараметров, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.ТипРасчетов");
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.Партнер");
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.Договор");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.ТипРасчетов");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.Партнер");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.Договор");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингАрендныеОбзятельстваКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингЛизинговыйПлатежКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингВыкупПредметаЛизингаКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыГруппаКомиссия");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингГруппаВыкуп");

	
	МассивРеквизитовОперации = Новый Массив;
	Если СтруктураПараметров.ПоказатьТипРасчетов Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.ТипРасчетов");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.ТипРасчетов");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьПартнера Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.Партнер");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Партнер");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьДоговор Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.Договор");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Договор");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингАрендныеОбзятельстваКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингЛизинговыйПлатежКонтрагент");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьКомиссия Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыГруппаКомиссия");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьВыкупПредметаЛизинга Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингГруппаВыкуп");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения И СтруктураПараметров.ЕстьКомиссия Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения И СтруктураПараметров.ЕстьВыкупПредметаЛизинга Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингВыкупПредметаЛизингаКонтрагент");
	КонецЕсли;
	
КонецПроцедуры

// Определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СверкаВзаиморасчетов - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.НачалоПериода,
	|	ДанныеДокумента.КонецПериода
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять.
//	НовыйСтатус - Строка - Имя нового статуса.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыСверокВзаиморасчетов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки.
//	НовыйСтатус - Перечисление - Новый статус.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "СверкаВзаиморасчетов" отсутствуют дополнительные проверки
	
КонецФункции

// Возвращает КлючОбъекта для сохранения в хранилище общих настроек пользователя
Функция КлючОбъектаПользовательскихНастроек() Экспорт
	
	Возврат "Документ.СверкаВзаиморасчетов";
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт сверки взаимных расчетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаСверкиВзаиморасчетов";
	КомандаПечати.Идентификатор = "АктСверкиВзаимныхРасчетов";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаимных расчетов';
										|en = 'Mutual settlements reconciliation statement'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ПАРАМЕТРЫ.
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ОбъектыПечати		   - СписокЗначений	  - Список объектов печати.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетов") Тогда
		
		ДокументыНаПечать = ДокументыНаПечать(МассивОбъектов);
		
		МакетНаПечать = Новый ТабличныйДокумент;
		Если ДокументыНаПечать.Новые.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(ДокументыНаПечать.Новые, ОбъектыПечати);
			МассивДокументов = ДокументыНаПечать.Новые;
			
		КонецЕсли;
		
		Если ДокументыНаПечать.Старые.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ДокументыНаПечать.Старые, ОбъектыПечати, МакетНаПечать);
			МассивДокументов = ДокументыНаПечать.Старые;
			
		КонецЕсли;
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктСверкиВзаимныхРасчетов",
			НСтр("ru = 'Акт сверки взаимных расчетов';
				|en = 'Mutual settlements reconciliation statement'"),
			МакетНаПечать);
			
		ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивДокументов, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(МассивОбъектов, ОбъектыПечати)

	УстановитьПривилегированныйРежим(Истина);
	НастройкиПечати = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
							КлючОбъектаПользовательскихНастроек(),
							"НастройкиПечати");
	НастройкиПечати.Вставить("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	РезультатЗапроса = ВыборкаДанныхДокумента(МассивОбъектов, НастройкиПечати);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;

	ПервыйДокумент = Истина;
	ДанныеДокумента = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ДанныеДокумента.Следующий() Цикл
		
		ДанныеПоТипуРасчетов = ДанныеДокумента.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов.ПФ_MXL_АктСверкиВзаимныхРасчетов");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		#Область ШапкаДокумента
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru = 'Акт сверки взаимных расчетов';
																											|en = 'Mutual settlements reconciliation statement'"));
		
		ЕстьОстаткиОборотыЗаПериод = ДанныеДокумента.ЕстьОбороты ИЛИ ДанныеДокумента.НачальноеСальдоДт <> 0 ИЛИ ДанныеДокумента.НачальноеСальдоКт <> 0
			ИЛИ ДанныеДокумента.КонечноеСальдоДт <> 0 ИЛИ ДанныеДокумента.КонечноеСальдоКт <> 0;
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'по состоянию на %1';
													|en = 'as on %1'"), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
			ПредставлениеПериодаРасчетов = СтрШаблон(НСтр("ru = 'По состоянию на %1';
															|en = 'As of %1'"), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за период: %1';
														|en = 'for the period: %1'"), ПредставлениеПериода);
				
			Иначе
				ПредставлениеПериода = СтрШаблон(НСтр("ru = 'за %1';
														|en = 'for %1'"), ПредставлениеПериода);
				
			КонецЕсли;
			
			ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 были осуществлены следующие расчеты';
										|en = 'In the period from %1 to %2 the following settlements were made'")+":";
			Если НЕ ЕстьОстаткиОборотыЗаПериод Тогда
				ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 операции по расчетам не производились.';
											|en = 'In the period from %1 to %2 no settlement operations were performed.'");
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтрШаблон(
				ШаблонПериодаРасчетов,
				Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		Если ЗначениеЗаполнено(ДанныеДокумента.Договор) Тогда
			ОбластьМакета.Параметры.ПредставлениеДоговора = НСтр("ru = 'по договору';
																|en = 'by contract'") + ": " + ДанныеДокумента.ПредставлениеДоговора;
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовка 			 = ТекстЗаголовка;
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода 	 = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		#Область ДетальныеЗаписи
		ТаблицаЗадолженности = Новый ТаблицаЗначений;
		ТаблицаЗадолженности.Колонки.Добавить("Валюта");
		ТаблицаЗадолженности.Колонки.Добавить("СуммаДт");
		ТаблицаЗадолженности.Колонки.Добавить("СуммаКт");
		НастройкиПечати.Вставить("ПредставленияУчастников", СтруктураПредставленийУчастников);
		Пока ДанныеПоТипуРасчетов.Следующий() Цикл
			ДанныеПоОбъектуГруппировки = ДанныеПоТипуРасчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ДанныеПоОбъектуГруппировки.Следующий() Цикл
				ЕстьДанныеГруппировки = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт <> 0
											ИЛИ ДанныеПоОбъектуГруппировки.НачальноеСальдоКт <> 0
											ИЛИ ДанныеПоОбъектуГруппировки.ЕстьОбороты;
				Если ЕстьДанныеГруппировки Тогда
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписи(ДанныеПоОбъектуГруппировки, ДанныеДокумента, Макет, ТаблицаЗадолженности, НастройкиПечати));
				КонецЕсли;
			КонецЦикла; // по детальным записиям
		КонецЦикла; // по видам расчетов Взаиморасчеты/ФинансовыеИнструменты
		#КонецОбласти
		
		#Область Задолженность
		
		Если ТаблицаЗадолженности.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок		 = Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьМакетаСтрока			 = Макет.ПолучитьОбласть("СтрокаЗадолженность");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ТаблицаЗадолженностиПоВалютам = ТаблицаЗадолженности.Скопировать();
			ТаблицаЗадолженностиПоВалютам.Свернуть("Валюта", "СуммаДт,СуммаКт");
			Для Каждого СтрокаЗадолженностиПоВалютам Из ТаблицаЗадолженностиПоВалютам Цикл
				
				ПредставлениеПартнера = ДанныеДокумента.ПредставлениеПартнера;
				Если НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
					ПредставлениеПартнера = СтруктураПредставленийУчастников.КонтрагентНаименование;
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.Валюта = СтрокаЗадолженностиПоВалютам.Валюта;
				
				// Долг партнера
				СуммаДолга = 0;
				Если СтрокаЗадолженностиПоВалютам.СуммаДт > 0 И СтрокаЗадолженностиПоВалютам.СуммаКт = 0 Тогда
					СуммаДолга = СтрокаЗадолженностиПоВалютам.СуммаДт;
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(СтрокаЗадолженностиПоВалютам.СуммаДт, "ЧДЦ=2; ЧГ=3,0");
					ОбластьМакетаСтрока.Параметры.Дебитор = ПредставлениеПартнера;
				Иначе
					// Наш долг
					СуммаДолга = СтрокаЗадолженностиПоВалютам.СуммаКт;
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(СтрокаЗадолженностиПоВалютам.СуммаКт, "ЧДЦ=2; ЧГ=3,0");
					ОбластьМакетаСтрока.Параметры.Дебитор = СтрШаблон(
							НСтр("ru = '%1 перед %2';
								|en = '%1 before %2'"),
							СтруктураПредставленийУчастников.ПредставлениеОрганизации,
							ПредставлениеПартнера);
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаДолга,СтрокаЗадолженностиПоВалютам.Валюта);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				Если СтрокаЗадолженностиПоВалютам.СуммаДт > 0 И СтрокаЗадолженностиПоВалютам.СуммаКт <> 0 Тогда
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(СтрокаЗадолженностиПоВалютам.СуммаДт, "ЧДЦ=2; ЧГ=3,0");
					ОбластьМакетаСтрока.Параметры.Дебитор = СтрШаблон(
							НСтр("ru = '%1 перед %2';
								|en = '%1 before %2'"),
							ПредставлениеПартнера,
							СтруктураПредставленийУчастников.ПредставлениеОрганизации);
					ОбластьМакетаСтрока.Параметры.СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СтрокаЗадолженностиПоВалютам.СуммаДт,СтрокаЗадолженностиПоВалютам.Валюта);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли;

		
		#КонецОбласти 
		
		// РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		Если НЕ ДанныеДокумента.ЕстьРасхождения Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		#Область Подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
	
	КонецЦикла; // конец цикла по данным документа

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВывестиДетальныеЗаписи(
	ДанныеПоОбъектуГруппировки,
	ДанныеДокумента,
	Макет,
	ТаблицаЗадолженности,
	НастройкиПечати)
	
	СтруктураПредставленийУчастников = НастройкиПечати.ПредставленияУчастников;
	
	ФинансовыеИнструменты = ДанныеПоОбъектуГруппировки.ФинансовыеИнструменты;
	ВыводитьДолгАванс = НЕ ФинансовыеИнструменты И НЕ НастройкиПечати.ДолгКакДебет;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	#Область ОбластиПечати
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаОбъектДоговорВалюта");
	Если ФинансовыеИнструменты Тогда
		ОбластьМакетаШапка		= Макет.ПолучитьОбласть("ШапкаТаблицыФинИнструменты");
		ОбластьМакетаНачОстаток	= Макет.ПолучитьОбласть("СтрокаТаблицыНачОстатокФинИнструменты");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("СтрокаТаблицыФинИнструменты");
		ОбластьМакетаОбороты 		= Макет.ПолучитьОбласть("ОбротыЗаПериодФинИнструменты");
		ОбластьМакетаКонОстаток	= Макет.ПолучитьОбласть("СтрокаТаблицыКонОстатокФинИнструменты");
	ИначеЕсли НастройкиПечати.ВыводитьАвансРегл Тогда
		ОбластьМакетаШапка		= Макет.ПолучитьОбласть("ШапкаТаблицыАвансРегл");
		ОбластьМакетаНачОстаток	= Макет.ПолучитьОбласть("СтрокаТаблицыНачОстатокАвансРегл");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("СтрокаТаблицыАвансРегл");
		ОбластьМакетаОбороты 		= Макет.ПолучитьОбласть("ОбротыЗаПериодАвансРегл");
		ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыКонОстатокАвансРегл");
		
		ОбластьМакетаШапка.Параметры.ВалютаРегл = НастройкиПечати.ВалютаРегл;
	Иначе
		ОбластьМакетаШапка	 = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаНачОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыНачОстаток");
		ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакетаОбороты 	 = Макет.ПолучитьОбласть("ОбротыЗаПериод");
		ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыКонОстаток");
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыводНазванияГруппировки
	Валюта = СтрШаблон(НСтр("ru = 'в валюте';
							|en = 'in currency'") + " %1", ДанныеПоОбъектуГруппировки.Валюта);
	ШаблонЗаголовка = ДанныеПоОбъектуГруппировки.ПредставлениеТипРасчетов;
	Если НастройкиПечати.ДетализацияВзаиморасчетов = "ОбъектРасчетов"
		И (ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			ИЛИ ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + " " + НСтр("ru = 'по объекту расчетов';
														|en = 'by settlement object'") + " %1 ";
	ИначеЕсли НастройкиПечати.ДетализацияВзаиморасчетов = "Договор" И НЕ ФинансовыеИнструменты
	 		ИЛИ НастройкиПечати.ДетализацияФинансовыхИнструментов = "Договор" И ФинансовыеИнструменты Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + " " + НСтр("ru = 'по договору';
														|en = 'by contract'") + " %1 ";
	КонецЕсли;
	
	ТекстОбъектаГруппировки = "<" + НСтр("ru = 'не указан';
										|en = 'not specified'") + ">";
	Если ЗначениеЗаполнено(ДанныеПоОбъектуГруппировки.ПредставлениеОбъектГруппировки) Тогда
		ТекстОбъектаГруппировки = ДанныеПоОбъектуГруппировки.ПредставлениеОбъектГруппировки;
	КонецЕсли;
	
	ЗаголовокГруппировки = ШаблонЗаголовка + " " + Валюта;
	Если НастройкиПечати.ДетализацияВзаиморасчетов <> "Валюта" И НЕ ФинансовыеИнструменты
		ИЛИ НастройкиПечати.ДетализацияФинансовыхИнструментов <> "Валюта" И ФинансовыеИнструменты Тогда
		ЗаголовокГруппировки = СтрШаблон(ШаблонЗаголовка, ТекстОбъектаГруппировки) + Валюта;
	КонецЕсли;
	ОбластьМакетаГруппировка.Параметры.Заголовок = ЗаголовокГруппировки;
	ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
	#КонецОбласти
	
	#Область ВыводШапкиТаблицы
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
	ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Долг';
												|en = 'Debt'");
	ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Аванс';
												|en = 'Advance'");
	ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Начальный остаток';
														|en = 'Start balance'");
	ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Конечный остаток';
														|en = 'Closing balance'");
	Если НастройкиПечати.ДолгКакДебет ИЛИ ФинансовыеИнструменты Тогда
		ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Дебет';
													|en = 'Debit'");
		ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Кредит';
													|en = 'Credit'");
		ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо начальное';
															|en = 'Opening balance'");
		ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо конечное';
															|en = 'Closing balance'");
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	#КонецОбласти
	
	#Область ВыводНачальногоОстатка
	ОбластьМакетаНачОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредит = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	
	ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаНачОстаток);
		Если ДанныеПоОбъектуГруппировки.НачальноеСальдо > 0 Тогда
			ОбластьМакетаНачОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.НачальноеСальдо;
			ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдо;
		Иначе
			ОбластьМакетаНачОстаток.Параметры.СуммаКредит = -ДанныеПоОбъектуГруппировки.НачальноеСальдо;
			ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = -ДанныеПоОбъектуГруппировки.НачальноеСальдо;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
	#КонецОбласти
	
	ОборотАктивКонтрагент = Новый Структура("СуммаДебетКонтрагент, СуммаКредитКонтрагент", 0, 0);
	ОборотПассивКонтрагент = Новый Структура("СуммаДебетКонтрагент, СуммаКредитКонтрагент", 0, 0);
	Обороты = Новый Структура("Долг,Аванс",0,0);
	Если ДанныеПоОбъектуГруппировки.ЕстьОбороты Тогда
		ДетальныеЗаписи = ДанныеПоОбъектуГруппировки.Выбрать();
		Пока ДетальныеЗаписи.Следующий() Цикл
			
			Если ФинансовыеИнструменты Тогда
				ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыФинИнструменты");
			ИначеЕсли НастройкиПечати.ВыводитьАвансРегл Тогда
				ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыАвансРегл");
			Иначе
				ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ДетальныеЗаписи);
			ОбластьМакетаСтрока.Параметры.Дата = Формат(ДетальныеЗаписи.ДатаДокумента, "ДЛФ=D");
			Если ВыводитьДолгАванс Тогда
				ОчиститьДебетКредит(ОбластьМакетаСтрока);
				ОбластьМакетаСтрока.Параметры.СуммаДебет = ДетальныеЗаписи.СуммаДолг;
				ОбластьМакетаСтрока.Параметры.СуммаКредит = ДетальныеЗаписи.СуммаАванс;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = ДетальныеЗаписи.СуммаДолгКонтрагент;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = ДетальныеЗаписи.СуммаАвансКонтрагент;
				Обороты.Долг = Обороты.Долг + ДетальныеЗаписи.СуммаДолг;
				Обороты.Аванс = Обороты.Аванс + ДетальныеЗаписи.СуммаАванс;
			КонецЕсли;
			Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
				Если НЕ ФинансовыеИнструменты Тогда
					ОбластьМакетаСтрока.Параметры.СуммаДокументаКонтрагент = 0;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = 0;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = 0;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
			Если ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком
				//++ НЕ УТ
				ИЛИ ДетальныеЗаписи.ТипСуммы = Перечисления.ТипыПлатежейПоЛизингу.АрендныеОбязательства
				ИЛИ ДетальныеЗаписи.ТипСуммы = Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж
				ИЛИ ДетальныеЗаписи.ТипСуммы = Перечисления.ТипыПлатежейПоЛизингу.ВыкупПредметаЛизинга
				//-- НЕ УТ
				ИЛИ ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором Тогда
				ДобавитьОборотКонтрагента(ОборотАктивКонтрагент, ДетальныеЗаписи, ВыводитьДолгАванс);
				
			ИначеЕсли ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
				//++ НЕ УТ
				ИЛИ ДетальныеЗаписи.ТипСуммы = Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж
				//-- НЕ УТ
				ИЛИ ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором Тогда
				ДобавитьОборотКонтрагента(ОборотПассивКонтрагент, ДетальныеЗаписи, ВыводитьДолгАванс);
				
			КонецЕсли;
		
		КонецЦикла; 
	КонецЕсли;
	
	#Область ВыводОборотовЗаПериод
	ЗаполнитьЗначенияСвойств(ОбластьМакетаОбороты.Параметры, ДанныеПоОбъектуГруппировки);
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаОбороты);
		ОбластьМакетаОбороты.Параметры.СуммаДебет = Обороты.Долг;
		ОбластьМакетаОбороты.Параметры.СуммаКредит = Обороты.Аванс;
		Если ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ОборотАктивКонтрагент.СуммаДебетКонтрагент;
			ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ОборотАктивКонтрагент.СуммаКредитКонтрагент;
		Иначе
			ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ОборотПассивКонтрагент.СуммаДебетКонтрагент;
			ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ОборотПассивКонтрагент.СуммаКредитКонтрагент;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаОбороты);
	#КонецОбласти
	
	#Область ВыводКонечногоОстатка
	ЗаполнитьЗначенияСвойств(ОбластьМакетаКонОстаток.Параметры, ДанныеПоОбъектуГруппировки);
	ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.КонечноеСальдоДт;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредит = ДанныеПоОбъектуГруппировки.КонечноеСальдоКт;
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	
	НачальноеСальдоКонтрагентДт = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	НачальноеСальдоКонтрагентКт = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	КонечноеСальдоДт = НачальноеСальдоКонтрагентДт + ОборотАктивКонтрагент.СуммаДебетКонтрагент - ОборотАктивКонтрагент.СуммаКредитКонтрагент;
	КонечноеСальдоКт = НачальноеСальдоКонтрагентКт - ОборотПассивКонтрагент.СуммаДебетКонтрагент + ОборотПассивКонтрагент.СуммаКредитКонтрагент;
	Если НачальноеСальдоКонтрагентДт = 0 И НачальноеСальдоКонтрагентКт = 0 Тогда
		КонечноеСальдо = ДанныеПоОбъектуГруппировки.СуммаДебетКонтрагент - ДанныеПоОбъектуГруппировки.СуммаКредитКонтрагент;
	Иначе
		КонечноеСальдо = КонечноеСальдоДт - КонечноеСальдоКт;
	КонецЕсли;
	
	Если ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСЛизингодателем Тогда
		Если КонечноеСальдоДт < 0 Тогда
			КонечноеСальдоКт = КонечноеСальдоКт - КонечноеСальдоДт;
			КонечноеСальдоДт = 0;
		КонецЕсли;
		Если КонечноеСальдоКт < 0 Тогда
			КонечноеСальдоДт = КонечноеСальдоДт - КонечноеСальдоКт;
			КонечноеСальдоКт = 0;
		КонецЕсли;
	Иначе
		Если КонечноеСальдо > 0 Тогда
			КонечноеСальдоДт = КонечноеСальдо;
			КонечноеСальдоКт = 0;
		Иначе
			КонечноеСальдоДт = 0;
			КонечноеСальдоКт = -КонечноеСальдо;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = КонечноеСальдоДт;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = КонечноеСальдоКт;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаКонОстаток);
		Если ДанныеПоОбъектуГруппировки.КонечноеСальдо > 0 Тогда
			ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.КонечноеСальдо;
		Иначе
			ОбластьМакетаКонОстаток.Параметры.СуммаКредит = -ДанныеПоОбъектуГруппировки.КонечноеСальдо;
		КонецЕсли;
		
		КонечныйОстатокКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдо
								+ ДанныеПоОбъектуГруппировки.СуммаДолгКонтрагент
								- ДанныеПоОбъектуГруппировки.СуммаАвансКонтрагент;
		Если КонечныйОстатокКонтрагент > 0 Тогда
			ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = КонечныйОстатокКонтрагент;
		Иначе
			ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = -КонечныйОстатокКонтрагент;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаКонОстаток);
	#КонецОбласти
	
	СтрокаЗадолженности = ТаблицаЗадолженности.Добавить();
	СтрокаЗадолженности.Валюта = ДанныеПоОбъектуГруппировки.Валюта;
	СтрокаЗадолженности.СуммаДт = ДанныеПоОбъектуГруппировки.КонечноеСальдоДт;
	СтрокаЗадолженности.СуммаКт = ДанныеПоОбъектуГруппировки.КонечноеСальдоКт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ДанныеКонтрагента.Партнер");
	Иначе
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент.Партнер");
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеДанныхНаПечать

Функция ВыборкаДанныхДокумента(МассивОбъектов, НастройкиПечати) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(Документы.СверкаВзаиморасчетов.ПустаяСсылка(), МенеджерВременныхТаблиц);	
	КонецЕсли;
	
	РасшифроватьНастройкуДетализации(НастройкиПечати);
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросДанныеДокумента.Текст = ТекстЗапросаДанныеДокумента(НастройкиПечати);
	
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДанныеДокумента.УстановитьПараметр("ДолгКакДебет", НастройкиПечати.ДолгКакДебет);
	ЗапросДанныеДокумента.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	
	ЗапросДанныеДокумента.УстановитьПараметр("АрендныеОбязательства", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("ОбеспечительныйПлатеж", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("ЛизинговыйПлатеж", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("ВыкупПредметаЛизинга", Неопределено);
	//++ НЕ УТ
	ЗапросДанныеДокумента.УстановитьПараметр("АрендныеОбязательства", Перечисления.ТипыПлатежейПоЛизингу.АрендныеОбязательства);
	ЗапросДанныеДокумента.УстановитьПараметр("ОбеспечительныйПлатеж", Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж);
	ЗапросДанныеДокумента.УстановитьПараметр("ЛизинговыйПлатеж", Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж);
	ЗапросДанныеДокумента.УстановитьПараметр("ВыкупПредметаЛизинга", Перечисления.ТипыПлатежейПоЛизингу.ВыкупПредметаЛизинга);
	//-- НЕ УТ

	Возврат ЗапросДанныеДокумента.Выполнить();

КонецФункции

Функция ТекстЗапросаДанныеДокумента(НастройкиПечати)
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧГруппировкиРасчеты.Ссылка КАК ДокументСсылка,
	|	ТЧГруппировкиРасчеты.Ссылка.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ТЧГруппировкиРасчеты.ТипРасчетов КАК ТипРасчетов,
	|	ТЧГруппировкиРасчеты.Договор КАК Договор,
	|	ТЧДетальныеЗаписиРасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТЧДетальныеЗаписиРасчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТЧДетальныеЗаписиРасчеты.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ТЧДетальныеЗаписиРасчеты.ВалютаДокумента КАК Валюта,
	|	
	|	ТЧДетальныеЗаписиРасчеты.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаДокумента
	|	КОНЕЦ КАК СуммаДокументаКонтрагент,
	|	ТЧДетальныеЗаписиРасчеты.СуммаДолг КАК СуммаДолг,
	|	ТЧДетальныеЗаписиРасчеты.СуммаАванс КАК СуммаАванс,
	|	ТЧДетальныеЗаписиРасчеты.СуммаАвансРегл КАК СуммаАвансРегл,
	|	ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаДолгКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаДолг
	|	КОНЕЦ КАК СуммаДолгКонтрагент,
	|	ВЫБОР
	| 		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаАвансКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаАванс
	|	КОНЕЦ КАК СуммаАвансКонтрагент,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетовКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетов
	|	КОНЕЦ  КАК СуммаВзаиморасчетовКонтрагент
	|
	|ПОМЕСТИТЬ ДетальныеЗаписиРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК ТЧГруппировкиРасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ДетальныеЗаписиРасчеты КАК ТЧДетальныеЗаписиРасчеты
	|		ПО ТЧГруппировкиРасчеты.Ссылка = ТЧДетальныеЗаписиРасчеты.Ссылка
	|			И ТЧГруппировкиРасчеты.ОбъектРасчетов = ТЧДетальныеЗаписиРасчеты.ОбъектРасчетов
	|ГДЕ
	|	ТЧГруппировкиРасчеты.Ссылка В(&МассивОбъектов)
	|	И ТЧДетальныеЗаписиРасчеты.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаРасчетов.Ссылка КАК ДокументСсылка,
	|	ГруппировкаРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ГруппировкаРасчетов.Договор КАК ОбъектГруппировки,
	|	ГруппировкаРасчетов.Валюта КАК Валюта,
	|	СУММА(ГруппировкаРасчетов.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(ГруппировкаРасчетов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ГруппировкаРасчетов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ГруппировкаРасчетов.КонечноеСальдо) КАК КонечноеСальдо
	|ПОМЕСТИТЬ втГруппировкиРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК ГруппировкаРасчетов
	|ГДЕ
	|	ГруппировкаРасчетов.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаРасчетов.Ссылка,
	|	ГруппировкаРасчетов.ТипРасчетов,
	|	ГруппировкаРасчетов.Договор,
	|	ГруппировкаРасчетов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировки.ДокументСсылка КАК ДокументСсылка,
	|	Группировки.ТипРасчетов КАК ТипРасчетов,
	|	Группировки.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ПредставлениеСсылки(Группировки.ОбъектГруппировки) КАК ПредставлениеОбъектГруппировки,
	|	
	|	Группировки.НачальноеСальдо КАК НачальноеСальдо,
	|	ВЫБОР
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И Группировки.НачальноеСальдо > 0
	|			ТОГДА 
	|				Группировки.НачальноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.НачальноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.НачальноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК НачальноеСальдоДт,
	|	ВЫБОР
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И Группировки.НачальноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.НачальноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.НачальноеСальдо > 0
	|			ТОГДА 
	|				Группировки.НачальноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК НачальноеСальдоКт,
	|	Группировки.ОборотПриход КАК ОборотПриход,
	|	Группировки.ОборотРасход КАК ОборотРасход,
	|	Группировки.КонечноеСальдо КАК КонечноеСальдо,
	|	ВЫБОР
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И Группировки.КонечноеСальдо > 0
	|			ТОГДА 
	|				Группировки.КонечноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.КонечноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.КонечноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечноеСальдоДт,
	|	ВЫБОР
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И Группировки.КонечноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.КонечноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.КонечноеСальдо > 0
	|			ТОГДА 
	|				Группировки.КонечноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечноеСальдоКт,
	|	
	|	НЕ ДетальныеЗаписиРасчетов.РасчетныйДокумент ЕСТЬ NULL КАК ЕстьОбороты,
	|	ДетальныеЗаписиРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДетальныеЗаписиРасчетов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	Группировки.Валюта КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) < 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) + (-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0))
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) > 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0)
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) > 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0)
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) < 0
	|			ТОГДА
	|				-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДебет,
	| 	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) > 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0)
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) < 0
	|		ТОГДА
	|			-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0)
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) < 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) + (-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0))
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) > 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0)
	|						
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКредит,
	|
	// У контрагента Дебетом является наш Кредит, а Кредитом наш Дебет
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) > 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0)
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) < 0
	|		ТОГДА
	|			-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0)
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) < 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) + (-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0))
	|			
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) > 0
	|		ТОГДА
	|			ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0)
	|						
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) < 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) + (-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0))
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) > 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0)
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) > 0
	|			ТОГДА
	|				ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0)
	|				
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) < 0
	|			ТОГДА
	|				-ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДокументаКонтрагент, 0) КАК СуммаДокументаКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) КАК СуммаАванс,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансРегл, 0) КАК СуммаАвансРегл,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) КАК СуммаДолгКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) КАК СуммаАвансКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаВзаиморасчетовКонтрагент, 0) КАК СуммаВзаиморасчетовКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиРасчетов
	|ИЗ
	|	втГруппировкиРасчетов КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиРасчетов КАК ДетальныеЗаписиРасчетов
	|		ПО Группировки.ДокументСсылка = ДетальныеЗаписиРасчетов.ДокументСсылка
	|			И Группировки.ТипРасчетов = ДетальныеЗаписиРасчетов.ТипРасчетов
	|			И Группировки.ОбъектГруппировки = ДетальныеЗаписиРасчетов.Договор
	|ГДЕ
	|	Группировки.ДокументСсылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировкиФинИнструменты.Ссылка КАК ДокументСсылка,
	|	ТЧГруппировкиФинИнструменты.ТипРасчетов КАК ТипРасчетов,
	|	ТЧДетальныеЗаписиФинИнструменты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТЧДетальныеЗаписиФинИнструменты.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ТЧДетальныеЗаписиФинИнструменты.ВалютаДокумента КАК Валюта,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.Договор КАК Договор,
	|	ТЧДетальныеЗаписиФинИнструменты.Договор.ХарактерДоговора КАК ХарактерДоговора,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолг КАК ОсновнойДолг,
	|	ВЫБОР 
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолг
	|	КОНЕЦ КАК ОсновнойДолгКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.Проценты КАК Проценты,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.Проценты
	|	КОНЕЦ КАК ПроцентыКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.Комиссия КАК Комиссия,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА
	|			ТЧДетальныеЗаписиФинИнструменты.КомиссияКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.Комиссия
	|	КОНЕЦ КАК КомиссияКонтрагент,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательства
	|	КОНЕЦ КАК АрендныеОбязательстваКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатеж
	|	КОНЕЦ КАК ОбеспечительныйПлатежКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.ЛизинговыйПлатеж КАК ЛизинговыйПлатеж,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ЛизинговыйПлатежКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ЛизинговыйПлатеж
	|	КОНЕЦ КАК ЛизинговыйПлатежКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.ВыкупПредметаЛизинга КАК ВыкупПредметаЛизинга,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ВыкупПредметаЛизингаКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ВыкупПредметаЛизинга
	|	КОНЕЦ КАК ВыкупПредметаЛизингаКонтрагент
	|	
	|ПОМЕСТИТЬ ДетальныеЗаписиФинансовыеИнструменты
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ГруппировкиФинансовыеИнструменты КАК ТЧГруппировкиФинИнструменты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ДетальныеЗаписиФинансовыеИнструменты КАК ТЧДетальныеЗаписиФинИнструменты
	|		ПО ТЧГруппировкиФинИнструменты.Ссылка = ТЧДетальныеЗаписиФинИнструменты.Ссылка
	|			И ТЧГруппировкиФинИнструменты.Договор = ТЧДетальныеЗаписиФинИнструменты.Договор
	|ГДЕ
	|	ТЧГруппировкиФинИнструменты.Ссылка В(&МассивОбъектов)
	|	И ТЧДетальныеЗаписиФинИнструменты.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаФинИнструментов.Ссылка КАК ДокументСсылка,
	|	ГруппировкаФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ГруппировкаФинИнструментов.Договор КАК ОбъектГруппировки,
	|	ГруппировкаФинИнструментов.Валюта КАК Валюта,
	|	СУММА(ГруппировкаФинИнструментов.НачальноеСальдоДт) КАК НачальноеСальдоДт,
	|	СУММА(ГруппировкаФинИнструментов.НачальноеСальдоКт) КАК НачальноеСальдоКт,
	|	СУММА(ГруппировкаФинИнструментов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ГруппировкаФинИнструментов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ГруппировкаФинИнструментов.КонечноеСальдоДт) КАК КонечноеСальдоДт,
	|	СУММА(ГруппировкаФинИнструментов.КонечноеСальдоКт) КАК КонечноеСальдоКт
	|ПОМЕСТИТЬ втГруппировкиФинИнструментов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ГруппировкиФинансовыеИнструменты КАК ГруппировкаФинИнструментов
	|ГДЕ
	|	ГруппировкаФинИнструментов.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаФинИнструментов.Ссылка,
	|	ГруппировкаФинИнструментов.ТипРасчетов,
	|	ГруппировкаФинИнструментов.Договор,
	|	ГруппировкаФинИнструментов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировки.ДокументСсылка КАК ДокументСсылка,
	|	Группировки.ТипРасчетов КАК ТипРасчетов,
	|	Группировки.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ПредставлениеСсылки(Группировки.ОбъектГруппировки) КАК ПредставлениеОбъектГруппировки,
	|	
	|	Группировки.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	Группировки.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	Группировки.ОборотПриход КАК ОборотПриход,
	|	Группировки.ОборотРасход КАК ОборотРасход,
	|	Группировки.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	Группировки.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ДеталиФинИнструментов.Договор.ХарактерДоговора КАК ХарактерДоговора,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	Группировки.Валюта КАК Валюта,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОсновнойДолг, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОсновнойДолгКонтрагент, 0) КАК ОсновнойДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.Проценты, 0) КАК Проценты,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ПроцентыКонтрагент, 0) КАК ПроцентыКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.Комиссия, 0) КАК Комиссия,
	|	ЕСТЬNULL(ДеталиФинИнструментов.КомиссияКонтрагент, 0) КАК КомиссияКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.АрендныеОбязательства, 0) КАК АрендныеОбязательства,
	|	ЕСТЬNULL(ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент, 0) КАК АрендныеОбязательстваКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОбеспечительныйПлатеж, 0) КАК ОбеспечительныйПлатеж,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент, 0) КАК ОбеспечительныйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ЛизинговыйПлатеж, 0) КАК ЛизинговыйПлатеж,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент, 0) КАК ЛизинговыйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ВыкупПредметаЛизинга, 0) КАК ВыкупПредметаЛизинга,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент, 0) КАК ВыкупПредметаЛизингаКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиФинИнструментовБезТипаСумм
	|ИЗ
	|	втГруппировкиФинИнструментов КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиФинансовыеИнструменты КАК ДеталиФинИнструментов
	|		ПО Группировки.ДокументСсылка = ДеталиФинИнструментов.ДокументСсылка
	|			И Группировки.ТипРасчетов = ДеталиФинИнструментов.ТипРасчетов
	|			И Группировки.ОбъектГруппировки = ДеталиФинИнструментов.Договор
	|ГДЕ
	|	Группировки.ДокументСсылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ЛОЖЬ КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	0 КАК СуммаДебет,
	|	0 КАК СуммаКредит,
	|
	|	0 КАК СуммаДебетКонтагент,
	|	0 КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиФинИнструментов.ОсновнойДолг КАК ОсновнойДолг,
	|	ДеталиФинИнструментов.ОсновнойДолгКонтрагент КАК ОсновнойДолгКонтрагент,
	|	ДеталиФинИнструментов.Проценты КАК Проценты,
	|	ДеталиФинИнструментов.ПроцентыКонтрагент КАК ПроцентыКонтрагент,
	|	ДеталиФинИнструментов.Комиссия КАК Комиссия,
	|	ДеталиФинИнструментов.КомиссияКонтрагент КАК КомиссияКонтрагент,
	|	
	|	ДеталиФинИнструментов.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент КАК АрендныеОбязательстваКонтрагент,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент КАК ОбеспечительныйПлатежКонтрагент,
	|	ДеталиФинИнструментов.ЛизинговыйПлатеж КАК ЛизинговыйПлатеж,
	|	ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент КАК ЛизинговыйПлатежКонтрагент,
	|	ДеталиФинИнструментов.ВыкупПредметаЛизинга КАК ВыкупПредметаЛизинга,
	|	ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент КАК ВыкупПредметаЛизингаКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиФинИнструментов
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Договор = НЕОПРЕДЕЛЕНО //нет детальных записией по договору
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолг > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОсновнойДолг
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолг < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОсновнойДолг
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолгКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолгКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиФинИнструментов.ОсновнойДолг КАК ОсновнойДолг,
	|	ДеталиФинИнструментов.ОсновнойДолгКонтрагент КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ОсновнойДолг <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Проценты > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.Проценты
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Проценты < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.Проценты
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ПроцентыКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ПроцентыКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	ДеталиФинИнструментов.Проценты КАК Проценты,
	|	ДеталиФинИнструментов.ПроцентыКонтрагент КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Проценты <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Комиссия > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.Комиссия
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Комиссия < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.Комиссия
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.КомиссияКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.КомиссияКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.КомиссияКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.КомиссияКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	ДеталиФинИнструментов.Комиссия КАК Комиссия,
	|	ДеталиФинИнструментов.КомиссияКонтрагент КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Комиссия <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&АрендныеОбязательства КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	0 КАК СуммаДебет,
	|	0 КАК СуммаКредит,
	|
	|	0 КАК СуммаДебетКонтагент,
	|	0 КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Лизинг)
	|	И ДеталиФинИнструментов.АрендныеОбязательства = 0
	|	И ДеталиФинИнструментов.ОбеспечительныйПлатеж = 0
	|	И ДеталиФинИнструментов.ЛизинговыйПлатеж = 0
	|	И ДеталиФинИнструментов.ВыкупПредметаЛизинга = 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&АрендныеОбязательства КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательства > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.АрендныеОбязательства
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательства < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.АрендныеОбязательства
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	ДеталиФинИнструментов.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.АрендныеОбязательства <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&ОбеспечительныйПлатеж КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатеж > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОбеспечительныйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатеж < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОбеспечительныйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&ЛизинговыйПлатеж КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ЛизинговыйПлатеж > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ЛизинговыйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ЛизинговыйПлатеж < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ЛизинговыйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	ДеталиФинИнструментов.ЛизинговыйПлатеж КАК ЛизинговыйПлатеж,
	|	ДеталиФинИнструментов.ЛизинговыйПлатежКонтрагент КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ЛизинговыйПлатеж <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&ВыкупПредметаЛизинга КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупПредметаЛизинга > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ВыкупПредметаЛизинга
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупПредметаЛизинга < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ВыкупПредметаЛизинга
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	ДеталиФинИнструментов.ВыкупПредметаЛизинга КАК ВыкупПредметаЛизинга,
	|	ДеталиФинИнструментов.ВыкупПредметаЛизингаКонтрагент КАК ВыкупПредметаЛизингаКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ВыкупПредметаЛизинга <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиРасчетов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ЛОЖЬ КАК ФинансовыеИнструменты,
	|	ДеталиРасчетов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиРасчетов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиРасчетов.ЕстьОбороты КАК ЕстьОбороты,
	|	ДеталиРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиРасчетов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиРасчетов.Валюта КАК Валюта,
	|	
	|	ДеталиРасчетов.НачальноеСальдо КАК НачальноеСальдо,
	|	ДеталиРасчетов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиРасчетов.ОборотПриход КАК ОборотПриход,
	|	ДеталиРасчетов.ОборотРасход КАК ОборотРасход,
	|	ДеталиРасчетов.КонечноеСальдо КАК КонечноеСальдо,
	|	ДеталиРасчетов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ДеталиРасчетов.СуммаДебет КАК СуммаДебет,
	|	ДеталиРасчетов.СуммаКредит КАК СуммаКредит,
	|
	|	ДеталиРасчетов.СуммаДебетКонтрагент КАК СуммаДебетКонтрагент,
	|	ДеталиРасчетов.СуммаКредитКонтрагент КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ДеталиРасчетов.СуммаДокументаКонтрагент КАК СуммаДокументаКонтрагент,
	|	ДеталиРасчетов.СуммаДолг КАК СуммаДолг,
	|	ДеталиРасчетов.СуммаАванс КАК СуммаАванс,
	|	ДеталиРасчетов.СуммаАвансРегл КАК СуммаАвансРегл,
	|	ДеталиРасчетов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ДеталиРасчетов.СуммаДолгКонтрагент КАК СуммаДолгКонтрагент,
	|	ДеталиРасчетов.СуммаАвансКонтрагент КАК СуммаАвансКонтрагент,
	|	ДеталиРасчетов.СуммаВзаиморасчетовКонтрагент КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК ЛизинговыйПлатеж,
	|	0 КАК ЛизинговыйПлатежКонтрагент,
	|	0 КАК ВыкупПредметаЛизинга,
	|	0 КАК ВыкупПредметаЛизингаКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА 10
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			ТОГДА 20
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокРасчетов,
	|	
	|	0 КАК ПорядокТипаСуммы
	|	
	|ПОМЕСТИТЬ ДетальныеЗаписиДокумента
	|ИЗ
	|	ДеталиРасчетов КАК ДеталиРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДетальныеЗаписи.ДокументСсылка КАК ДокументСсылка,
	|	ДетальныеЗаписи.ТипРасчетов КАК ТипРасчетов,
	|	ИСТИНА КАК ФинансовыеИнструменты,
	|	ДетальныеЗаписи.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДетальныеЗаписи.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДетальныеЗаписи.ЕстьОбороты КАК ЕстьОбороты,
	|	ДетальныеЗаписи.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДетальныеЗаписи.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДетальныеЗаписи.Валюта КАК Валюта,
	|	
	|	0 КАК НачальноеСальдо,
	|	ДетальныеЗаписи.НачальноеСальдоДт,
	|	ДетальныеЗаписи.НачальноеСальдоКт,
	|	ДетальныеЗаписи.ОборотПриход,
	|	ДетальныеЗаписи.ОборотРасход,
	|	0 КАК КонечноеСальдо,
	|	ДетальныеЗаписи.КонечноеСальдоДт,
	|	ДетальныеЗаписи.КонечноеСальдоКт,
	|	
	|	ДетальныеЗаписи.СуммаДебет КАК СуммаДебет,
	|	ДетальныеЗаписи.СуммаКредит КАК СуммаКредит,
	|
	|	ДетальныеЗаписи.СуммаДебетКонтагент КАК СуммаДебетКонтагент,
	|	ДетальныеЗаписи.СуммаКредитКонтрагент КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК СуммаДокумента,
	|	0 КАК СуммаДокументаКонтрагент,
	|	0 КАК СуммаДолг,
	|	0 КАК СуммаАванс,
	|	0 КАК СуммаАвансРегл,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаДолгКонтрагент,
	|	0 КАК СуммаАвансКонтрагент,
	|	0 КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	ДетальныеЗаписи.ТипСуммы КАК ТипСуммы,
	|	ДетальныеЗаписи.ОсновнойДолг КАК ОсновнойДолг,
	|	ДетальныеЗаписи.ОсновнойДолгКонтрагент КАК ОсновнойДолгКонтрагент,
	|	ДетальныеЗаписи.Проценты КАК Проценты,
	|	ДетальныеЗаписи.ПроцентыКонтрагент КАК ПроцентыКонтрагент,
	|	ДетальныеЗаписи.Комиссия КАК Комиссия,
	|	ДетальныеЗаписи.КомиссияКонтрагент КАК КомиссияКонтрагент,
	|	
	|	ДетальныеЗаписи.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ДетальныеЗаписи.АрендныеОбязательстваКонтрагент КАК АрендныеОбязательстваКонтрагент,
	|	ДетальныеЗаписи.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ДетальныеЗаписи.ОбеспечительныйПлатежКонтрагент КАК ОбеспечительныйПлатежКонтрагент,
	|	ДетальныеЗаписи.ЛизинговыйПлатеж КАК ЛизинговыйПлатеж,
	|	ДетальныеЗаписи.ЛизинговыйПлатежКонтрагент КАК ЛизинговыйПлатежКонтрагент,
	|	ДетальныеЗаписи.ВыкупПредметаЛизинга КАК ВыкупПредметаЛизинга,
	|	ДетальныеЗаписи.ВыкупПредметаЛизингаКонтрагент КАК ВыкупПредметаЛизингаКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСЛизингодателем)
	|			ТОГДА 50
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокРасчетов,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			ТОГДА 10
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА 20
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &АрендныеОбязательства 
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ОбеспечительныйПлатеж 
	|			ТОГДА 50
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ЛизинговыйПлатеж 
	|			ТОГДА 60
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ВыкупПредметаЛизинга 
	|			ТОГДА 70
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокТипаСуммы
	|ИЗ
	|	ДеталиФинИнструментов КАК ДетальныеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСверки.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)) КАК ТипРасчетов,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка))) КАК ПредставлениеТипРасчетов,
	|	ДокументСверки.Номер КАК Номер,
	|	ДокументСверки.Дата КАК Дата,
	|	ДокументСверки.Организация КАК Организация,
	|	ДокументСверки.Контрагент КАК Контрагент,
	|	ДокументСверки.Партнер КАК Партнер,
	|	ЕСТЬNULL(ДокументСверки.Партнер.НаименованиеПолное, """") КАК ПредставлениеПартнера,
	|	ДокументСверки.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ДокументСверки.Договор КАК Договор,
	|	&ПредставлениеДоговораНаПечать КАК ПредставлениеДоговора,
	|	ДокументСверки.НачалоПериода КАК НачалоПериода,
	|	ДокументСверки.КонецПериода КАК КонецПериода,
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование
	|		ИНАЧЕ ТаблицаОтветственныеЛица.РуководительНаименование
	|	КОНЕЦ КАК ФИООтветственногоЛица,
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ТаблицаОтветственныеЛица.ГлавныйБухгалтерДолжность
	|		ИНАЧЕ ТаблицаОтветственныеЛица.РуководительДолжность
	|	КОНЕЦ КАК ДолжностьОтветственногоЛица,
	|	ДокументСверки.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
	|	ДокументСверки.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ЕстьОбороты, ЛОЖЬ) КАК ЕстьОбороты,
	|	ЕСТЬNULL(ДеталиДокумента.ФинансовыеИнструменты, ЛОЖЬ) КАК ФинансовыеИнструменты,
	|	ЕСТЬNULL(ДеталиДокумента.ОбъектГруппировки, Неопределено) КАК ОбъектГруппировки,
	|	ЕСТЬNULL(ДеталиДокумента.ПредставлениеОбъектГруппировки, """") КАК ПредставлениеОбъектГруппировки,
	|	ЕСТЬNULL(ДеталиДокумента.РасчетныйДокумент, Неопределено) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ДеталиДокумента.ОписаниеДокумента, """") КАК ОписаниеДокумента,
	|	ДанныеДокументов.Дата КАК ДатаДокумента,
	|	ДанныеДокументов.Номер КАК НомерДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.Валюта, &ВалютаРегл) КАК Валюта,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.Валюта, &ВалютаРегл)) КАК ПредставлениеВалюта,
	|	ЕСТЬNULL(ДеталиДокумента.ТипСуммы, ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка)) КАК ТипСуммы,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдо, 0) КАК НачальноеСальдо,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоДт, 0) КАК НачальноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоКт, 0) КАК НачальноеСальдоКт,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотПриход, 0) КАК ОборотПриход,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотРасход, 0) КАК ОборотРасход,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдо, 0) КАК КонечноеСальдо,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоДт, 0) КАК КонечноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоКт, 0) КАК КонечноеСальдоКт,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебет, 0) КАК СуммаДебет,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредит, 0) КАК СуммаКредит,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебетКонтрагент, 0) КАК СуммаДебетКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредитКонтрагент, 0) КАК СуммаКредитКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДокументаКонтрагент, 0) КАК СуммаДокументаКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолг, 0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАванс, 0) КАК СуммаАванс,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАвансРегл, 0) КАК СуммаАвансРегл,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолгКонтрагент, 0) КАК СуммаДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАвансКонтрагент, 0) КАК СуммаАвансКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаВзаиморасчетовКонтрагент, 0) КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ОсновнойДолг, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ДеталиДокумента.ОсновнойДолгКонтрагент, 0) КАК ОсновнойДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.Проценты, 0) КАК Проценты,
	|	ЕСТЬNULL(ДеталиДокумента.ПроцентыКонтрагент, 0) КАК ПроцентыКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.Комиссия, 0) КАК Комиссия,
	|	ЕСТЬNULL(ДеталиДокумента.КомиссияКонтрагент, 0) КАК КомиссияКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.АрендныеОбязательства, 0) КАК АрендныеОбязательства,
	|	ЕСТЬNULL(ДеталиДокумента.АрендныеОбязательстваКонтрагент, 0) КАК АрендныеОбязательстваКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ОбеспечительныйПлатеж, 0) КАК ОбеспечительныйПлатеж,
	|	ЕСТЬNULL(ДеталиДокумента.ОбеспечительныйПлатежКонтрагент, 0) КАК ОбеспечительныйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ЛизинговыйПлатеж, 0) КАК ЛизинговыйПлатеж,
	|	ЕСТЬNULL(ДеталиДокумента.ЛизинговыйПлатежКонтрагент, 0) КАК ЛизинговыйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ВыкупПредметаЛизинга, 0) КАК ВыкупПредметаЛизинга,
	|	ЕСТЬNULL(ДеталиДокумента.ВыкупПредметаЛизингаКонтрагент, 0) КАК ВыкупПредметаЛизингаКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ПорядокРасчетов, 0) КАК ПорядокРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДокументСверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДокументСверки.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиДокумента КАК ДеталиДокумента
	|		ПО ДокументСверки.Ссылка = ДеталиДокумента.ДокументСсылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеДокументов
	|		ПО ДеталиДокумента.РасчетныйДокумент = ДанныеДокументов.Документ
	|			И ДокументСверки.Организация = ДанныеДокументов.Организация
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокументов.Дата
	|
	|ИТОГИ
	|	МАКСИМУМ(НачальноеСальдо),
	|	МАКСИМУМ(НачальноеСальдоДт),
	|	МАКСИМУМ(НачальноеСальдоКт),
	|	МАКСИМУМ(ОборотПриход),
	|	МАКСИМУМ(ОборотРасход),
	|	МАКСИМУМ(КонечноеСальдо),
	|	МАКСИМУМ(КонечноеСальдоДт),
	|	МАКСИМУМ(КонечноеСальдоКт),
	|	
	|	МАКСИМУМ(ФИООтветственногоЛица),
	|	МАКСИМУМ(ДолжностьОтветственногоЛица),
	|	МАКСИМУМ(ФИОРуководителяКонтрагента),
	|	МАКСИМУМ(ДолжностьРуководителяКонтрагента),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(ПредставлениеВалюта),
	|	МАКСИМУМ(ПредставлениеОбъектГруппировки),
	|	МАКСИМУМ(ФинансовыеИнструменты),
	|	МАКСИМУМ(ЕстьОбороты),
	|	МАКСИМУМ(ЕстьРасхождения),
	|
	|	СУММА(СуммаДебет),
	|	СУММА(СуммаКредит),
	|	
	|	СУММА(СуммаДебетКонтрагент),
	|	СУММА(СуммаКредитКонтрагент),
	|	
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаДокументаКонтрагент),
	|	СУММА(СуммаДолг),
	|	СУММА(СуммаАванс),
	|	СУММА(СуммаАвансРегл),
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаДолгКонтрагент),
	|	СУММА(СуммаАвансКонтрагент),
	|	СУММА(СуммаВзаиморасчетовКонтрагент),
	|	
	|	СУММА(ОсновнойДолг),
	|	СУММА(ОсновнойДолгКонтрагент),
	|	СУММА(Проценты),
	|	СУММА(ПроцентыКонтрагент),
	|	СУММА(Комиссия),
	|	СУММА(КомиссияКонтрагент),
	|	
	|	СУММА(АрендныеОбязательства),
	|	СУММА(АрендныеОбязательстваКонтрагент),
	|	СУММА(ОбеспечительныйПлатеж),
	|	СУММА(ОбеспечительныйПлатежКонтрагент),
	|	СУММА(ЛизинговыйПлатеж),
	|	СУММА(ОбеспечительныйПлатежКонтрагент),
	|	СУММА(ЛизинговыйПлатеж),
	|	СУММА(ЛизинговыйПлатежКонтрагент),
	|	СУММА(ВыкупПредметаЛизинга),
	|	СУММА(ВыкупПредметаЛизингаКонтрагент)
	|ПО
	|	ДокументСсылка,
	|	ТипРасчетов,
	|	ОбъектГруппировки
	|
	|АВТОУПОРЯДОЧИВАНИЕ";
	#КонецОбласти

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ГруппировкаРасчетов.Договор",
						"ГруппировкаРасчетов." + НастройкиПечати.ДетализацияВзаиморасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ДетальныеЗаписиРасчетов.Договор",
						"ДетальныеЗаписиРасчетов." + НастройкиПечати.ДетализацияВзаиморасчетов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ГруппировкаФинИнструментов.Договор",
						"ГруппировкаФинИнструментов." + НастройкиПечати.ДетализацияФинансовыхИнструментов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"= ДеталиФинИнструментов.Договор",
						"= ДеталиФинИнструментов." + НастройкиПечати.ДетализацияФинансовыхИнструментов);
	
	ПредставлениеДоговораНаПечать = "ЕСТЬNULL(ДокументСверки.Договор.НаименованиеДляПечати, """")";
	//++ НЕ УТ
	ПредставлениеДоговораНаПечать = 
		"ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(ДокументСверки.Договор) = ТИП(Справочник.ДоговорыЛизинга)
		|			ТОГДА ДокументСверки.Договор.Наименование
		|		ИНАЧЕ ЕСТЬNULL(ДокументСверки.Договор.НаименованиеДляПечати, """")
		|	КОНЕЦ";
	//-- НЕ УТ
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПредставлениеДоговораНаПечать", ПредставлениеДоговораНаПечать);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РасшифроватьНастройкуДетализации(НастройкиПечати)
	
	ГруппировкаРасчетов = Новый Массив;
	ГруппировкаРасчетов.Добавить("ОбъектРасчетов");
	ГруппировкаРасчетов.Добавить("Договор");
	ГруппировкаРасчетов.Добавить("Валюта");
	
	ГруппировкаФинИнструментов = Новый Массив;
	ГруппировкаФинИнструментов.Добавить("Договор");
	ГруппировкаФинИнструментов.Добавить("Валюта");
	
	НастройкиПечати.ДетализацияВзаиморасчетов = ГруппировкаРасчетов[НастройкиПечати.ДетализацияВзаиморасчетов];
	НастройкиПечати.ДетализацияФинансовыхИнструментов = ГруппировкаФинИнструментов[НастройкиПечати.ДетализацияФинансовыхИнструментов];
	
КонецПроцедуры

Процедура ОчиститьДебетКредит(Область)
	
	ПараметрыОбласти = Новый Структура("СуммаДебет,СуммаКредит,СуммаДебетКонтрагент,СуммаКредитКонтрагент");
	ЗаполнитьЗначенияСвойств(ПараметрыОбласти, Область.Параметры);
	
	Область.Параметры.СуммаДебет = 0;
	Область.Параметры.СуммаКредит = 0;
	Если ПараметрыОбласти.СуммаДебетКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаДебетКонтрагент = 0;
	КонецЕсли;
	Если ПараметрыОбласти.СуммаКредитКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОборотКонтрагента(Обороты, Источник, ВыводитьДолгАванс)
	
	Если ВыводитьДолгАванс Тогда
		Обороты.СуммаДебетКонтрагент = Обороты.СуммаДебетКонтрагент + Источник.СуммаДолгКонтрагент;
		Обороты.СуммаКредитКонтрагент = Обороты.СуммаКредитКонтрагент + Источник.СуммаАвансКонтрагент;
	Иначе
		Обороты.СуммаДебетКонтрагент = Обороты.СуммаДебетКонтрагент + Источник.СуммаДебетКонтрагент;
		Обороты.СуммаКредитКонтрагент = Обороты.СуммаКредитКонтрагент + Источник.СуммаКредитКонтрагент;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеРасчетногоДокумента(ДокументСсылка, Номер, Дата) Экспорт
	
	ПредставленияДокументов = ПредставленияДокументов();
	
	ПредставлениеДокумента = "";
	ОписаниеДокумента = "№ __________ " + НСтр("ru = 'от';
												|en = 'dated'") + " __________";
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		//++ НЕ УТ
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыЛизинга")
		//-- НЕ УТ
		ИЛИ  ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		ОписаниеДокумента = ДокументСсылка;
		
	ИначеЕсли ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ПредставленияДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеДокумента);
		ЭтоВходящийНомер = Истина;
		ОписаниеДокумента = СтрШаблон(
			НСтр("ru = '%1 №%2 от %3';
				|en = '%1 No%2 from %3'"),
			?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, ""),
			?(ЗначениеЗаполнено(Номер), 
				?(ЭтоВходящийНомер, 
					УбратьЛидирующиеНули(Номер),
					ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер)),
				"_______"),
			?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДЛФ=D") + " " + НСтр("ru = 'г.';
																			|en = 'year'"), НСтр("ru = '  .  .    ';
																							|en = '  .  .    '")));
		
	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция ПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",						НСтр("ru = 'Приходный кассовый ордер';
																					|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru = 'Акт выполненных работ';
																						|en = 'Acceptance note'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",							НСтр("ru = 'Корректировка задолженности';
																						|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",				НСтр("ru = 'Взаимозачет задолженности';
																						|en = 'Debt offset'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",		НСтр("ru = 'Возврат товаров';
																						|en = 'Return of goods'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",				НСтр("ru = 'Возврат товаров';
																						|en = 'Return of goods'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru = 'Возврат товаров';
																						|en = 'Return of goods'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом", 			НСтр("ru = 'Выкуп возвратной тары';
																						|en = 'Redemption of reusable package'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика", 		НСтр("ru = 'Выкуп возвратной тары';
																						|en = 'Redemption of reusable package'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",				НСтр("ru = 'Корректировка задолженности';
																						|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",				НСтр("ru = 'Корректировка задолженности';
																						|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",				НСтр("ru = 'Корректировка задолженности';
																					|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("НачисленияКредитовИДепозитов", 			НСтр("ru = 'Начисление';
																						|en = 'Accrual'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru = 'Эквайринговая операция';
																						|en = 'Acquiring transaction'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru = 'Отчет комитенту';
																					|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",						НСтр("ru = 'Отчет комитенту';
																					|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",		 НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациямиЗакупка",  НСтр("ru = 'Закупка';
																						|en = 'Purchase'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациямиПродажа",НСтр("ru = 'Продажа';
																						|en = 'Sale'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru = 'Платежное поручение';
																					|en = 'Payment order'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru = 'Закупка';
																						|en = 'Purchase'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",		НСтр("ru = 'Акт';
																					|en = 'Certificate'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru = 'Приходный кассовый ордер';
																					|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",				НСтр("ru = 'Расходный кассовый ордер';
																					|en = 'Cash voucher'"));
	ВидыДокументовКонтрагента.Вставить("РасчетКурсовыхРазниц",					НСтр("ru = 'Курсовые разницы';
																						|en = 'Exchange rate differences'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 				НСтр("ru = 'Продажа';
																						|en = 'Sale'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",			НСтр("ru = 'Акт';
																						|en = 'Certificate'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru = 'Платежное поручение';
																						|en = 'Payment order'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеЗадолженности", 				НСтр("ru = 'Списание задолженности';
																					|en = 'Debt relief'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru = 'Счет-фактура';
																						|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 				НСтр("ru = 'Счет-фактура';
																					|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент",	НСтр("ru = 'Счет-фактура';
																						|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru = 'Таможенная декларация';
																						|en = 'Customs declaration'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ВыбытиеДенежныхДокументов",				НСтр("ru = 'Расходный кассовый ордер';
																						|en = 'Cash voucher'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика", 					НСтр("ru = 'Отчет переработчика';
																						|en = 'Toller report'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеДенежныхДокументов",			НСтр("ru = 'Приходный кассовый ордер';
																						|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеПредметовЛизинга",			НСтр("ru = 'Поступление';
																						|en = 'Receipt'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПоЛизингу",			НСтр("ru = 'Акт';
																					|en = 'Certificate'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетОператораСистемыПлатон",			НСтр("ru = 'Акт';
																						|en = 'Certificate'"));
	//-- НЕ УТ
	//++ НЕ УТКА
	ВидыДокументовКонтрагента.Вставить("ОтчетДавальцу", 						НСтр("ru = 'Отчет переработчика';
																					|en = 'Toller report'"));
	//-- НЕ УТКА
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция УбратьЛидирующиеНули(Строка)
	
	Рез = СокрЛП(Строка);
	Пока Лев(Рез, 1) = "0" Цикл 
		Рез = Сред(Рез, 2);
	КонецЦикла;
	Возврат Рез;
	
КонецФункции

Функция ДокументыНаПечать(МассивОбъектов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	| 	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыПоДокументу.Ссылка КАК Ссылка,
	|		РасчетыПоДокументу.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК РасчетыПоДокументу
	|	ГДЕ
	|		РасчетыПоДокументу.Ссылка В (&ДокументыСверки)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыПоДокументу.Ссылка,
	|		РасчетыПоДокументу.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов.ГруппировкиФинансовыеИнструменты КАК РасчетыПоДокументу
	|	ГДЕ
	|		РасчетыПоДокументу.Ссылка В (&ДокументыСверки)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Сверка.Ссылка,
	|		Сверка.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов КАК Сверка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК тчДанныеКонтрагента
	|			ПО Сверка.Ссылка = тчДанныеКонтрагента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ГруппировкиРасчеты КАК Расчеты
	|			ПО Сверка.Ссылка = Расчеты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ГруппировкиФинансовыеИнструменты КАК ФинИнструменты
	|			ПО Сверка.Ссылка = ФинИнструменты.Ссылка
	|	ГДЕ
	|		Сверка.Ссылка В (&ДокументыСверки)
	|		И тчДанныеКонтрагента.Ссылка ЕСТЬ NULL
	|		И Расчеты.Ссылка ЕСТЬ NULL
	|		И ФинИнструменты.Ссылка ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	| 	ВложенныйЗапрос.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКонтрагента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК ДанныеКонтрагента
	|ГДЕ
	|	ДанныеКонтрагента.Ссылка В (&ДокументыСверки)
	|
	|УПОРЯДОЧИТЬ ПО
	| ДанныеКонтрагента.Ссылка.МоментВремени";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДокументыСверки", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("Новые", РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Результат.Вставить("Старые", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти 

#Область ФормаПомощникаСоздания

#Область СозданиеДокументов

Процедура СоздатьДокументы(Параметры, АдресХранилища = "") Экспорт
	
	ТекущаяДата  = ТекущаяДатаСеанса();
	ТекущееВремя = Час(ТекущаяДата) * 3600 + Минута(ТекущаяДата) * 60 + Секунда(ТекущаяДата);
	
	ДатаДокументов = Параметры.ДатаДокументов;
	ТаблицаРасчетов = Параметры.ТаблицаРасчетов;
	ОтработанныеДокументы = Новый Массив;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПериодСверки", Параметры.ПериодСверки);
	ДанныеЗаполнения.Вставить("ДоговорыБезОборотов", Параметры.ДоговорыБезОборотов);
	ДанныеЗаполнения.Вставить("РазбиватьПоТипамРасчетов", Параметры.РазбиватьПоТипамРасчетов);
	ДанныеЗаполнения.Вставить("РазбиватьПоПартнерам", Параметры.РазбиватьПоПартнерам);
	ДанныеЗаполнения.Вставить("РазбиватьПоДоговорам", Параметры.РазбиватьПоДоговорам);
	ДанныеЗаполнения.Вставить("УстанавливатьНовыйНомер", Ложь);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор,,Параметры.НастройкиОтбора);
	МассивВсехДокументовСверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл

		ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
		ДанныеЗаполнения.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
		
		Если СтрокаТаблицы.СоздаватьДокумент ИЛИ СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
			
			ДокументОбъект = Документы.СверкаВзаиморасчетов.СоздатьДокумент();
			
			ДокументОбъект.Дата = ДатаДокументов + ТекущееВремя;
			
			ДанныеЗаполнения.УстанавливатьНовыйНомер = Истина;
			ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
			ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
			
			Если ДокументОбъект.Проведен Тогда
				ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Создание", ОтработанныеДокументы); 
				МассивВсехДокументовСверки.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаТаблицы.СуществуютДокументы Тогда

			ДокументОбъект = СтрокаТаблицы.ДокументСверки.ПолучитьОбъект();
			
			Если СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
				
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "ПометкаНаУдаление", ОтработанныеДокументы);
				Исключение
					ТекстОшибки    = НСтр("ru = 'Не удалось пометить на удаление %Документ%. %ОписаниеОшибки%';
											|en = 'Unable to mark %Документ% for deletion. %ОписаниеОшибки%'");
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%Документ%",	ДокументОбъект);
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
				КонецПопытки;
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "Перезаполнять" Тогда
				
				МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
				ДанныеЗаполнения.УстанавливатьНовыйНомер = Ложь;
				ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
				
				Если ДокументОбъект.Проведен Тогда
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Перезаполнение", ОтработанныеДокументы);
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "НеИзменять" Тогда
				
				Если ДокументОбъект.Проведен Тогда
					МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "НеИзменять", ОтработанныеДокументы);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивВсехДокументовСверки", МассивВсехДокументовСверки);
	Результат.Вставить("ОтработанныеДокументы", ОтработанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Организация",	 		ДанныеЗаполнения.ДанныеДокумента.Организация);
	ДанныеДокумента.Вставить("ТипРасчетов",	 		ДанныеЗаполнения.ДанныеДокумента.ТипРасчетов);
	ДанныеДокумента.Вставить("Партнер",				ДанныеЗаполнения.ДанныеДокумента.Партнер);
	ДанныеДокумента.Вставить("Контрагент",			ДанныеЗаполнения.ДанныеДокумента.Контрагент);
	ДанныеДокумента.Вставить("Договор"	,			ДанныеЗаполнения.ДанныеДокумента.Договор);
	ДанныеДокумента.Вставить("НачалоПериода",		ДанныеЗаполнения.ПериодСверки.ДатаНачала);
	ДанныеДокумента.Вставить("КонецПериода",		ДанныеЗаполнения.ПериодСверки.ДатаОкончания);
	ДанныеДокумента.Вставить("Статус",		 		Перечисления.СтатусыСверокВзаиморасчетов.Создана);
	ДанныеДокумента.Вставить("НастройкиОтбора", 	ДанныеЗаполнения.НастройкиОтбора);
	ДанныеДокумента.Вставить("ДоговорыБезОборотов", ДанныеЗаполнения.ДоговорыБезОборотов);
	ДанныеДокумента.Вставить("РазбиватьПоТипамРасчетов", ДанныеЗаполнения.РазбиватьПоТипамРасчетов);
	ДанныеДокумента.Вставить("РазбиватьПоПартнерам", ДанныеЗаполнения.РазбиватьПоПартнерам);
	ДанныеДокумента.Вставить("РазбиватьПоДоговорам", ДанныеЗаполнения.РазбиватьПоДоговорам);
	
	ДокументОбъект.Заполнить(ДанныеДокумента);
	
	Если ДанныеЗаполнения.УстанавливатьНовыйНомер Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
								|en = 'Failed to write %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = НСтр("ru = 'Не удалось записать %Документ%.';
							|en = 'Failed to write %Документ%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВПротоколВыполнения(ДокументСверки, Действие, ОтработанныеДокументы)
	
	СтрокаПротокола = Новый Структура("ДокументСверки,Действие", ДокументСверки, Действие);
	ОтработанныеДокументы.Добавить(СтрокаПротокола);
	
КонецПроцедуры

#КонецОбласти

#Область ПометкаНаУдаление

Процедура УстановитьПометкуНаУдаление(Параметры, АдресХранилища = "") Экспорт
	
	Для Каждого Ссылка Из Параметры.ВыделенныеДокументы Цикл
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаДокумента

Процедура РаспределениеРасчетовПоДокументам(Параметры, АдресХранилища = "") Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(
		Параметры.КонецПериода,
		Параметры.АналитикиРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

 #Область ЗаполнитьДанныеСверкиПоРасчетам
 
Процедура ЗаполнитьДанныеПоРасчетам(ДанныеДокумента) Экспорт
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент, ДанныеДокумента.Дата);
	КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
	
	СтруктураПредставленийУчастников = Новый Структура;
	СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор);
	Если ДанныеДокумента.НастройкиОтбора <> Неопределено Тогда
		НастройкиОтбора = ДанныеДокумента.НастройкиОтбора.Получить();
		Если НастройкиОтбора <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		КонецЕсли;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", ДанныеДокумента.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "КонецПериода", КонецДня(ДанныеДокумента.КонецПериода));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", ДанныеДокумента.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ПолучатьДокументыСверки", Ложь);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоТипамРасчетов", ДанныеДокумента.РазбиватьПоТипамРасчетов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоПартнерам", ДанныеДокумента.РазбиватьПоПартнерам);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоДоговорам", ДанныеДокумента.РазбиватьПоДоговорам);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Организация", ДанныеДокумента.Организация);
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Контрагент", ДанныеДокумента.Контрагент);
	
	ТаблицаРезультатаСКД = ПолучитьВзаиморасчеты(КомпоновщикОтбор);
	
	СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаРезультатаСКД);
	
КонецПроцедуры

Процедура СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаВзаиморасчетов)
	
	Группировки = "ТипРасчетов, Партнер, Договор, ";
	
	ПредставленияДокументов = ПредставленияДокументов();
	ДанныеДокумента.ГруппировкиРасчеты.Очистить();
	ДанныеДокумента.ДетальныеЗаписиРасчеты.Очистить();
	
	ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Очистить();
	ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Очистить();
	ЕстьСчетФактуры = ТаблицаВзаиморасчетов.Колонки.Найти("СчетФактура") <> Неопределено;
	Для Каждого СтрокаРасчетов Из ТаблицаВзаиморасчетов Цикл
		
		СуммаВзаиморасчетов = Неопределено;
		Если СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			ИЛИ СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ПоляГруппировки = Группировки + "ОбъектРасчетов, Валюта";
			ГруппировкаДетальныхЗаписей = "ОбъектРасчетов, РасчетныйДокумент, ВалютаДокумента";
			ПоляСуммирования = "НачальноеСальдо";
			ПоляСуммированияДетальныхЗаписей = "СуммаДокумента, СуммаДолг, СуммаАванс, СуммаАвансРегл";
			ТЧГруппировки = ДанныеДокумента.ГруппировкиРасчеты;
			ТЧДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиРасчеты;
			СуммаВзаиморасчетов = Макс(-СтрокаРасчетов.СуммаДолг, СтрокаРасчетов.СуммаДолг) + Макс(-СтрокаРасчетов.СуммаАванс, СтрокаРасчетов.СуммаАванс);
		Иначе
			ПоляГруппировки = Группировки + "Валюта";
			ГруппировкаДетальныхЗаписей = "Договор, РасчетныйДокумент, ВалютаДокумента";
			ПоляСуммирования = "НачальноеСальдоДт,НачальноеСальдоКт";
			ПоляСуммированияДетальныхЗаписей = "ОсновнойДолг, Проценты, Комиссия, АрендныеОбязательства, ОбеспечительныйПлатеж, ЛизинговыйПлатеж, ВыкупПредметаЛизинга";
			ТЧГруппировки = ДанныеДокумента.ГруппировкиФинансовыеИнструменты;
			ТЧДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты;
			
		КонецЕсли;
		
		ДанныеСумм = ЗначенияРесурсов(СтрокаРасчетов, ПоляСуммированияДетальныхЗаписей);
		
		НоваяСтрока = ТЧГруппировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ПоляГруппировки + ", " + ПоляСуммирования);
		
		Если СтрокаРасчетов.НачальноеСальдо = 0 И ДанныеСумм.ЕстьЗаполненные Тогда
			НоваяСтрока = ТЧДетальныеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ГруппировкаДетальныхЗаписей + ", " + ПоляСуммированияДетальныхЗаписей);
			НоваяСтрока.ОписаниеДокумента = ОписаниеРасчетногоДокумента(СтрокаРасчетов.РасчетныйДокумент, СтрокаРасчетов.НомерДокумента, СтрокаРасчетов.ДатаДокумента);
			Если ЕстьСчетФактуры И ЗначениеЗаполнено(СтрокаРасчетов.Счетфактура) Тогда
				ОписаниеСФ = СтрШаблон(
								НСтр("ru = 'Счет-фактура №%1 от %2';
									|en = 'Tax invoice №%1 from %2'"),
									ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СтрокаРасчетов.НомерСФ),
									Формат(СтрокаРасчетов.ДатаСФ, "ДЛФ=D")
								);
				НоваяСтрока.ОписаниеДокумента = НоваяСтрока.ОписаниеДокумента + " (" + ОписаниеСФ + ")";
			КонецЕсли;
			Если СуммаВзаиморасчетов <> Неопределено Тогда
				НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	#Область ЗаполнениеТЧРасчетов
	ГрупповыеЗаписи = ДанныеДокумента.ГруппировкиРасчеты.Выгрузить();
	ГрупповыеЗаписи.Свернуть(Группировки + "ОбъектРасчетов, Валюта", "НачальноеСальдо, ОборотПриход, ОборотРасход, КонечноеСальдо");
	
	ДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиРасчеты.Выгрузить();
	ДетальныеЗаписи.Свернуть("ОбъектРасчетов, РасчетныйДокумент, ОписаниеДокумента, ВалютаДокумента", "СуммаДокумента, СуммаДолг, СуммаАванс, СуммаАвансРегл");
	
	Для Каждого Группировка Из ГрупповыеЗаписи Цикл
		
		ВзаиморасчетыКлиентСервер.РасчитатьКонечноеСальдоПоВзаиморасчетам(Группировка, ДетальныеЗаписи);
		
	КонецЦикла;
	ГрупповыеЗаписи.Сортировать("ТипРасчетов, Партнер, Договор, ОбъектРасчетов, Валюта");
	ДанныеДокумента.ГруппировкиРасчеты.Загрузить(ГрупповыеЗаписи);
	#КонецОбласти
	
	#Область ЗаполнениеТЧФинИнструментов
	ГрупповыеЗаписи = ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Выгрузить();
	ГрупповыеЗаписи.Свернуть(Группировки + "Валюта", "НачальноеСальдоДт, НачальноеСальдоКт, ОборотПриход, ОборотРасход, КонечноеСальдоДт, КонечноеСальдоКт");
	
	ДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Выгрузить();
	ДетальныеЗаписи.Свернуть("Договор, РасчетныйДокумент, ОписаниеДокумента, ВалютаДокумента", "ОсновнойДолг, Проценты, Комиссия, АрендныеОбязательства, ОбеспечительныйПлатеж, ЛизинговыйПлатеж, ВыкупПредметаЛизинга");
	
	Для Каждого Группировка Из ГрупповыеЗаписи Цикл
		
		ВзаиморасчетыКлиентСервер.РасчитатьКонечноеСальдоПоФинансовымИнструментам(Группировка, ДетальныеЗаписи);
		
	КонецЦикла;
	ГрупповыеЗаписи.Сортировать("ТипРасчетов, Партнер, Договор, Валюта");
	ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Загрузить(ГрупповыеЗаписи);
	ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Загрузить(ДетальныеЗаписи);
	#КонецОбласти
	
КонецПроцедуры

Функция ЗначенияРесурсов(ДанныеЗаполнения, ИменаПолей)
	
	ДанныеРесурсов = Новый Структура(ИменаПолей);
	
	ЕстьЗаполненные = Ложь;
	Для Каждого Ресурс Из ДанныеРесурсов Цикл
		
		ДанныеРесурсов[Ресурс.Ключ] = ДанныеЗаполнения[Ресурс.Ключ];
		Если ДанныеРесурсов[Ресурс.Ключ] <> 0 И НЕ ЕстьЗаполненные Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ДанныеРесурсов.Вставить("ЕстьЗаполненные", ЕстьЗаполненные);
	
	Возврат ДанныеРесурсов;
	
КонецФункции

#КонецОбласти

Функция ПолучитьВзаиморасчеты(КомпоновщикОтбор) Экспорт
	
	СхемаКомпоновкиДанных = Документы.СверкаВзаиморасчетов.ПолучитьМакет("ОтборРасчетов");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикОтбор);
	
	НастройкиКомпоновкиДанных = КомпоновщикОтбор.Настройки;
	ВключатьДоговорыБезОборотов = КомпоновкаДанныхКлиентСервер.ИспользуетсяОтбор(НастройкиКомпоновкиДанных.Отбор.Элементы, "ДоговорыБезОборотов", Истина);
	
	НачалоПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода");
	Если НЕ ЗначениеЗаполнено(НачалоПериода.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", Дата('19800101'));
	КонецЕсли;
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикОтбор.Настройки, "Период");
	Если НЕ ЗначениеЗаполнено(Период.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", Дата('19800101'));
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ДоговорыБезОборотов", ВключатьДоговорыБезОборотов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "АрендныеОбязательства", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ОбеспечительныйПлатеж", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ЛизинговыйПлатеж", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ВыкупПредметаЛизинга", Неопределено);
	//++ НЕ УТ
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "АрендныеОбязательства", Перечисления.ТипыПлатежейПоЛизингу.АрендныеОбязательства);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ОбеспечительныйПлатеж", Перечисления.ТипыПлатежейПоЛизингу.ОбеспечительныйПлатеж);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ЛизинговыйПлатеж", Перечисления.ТипыПлатежейПоЛизингу.ЛизинговыйПлатеж);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ВыкупПредметаЛизинга", Перечисления.ТипыПлатежейПоЛизингу.ВыкупПредметаЛизинга);
	//-- НЕ УТ
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультатаСКД = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ТаблицаРезультатаСКД;
	
КонецФункции

Функция ДанныеРасчетногоДокумента(РасчетныеДокументы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК Дата,
	|	РеестрДокументов.НомерПервичногоДокумента КАК Номер,
	|	РеестрДокументов.Валюта КАК Валюта,
	|	РеестрДокументов.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитенту КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПервичныйДокумент КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Ссылка.Дата КАК Дата,
	|	СуммыДокументов.Ссылка.Номер КАК Номер,
	|	СуммыДокументов.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(СуммыДокументов.Сумма) КАК Сумма
	|ИЗ
	|	Документ.СписаниеЗадолженности.Задолженность КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|		
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументов.Ссылка,
	|	СуммыДокументов.ВалютаВзаиморасчетов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", РасчетныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Массив;
	ПоляРезультата = "Ссылка,Номер,Дата,Валюта,Сумма";
	Пока Выборка.Следующий() Цикл
		ДанныеДокумента = Новый Структура(ПоляРезультата);
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
		Результат.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификаторФормы = Неопределено, НастройкиОтбора = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = Документы.СверкаВзаиморасчетов.ПолучитьМакет("ОтборРасчетов");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Поле = СхемаКомпоновкиДанных.НаборыДанных.Запрос.Поля.Найти("Партнер");
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Условие = Истина;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокПоляСКДВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		СхемаКомпоновкиДанных.НаборыДанных.Запрос, "Партнер", НСтр("ru = 'Контрагент';
																	|en = 'Counterparty'"));
		
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	КонецЕсли;
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище);
	
	КомпоновщикОтбор.Инициализировать(ИсточникНастроек);
	
	КомпоновщикОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Если НастройкиОтбора <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер");
	КонецЕсли;
	КомпоновщикОтбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		УдалитьИзВременногоХранилища(АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитыПоследнегоДокумента(Контрагент) Экспорт

	СтруктураРеквизитов = Новый Структура("Партнер,
										  |Договор,
										  |РасшифровкаПоЗаказам,
										  |РасшифровкаПоПартнерам,
										  |РасшифровкаПоДоговорам,
										  |ФИОРуководителяКонтрагента,
										  |ДолжностьРуководителяКонтрагента,
										  |КонтактноеЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СверкаВзаиморасчетов.Партнер						  КАК Партнер,
	|	СверкаВзаиморасчетов.Договор						  КАК Договор,
	|	СверкаВзаиморасчетов.РасшифровкаПоЗаказам			  КАК РасшифровкаПоЗаказам,
	|	СверкаВзаиморасчетов.РасшифровкаПоПартнерам			  КАК РасшифровкаПоПартнерам,
	|	СверкаВзаиморасчетов.РасшифровкаПоДоговорам			  КАК РасшифровкаПоДоговорам,
	|	СверкаВзаиморасчетов.ФИОРуководителяКонтрагента       КАК ФИОРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.КонтактноеЛицо                   КАК КонтактноеЛицо
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов
	|ГДЕ
	|	СверкаВзаиморасчетов.Контрагент = &Контрагент
	|	И НЕ СверкаВзаиморасчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СверкаВзаиморасчетов.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция АналитикаКРасчету(Организация, Контрагент, ТипРасчетов, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(АналитикаПоПартнерам.Организация В (&Организация) ИЛИ (&ПоВсемОрганизациям))
	|		И (АналитикаПоПартнерам.Контрагент В (&Контрагент) ИЛИ (&ПоВсемКонтрагентам))
	|		И (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) В (&ТипРасчетов)  ИЛИ &ПоВсемТипам)
	|	И Задания.Месяц <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(АналитикаПоПартнерам.Организация В (&Организация) ИЛИ (&ПоВсемОрганизациям))
	|		И (АналитикаПоПартнерам.Контрагент В (&Контрагент) ИЛИ (&ПоВсемКонтрагентам))
	|		И (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) В (&ТипРасчетов) ИЛИ &ПоВсемТипам)
	|	И Задания.Месяц <= &КонецПериода";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчетов);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", НЕ ЗначениеЗаполнено(Контрагент));
	Запрос.УстановитьПараметр("ПоВсемТипам", НЕ ЗначениеЗаполнено(ТипРасчетов));
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	АналитикаКРасчету = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
	Возврат АналитикаКРасчету;
	
КонецФункции

#Область ВыводУстаревшихПечатныхФорм

Функция СформироватьПечатнуюФормуАктСДаннымиКонтрагента(МассивОбъектов, ОбъектыПечати, ТабличныйДокумент = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокумента = ВыборкаДанныхДокументаНаПечать(МассивОбъектов);
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока ДанныеДокумента.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов.ПФ_MXL_УстаревшийАктСДаннымиКонтрагента");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// ШАПКА ДОКУМЕНТА
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru = 'Акт сверки взаимных расчетов';
																											|en = 'Mutual settlements reconciliation statement'"));
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по состоянию на %1';
					|en = 'as on %1'"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за период: %1';
						|en = 'for the period: %1'"), ПредставлениеПериода);
				
			Иначе
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'за %1';
						|en = 'for %1'"), ПредставлениеПериода);
				
			КонецЕсли;
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовка 			 = ТекстЗаголовка;       
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода 	 = ПредставлениеПериода;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТаблицаРасхождений = Новый ТаблицаЗначений;
		ТаблицаРасхождений.Колонки.Добавить("ВалютаВзаиморасчетов");
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			ТаблицаРасхождений.Колонки.Добавить("Партнер");
		КонецЕсли;
		ТаблицаРасхождений.Колонки.Добавить("СуммаДолгПартнера");
		ТаблицаРасхождений.Колонки.Добавить("СуммаНашДолг");
		
		// ДАННЫЕ ОРГАНИЗАЦИИ
		
		ТаблицаЗадолженностиН = ОстаткиРасчетов(ДанныеДокумента);

		Если ТаблицаЗадолженностиН <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокН");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиН.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиН.ВыгрузитьКолонку("Партнер"));
			КонецЕсли; 
			
			ПараметрыТаблицыЗадолженностей = Новый Структура;
			ПараметрыТаблицыЗадолженностей.Вставить("ДанныеДокумента", ДанныеДокумента);
			ПараметрыТаблицыЗадолженностей.Вставить("ТаблицаОстатков", ТаблицаЗадолженностиН);
			ПараметрыТаблицыЗадолженностей.Вставить("СтруктураПредставленийУчастников", СтруктураПредставленийУчастников);
			ПараметрыТаблицыЗадолженностей.Вставить("МассивВалют", МассивВалют);
			ПараметрыТаблицыЗадолженностей.Вставить("Макет", Макет);
			ПараметрыТаблицыЗадолженностей.Вставить("ВыводитьПодвал", Истина);
			
			СтруктураЗадолженности = Новый Структура;
			Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, Партнер, ТаблицаРасхождений));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, , ТаблицаРасхождений));
				КонецЕсли;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗадолженность");
				Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженностиН Цикл
					СтрокаРасхождений = ТаблицаРасхождений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаЗадолженности, , "СуммаДолгПартнера, СуммаНашДолг");
					ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.ВалютаВзаиморасчетов;
					СуммаДолга = СтрокаЗадолженности.СуммаДолгПартнера - СтрокаЗадолженности.СуммаНашДолг;
					Если СуммаДолга > 0 Тогда
						СтрокаРасхождений.СуммаДолгПартнера = СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = ПредставлениеПартнера(СтрокаЗадолженности.Партнер);
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
						КонецЕсли; 
					Иначе
						СтрокаРасхождений.СуммаНашДолг = -СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(-СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 перед %2';
									|en = '%1 before %2'"),
								СтруктураПредставленийУчастников.ПредставлениеОрганизации,
								ПредставлениеПартнера(СтрокаЗадолженности.Партнер));
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
						КонецЕсли; 
					КонецЕсли; 
					Если СуммаДолга <> 0 Тогда
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;	
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокНОтсутствует");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// ДАННЫЕ КОНТРАГЕНТА
		
		ТаблицаЗадолженностиК = ОстаткиРасчетовПоДаннымКонтрагента(ДанныеДокумента);
		
		Если ТаблицаЗадолженностиК <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокК");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиК.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиК.ВыгрузитьКолонку("Партнер"));
			КонецЕсли;
			
			ПараметрыТаблицыЗадолженностей = Новый Структура;
			ПараметрыТаблицыЗадолженностей.Вставить("ДанныеДокумента", ДанныеДокумента);
			ПараметрыТаблицыЗадолженностей.Вставить("ТаблицаОстатков", ТаблицаЗадолженностиК);
			ПараметрыТаблицыЗадолженностей.Вставить("СтруктураПредставленийУчастников", СтруктураПредставленийУчастников);
			ПараметрыТаблицыЗадолженностей.Вставить("МассивВалют", МассивВалют);
			ПараметрыТаблицыЗадолженностей.Вставить("Макет", Макет);
			ПараметрыТаблицыЗадолженностей.Вставить("ВыводитьПодвал", Истина);
			
			СтруктураЗадолженности = Новый Структура;
			Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, Партнер, ТаблицаРасхождений, Истина));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, , ТаблицаРасхождений, Истина));
				КонецЕсли;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗадолженность");
				Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженностиК Цикл
					СтрокаРасхождений = ТаблицаРасхождений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаЗадолженности, , "СуммаДолгПартнера, СуммаНашДолг");
					ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.ВалютаВзаиморасчетов;
					СуммаДолга = СтрокаЗадолженности.СуммаДолгПартнера - СтрокаЗадолженности.СуммаНашДолг;
					Если СуммаДолга > 0 Тогда
						СтрокаРасхождений.СуммаДолгПартнера = -СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = ПредставлениеПартнера(СтрокаЗадолженности.Партнер);
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
						КонецЕсли; 
					Иначе
						СтрокаРасхождений.СуммаНашДолг = СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(-СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = '%1 перед %2';
									|en = '%1 before %2'"),
								СтруктураПредставленийУчастников.ПредставлениеОрганизации,
								ПредставлениеПартнера(СтрокаЗадолженности.Партнер));
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
						КонецЕсли; 
					КонецЕсли; 
					Если СуммаДолга <> 0 Тогда
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;	
				
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокКОтсутствует");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// РАСХОЖДЕНИЯ
		
		СписокКолонокГруппировки = "ВалютаВзаиморасчетов";
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокКолонокГруппировки = СписокКолонокГруппировки + ", Партнер";
		КонецЕсли;
		ТаблицаРасхождений.Свернуть(СписокКолонокГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
			Если СтрокаРасхождений.СуммаДолгПартнера = 0 И СтрокаРасхождений.СуммаНашДолг = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаРасхождений);
			КонецЕсли; 
		КонецЦикла; 
		
		Для Каждого СтрокаРасхождений Из МассивСтрокКУдалению Цикл
			ТаблицаРасхождений.Удалить(СтрокаРасхождений);
		КонецЦикла; 
		
		Если ТаблицаРасхождений.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ОбластьМакетаСтрока    = Макет.ПолучитьОбласть("СтрокаРасхождения");
			
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
				
				ОбластьМакетаСтрока.Параметры.Валюта = СтрокаРасхождений.ВалютаВзаиморасчетов;
				
				Если СтрокаРасхождений.СуммаДолгПартнера <> 0 Тогда
					Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = ПредставлениеПартнера(СтрокаРасхождений.Партнер);
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
					ОбластьМакетаСтрока.Параметры.Кредитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					ОбластьМакетаСтрока.Параметры.Сумма = ?(СтрокаРасхождений.СуммаДолгПартнера > 0, СтрокаРасхождений.СуммаДолгПартнера, -СтрокаРасхождений.СуммаДолгПартнера);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				КонецЕсли;
				
				Если СтрокаРасхождений.СуммаНашДолг <> 0 Тогда
					ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
						ОбластьМакетаСтрока.Параметры.Кредитор = ПредставлениеПартнера(СтрокаРасхождений.Партнер);
					Иначе
						ОбластьМакетаСтрока.Параметры.Кредитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
					ОбластьМакетаСтрока.Параметры.Сумма = ?(СтрокаРасхождений.СуммаНашДолг > 0, СтрокаРасхождений.СуммаНашДолг, -СтрокаРасхождений.СуммаНашДолг);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокНетРасхождений");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// ПОДПИСИ
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОстаткиРасчетовПоДаннымКонтрагента(ДанныеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКонтрагента.РасчетныйДокумент	   КАК РасчетныйДокумент,
	|	ДанныеКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеКонтрагента.Партнер			   КАК Партнер,
	|	ДанныеКонтрагента.ОписаниеДокумента    КАК ОписаниеДокумента,
	|	ДанныеКонтрагента.СуммаДолгПартнера	   КАК СуммаДолгПартнера,
	|	ДанныеКонтрагента.СуммаНашДолг		   КАК СуммаНашДолг	
	|ИЗ
	|	Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК ДанныеКонтрагента
	|ГДЕ
	|	ДанныеКонтрагента.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО	ДанныеКонтрагента.НомерСтроки
	|";
					   
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеДокумента.ДокументСсылка);					   
					   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗадолженности = РезультатЗапроса.Выгрузить();
		
		СписокПолейГруппировки = "ВалютаВзаиморасчетов";
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", РасчетныйДокумент, ОписаниеДокумента";
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Партнер";
		КонецЕсли; 
		ТаблицаЗадолженности.Свернуть(СписокПолейГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
	Иначе
		ТаблицаЗадолженности = Неопределено;
	КонецЕсли;

	Возврат ТаблицаЗадолженности;

КонецФункции

Функция ОстаткиРасчетов(ДанныеДокумента) Экспорт

	ЗапросНашихДанных = Новый Запрос;
	
	ЗапросНашихДанных.Текст = ТекстЗапросаОтборПоАналитике() + "
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ЗаказКлиента				КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженностиРазвернуто
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ЗаказПоставщику			КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		  КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	  КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	  КАК Партнер,
	|	СУММА(ОстаткиЗадолженности.СуммаДолгПартнера) КАК СуммаДолгПартнера,
	|	СУММА(ОстаткиЗадолженности.СуммаНашДолг)	  КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженности
	|ИЗ
	|	ОстаткиЗадолженностиРазвернуто КАК ОстаткиЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗадолженности.РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ПОМЕСТИТЬ ЗадолженностьПоДокументамРасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетОператораСистемыПлатон КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер				КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер				КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказДавальца КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетДавальцу КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	//-- НЕ УТКА
	//++ НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказПереработчику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	//-- НЕ УТ
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО								КАК НомерРасчетногоДокумента,
	|	НЕОПРЕДЕЛЕНО								КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент		   КАК РасчетныйДокумент,
	|	ЗадолженностьПоДокументамРасчетов.НомерРасчетногоДокумента КАК НомерРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ДатаРасчетногоДокумента  КАК ДатаРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов	   КАК ВалютаВзаиморасчетов,
	|	ЗадолженностьПоДокументамРасчетов.Партнер				   КАК Партнер,
	|	ЗадолженностьПоДокументамРасчетов.Договор				   КАК Договор,
	|	ЗадолженностьПоДокументамРасчетов.СуммаДолгПартнера		   КАК СуммаДолгПартнера,
	|	ЗадолженностьПоДокументамРасчетов.СуммаНашДолг			   КАК СуммаНашДолг,
	|	ЗадолженностьПоДокументамРасчетов.ЭтоВходящийНомер		   КАК ЭтоВходящийНомер
	|ИЗ
	|	ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	Неопределено											   КАК РасчетныйДокумент,
	|	Неопределено											   КАК НомерРасчетногоДокумента,
	|	Неопределено											   КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 				   КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 				   КАК Партнер,
	|	Неопределено											   КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера					   КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг						   КАК СуммаНашДолг,
	|	ЛОЖЬ													   КАК ЭтоВходящийНомер
	|ИЗ
	|	ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|		ПО ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент = ОстаткиЗадолженности.РасчетныйДокумент
	|		И ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов = ОстаткиЗадолженности.ВалютаВзаиморасчетов
	|ГДЕ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасчетногоДокумента,
	|	НомерРасчетногоДокумента
	|";

	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки", Новый Граница(
																  КонецДня(ДанныеДокумента.КонецПериода),
																  ВидГраницы.Включая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		   ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		   ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	   ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	   ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));

	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ТаблицаНашихДанных = РезультатЗапросаНашихДанных.Выгрузить();
		
		СписокПолейГруппировки = "ВалютаВзаиморасчетов,ЭтоВходящийНомер";
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", РасчетныйДокумент, НомерРасчетногоДокумента, ДатаРасчетногоДокумента";
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Партнер";
		КонецЕсли;
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Договор";
		КонецЕсли;
		ТаблицаНашихДанных.Свернуть(СписокПолейГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
	Иначе
		ТаблицаНашихДанных = Неопределено;
	КонецЕсли;

	Возврат ТаблицаНашихДанных;
	
КонецФункции

Процедура СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации, ТабличнаяЧасть) Экспорт
	
	СписокКолонокГруппировок = "ВалютаВзаиморасчетов";
	Если ПараметрыДетализации.РасшифровкаПоЗаказам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", РасчетныйДокумент, ОписаниеДокумента";
	КонецЕсли;
	Если ПараметрыДетализации.РасшифровкаПоПартнерам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", Партнер";
	КонецЕсли;
	Если ПараметрыДетализации.РасшифровкаПоДоговорам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", Договор";
	КонецЕсли;
	
	ТаблицаДанныеКонтрагента = ТабличнаяЧасть.Выгрузить(, СписокКолонокГруппировок + ", СуммаДолгПартнера, СуммаНашДолг");
	ТаблицаДанныеКонтрагента.Свернуть(СписокКолонокГруппировок, "СуммаДолгПартнера, СуммаНашДолг");
	ТабличнаяЧасть.Загрузить(ТаблицаДанныеКонтрагента);
	
КонецПроцедуры

Функция ВыборкаДанныхДокументаНаПечать(МассивОбъектов) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(Документы.СверкаВзаиморасчетов.ПустаяСсылка(), МенеджерВременныхТаблиц);	
	КонецЕсли;
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанныеДокумента.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументСсылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Партнер.НаименованиеПолное КАК ПредставлениеПартнера,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.НаименованиеДляПечати КАК ПредставлениеДоговора,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.КонецПериода КАК КонецПериода,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
	|	ДанныеДокумента.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	ДанныеДокумента.РасшифровкаПоЗаказам КАК РасшифровкаПоЗаказам,
	|	ДанныеДокумента.РасшифровкаПоПартнерам КАК РасшифровкаПоПартнерам,
	|	ДанныеДокумента.РасшифровкаПоДоговорам КАК РасшифровкаПоДоговорам
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер";
								   
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Возврат ЗапросДанныеДокумента.Выполнить().Выбрать();
	
КонецФункции

Функция ВывестиТаблицуЗадолженности(
	ПараметрыТаблицыЗадолженностей,
	Партнер = Неопределено,
	ТаблицаРасхождений = Неопределено,
	ЭтоДанныеКонтрагента = Ложь)
	
	ДанныеДокумента                      = ПараметрыТаблицыЗадолженностей.ДанныеДокумента;
	ТаблицаОстатков                      = ПараметрыТаблицыЗадолженностей.ТаблицаОстатков;
	МассивВалют                          = ПараметрыТаблицыЗадолженностей.МассивВалют;
	СтруктураПредставленийУчастников     = ПараметрыТаблицыЗадолженностей.СтруктураПредставленийУчастников;
	Макет                                = ПараметрыТаблицыЗадолженностей.Макет;
	ВыводитьПодвал                       = ПараметрыТаблицыЗадолженностей.ВыводитьПодвал;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаПартнерВалюта");
	ОбластьМакетаШапка		 = Макет.ПолучитьОбласть("ШапкаТаблицыЗадолженность");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженность");
	Если ВыводитьПодвал Тогда
		ОбластьМакетаПодвал  = Макет.ПолучитьОбласть("ПодвалТаблицыЗадолженность");
	КонецЕсли; 
	
	ПредставлениеПартнера = ПредставлениеПартнера(Партнер);
	
	Для Каждого ВалютаВзаиморасчетов Из МассивВалют Цикл
		
		СуммаДолгПартнера = 0;
		СуммаНашДолг = 0;
		
		СтруктураОтбора = Новый Структура("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Если Партнер <> Неопределено Тогда
			СтруктураОтбора.Вставить("Партнер", Партнер);
		КонецЕсли; 
		МассивСтрокЗадолженности = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокЗадолженности.Количество() > 0 Тогда
			Если Партнер <> Неопределено Тогда
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '%1, в валюте: %2';
						|en = '%1, in currency: %2'"), ПредставлениеПартнера, ВалютаВзаиморасчетов);
			Иначе
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'в валюте: %1';
						|en = 'in the currency: %1'"), ВалютаВзаиморасчетов);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
			ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		КонецЕсли;
		
		Для Каждого СтрокаЗадолженности Из МассивСтрокЗадолженности Цикл
			
			ОбластьМакетаСтрока.Параметры.СуммаДолгПартнера = СтрокаЗадолженности.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.СуммаНашДолг 		= СтрокаЗадолженности.СуммаНашДолг;
			Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
				ОбластьМакетаСтрока.Параметры.ДокументСсылка = СтрокаЗадолженности.РасчетныйДокумент;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
					ОбластьМакетаСтрока.Параметры.Документ = УстаревшееОписаниеРасчетногоДокумента(СтрокаЗадолженности.РасчетныйДокумент,
						СтрокаЗадолженности.НомерРасчетногоДокумента,
						СтрокаЗадолженности.ДатаРасчетногоДокумента,
						СтруктураПредставленийУчастников,
						СтрокаЗадолженности.ЭтоВходящийНомер,
						(СтрокаЗадолженности.СуммаДолгПартнера > 0));
				КонецЕсли;
			Иначе
				ОбластьМакетаСтрока.Параметры.Документ = СтрокаЗадолженности.ОписаниеДокумента;
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			СуммаДолгПартнера = СуммаДолгПартнера + СтрокаЗадолженности.СуммаДолгПартнера;
			СуммаНашДолг	  = СуммаНашДолг 	  + СтрокаЗадолженности.СуммаНашДолг;
			
		КонецЦикла; 
		
		Если ВыводитьПодвал Тогда
			ОбластьМакетаПодвал.Параметры.СуммаДолгПартнера = СуммаДолгПартнера;
			ОбластьМакетаПодвал.Параметры.СуммаНашДолг = СуммаНашДолг;
			ОбластьМакетаПодвал.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЕсли; 
		
		Если ТаблицаРасхождений <> Неопределено Тогда
			СтрокаТаблицыРасхождений = ТаблицаРасхождений.Добавить();
			СтрокаТаблицыРасхождений.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			Если Партнер <> Неопределено Тогда
				СтрокаТаблицыРасхождений.Партнер = Партнер;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = СуммаНашДолг;
			Иначе
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = -СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = -СуммаНашДолг;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеПартнера(Партнер)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Партнеры.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеПартнера = Выборка.НаименованиеПолное;
	Иначе
		ПредставлениеПартнера = "";
	КонецЕсли;
	
	Возврат ПредставлениеПартнера;
	
КонецФункции

Функция ТекстЗапросаОтборПоАналитике()

	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)
	|	И (АналитикаУчетаПоПартнерам.Договор = &Договор
	|		ИЛИ &НеИспользоватьОтборПоДоговору)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

Функция УстаревшееОписаниеРасчетногоДокумента(
	ДокументСсылка,
	Номер, 
	Дата, 
	СтруктураПредставленийУчастников,
	ЭтоВходящийНомер,
	ЭтоДолгПартнера = Неопределено) Экспорт
	
	ПредставленияДокументов     	  = УстаревшиеПредставленияДокументов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументов();
	МассивДокументовКонтрагента		  = ИменаМетаданныхВходящихДокументов();
	
	ПредставлениеДокумента = "";
	ПредставлениеВладельцаДокумента = "";
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ОписаниеДокумента = ДокументСсылка;
		
	ИначеЕсли ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ПредставленияДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеДокумента);
		
		ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 №%2 от %3';
				|en = '%1 No%2 from %3'"),
			?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, ""),
			?(ЗначениеЗаполнено(Номер), ?(ЭтоВходящийНомер, 
				УбратьЛидирующиеНули(Номер),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер)), "_______"),
			?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДЛФ=D") + " " + НСтр("ru = 'г.';
																			|en = 'year'"), НСтр("ru = '  .  .    ';
																							|en = '  .  .    '")));
			
		ПредставленияВладельцевДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеВладельцаДокумента);
		
		Если ЗначениеЗаполнено(ПредставлениеВладельцаДокумента) Тогда
			
			Если МассивДокументовКонтрагента.Найти(ДокументСсылка.Метаданные().Имя) <> Неопределено Тогда
				ВладелецДокумента = СтруктураПредставленийУчастников.КонтрагентНаименование;
			Иначе
				ВладелецДокумента = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
			КонецЕсли;
			
			ОписаниеДокумента = ОписаниеДокумента + " (" + ПредставлениеВладельцаДокумента + " " + ВладелецДокумента + ")";
		КонецЕсли;
		
	Иначе
		
		ПредставлениеДебитора = "";
		Если ЭтоДолгПартнера <> Неопределено Тогда
			ПредставлениеДебитора = ?(ЭтоДолгПартнера,
				СтруктураПредставленийУчастников.ПредставлениеОрганизации,
				СтруктураПредставленийУчастников.КонтрагентНаименование);
		КонецЕсли;
		
		ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Предоплата от %1';
				|en = 'Prepayment from %1'"), ПредставлениеДебитора);
		
	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция УстаревшиеПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",							НСтр("ru = 'Приходный кассовый ордер';
																						|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru = 'Акт выполненных работ';
																						|en = 'Acceptance note'"));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",								НСтр("ru = 'Корректировка задолженности';
																							|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",				НСтр("ru = 'Взаимозачет задолженности';
																						|en = 'Debt offset'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",		НСтр("ru = 'Накладная (возврат)';
																						|en = 'Invoice (return)'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",					НСтр("ru = 'Накладная (возврат)';
																							|en = 'Invoice (return)'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru = 'Накладная (возврат)';
																						|en = 'Invoice (return)'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом", 			НСтр("ru = 'Выкуп возвратной тары';
																						|en = 'Redemption of reusable package'"));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика", 		НСтр("ru = 'Выкуп возвратной тары';
																						|en = 'Redemption of reusable package'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 								НСтр("ru = 'Заказ';
																							|en = 'Order'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 							НСтр("ru = 'Заказ';
																							|en = 'Order'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента", 		НСтр("ru = 'Заказ (возврат)';
																						|en = 'Order (return)'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",				НСтр("ru = 'Корректировка задолженности';
																						|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",					НСтр("ru = 'Корректировка задолженности';
																							|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",					НСтр("ru = 'Корректировка задолженности';
																						|en = 'Debt adjustment'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru = 'Эквайринговая операция';
																						|en = 'Acquiring transaction'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru = 'Отчет комитенту';
																					|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",							НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru = 'Отчет комитенту';
																						|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",	НСтр("ru = 'Отчет комитенту';
																					|en = 'Report to consignor'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",	НСтр("ru = 'Накладная';
																					|en = 'Invoice'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru = 'Платежное поручение';
																					|en = 'Payment order'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru = 'Накладная';
																						|en = 'Invoice'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",			НСтр("ru = 'Акт';
																						|en = 'Certificate'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru = 'Приходный кассовый ордер';
																					|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",					НСтр("ru = 'Расходный кассовый ордер';
																						|en = 'Cash voucher'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 					НСтр("ru = 'Накладная';
																							|en = 'Invoice'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",			НСтр("ru = 'Акт';
																						|en = 'Certificate'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств",	НСтр("ru = 'Платежное поручение';
																					|en = 'Payment order'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеЗадолженности", 					НСтр("ru = 'Списание задолженности';
																						|en = 'Debt relief'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru = 'Счет на оплату';
																						|en = 'Proforma invoice'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru = 'Счет-фактура';
																						|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 					НСтр("ru = 'Счет-фактура';
																						|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент",	НСтр("ru = 'Счет-фактура';
																						|en = 'Tax invoice'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru = 'Таможенная декларация';
																						|en = 'Customs declaration'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ВыбытиеДенежныхДокументов",				НСтр("ru = 'Расходный кассовый ордер';
																						|en = 'Cash voucher'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПереработчику", 						НСтр("ru = 'Заказ';
																							|en = 'Order'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика", 						НСтр("ru = 'Отчет переработчика';
																							|en = 'Toller report'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеДенежныхДокументов",			НСтр("ru = 'Приходный кассовый ордер';
																						|en = 'Cash receipt statement'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетОператораСистемыПлатон",			НСтр("ru = 'Акт';
																						|en = 'Certificate'"));
	//-- НЕ УТ
	//++ НЕ УТКА
	ВидыДокументовКонтрагента.Вставить("ЗаказДавальца", 							НСтр("ru = 'Заказ';
																						|en = 'Order'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетДавальцу", 							НСтр("ru = 'Отчет переработчика';
																						|en = 'Toller report'"));
	//-- НЕ УТКА
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ПредставленияВладельцевДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;

	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",							НСтр("ru = 'получатель';
																						|en = 'beneficiary'"));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот", 					НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",		НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",					НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",				НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента", 								НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику", 							НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента", 		НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",				НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",					НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",				НСтр("ru = 'плательщик';
																						|en = 'payer'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",						НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",			НСтр("ru = 'от';
																					|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",							НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",				НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",	НСтр("ru = 'от';
																					|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",	НСтр("ru = 'от';
																					|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru = 'плательщик';
																					|en = 'payer'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",				НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов", 		НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",				НСтр("ru = 'получатель';
																					|en = 'beneficiary'"));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",					НСтр("ru = 'плательщик';
																						|en = 'payer'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг", 					НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов", 			НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств", 	НСтр("ru = 'плательщик';
																						|en = 'payer'"));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту", 					НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный", 					НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный", 					НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент", 	НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт", 			НСтр("ru = 'от';
																						|en = 'dated'"));
	//++ НЕ УТ
	ВидыДокументовКонтрагента.Вставить("ВыбытиеДенежныхДокументов",				НСтр("ru = 'плательщик';
																						|en = 'payer'"));
	ВидыДокументовКонтрагента.Вставить("ЗаказПереработчику", 						НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетПереработчика", 						НСтр("ru = 'от';
																							|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеДенежныхДокументов",			НСтр("ru = 'получатель';
																						|en = 'beneficiary'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетОператораСистемыПлатон", 		   	 НСтр("ru = 'от';
																							|en = 'dated'"));
	//-- НЕ УТ
	//++ НЕ УТКА
	ВидыДокументовКонтрагента.Вставить("ЗаказДавальца", 							НСтр("ru = 'от';
																						|en = 'dated'"));
	ВидыДокументовКонтрагента.Вставить("ОтчетДавальцу", 							НСтр("ru = 'от';
																						|en = 'dated'"));
	//-- НЕ УТКА
	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ИменаМетаданныхВходящихДокументов()
	
	МассивДокументовКонтрагента = Новый Массив;
	
	МассивДокументовКонтрагента.Добавить("АвансовыйОтчет");
	МассивДокументовКонтрагента.Добавить("ВозвратТоваровОтКлиента");
	МассивДокументовКонтрагента.Добавить("ЗаказКлиента");
	//++ НЕ УТКА
	МассивДокументовКонтрагента.Добавить("ЗаказДавальца");
	//-- НЕ УТКА
	МассивДокументовКонтрагента.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	МассивДокументовКонтрагента.Добавить("КорректировкаПриобретения");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионера");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионераОСписании");
	МассивДокументовКонтрагента.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	МассивДокументовКонтрагента.Добавить("ПриобретениеТоваровУслуг");
	МассивДокументовКонтрагента.Добавить("ПриобретениеУслугПрочихАктивов");
	МассивДокументовКонтрагента.Добавить("СчетФактураПолученный");
	МассивДокументовКонтрагента.Добавить("СчетФактураПолученныйНалоговыйАгент");
	МассивДокументовКонтрагента.Добавить("ТаможеннаяДекларацияИмпорт");
	//++ НЕ УТ
	МассивДокументовКонтрагента.Добавить("ОтчетОператораСистемыПлатон");
	//-- НЕ УТ
	
	Возврат МассивДокументовКонтрагента; 
	
КонецФункции

Функция ПредставлениеДетализацииВзаиморасчетов(Партнер, Договор, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, РасшифровкаПоЗаказам) Экспорт
	
	ТекстДетализацииВзаиморасчетов = "";
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		Если РасшифровкаПоЗаказам Тогда
			ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по объектам расчетов;';
													|en = 'Explanation by settlements objects;'");
		КонецЕсли;
		ТекстДетализацииВзаиморасчетов = ТекстДетализацииВзаиморасчетов + " "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фильтр по партнеру: %1';
																			|en = 'Filter by partner: %1'"), Строка(Партнер));
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		Если РасшифровкаПоЗаказам Тогда
			ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по объектами расчетов;';
													|en = 'Explanation by settlements objects;'");
		КонецЕсли;
		ТекстДетализацииВзаиморасчетов = ТекстДетализацииВзаиморасчетов + " "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Фильтр по договору: %1';
																			|en = 'Filter by contract: %1'"), Строка(Договор));
	ИначеЕсли РасшифровкаПоПартнерам И РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по партнерам и объектам расчетов';
												|en = 'Explanation by partners and settlements objects'");
	ИначеЕсли РасшифровкаПоДоговорам И РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по договорам и объектам расчетов';
												|en = 'Explanation by contracts and settlements objects'");
	ИначеЕсли РасшифровкаПоПартнерам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по партнерам';
												|en = 'Explanation by partners'");
	ИначеЕсли РасшифровкаПоДоговорам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по договорам';
												|en = 'Explanation by contracts'");
	ИначеЕсли РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Расшифровка по объектам расчетов';
												|en = 'Explanation by settlements objects'");
	Иначе
		ТекстДетализацииВзаиморасчетов = НСтр("ru = 'Без детализации';
												|en = 'No details'");
	КонецЕсли;
	
	Возврат ТекстДетализацииВзаиморасчетов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.СверкаВзаиморасчетов";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СверкаВзаиморасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК втДанныеКонтрагента
	|		ПО СверкаВзаиморасчетов.Ссылка = втДанныеКонтрагента.Ссылка
	|ГДЕ
	|	СверкаВзаиморасчетов.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ПустаяСсылка)";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.СверкаВзаиморасчетов";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ВТДляОбработки КАК СсылкиДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Ссылка КАК Ссылка,
	|	СверкаВзаиморасчетов.ВерсияДанных КАК ВерсияДанных,
	|	СверкаВзаиморасчетов.Номер КАК Номер,
	|	СверкаВзаиморасчетов.Дата КАК Дата,
	|	СверкаВзаиморасчетов.Организация КАК Организация,
	|	СверкаВзаиморасчетов.ТипРасчетов КАК ТипРасчетов,
	|	СверкаВзаиморасчетов.Контрагент КАК Контрагент,
	|	СверкаВзаиморасчетов.Партнер КАК Партнер,
	|	СверкаВзаиморасчетов.Договор КАК Договор,
	|	СверкаВзаиморасчетов.НачалоПериода КАК НачалоПериода,
	|	СверкаВзаиморасчетов.КонецПериода КАК КонецПериода,
	|	СверкаВзаиморасчетов.Статус КАК Статус,
	|	СверкаВзаиморасчетов.Менеджер КАК Менеджер,
	|	СверкаВзаиморасчетов.Комментарий КАК Комментарий,
	|	СверкаВзаиморасчетов.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.РасшифровкаПоЗаказам КАК РасшифровкаПоЗаказам,
	|	СверкаВзаиморасчетов.РасшифровкаПоПартнерам КАК РасшифровкаПоПартнерам,
	|	СверкаВзаиморасчетов.РасшифровкаПоДоговорам КАК РасшифровкаПоДоговорам,
	|	СверкаВзаиморасчетов.РазбиватьПоТипамРасчетов КАК РазбиватьПоТипамРасчетов,
	|	СверкаВзаиморасчетов.РазбиватьПоПартнерам КАК РазбиватьПоПартнерам,
	|	СверкаВзаиморасчетов.РазбиватьПоДоговорам КАК РазбиватьПоДоговорам,
	|	СверкаВзаиморасчетов.КонтактноеЛицо КАК КонтактноеЛицо,
	|	СверкаВзаиморасчетов.Руководитель КАК Руководитель,
	|	СверкаВзаиморасчетов.ГлавныйБухгалтер КАК ГлавныйБухгалтер,
	|	ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель) КАК ОтветственноеЛицо,
	|	ИСТИНА В
	|		(ВЫБРАТЬ
	|			ИСТИНА
	|		ИЗ
	|			Документ.СверкаВзаиморасчетов.ДанныеКонтрагента КАК ДанныеКонтрагента
	|		ГДЕ
	|			СсылкиДляОбработки.Ссылка = ДанныеКонтрагента.Ссылка) КАК ЕстьРасхождения
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов КАК СверкаВзаиморасчетов
	|		ПО СсылкиДляОбработки.Ссылка = СверкаВзаиморасчетов.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВТДляОбработки", ОбновляемыеДанные);
	
	Результат = Запрос.Выполнить();
	ПоляЗаполнения = "";
	Для Каждого Колонка Из Результат.Колонки Цикл
		Если Колонка.Имя = "Ссылка" ИЛИ Колонка.Имя = "ВерсияДанных" Тогда
			Продолжить;
		КонецЕсли;
		ПоляЗаполнения = ПоляЗаполнения + ?(ПустаяСтрока(ПоляЗаполнения),"",",") + Колонка.Имя;
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
 		НачатьТранзакцию();
		
 		Попытка
			
 			ДанныеОбъекта = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь);
			Если ДанныеОбъекта = Неопределено Тогда
				ЗафиксироватьТранзакцию();
 				Продолжить;
 			КонецЕсли;
			
			ДанныеЗаполнения = Новый Структура(ПоляЗаполнения);
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, ДанныеОбъекта);
			ДанныеЗаполнения.ОтветственноеЛицо = Выборка.ОтветственноеЛицо;
			
			Если НЕ Выборка.ЕстьРасхождения Тогда
				КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
				ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор);
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", ДанныеОбъекта.НачалоПериода);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "КонецПериода", КонецДня(ДанныеОбъекта.КонецПериода));
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", ДанныеОбъекта.НачалоПериода);

				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоТипамРасчетов", Ложь);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоПартнерам", Ложь);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоДоговорам", Ложь);

				ТипыРасчетов = Новый Массив;
				ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
				ТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "ТипРасчетов", ТипыРасчетов, ВидСравненияКомпоновкиДанных.ВСписке);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Организация", ДанныеОбъекта.Организация);
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Контрагент", ДанныеОбъекта.Контрагент);
				
				ДанныеЗаполнения.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
				ДанныеЗаполнения.Вставить("ДоговорыБезОборотов", Ложь);
				
				ДанныеОбъекта.Заполнить(ДанныеЗаполнения);
			КонецЕсли;
			
			Если ДанныеОбъекта.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДанныеОбъекта);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
 		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = НСтр("ru = 'Не удалось обработать объект: %Ссылка% по причине: %Причина%';
									|en = 'Cannot process the object: %Ссылка% due to: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
									УровеньЖурналаРегистрации.Предупреждение,
									Выборка.Ссылка.Метаданные(),
									Выборка.Ссылка,
									ТекстСообщения);
									
 		КонецПопытки;
 
 	КонецЦикла;
 		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
