
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшСвойстваДинамическогоСписка;

&НаКлиенте
Перем СписокОткрытыхФорм;

// +СтруктураПодчиненности
&НаКлиенте
Перем ФормаСтруктурыПодчиненности;
// -СтруктураПодчиненности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриЧтенииНаСервере".
//
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ВремяНачалаЗамера = ОценкаПроизводительности.НачатьЗамерВремени();
	CRM_ВключенТестПроизводительности = Параметры.Свойство("CRM_ВключенТестПроизводительности");
	Если Параметры.Свойство("НеВыполнятьОбработкиПриСоздании") Тогда Возврат КонецЕсли; // Не будем выполнять все обработчики при проверки открытых форм.
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Оформление списка
	СвойстваДинамическогоСписка = ПолучитьСвойстваДинамическогоСпискаСервер();
	CRM_ОбщегоНазначенияСервер.ПользовательскиеНастройкиСпискаПриСозданииНаСервере(ЭтотОбъект, СвойстваДинамическогоСписка);
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекПользователь = ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Объект.СостояниеИнтереса) Тогда
			// Объект.СостояниеИнтереса	= ПервичныйИнтерес;
			Объект.ВероятностьСделки	= Объект.СостояниеИнтереса.ВероятностьСделки;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор = ТекПользователь;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнаяОрганизация");
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный	= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойОтветственный");
			Объект.Подразделение	= Объект.Ответственный.Подразделение;
			Объект.Офис				= Объект.Подразделение.CRM_офис;
		КонецЕсли;	
		Элементы.КартинкаКонтроль.Доступность = Ложь;
		Если Параметры.Свойство("Партнер") Тогда
			Объект.Партнер = Параметры.Партнер;
		КонецЕсли;
		Если Параметры.Свойство("КонтактноеЛицо") Тогда
			Объект.КонтактноеЛицо = Параметры.КонтактноеЛицо;
		КонецЕсли;
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость = Ложь;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
		Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Видимость = Истина;
	КонецЕсли;	
	СценарийИнтереса = Объект.СостояниеИнтереса.Родитель;
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	ЗаполнитьПервичныйИнтерес(Параметры.Основание);
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	Если НЕ Объект.Ссылка.Пустая() Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		
		Если Объект.Завершен Тогда
			ТекущаяЗадача = CRM_ВзаимодействияСервер.ПолучитьЗадачуЗавершенногоИнтереса(Объект.Ссылка);
		Иначе
			ТекущаяЗадача = CRM_ВзаимодействияСервер.ПолучитьЗадачуБПИнтереса(Объект.Ссылка);
		КонецЕсли;
		БизнесПроцесс = ТекущаяЗадача.БизнесПроцесс;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Элементы.ГруппаБП.Видимость = Истина;
		Если НЕ Объект.Завершен Тогда
			Элементы.ГруппаЭтапБП.Видимость = Истина;
			ТекущаяЗадачаПредставление = НСтр("en='Task: ';ru='Задача: '") + ТекущаяЗадача.CRM_ТочкаМаршрута + НСтр("en=', period of execution: ';ru=', срок: '") + Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			ПолучитьТаблицуТипов();
		КонецЕсли;
	КонецЕсли;
	Элементы.СценарийИнтереса.ТолькоПросмотр = (ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Объект.СостояниеИнтереса.Завершено);
	
	Элементы.ВзаимодействияКартаМаршрута.Видимость = ЗначениеЗаполнено(БизнесПроцесс);
	
	ПараметрИнтерес = Список.Параметры.Элементы.Найти("Интерес");
	Если ПараметрИнтерес <> Неопределено Тогда
		ПараметрИнтерес.Значение		= Объект.Ссылка;
		ПараметрИнтерес.Использование	= Истина;
	КонецЕсли;

	ТекущаяДатаУсловногоОформления = НачалоДня(CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	
	ОбновитьЗаголовокФормы();
	
	УстановитьВидимостьЭлементов();
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;		
	
	Если Параметры.Свойство("ОткрытиеИзТелемаркетинга") И Параметры.ОткрытиеИзТелемаркетинга Тогда 
		ОткрытиеИзТелемаркетинга = Истина;
		Если Параметры.Свойство("СозданиеИзСтрокиТелемаркетинга") И Параметры.СозданиеИзСтрокиТелемаркетинга Тогда
			СозданиеИзСтрокиТелемаркетинга = Истина;
		КонецЕсли;			
		// Значит создаём интерес из телемаркетинга.
		Если Параметры.Свойство("Содержание") Тогда
			КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			СодержаниеВзаимодействия = Параметры.Содержание; 
		КонецЕсли;						
		Если Параметры.Свойство("Взаимодействие") Тогда
			ВидВзаимодействияИзТелемаркетинга = Параметры.Взаимодействие;
		КонецЕсли;			
	КонецЕсли;
	
	// +Софтфон
	Если Параметры.Свойство("сфпВыбранныйОбъект") Тогда
		Если Параметры.сфпВыбранныйОбъект.Свойство("ПотенциальныйКлиент") Тогда
			Объект.ПотенциальныйКлиент = Параметры.сфпВыбранныйОбъект.ПотенциальныйКлиент;
		Иначе
			Объект.Партнер = Параметры.сфпВыбранныйОбъект.Партнер;
			Объект.КонтактноеЛицо = Параметры.сфпВыбранныйОбъект.КонтактноеЛицо;
		КонецЕсли;			
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КлючевоеФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.КонтактноеЛицо);
		Если КлючевоеФизЛицо = Неопределено Тогда
			Если ЗначениеЗаполнено(Объект.Партнер) И Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				МассивКЛ = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(Объект.Партнер);
				Если МассивКЛ.Количество() > 0 Тогда
					CRM_ФизЛицо = Объект.Партнер;
				КонецЕсли;					
			КонецЕсли;	
		Иначе
			CRM_ФизЛицо = КлючевоеФизЛицо;
		КонецЕсли;			
	КонецЕсли;		
	// -Софтфон
	
	КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Партнер;
	
	ОбновитьТаблицуНаКонтроле();	
	ОбновитьСтатусыДокумента();	
	СформироватьПредставлениеВложений();
	СформироватьОписаниеКаналаИсточника();
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Партнер,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	Если Не CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
			Элементы.ФормаСоздатьСчетНаОплату.Заголовок = "Заказ клиента";
		Иначе
			Элементы.ФормаСоздатьСчетНаОплату.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбязательноВводитьРезультат = Ложь;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	CRM_ИспользоватьБизнесПроцессы = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьБизнесПроцессы");
	СписокАктивныхЗадач.Параметры.УстановитьЗначениеПараметра("Ответственный", Объект.Ответственный);
	СписокАктивныхЗадач.Параметры.УстановитьЗначениеПараметра("Предмет", Объект.Ссылка);
	СписокАктивныхЗадач.Параметры.УстановитьЗначениеПараметра("Сегодня", НачалоДня(ТекущаяДатаСеанса()));
	Элементы.СтраницаЗадачиИПроцессы.Видимость = CRM_ИспользоватьБизнесПроцессы;
	
	ИсторияРеквизитов.ТекстЗапроса = СтрЗаменить(ИсторияРеквизитов.ТекстЗапроса, 
			"ИсторияРеквизитовПартнеров.ПутьКДанным КАК ПредставлениеРеквизита,", 
			"ВЫБОР
			|	КОГДА ТИПЗНАЧЕНИЯ(ИсторияРеквизитовПартнеров.ПутьКДанным) = ТИП(СТРОКА)
			|		ТОГДА ЕСТЬNULL(ОписаниеРеквизитовМетаданных.Представление, ИсторияРеквизитовПартнеров.ПутьКДанным)
			|	ИНАЧЕ ИсторияРеквизитовПартнеров.ПутьКДанным
			|КОНЕЦ КАК ПредставлениеРеквизита,");

	ИсторияРеквизитов.Параметры.УстановитьЗначениеПараметра("Объект", Объект.Ссылка);
	
	ЗаполнитьПанельСостоянийИнтереса();
	
	ЗаполнитьДанныеВзаиморасчетов();
	
	Если Параметры.Свойство("Модифицированность") Тогда
		Модифицированность = Параметры.Модифицированность;
	КонецЕсли;
	
	Элементы.АктуальныйИсточникПривлечения.Видимость =  ПолучитьФункциональнуюОпцию("CRM_РаботаВЛокальномРежиме");
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОткрытиеФормыИнтересаНаСервере", ВремяНачалаЗамера, 1);
	
	// +СтруктураПодчиненности
	Элементы.ЗакладкиДокументов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	РежимСпискаДокументов = CRM_ХранилищеНастроек.Загрузить("РежимСпискаДокументовВИнтересе");
	Если РежимСпискаДокументов = Неопределено Тогда РежимСпискаДокументов = 0 КонецЕсли;
	ВыводитьАктивностиВСтруктуреПодчиненности = CRM_ХранилищеНастроек.Загрузить("ВыводитьАктивностиВСтруктуреПодчиненности");
	Если ВыводитьАктивностиВСтруктуреПодчиненности = Неопределено Тогда ВыводитьАктивностиВСтруктуреПодчиненности = 0 КонецЕсли;
	// -СтруктураПодчиненности
	
	ОбновитьАктивностиНаСервере();
	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия;
		Если ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") И ЗначениеЗаполнено(Параметры.ПозиционироватьНаВзаимодействие.ДатаЗавершенияВзаимодействия)
			ИЛИ ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ЗначениеЗаполнено(Параметры.ПозиционироватьНаВзаимодействие.Выполнена) Тогда
			
		Иначе
			НайденныеСтроки = ЗапланированныеАктивности.НайтиСтроки(Новый Структура("Ссылка", Параметры.ПозиционироватьНаВзаимодействие));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ЗапланированныеАктивности.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекущийПользователь = Объект.Ответственный Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия;
	КонецЕсли;
	
	//Если Не ТолькоПросмотр Тогда
	//	Попытка
	//		ЗаблокироватьДанныеФормыДляРедактирования();
	//	Исключение
	//		ТолькоПросмотр = Истина;
	//		Заголовок = Заголовок + "(" + НСтр("en='locked by another user';ru='заблокирован другим пользователем'") + ")";
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
Процедура ЗаполнитьДанныеВзаиморасчетов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(, Заказ В (&МассивСчетов)) КАК РасчетыСПокупателямиОстатки";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		И НЕ (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями.Остатки(, Заказ", "РасчетыСКлиентами.Остатки(, ЗаказКлиента");
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СуммаОстаток");
	Если СуммаВзаиморасчетов > 0 Тогда
		ЗаголовокЭлемента = НСтр("ru = 'Задолженность клиента'")+" ";
	ИначеЕсли СуммаВзаиморасчетов < 0 Тогда
		ЗаголовокЭлемента = НСтр("ru = 'Наш долг клиенту'")+" ";
	Иначе
		ЗаголовокЭлемента = НСтр("ru = 'Задолженность отсутствует'")+" ";
	КонецЕсли;	
	
	Элементы.ДекорацияСостояниеВзаиморасчетов.Заголовок = ЗаголовокНадписиВзаиморасчетов(ЗаголовокЭлемента, ?(СуммаВзаиморасчетов = 0, Неопределено, СуммаВзаиморасчетов));
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
	               |ИЗ
	               |	РегистрНакопления.CRM_Продажи.Обороты(, , , ДокументПродажи В (&МассивСчетов)) КАК CRM_ПродажиОбороты";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(, , , ДокументПродажи", "Продажи.Обороты(, , , ЗаказПокупателя");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаОборот");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(, , , ДокументПродажи", "ВыручкаИСебестоимостьПродаж.Обороты(, , , ЗаказКлиента");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаВыручкиСНДСРеглОборот");
		КонецЕсли;
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СтоимостьОборот");
	
	Элементы.ДекорацияСуммаПродаж.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Продажи на'")+" ", СуммаВзаиморасчетов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ЗаголовокНадписиВзаиморасчетов(Заголовок, Сумма=Неопределено)
	
	КрупныйШрифт = Новый Шрифт(,11,,,);
	МелкийШрифт  = Новый Шрифт(,8, ,,);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Заголовок + " ", КрупныйШрифт));
	
	Если Сумма <> Неопределено Тогда
		СуммаСтрокой = Формат(?(Сумма<0, -Сумма, Сумма), "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , "Взаиморасчеты"));
	КонецЕсли;
	// КомпонентыФС.Добавить(" " + Константы.ВалютаУправленческогоУчета.Получить().СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , ЦветаСтиля.ТекстИнформационнойНадписи);
	
КонецФункции

&НаСервере
Процедура ПолучитьТаблицуТипов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(ТекущаяЗадача);
	ТаблицаТипов.Очистить();
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыИнтересаНаВебКлиенте");
	#Иначе
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыИнтересаНаКлиенте");
	#КонецЕсли	
	
	ДоступностьПотенциальногоКлиента();
	ДоступностьПервичногоИнтереса();
	СформироватьНадписиКонтактнойИнформацииКлиента();
	СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
	СформироватьНадписиКонтактнойИнформацииКонтакта();
	УстановитьДоступностьИнтереса(); 
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка = СкрытьПоказатьСписокДокументов;
	Элементы.ГруппаСписокДокументов.Видимость	= СкрытьПоказатьСписокДокументов;	
	
	// +Софтфон
	Если ЗначениеЗаполнено(CRM_ФизЛицо) Тогда
		Элементы.ПодобратьСвязанныйКлиент.Видимость = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(сфпНомерТелефона) 
	И (НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) И (НЕ ЗначениеЗаполнено(Объект.Партнер) И НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)))
	Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Истина;
	КонецЕсли;
	сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	// -Софтфон	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если CRM_ВключенТестПроизводительности Тогда
		Закрыть();
	КонецЕсли;
	
	Если ПереключитьсяНаАктивности Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПереключитьсяНаАктивности", 0.1, Истина);
	КонецЕсли;
	
	// +СтруктураПодчиненности
	РежимСпискаДокументовПриИзменении(Неопределено);
	// -СтруктураПодчиненности
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура - обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если Параметр = Объект.КонтактноеЛицо Тогда
			СформироватьНадписиКонтактнойИнформацииКонтакта();
		КонецЕсли;
		тДанные = Элементы.КонтактныеЛица.ТекущиеДанные;
		Если тДанные <> Неопределено И Элементы.КонтактныеЛица.ТекущиеДанные.Ссылка = Параметр Тогда
			Подключаемый_КонтактныеЛицаПриАктивизацииСтроки();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" Тогда
		Если Параметр = Объект.ПотенциальныйКлиент Тогда
			СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" И Параметр = Объект.Партнер Тогда
		
		СформироватьНадписиКонтактнойИнформацииКлиента();
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект ИЛИ Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр;
				КонтактноеЛицоПриИзменении(Неопределено);
			КонецЕсли;
			ДоступностьПотенциальногоКлиента();
			Модифицированность = Истина;
			Записать();
			КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Партнер;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписатьИнтерес" Тогда
		Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененОтветственныйПоИнтересу" И Источник = ЭтотОбъект Тогда
		ОтветственныйПриИзменении(Элементы.Ответственный);
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеСобытия" 
		И (СтрНайти(Источник.ИмяФормы, "CRM_БизнесПроцесс") > 0 ИЛИ СтрНайти(Источник.ИмяФормы, "ЗадачаИсполнителя") > 0) Тогда
		ОбновитьСтатусыДокумента();
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		ОбновитьСтатусыДокумента();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	// +Софтфон
	ИначеЕсли (ИмяСобытия = "СозданКонтактДляИнтереса") И Параметр.Свойство("сфпИнтерес") И Параметр.сфпИнтерес = Строка(ЭтотОбъект.УникальныйИдентификатор) Тогда
		Если Параметр.Свойство("Контакт") Тогда
			Если ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр.Контакт, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр.Контакт;
				КонтактноеЛицоПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер			= Параметр.Контакт;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Объект.ПотенциальныйКлиент = Параметр.Контакт;
				ДоступностьПотенциальногоКлиента();
				Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьПланировщик" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ОбновитьАктивностиНаСервере();
			Модифицированность = Истина;
		КонецЕсли;
		Подключаемый_АктивностиПриАктивизацииСтроки();
	// -Софтфон
	ИначеЕсли (ИмяСобытия = "Запись_ЗадачаИсполнителя" ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача") Тогда
		Если Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаЗадачиИПроцессы Тогда
			ЗаполнитьДеревоПроцессов();
		ИначеЕсли Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
			ОбновитьАктивностиНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ДобавитьЗаписьПоОбъекту(НовыйОбъект)
	
	НовыйОбъект_ВидОбъекта = ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.ПустаяСсылка();
	
	Для Каждого СтрокаТипа Из ТаблицаТипов Цикл
		Если СтрокаТипа.ВидОбъекта.ТипЗначения.СодержитТип(ТипЗнч(НовыйОбъект)) Тогда
			НовыйОбъект_ВидОбъекта = СтрокаТипа.ВидОбъекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Набор = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьНаборЗаписей();
	Набор.Отбор.БизнесПроцесс.Установить(ТекущаяЗадача.БизнесПроцесс);
	Набор.Отбор.Объект.Установить(НовыйОбъект);
	Набор.Прочитать();
	Набор.Очистить();
	Набор.Записать();
	
	ЗаписьРегистра = РегистрыСведений.CRM_ОбъектыПоБизнесПроцессам.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.БизнесПроцесс	= ТекущаяЗадача.БизнесПроцесс;
	ЗаписьРегистра.Задача			= ТекущаяЗадача;
	ЗаписьРегистра.ТочкаМаршрута	= ТекущаяЗадача.CRM_ТочкаМаршрута;
	ЗаписьРегистра.Объект			= НовыйОбъект;
	ЗаписьРегистра.ДатаРегистрации	= ТекущаяДатаСеанса();
	ЗаписьРегистра.ВидОбъекта		= НовыйОбъект_ВидОбъекта;
	ЗаписьРегистра.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект)
	
	Если НЕ Метаданные.ПланыВидовХарактеристик.CRM_ВидыОбъектовБизнесПроцессов.Тип.Типы().Найти(ТипЗнч(НовыйОбъект)) = Неопределено Тогда
		
		ДобавитьЗаписьПоОбъекту(НовыйОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Элементы.Список.Обновить();
	Элементы.КонтактныеЛица.Обновить();
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ОбработатьОповещенияЗаписиНовогоОбъекта(НовыйОбъект);
	КонецЕсли;
	
	Если Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
		ОбновитьАктивностиНаСервере();
		Подключаемый_АктивностиПриАктивизацииСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события формы "ПередЗаписью".
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ДокументЗаписан = Ложь;
	Если Не Объект.Завершен Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен контакт';en='Incomplete contact'"));
				Отказ = Истина;
			КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен потенциальный клиент';en='Missing potential customer'"));
			Отказ = Истина;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги, запись документа отменена!';en='Active lead of customer on the chosen type of service was discovered, the document record was canceled!'"));
				Отказ = Истина;
			КонецЕсли;	
		Иначе
			// С001031210
			// Если НЕ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян")) Тогда
			//	Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
			//		ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес потенциального клиента, запись документа отменена!';en='The active lead of the potential customer is detected, the record of the document is canceled!'"));
			//		Отказ = Истина;
			//	КонецЕсли;	
			// КонецЕсли;
		КонецЕсли;	
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СостояниеИнтереса, "ОбязательноеЗаполнениеКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент';en='The customer is not filled in'"));
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено контактное лицо';en='Not filled in contact person'"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(Объект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			Объект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru='У текущего пользователя не заполнено подразделение!';en='The current user does not have a department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			Объект.Офис	= ОфисПодразделения;
		Иначе
			ТекстСообщения = Нстр("ru='У подразделения пользователя не заполнен офис!';en=""The user's office does not have an office full!""");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Подразделение);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйИнтерес = Объект.Ссылка.Пустая();
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Ссылка.Ответственный <> Объект.Ответственный Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Объект.Ссылка, Объект.Ответственный);			
		
		Объект.Описание = НСтр("ru ='Переадресовано от '") + Объект.Ответственный + " " + CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()
		+ НСтр("ru =' (предыдущее состояние ""'") + Объект.СостояниеИнтереса + """)" + Символы.ПС + Объект.Описание + Символы.ПС;
		МассивИнтересов = Новый Массив;
		МассивИнтересов.Добавить(Объект.Ссылка);
		CRM_ОбщегоНазначенияСервер.УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(МассивИнтересов, Объект.Ответственный);
		Если Не Объект.Ответственный = ТекущийПользователь Тогда
			// Если объект перенаправил на себя текущий пользователь, то оповещять его об этом не надо.
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.Ответственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, Объект.Ссылка);
			Если НЕ (ПараметрыОповещения = Неопределено) Тогда
				CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
			МассивЗадач = Новый Массив;
			МассивЗадач.Добавить(БизнесПроцесс);
			CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(МассивЗадач, Объект.Ответственный);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя успешно завершать интерес потенциального клиента. Зарегистрируйте партнера.';en='It is impossible to successfully complete the lead of a potential customer. Register a partner.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка взаимодействий. если интерес не завршен и нет запланнированного взаимодействия - не даем записать
	// документ.
	//Если НЕ ПроверитьЗапланированныеАктивности() Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	// Проверка заполнения ожидаемой выручки.
	РезультатПоОжидаемойВыручке = ПроверитьЗаполнениеОжидаемойВыручки();
	
	Если Не Отказ И РезультатПоОжидаемойВыручке Тогда
		Отказ = РезультатПоОжидаемойВыручке;
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ПриЗаписиНаСервере".
//
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	ОбновитьЗаголовокФормы();
	
	Если ДанныеВыбранногоСостоянияИнтереса <> Неопределено Тогда
		ПеревестиИнтересВСледующееСостояниеПриЗаписиСервер(ТекущийОбъект);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент) 
				И ЗначениеЗаполнено(ТекущийОбъект.Партнер)
				И НЕ ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент.Партнер) 
				Тогда
				
			ПотенциальныйКлиентОбъект = ТекущийОбъект.ПотенциальныйКлиент.ПолучитьОбъект();
			ПотенциальныйКлиентОбъект.Партнер = ТекущийОбъект.Партнер;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПеревеситьДокументыНаПартнера(ТекущийОбъект.ПотенциальныйКлиент, ТекущийОбъект.Партнер);
			
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Элементы.КартинкаКонтроль.Доступность Тогда
		Элементы.КартинкаКонтроль.Доступность = Истина;	
	КонецЕсли;			
	
	ОбновитьСтатусыДокумента();
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Интерес", Объект.Ссылка);
	Если ОбновленыДатыВзаимодействий Тогда
		Оповестить("ОбновитьПланировщик");
	КонецЕсли;
	Оповестить("ОбновитьАРМ");
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) 
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
			ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ВзаимодействиеОснование");
			Если ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Основание",		ОснованиеЗвонка);
				СтруктураОповещения.Вставить("Звонок",			Объект.ДокументОснование);
				СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
				СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
				СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
				Оповестить("СофтФон_ЗаписьИнтереса", СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			сфпCoMagicIDЗвонка = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
			Если НЕ ПустаяСтрока(сфпCoMagicIDЗвонка) Тогда
				Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
					сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.КонтактноеЛицо, сфпCoMagicIDЗвонка);
				ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
					сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.Партнер, сфпCoMagicIDЗвонка);
				КонецЕсли;	
				сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") 
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы, "Объект")
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы.Объект, "Ссылка")
		И ((ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Телемаркетинг")) 
		ИЛИ (ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"))) Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
			СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
			СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
			СтруктураОповещения.Вставить("ПартнерСтрокой",	Объект.Описание);
			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
	КонецЕсли;
	
	ДокументЗаписан = Истина;
	
	Если НовыйИнтерес Тогда
		БылиИзменения = Ложь;
		
		Если БылиИзменения Тогда
			Записать();
		КонецЕсли;
		
		НовыйИнтерес = Ложь;
		ОбновитьЗапланированныеАктивностиНаСервере();
	Иначе
		Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
			СкорретироватьРеквизитыБизнесПроцесса();
		КонецЕсли;
	КонецЕсли;
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	
КонецПроцедуры

&НаСервере
Процедура СкорретироватьРеквизитыБизнесПроцесса()
	
	Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
		
		БизнесПроцессОбъект = ТекущаяЗадача.БизнесПроцесс.ПолучитьОбъект();
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема Тогда
			БизнесПроцессОбъект.Наименование = Объект.Тема;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер Тогда
			БизнесПроцессОбъект.Партнер = Объект.Партнер;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо Тогда
			БизнесПроцессОбъект.КонтактноеЛицо = Объект.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка Тогда
			БизнесПроцессОбъект.Сумма = Объект.ОжидаемаяВыручка;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация Тогда
			БизнесПроцессОбъект.Организация = Объект.Организация;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
			БизнесПроцессОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события формы "ОбработкаПроверкиЗаполненияНаСервере".
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры // ОбработкаПроверкиЗаполненияНаСервере()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	Если НЕ ПроверитьЗапланированныеАктивности() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ОткрытиеИзТелемаркетинга И НЕ СозданиеИзСтрокиТелемаркетинга Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ							= Истина;
			ОткрытиеИзТелемаркетинга		= Ложь;
			СозданиеИзСтрокиТелемаркетинга	= Истина;
			Закрыть(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СкопироватьУровеньДоступа()
	
	Если ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.Ответственный["CRM_УровеньДоступа"])
		 И Объект.Партнер["CRM_УровниДоступа"].Найти(Объект.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И Объект.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
	
		ПартнерОбъект = Объект.Партнер.ПолучитьОбъект();
		НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
		НоваяСтрокаУровня["УровеньДоступа"]= Объект.Ответственный["CRM_УровеньДоступа"];
		ПартнерОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		// Если выбрали ответственного в форме выбора по типу услуги
		Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги';en='Common Form.CRM_SettingUsers for ServiceType'") Тогда
			Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ВыбранноеЗначение <> Объект.Ответственный Тогда
					Объект.Ответственный = ВыбранноеЗначение;
					Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
					Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
					
					Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СкопироватьУровеньДоступа();
					КонецЕсли;
					
					Модифицированность = Истина;
					Записать();
					Закрыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДокументОснованиеНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(, Объект.ДокументОснование);
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВзаимодействиеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	// ОткрытьФорму("ОбщаяФорма.CRM_ПроцессыИЗадачи", Новый Структура("Предмет", Объект.Ссылка));
	Если Элементы.Панель.ТекущаяСтраница.Имя <> "СтраницаЗадачиИПроцессы" Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаЗадачиИПроцессы;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КартинкаКонтрольНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ОповещениеКонтрольВопрос = Новый ОписаниеОповещения("КонтрольВопросЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеКонтрольВопрос, НСтр("ru='Для изменения параметров контроля необходимо произвести запись документа. Записать?';en='Change the monitoring parameters, you must record the document. Write down?'"), РежимДиалогаВопрос.ОКОтмена);
	Иначе
		КонтрольВопросЗавершение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		ДокументЗаписан = Ложь;
		ЭтотОбъект.Записать();
		
		Если ДокументЗаписан Тогда
			КонтрольОписаниеОповещения = Новый ОписаниеОповещения("КонтрольЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура("Интерес", Объект.Ссылка);
			ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаКонтроля", ПараметрыФормы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно, ,КонтрольОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольЗавершениеНаСервере()
	ОбновитьТаблицуНаКонтроле();
	ОбновитьСтатусыДокумента();
	
КонецПроцедуры	

&НаКлиенте
Процедура КонтрольЗавершение(СтруктураНаКонтроле, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНаКонтроле <> Неопределено Тогда
		
			Если СтруктураНаКонтроле.НаКонтроле Тогда
				
				CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
				ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"), СтруктураНаКонтроле.Комментарий);
				
			Иначе
				
				НайтиСтроки = НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
				
				Если НайтиСтроки.Количество() > 0 Тогда
					ТекКомментарий = НайтиСтроки[0].Комментарий;
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"), ТекКомментарий);						
				Иначе
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"));		
				КонецЕсли;
				
			КонецЕсли;
			КонтрольЗавершениеНаСервере();
			
			Оповестить("ОбновитьАРМ");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
	Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
	ПодразделениеПриИзмененииСервере();
КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	ОтветственныйПриИзмененииНаСервере();
КонецПроцедуры // ОтветственныйПриИзменении()

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", Новый Структура("ТипУслуги", Объект.ТипУслуги),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ТипУслуги".
//
Процедура ТипУслугиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!';en='Active lead of customer on the chosen type of service is found out!'"));
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!';en='Active lead of the potential customer is found out!'"));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ТипУслугиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ТипУслуги".
//
Процедура ТипУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтандартнаяОбработка	= Ложь;
		ПараметрыФормы			= Новый Структура;
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если МассивСвоихТиповУслуг.Количество() > 0 Тогда
			// Если есть массив своих типов услуг, то накладываем фильтр.
			ПараметрыФормы.Вставить("МассивСвоихТиповУслуг", МассивСвоихТиповУслуг);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ТипУслуги);
		КонецЕсли;	
		ОткрытьФорму("Справочник.CRM_ТипУслуги.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ТипУслугиНачалоВыбора()

&НаСервере
Процедура ПодразделениеПриИзмененииСервере()
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		// Если типа услуги нет в массиве своих услуг, то его очищаем.
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(Объект.ТипУслуги) = Неопределено) Тогда
			Объект.ТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Подразделение".
//
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервере();		
КонецПроцедуры // ПодразделениеПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ПотенциальныйКлиент".
//
Процедура ПотенциальныйКлиентПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ЗначениеЗаполнено(Объект.ТипУслуги) 
			И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!';en='Active lead of the potential customer is found out!'"));
		КонецЕсли;	
	КонецЕсли;
	КаналПервичногоИнтереса	= Неопределено;
	ИсточникПервичногоИнтереса	= Неопределено;
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента();
	ОбновленПартнерКонтакт = Истина;
КонецПроцедуры // ПотенциальныйКлиентПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Партнер".
//
Процедура ПартнерПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Если ЗначениеЗаполнено(Объект.ТипУслуги) 
			И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!';en='Active lead of customer on the chosen type of service is found out!'"));
		КонецЕсли;	
	КонецЕсли;
	Если Элемент <> Неопределено Тогда
		Объект.КонтактноеЛицо	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "CRM_ОсновноеКонтактноеЛицо");
		КонтактноеЛицоПриИзменении(Элемент);		
	КонецЕсли;		
	Если Объект.Ответственный <> ТекущийПользователь Тогда
		Объект.Ответственный = ТекущийПользователь;
		ОтветственныйПриИзменении(Элемент);
	КонецЕсли;
	Если Элемент<>Неопределено Тогда
		КаналПервичногоИнтереса	= Неопределено;
		ИсточникПервичногоИнтереса	= Неопределено;
	КонецЕсли;
	
	КонтактныеЛица.КомпоновщикНастроек.Настройки.Отбор.Элементы[0].ПравоеЗначение = Объект.Партнер;
	
	СформироватьОписаниеКаналаИсточника();
	ДоступностьПервичногоИнтереса();
	
	СформироватьНадписиКонтактнойИнформацииКлиента();
	ОбновитьЗаголовокФормы();
	ОбновленПартнерКонтакт = Истина;
	
	Если ЗначениеЗаполнено(Объект.Партнер) И Элементы.ФормасфпСоздатьКонтакт.Видимость Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	КонецЕсли;
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
	// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
	ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
	ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
КонецПроцедуры // ПартнерПриИзменении()

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Партнер".
//
Процедура ПартнерСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		СоздатьПартнераПоНаименованию(Элемент.ТекстРедактирования);
	КонецЕсли;
КонецПроцедуры // ПартнерСоздание()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоПриИзменении(Элемент)
	СформироватьНадписиКонтактнойИнформацииКонтакта();
	ОбновленПартнерКонтакт = Истина;
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) И Элементы.ФормасфпСоздатьКонтакт.Видимость Тогда
		Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
	КонецЕсли;
КонецПроцедуры // КонтактноеЛицоПриИзменении()

&НаКлиенте
// Процедура - обработчик выбора контактного лица.
//
Процедура КонтактноеЛицоОбработкаВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(РезультатЗакрытия, "Владелец");
	ПартнерПриИзменении(Элементы.Партнер);
	Объект.КонтактноеЛицо	= РезультатЗакрытия;
	КонтактноеЛицоПриИзменении(Элементы.КонтактноеЛицо);
КонецПроцедуры // КонтактноеЛицоОбработкаВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда Возврат; КонецЕсли;
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	ОповещениеВыбора		= Новый ОписаниеОповещения("КонтактноеЛицоОбработкаВыбора", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура;
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбора);
КонецПроцедуры // КонтактноеЛицоНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры // КаналПервичногоИнтересаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	КаналПервичногоИнтереса);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ИсточникПервичногоИнтереса".
//
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			// ПОДЛЕЖИТ ИСПРАВЛЕНИЮ FEDL: вопрос так и не решили, по какому бизнес региону фильтровать.
			// Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			//	БизнесРегионПартнера			= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "БизнесРегион"); 
			//	Если ЗначениеЗаполнено(БизнесРегионПартнера) Тогда
			//		ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			//		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			//		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_Регион");
			//		ЭлементОтбора.ПравоеЗначение	= БизнесРегионПартнера;
			//		ЭлементОтбора.Использование		= Истина;
			//	КонецЕсли;
			// КонецЕсли;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры // ИсточникПервичногоИнтересаНачалоВыбора()

&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, Дополнительно) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно);
	ДоступностьПотенциальногоКлиента();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно)
	Если Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных Тогда
		Прочитать();
	КонецЕсли;
	Если Результат.Свойство("Успех") Тогда
		Если Результат.Успех Тогда
			ЗаполнитьЗначенияСвойств(Объект, Результат.ИнтересОбъект,, "CRM_Теги, ДополнительныеРеквизиты, " + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "Запасы", "Товары, СкидкиНаценки"));
			Если Результат.Свойство("КаналПервичногоИнтереса") Тогда
				КаналПервичногоИнтереса = Результат.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса = Результат.ИсточникПервичногоИнтереса;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	Иначе	
		ПеревестиИнтересВСледующееСостояниеСервер(Дополнительно.Состояние, Дополнительно.Этап);
	КонецЕсли;
	
	Записать();
	
	ЗаполнитьПанельСостоянийИнтереса();
	ОбновитьЗапланированныеАктивностиНаСервере();
	
КонецПроцедуры

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеСервер(СостояниеИнтереса, Этап = Неопределено)
	
	Объект.СостояниеИнтереса = СостояниеИнтереса;
	Объект.ВероятностьСделки = СостояниеИнтереса.ВероятностьСделки;
	Объект.Завершен = СостояниеИнтереса.Завершено;
	
	Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
		Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
		ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
		Иначе
			ТипАктивности = Неопределено;
		КонецЕсли;
		РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивности(Объект.Ссылка, "", ТипАктивности, СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
	КонецЕсли;
	
	МассивВидовВзаимодействий = Справочники.CRM_ВидыВзаимодействий.ПолучитьАвтоСоздаваемыеПоСостояниюИнтереса(Объект.СостояниеИнтереса);
	Если МассивВидовВзаимодействий.Количество()>0 Тогда
		Для каждого ВидНовогоВзаимодействия из МассивВидовВзаимодействий Цикл
			ПлановаяДата = ТекущаяДата()+ВидНовогоВзаимодействия.ПлановыйСрокДней*60*60*24;
			НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
			НовоеВзаимодействие.Автор					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.ВидВзаимодействия		= ВидНовогоВзаимодействия;
			НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.ДокументОснование		= Объект.Ссылка;
			НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
			НовоеВзаимодействие.Партнер					= Объект.Партнер;
			НовоеВзаимодействие.КонтактноеЛицо			= Объект.КонтактноеЛицо;
			НовоеВзаимодействие.Подразделение			= Объект.Подразделение;
			НовоеВзаимодействие.Автор					= ТекущийПользователь;
			НовоеВзаимодействие.Дата					= ТекущаяДатаСеанса();
			НовоеВзаимодействие.Баллы					= ВидНовогоВзаимодействия.Баллы;
			НовоеВзаимодействие.ПлановаяДата			= ПлановаяДата;
			НовоеВзаимодействие.Ответственный			= Объект.Ответственный;
			НовоеВзаимодействие.Организация				= Объект.Организация;
			НовоеВзаимодействие.ПотенциальныйКлиент		= Объект.ПотенциальныйКлиент;
			НовоеВзаимодействие.НаВесьДень = (НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата));
			НовоеВзаимодействие.Записать();
		КонецЦикла;
		ОбновитьЗапланированныеАктивностиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВзаимодействия

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТЧ ВЗАИМОДЕЙСТВИЯ


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

// события

&НаКлиенте
// Процедура обработчик события "СписокВыбор" таблицы "Список".
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СписокЕстьПрисоединенныеФайлы" Тогда
		ПрисоединенныеФайлы(Неопределено);
	Иначе
		ОткрытьФормуТекущегоОбъекта();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПриАктивизацииСтроки" таблицы "Список".
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Элементы.СписокСоздатьНаОсновании.Доступность = Ложь;
	Иначе
		Элементы.СписокСоздатьНаОсновании.Доступность = Истина;
		Если ТекДанные <> Неопределено Тогда
			СписокВводаНаОсновании = СформироватьСписокВводаНаОсновании(ТекДанные.Объект);
		Иначе
			СписокВводаНаОсновании = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СписокСоздатьНаОсновании.Доступность = Элементы.СписокСоздатьНаОсновании.Доступность И (ТекДанные <> Неопределено) И (СписокВводаНаОсновании.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломДобавления" таблицы "Список".
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломИзменения" таблицы "Список".
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьФормуТекущегоОбъекта();
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события "СписокПередНачаломИзменения" таблицы "Список".
//
Процедура СписокПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка		ТекДанныеПометкаУдаления = ТекДанные.ПометкаУдаления;
	Исключение	ТекДанныеПометкаУдаления = Неопределено;
	КонецПопытки;
	Если ТекДанныеПометкаУдаления = Неопределено Тогда Возврат; КонецЕсли;
	
	Попытка		ТекДанныеОбъект = ТекДанные.Объект;
	Исключение	ТекДанныеОбъект = Неопределено;
	КонецПопытки;
	Если ТекДанныеОбъект = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТекДанныеПометкаУдаления Тогда
		ТекстВопроса = НСтр("ru='Снять с';en='Remove with'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru='пометку на удаление?';en='mark on deleting?'");
	Иначе
		ТекстВопроса = НСтр("ru='Пометить';en='Mark'") + " """ + Строка(ТекДанные.Объект) + """ " + НСтр("ru='на удаление?';en='on deleting?'");
	КонецЕсли;
	
	// Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	//
	// Если Ответ = КодВозвратаДиалога.Да Тогда
	//	ПометитьСнятьПометкуУдаленияНаСервере(ТекДанныеОбъект, Не ТекДанныеПометкаУдаления);
	//	
	//	ОбновитьСписок();
	// КонецЕсли;
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ТекДанныеОбъект", ТекДанныеОбъект);
	Дополнительно.Вставить("ТекДанныеПометкаУдаления", Не ТекДанныеПометкаУдаления );
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияУдаленияЭлементаСписка", ЭтотОбъект, Дополнительно );
	ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзбранныйНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка	= Ложь;
	Объект.Избранный		= НЕ Объект.Избранный;
	Модифицированность		= Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНовогоКлиента".
//
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.ПотенциальныйКлиент);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
// Процедура - обработчик команды формы "ИзменитьИнтерес".
//
Процедура ИзменитьИнтерес(Команда)
	
	ТекДанные = Элементы.Взаимодействия.ТекущиеДанные;
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("ТекДанные", ТекДанные);
	ОП = Новый ОписаниеОповещения("ОбработкаИзмененияИнтереса", ЭтотОбъект, Дополнительно);
	
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Ответственный", Объект.Ответственный);
	ПараметрыФормы = Новый Структура("Отбор", ЗначениеОтбора);

	ОткрытьФорму("Документ.CRM_Интерес.ФормаВыбора",ПараметрыФормы,,,,,ОП,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьБП(Команда)
	
	Для Каждого ЭлементЗначение Из СписокБыстрыхКарт Цикл
		Если ЭлементЗначение.Представление = Команда.Имя Тогда
			КартаМаршрута = ЭлементЗначение.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(КартаМаршрута) Тогда
		ДанныеОснование = Новый Структура("Основание, КартаМаршрута", Объект.Ссылка, КартаМаршрута);
		ПараметрыФормы = Новый Структура("Основание", ДанныеОснование);
		ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьEmailКлиент".
//
Процедура ОтправитьEmailКлиент(Команда)

	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	Если Элементы.ЗапланированныеАктивности.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекДанные = Элементы.ЗапланированныеАктивности.ТекущиеДанные;
	ИначеЕсли Элементы.ИсторияВзаимодействий.ВыделенныеСтроки.Количество() > 0 Тогда
		ТекДанные = Элементы.ИсторияВзаимодействий.ТекущиеДанные;
	КонецЕсли;	
	Если ТекДанные <> Неопределено И ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Тогда
			ДанныеЗаполнения = Новый Структура("Основание", ТекДанные.Ссылка);
			ДанныеЗаполнения.Вставить("Команда", "ОтветитьВсем");
			ПараметрыФормы = Новый Структура("Основание", ДанныеЗаполнения);
			ПараметрыФормы.Вставить("ДанныеЗаполнения", ДанныеЗаполнения);
			ПараметрыФормы.Вставить("Взаимодействие", ТекДанные.Ссылка);
	ИначеЕсли Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаКонтакты Тогда
		ТекСтрокаКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
		Если ТекСтрокаКИ <> Неопределено
			И ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда
			
			СписокАдресов = Новый СписокЗначений;
						
			ТекСтрокаКонтакт = Элементы.КонтактныеЛица.ТекущиеДанные;
			Если ТекСтрокаКонтакт = Неопределено Тогда
				ТекСсылка = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			Иначе
				ТекСсылка = ТекСтрокаКонтакт.Ссылка; 
			КонецЕсли;				
			
			СписокАдресов.Добавить(ТекСсылка, ТекСтрокаКИ.Значение);
			ПараметрыФормы.Вставить("Кому", СписокАдресов);
			
		КонецЕсли;
	ИначеЕсли Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) 
				И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Возврат;
		КонецЕсли;
		Если ТекДанные <> Неопределено Тогда
			ПараметрыФормы.Вставить("Взаимодействие", ТекДанные.Ссылка);
		КонецЕсли;
		СписокEmail	= Новый СписокЗначений;
		
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо), Объект.КонтактноеЛицо, Объект.ПотенциальныйКлиент);
				
		МассивEmail = ПолучитьМассивEmail(Контакт);

		Для Каждого ЭлементМассива Из МассивEmail Цикл
			СписокEmail.Добавить(ЭлементМассива.Контакт, ЭлементМассива.Значение);
		КонецЦикла;	
		Если СписокEmail.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан Email контактного лица или потенциального клиента';en='No email of contact person or potential customer'"));
		ИначеЕсли СписокEmail.Количество() = 1 Тогда
			ПараметрыФормы.Вставить("Кому", СписокEmail);
		Иначе
			ПараметрыФормы.Вставить("ТолькоКому", Истина);
			ОповещениеВыбораEmail	= Новый ОписаниеОповещения("ОбработкаВыбораEmail", ЭтотОбъект, ПараметрыФормы);
			ПоказатьВыборИзМеню(ОповещениеВыбораEmail, СписокEmail, Элементы.ВзаимодействияОтправитьEmailКлиент);
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМС".
//
Процедура ОтправитьСМС(Команда)
	ТекДанные = Элементы.ЗапланированныеАктивности.ТекущиеДанные;
	Контакт = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент),Объект.ПотенциальныйКлиент,Объект.КонтактноеЛицо);
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо),Объект.КонтактноеЛицо,Объект.Партнер);
	Иначе
		Контакт = Объект.ПотенциальныйКлиент;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(Контакт);
	
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		КИ	= ЭлементСписка.Значение;
		Прервать;
	КонецЦикла;
	
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Контакт);
	Структура.Вставить("Телефон",	КИ);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
	ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);	
	Если НЕ (Элементы.ЗапланированныеАктивности.ТекущиеДанные = Неопределено) Тогда
		ПараметрыФормы.Вставить("Взаимодействие", Элементы.ЗапланированныеАктивности.ТекущиеДанные.Ссылка);
	КонецЕсли;	
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры // ОтправитьСМС()

&НаКлиенте
// Процедура - обработчик команды формы "ОтправитьСМСКЛ".
//
Процедура ОтправитьСМСКЛ(Команда)
	ТДКЛ = Элементы.КонтактныеЛица.ТекущиеДанные;
	Если ТДКЛ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТДКЛ.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ТДКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	Если ТДКИ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТДКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТДКИ.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	// ИначеЕсли НЕ SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
	//	CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
	//	Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	ТДКЛ.Ссылка);
	Структура.Вставить("Телефон",	ТДКИ.Значение);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	ПараметрыФормы.Вставить("СокращеннаяФорма", Истина);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМСКЛ()

&НаКлиенте
Процедура ПодобратьСвязанныйКонтакт(Команда)
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.Добавить(CRM_ФизЛицо);
	ПараметрыОповещения = Новый Структура();
	НовоеОповещение = Новый ОписаниеОповещения("ПодобратьСвязанныйКонтактПослеВыбора", ЭтотОбъект, ПараметрыОповещения);
	ПараметрыФормы = Новый Структура("СписокОбъектов, ПодборВИнтерес", СписокОбъектов, Истина);
	ОткрытьФорму("ОбщаяФорма.сфпФормаВыбораАбонента", ПараметрыФормы,,,ВариантОткрытияОкна.ОтдельноеОкно,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСвязанныйКонтактПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ (Результат = Неопределено) и ЗначениеЗаполнено(Результат) Тогда
		Если ТипЗнч(Результат) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ЭтоКонтакт = Истина;
		Иначе
			ЭтоКонтакт = Ложь;
		КонецЕсли;			
		Если ЭтоКонтакт Тогда
			Объект.КонтактноеЛицо = Результат;
			Объект.Партнер = сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Объект.КонтактноеЛицо);
			ПартнерПриИзменении(Неопределено);
			Модифицированность = Истина;
		Иначе
			Объект.Партнер = Результат;
			ПартнерПриИзменении(Неопределено);
			Если НЕ (сфпСофтФонПроСервер.сфпПолучитьВладельцаКонтакта(Объект.КонтактноеЛицо) = Объект.Партнер) Тогда
				Объект.КонтактноеЛицо = ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка");
			КонецЕсли;				
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры	

// Функция получения адресов электронной почты контакта.
&НаСервереБезКонтекста
Функция ПолучитьМассивEmail(Контакт)
	МассивEmail = Новый Массив;
	Для Каждого ЭлементКИ Из Контакт.КонтактнаяИнформация Цикл
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
			СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление);
			СтруктураКИ.Вставить("Контакт", Контакт);
			Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
				МассивEmail.Вставить(0, СтруктураКИ);
			Иначе
				МассивEmail.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивEmail;
КонецФункции // ПолучитьМассивEmail().

// +СофтФон

#Область Софтфон

&НаСервереБезКонтекста
Функция сфпПолучитьМассивТелефонов(Партнер, КонтактноеЛицо, ПотенциальныйКлиент, Взаимодействие, ДанныеЗаполнения)
	МассивКонтактов = Новый Массив;
	Если ЗначениеЗаполнено(Взаимодействие) И ЗначениеЗаполнено(Взаимодействие.КонтактноеЛицо) Тогда
		МассивКонтактов.Добавить(Взаимодействие.КонтактноеЛицо);
		МассивКонтактов.Добавить(Партнер);
		ДанныеЗаполнения.Вставить("КонтактноеЛицо", Взаимодействие.КонтактноеЛицо);
	ИначеЕсли ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		МассивКонтактов.Добавить(КонтактноеЛицо);
		МассивКонтактов.Добавить(Партнер);
		ДанныеЗаполнения.Вставить("КонтактноеЛицо", КонтактноеЛицо);
	ИначеЕсли ЗначениеЗаполнено(ПотенциальныйКлиент) Тогда
		МассивКонтактов.Добавить(ПотенциальныйКлиент);		
		ДанныеЗаполнения.Вставить("КонтактноеЛицо", Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;		
	МассивТелефонов = Новый Массив;
	Для Каждого ЭлементМассива Из МассивКонтактов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			ИмяОбъекта = Нстр("ru='Партнер';en='Partner'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИмяОбъекта = Нстр("ru='Контактное лицо';en='Contact person'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ИмяОбъекта = Нстр("ru='Потенциальный клиент';en='Potential customer'");			
		КонецЕсли;			
		Для Каждого ЭлементКИ Из ЭлементМассива.КонтактнаяИнформация Цикл
			Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
				СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление + " (" + ЭлементМассива.Наименование + " <" + ИмяОбъекта +">" + ")");
				Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
					МассивТелефонов.Вставить(0, СтруктураКИ);
				Иначе
					МассивТелефонов.Добавить(СтруктураКИ);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	Возврат МассивТелефонов;
КонецФункции // СфпПолучитьМассивТелефонов().

&НаКлиенте
Процедура ОбработкаВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(РезультатВыбора.Значение, ДополнительныеПараметры.КонтактноеЛицо, ДополнительныеПараметры);
КонецПроцедуры // ОбработкаВыбораТелефона()	

&НаКлиенте
Процедура ОбработкаВыбораEmail(РезультатВыбора, ПараметрыФормы) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(РезультатВыбора.Значение, РезультатВыбора.Представление);
	
	ПараметрыФормы.Вставить("Кому", СписокАдресов);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьКЛ".
//
Процедура Позвонить(Команда)
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанныеСсылка = Неопределено;
	Если Элементы.ЗапланированныеАктивности.ВыделенныеСтроки.Количество() > 0 Тогда
		Если ТипЗнч(Элементы.ЗапланированныеАктивности.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ТекДанныеСсылка = Элементы.ЗапланированныеАктивности.ТекущиеДанные.Ссылка;
		КонецЕсли;
	ИначеЕсли Элементы.ИсторияВзаимодействий.ВыделенныеСтроки.Количество() > 0 Тогда
		Если ТипЗнч(Элементы.ИсторияВзаимодействий.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
			ТекДанныеСсылка = Элементы.ИсторияВзаимодействий.ТекущиеДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Если ТекДанныеСсылка <> Неопределено И ТекДанныеСсылка = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка") Тогда
		Если Не Записать() Тогда Возврат; КонецЕсли; 
	КонецЕсли;
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	Если НЕ (ТекДанныеСсылка = Неопределено) Тогда
		ДанныеЗаполнения.Вставить("Взаимодействие", ТекДанныеСсылка);
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов	= Новый СписокЗначений;
	МассивТелефонов = сфпПолучитьМассивТелефонов(Объект.Партнер, Объект.КонтактноеЛицо, Объект.ПотенциальныйКлиент, ТекДанныеСсылка, ДанныеЗаполнения);		
	Для Каждого ЭлементМассива Из МассивТелефонов Цикл
		СписокТелефонов.Добавить(ЭлементМассива.Значение, ЭлементМассива.Представление);
	КонецЦикла;	
	Если СписокТелефонов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
	ИначеЕсли СписокТелефонов.Количество() = 1 Тогда
		ОбработкаВыбораТелефона(СписокТелефонов[0], ДанныеЗаполнения);
	Иначе
		ОповещениеВыбораТелефона	= Новый ОписаниеОповещения("ОбработкаВыбораТелефона", ЭтотОбъект, ДанныеЗаполнения);
		Если Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаДокументов Тогда
			ПоказатьВыборИзМеню(ОповещениеВыбораТелефона, СписокТелефонов, Элементы.СписокСоздатьНаОсновании);
		Иначе
			ПоказатьВыборИзМеню(ОповещениеВыбораТелефона, СписокТелефонов, Элементы.ВзаимодействияПозвонитьКЛ);
		КонецЕсли;			
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПозвонитьКЛ".
//
Процедура ПозвонитьКЛ(Команда)
	ТДКЛ = Элементы.КонтактныеЛица.ТекущиеДанные;
	Если ТДКЛ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТДКЛ.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	ТДКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	Если ТДКИ = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ТДКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ТДКИ.Значение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	КонецЕсли;
	Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда Возврат; КонецЕсли;
	ДанныеЗаполнения	= Новый Структура;
	ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	ДополнительныеПараметры	= Новый Структура;
	ДополнительныеПараметры.Вставить("ДанныеЗаполнения",	ДанныеЗаполнения);
	ТДКИЗначение = ТДКИ.Значение;
	сфпСофтФонПроКлиент.сфпПозвонить(ТДКИЗначение, ТДКЛ.Ссылка, ДополнительныеПараметры);
КонецПроцедуры


&НаКлиенте
Процедура сфпСоздатьКонтакт(Команда)
	
	НовоеОповещение = Новый ОписаниеОповещения("СоздатьПартнераПослеВыбораТипаКонтакта", ЭтотОбъект);
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка"), Нстр("ru='Контактное лицо партнера';en='Contact person of the partner'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), Нстр("ru='Партнер';en='Partner'"));
	СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.CRM_ПотенциальныеКлиенты.ПустаяСсылка"), Нстр("ru='Потенциальный клиент';en='Potential customer'"));	
	ПоказатьВыборИзСписка(НовоеОповещение, СписокВыбора, Элементы.Партнер, 1); 
	
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору создания типа контакта
// 
// Параметры:
//   Результат 					- ЭлементСпискаЗначений - Тип выбранного контакта для создания
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура СоздатьПартнераПослеВыбораТипаКонтакта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Телефон = сфпСофтФонПроСервер.сфпУбратьИзНомераТелефонаВсеПрефиксы(сфпНомерТелефона);;
	Если ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Телефон", сфпНомерТелефона);
		СтруктураПараметры.Вставить("Интерес", ЭтотОбъект.УникальныйИдентификатор);
		бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);		
		Если бИспользоватьПомощник Тогда
			CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, СтруктураПараметры);
		Иначе
			ПараметрыФормы = Новый Структура("Основание", СтруктураПараметры);		
			ФормаПартнера = ПолучитьФорму("Справочник.Партнеры.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
			ФормаПартнера.Открыть();
		КонецЕсли;	
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда			
		НовоеОповещение = Новый ОписаниеОповещения("ВыборПартнераДляСозданияКонтактногоЛица", ЭтотОбъект);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",Истина);
		ПараметрыФормы.Вставить("МножественныйВыбор",Ложь);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,НовоеОповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ИначеЕсли ТипЗнч(Результат.Значение) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда	
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("Телефон", сфпНомерТелефона);
		СтруктураПараметры.Вставить("Интерес", ЭтотОбъект.УникальныйИдентификатор);		
		ПараметрыФормы = Новый Структура("Основание", СтруктураПараметры);		
		ФормаКонтакта = ПолучитьФорму("Справочник.CRM_ПотенциальныеКлиенты.ФормаОбъекта", ПараметрыФормы,ЭтотОбъект);
		ФормаКонтакта.Открыть();		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура, вызываемая после ответа пользователя по выбору партнёра для создания КЛ
// 
// Параметры:
//   Результат 					- СправочникСсылка - Выбранный партнёр
//   ДополнительныеПараметры 	- Структура - Структура с передаваемыми доп. параметрами
//
Процедура ВыборПартнераДляСозданияКонтактногоЛица(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда Возврат КонецЕсли;
	Если ЗначениеЗаполнено(Результат) Тогда
		СтруктураОснования = Новый Структура("Интерес, НомерТелефона, Владелец", ЭтотОбъект.УникальныйИдентификатор, сфпНомерТелефона, Результат);
		ПараметрыФормы = Новый Структура("Основание", СтруктураОснования);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.Форма.CRM_ФормаБыстрогоВвода", ПараметрыФормы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "сфпОткрытьКарточкуВCoMagic"
//
Процедура сфпОткрытьКарточкуВCoMagic(Команда)
	СтруктураЗапроса = сфпОткрытьКарточкуВCoMagicНаСервере(Команда.Имя);		
	сфпОткрытьКлиентаВСистемеCoMagic(СтруктураЗапроса.Контакт, СтруктураЗапроса.CoMagicID);
КонецПроцедуры // сфпОткрытьКарточкуВCoMagic()

// -СофтФон

#КонецОбласти

&НаКлиенте
// Процедура - обработчик команды формы "ПрисоединенныеФайлы".
//
Процедура ПрисоединенныеФайлы(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла",  Элементы.Список.ТекущиеДанные.Объект);	
	
	ФормаСпискаФайлов = ПолучитьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор,ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаСпискаФайлов.Заголовок = (Строка(Элементы.Список.ТекущиеДанные.Объект) + НСтр("ru = ' (Присоединенные файлы)"));
	ФормаСпискаФайлов.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", Новый Структура("ТипУслуги", Объект.ТипУслуги),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект);
	КонецЕсли;			
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями_Интерес
			
&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...';en='No attachments ...'");
		Возврат;
	КонецЕсли;		
	
	ВложенияПредставление = "";
	Вложения = ПолучитьВложенияИнтереса();
	Для Каждого ЭлементТаблицы Из Вложения Цикл
		РазмерВложения = Цел(ЭлементТаблицы.Размер/1024);
		РазмерСтрокой = ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(ЭлементТаблицы.Размер) + " байт");		
		ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + РазмерСтрокой + ")";
	КонецЦикла;
	Если ПустаяСтрока(ВложенияПредставление) Тогда
		ВложенияПредставление = НСтр("ru='Нет вложений...';en='No attachments ...'");				
	Иначе
		ВложенияПредставление = Сред(ВложенияПредставление, 3);
	КонецЕсли;	
			
КонецПроцедуры // СформироватьПредставлениеВложений()			 

&НаСервере
Функция ПолучитьВложенияИнтереса()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	CRM_ИнтересПрисоединенныеФайлы.Ссылка,
	|	CRM_ИнтересПрисоединенныеФайлы.Наименование КАК ИмяФайла,
	|	CRM_ИнтересПрисоединенныеФайлы.Размер
	|ИЗ
	|	Справочник.CRM_ИнтересПрисоединенныеФайлы КАК CRM_ИнтересПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ИнтересПрисоединенныеФайлы.ВладелецФайла = &Интерес
	|	И НЕ CRM_ИнтересПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = Нстр("ru='Интерес не записан. Добавление файлов невозможно!';en='Lead is not recorded. Adding files is impossible!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Возврат;
	КонецЕсли;		
	
	ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);	
	
	ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
	             ПараметрыФормы,
	             ЭтотОбъект,
	             Ложь,
	             Неопределено);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбновитьЗапланированныеАктивности(Команда)
	ОбновитьЗапланированныеАктивностиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюВзаимодействий(Команда)
	ОбновитьИсториюВзаимодействийНаСервере();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "СоздатьНаОсновании".
//
Процедура СоздатьНаОсновании(Команда)

	// +СтруктураПодчиненности
	Если РежимСпискаДокументов = 0 Тогда
	
		ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
		ТекДанные = Элементы.Список.ТекущиеДанные;

		Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
		
		Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Возврат;
		КонецЕсли;
		
		ТекущийОбъект = ТекДанные.Объект;
		
	Иначе
		
		ТекущийОбъект = Элементы.ТаблицаСтруктурыПодчиненности.ТекущаяОбласть.Расшифровка;
		Если НЕ ЗначениеЗаполнено(ТекущийОбъект) Тогда Возврат; КонецЕсли;
		
	КонецЕсли;
	
	ОП = Новый ОписаниеОповещения("ОбработкаВыбораПодменю", ЭтотОбъект);
	//СписокВводаНаОсновании = СформироватьСписокВводаНаОсновании(ТекущийОбъект);

	ПоказатьВыборИзМеню(ОП, СписокВводаНаОсновании, Элементы.СписокСоздатьНаОсновании);
	
	// -СтруктураПодчиненности

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОбработкаПервичногоИнтереса

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Интерес = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= Интерес.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) 
			И ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервере
// Процедура заполняет первичный интерес по документу - основанию.
//
// Параметры:
//	Основание	- ДокументСсылка	- Документ - основание.
//
Процедура ЗаполнитьПервичныйИнтерес(Основание)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если ЗначениеЗаполнено(Основание) И (ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
				КаналПервичногоИнтереса		= Интерес.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
				Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ (ЗначениеЗаполнено(КаналПервичногоИнтереса) 
				И НЕ ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"));
			КонецЕсли;
		Иначе
			Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
		КонецЕсли;
КонецПроцедуры // ЗаполнитьПервичныйИнтерес()

&НаСервере
// Процедура формирует описание канала источника.
//
// Параметры:
//	Нет.
//
Процедура СформироватьОписаниеКаналаИсточника()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Элементы.РанееЗарегистрированныйИнтерес.Видимость = ЗначениеЗаполнено(Партнер);
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			Интерес = Неопределено;
			Попытка
				Интерес = ПервичныйИнтерес.Получить(0);
			Исключение
			КонецПопытки;
			РанееНеЗарегистровано = Ложь;
			// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
			Если НЕ (Интерес = Неопределено) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				ВыводитьНадпись = Истина;
					Надпись = "";
					CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
					Элементы.РанееЗарегистрированныйИнтерес.Заголовок = Надпись;
			КонецЕсли;
			Элементы.РанееЗарегистрированныйИнтерес.Видимость = ВыводитьНадпись;
			// КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьОписаниеКаналаИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
					Если ЗначениеЗаполнено(Объект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ТекущийОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ТекущийОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ТекущийОбъект.Дата;
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запись.Партнер					= ТекущийОбъект.Партнер;
				Иначе
					Запись.Партнер					= ТекущийОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаКлиенте
// Функция проверяет наличие реквизиты у формы
//  Параметры:
//   Форма - УправляемаяФорма - Форма, у которой проверяем наличие реквизита
//   РеквизитПоиска - Строка - Реквизит формы
//
//  Возвращаемое значение:
//   Булево - Истина, если реквизит есть, Ложь - в противном случае
//
Функция ПроверитьНаличиеРеквизитаУФормы(Форма, РеквизитПоиска)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(РеквизитПоиска, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[РеквизитПоиска]<> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

#КонецОбласти

#Область НадписиКонтактнойИнформации

&НаСервереБезКонтекста
// Функция возвращает строку с контактной информацией объекта.
//
// Параметры:
//	ОбъектКИ	- СправочникСсылка	- Объект, для которого получается контактная информация.
//
// Возвращаемое значение:
//	Строка	- Строка с контактной информацией объекта.
//
Функция СформироватьНадписьКонтактнойИнформации(ОбъектКИ)
	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ОбъектКИ) Тогда
		Если ТипЗнч(ОбъектКИ) = Тип("СправочникСсылка.Партнеры") Тогда
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница)
				ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон) ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
						СтрПредставление = НСтр("ru='Сайт: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						СтрПредставление = НСтр("ru='Тел.: '") + СтрокаКИ.Представление;
					ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
						СтрПредставление = НСтр("ru='e-mail: '") + СтрокаКИ.Представление;
					КонецЕсли;
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + СтрПредставление;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаКИ Из ОбъектКИ.КонтактнаяИнформация Цикл
				Если СтрокаКИ.CRM_ОсновнойДляСвязи И ((СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон)
				ИЛИ (СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)) Тогда
					ТекстНадписи = ТекстНадписи + ?(НЕ ПустаяСтрока(ТекстНадписи), "; ", "") + ?(СтрокаКИ.Тип=Перечисления.ТипыКонтактнойИнформации.Телефон,НСтр("ru='Тел.: '"),НСтр("ru='e-mail: '")) + СтрокаКИ.Представление;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Если ПустаяСтрока(ТекстНадписи) Тогда
		ТекстНадписи = НСтр("ru='Нет избранной контактной информации';en='No favorite contact information'");
	КонецЕсли;
	Возврат ТекстНадписи;
КонецФункции // СформироватьНадписьКонтактнойИнформации()

&НаКлиенте
// Процедура формирует надпись с контактной информацией клиента.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКлиента()
	Элементы.ДекорацияПартнерТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.Партнер);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКлиента()	

&НаКлиенте
// Процедура формирует надпись с контактной информацией потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента()
	Элементы.ДекорацияПотенциальныйКлиентТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.ПотенциальныйКлиент);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииПотенциальногоКлиента()	

&НаКлиенте
// Процедура формирует надпись с контактной информацией контакта.
//
// Параметры:
//	Нет.
//
Процедура СформироватьНадписиКонтактнойИнформацииКонтакта()
	Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок = СформироватьНадписьКонтактнойИнформации(Объект.КонтактноеЛицо);
КонецПроцедуры // СформироватьНадписиКонтактнойИнформацииКонтакта()	

&НаСервере
Функция ПолучитьСписокОсновнойКИКонтактногоЛица()
	
	СписокКИ =Новый СписокЗначений();
	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Для Каждого СтрокаКИ Из Объект.КонтактноеЛицо.КонтактнаяИнформация Цикл
			Если СтрокаКИ.CRM_ОсновнойДляСвязи Тогда 
				Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
					СписокКИ.Добавить(СтрокаКИ.Представление, "Позвонить (" + СтрокаКИ.Представление + ")",,БиблиотекаКартинок.CRM_ТелефонныйЗвонокИсходящий);
				ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
					СписокКИ.Добавить(СтрокаКИ.Представление, "Отправить письмо (" + СтрокаКИ.Представление + ")",,БиблиотекаКартинок.CRM_ЭлектронноеПисьмоИсходящее);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат СписокКИ;
	
КонецФункции 

&НаКлиенте
Процедура ДекорацияКонтактноеЛицоТелефонНажатие(Элемент)
	Если Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок <> "Нет контактной информации" Тогда
		Оповещение 	= Новый ОписаниеОповещения("ОбработкаОповещенияПриВыбореКИ",ЭтотОбъект);
		ПоказатьВыборИзМеню(Оповещение, ПолучитьСписокОсновнойКИКонтактногоЛица(),Элемент);				
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияПриВыбореКИ(ВыбранноеЗначение, Параметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено И  СтрНайти(ВыбранноеЗначение.Представление, "Позвонить") > 0 Тогда
		Если НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон() Тогда Возврат; КонецЕсли;
		ДополнительныеПараметры	= Новый Структура;
		сфпСофтФонПроКлиент.сфпПозвонить(ВыбранноеЗначение.Значение, Объект.КонтактноеЛицо, ДополнительныеПараметры);
	ИначеЕсли ВыбранноеЗначение <> Неопределено И  СтрНайти(ВыбранноеЗначение.Представление, "Отправить письмо") > 0 Тогда	
	   	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
		ПараметрыФормы.Вставить("Кому", ВыбранноеЗначение.Значение);
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры
         
#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

&НаКлиенте
Процедура ОбработкаОповещенияУдаленияЭлементаСписка(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ПометитьСнятьПометкуУдаленияНаСервере(Дополнительно.ТекДанныеОбъект, Дополнительно.ТекДанныеПометкаУдаления);
		ОбновитьСписок();
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодменю(Параметры, Дополнительно) Экспорт

	Если Параметры <> Неопределено Тогда
		
		// +СтруктураПодчиненности
		Если РежимСпискаДокументов = 0 Тогда
			ТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
		Иначе
			ТекущийОбъект = Элементы.ТаблицаСтруктурыПодчиненности.ТекущаяОбласть.Расшифровка;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("Основание", ТекущийОбъект);
		// -СтруктураПодчиненности
		
		Если Найти(Параметры.Значение, "ТелефонныйЗвонок") > 0 Тогда
			// Если это телефонный звонок, то пробуем звонить сразу.
			Позвонить(Неопределено);
		Иначе
			Попытка
				Форма = ПолучитьФорму(Параметры.Значение + ".ФормаОбъекта", СтруктураПараметров, Элементы.Список);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			
			Если Форма <> Неопределено Тогда
				Форма.Открыть();
				// Иначе
				//	СообщениеОтказПриПолученииФормы();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОткрытияФормыНастроек(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("ОбщаяФорма.НастройкаОтправкиSMS");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияИнтереса(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		ПеревеситьИнтересНаСервере(Дополнительно.ТекДанные.Ссылка, Параметры);
		ЭтотОбъект.Взаимодействия.Удалить(ЭтотОбъект.Взаимодействия.Индекс(Дополнительно.ТекДанные));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработка выбора Вида взаимодействия при добавлении строки.
//
Процедура ВыборВидаВзаимодействия(Параметры, ДополнительныеПараметры) Экспорт
	Если Параметры <> Неопределено Тогда
		ПараметрыВзаимодействия = Новый Структура;
		ПараметрыВзаимодействия.Вставить("ДокументОснование", Объект.Ссылка);
		ПараметрыВзаимодействия.Вставить("ВидВзаимодействия", Параметры);
		ПараметрыВзаимодействия.Вставить("СостояниеИнтереса", Объект.СостояниеИнтереса);
		ПараметрыВзаимодействия.Вставить("Партнер", Объект.Партнер);
		ПараметрыВзаимодействия.Вставить("КонтактноеЛицо", Объект.КонтактноеЛицо);
		ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая", ПараметрыВзаимодействия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСтатусыДокумента()
	// Группа состояния
	СтатусВзаимодействие = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителя.Ссылка,
	|	ЗадачаИсполнителя.Выполнена,
	|	ЗадачаИсполнителя.СрокИсполнения
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
	|ГДЕ
	|	ЗадачаИсполнителя.БизнесПроцесс ССЫЛКА БизнесПроцесс.CRM_БизнесПроцесс
	|	И ЗадачаИсполнителя.БизнесПроцесс.Предмет = &Ссылка
	|И ВЫБОР
	|		КОГДА НЕ ЗадачаИсполнителя.CRM_СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка) И ЗадачаИсполнителя.Исполнитель = &Ответственный
	|			ТОГДА НЕ ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Ссылка
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И НЕ ЗадачаИсполнителя.Выполнена";
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если РезультатЗапроса.Количество() = 1 Тогда
		Если РезультатЗапроса[0].СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтатусВзаимодействие = 1;
			КоличествоПросроченных = 1;
		ИначеЕсли РезультатЗапроса[0].СрокИсполнения >= НачалоДня(ТекущаяДатаСеанса()) Тогда
			СтатусВзаимодействие = 2;
			КоличествоПросроченных = 0;
		КонецЕсли;
	ИначеЕсли РезультатЗапроса.Количество() > 1 Тогда
		КоличествоПросроченных = 0;
		Для Каждого СтрокаТЗ Из РезультатЗапроса Цикл
			Если СтрокаТЗ.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()) Тогда
				КоличествоПросроченных = КоличествоПросроченных + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПросроченных = 1 Тогда
			СтатусВзаимодействие = 3;
		ИначеЕсли КоличествоПросроченных = 0 Тогда
			СтатусВзаимодействие = 4;
		Иначе
			СтатусВзаимодействие = 5
		КонецЕсли;
	КонецЕсли;
	
	Если НаКонтроле.Количество() = 0 Тогда
		СтатусКонтроля = 5;
	Иначе
		СтатусКонтроля = 1;		
	КонецЕсли;
	
	Если РезультатЗапроса.Количество() = 0 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Нет запланированных задач";
	ИначеЕсли КоличествоПросроченных = 1 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Есть одна просроченная задача";
	ИначеЕсли КоличествоПросроченных = 0 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Нет просроченных задач";
	ИначеЕсли КоличествоПросроченных > 1 Тогда
		Элементы.КартинкаВзаимодействие.Подсказка = "Есть несколько просроченных задач";
	КонецЕсли;
	
	Если НаКонтроле.Количество() = 0 Тогда
		Элементы.КартинкаКонтроль.Подсказка = "Не взято на контроль";
	ИначеЕсли НаКонтроле.Количество() = 1 Тогда	
		Элементы.КартинкаКонтроль.Подсказка = "Взято на контроль "+НаКонтроле[0].Пользователь;
	Иначе
		Элементы.КартинкаКонтроль.Подсказка = "Взято на контроль несколькими пользователями";
	КонецЕсли;	
КонецПроцедуры

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
		 	Интерес = Неопределено;
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Интерес) Тогда
				// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
				// КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр = НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеПриЗаписиСервер(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_Этап <> ДанныеВыбранногоСостоянияИнтереса.Этап Тогда
		Если ДанныеВыбранногоСостоянияИнтереса.ЭтоПереход Тогда
			Если (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
					И ДанныеВыбранногоСостоянияИнтереса.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
					ИЛИ ДанныеВыбранногоСостоянияИнтереса.Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
				
				ПараметрыДосрочногоЗавершения = Новый Структура();
				ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
				ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
				ПараметрыДосрочногоЗавершения.Вставить("Задача"							,ТекущаяЗадача);
				
				Если ДанныеВыбранногоСостоянияИнтереса.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
					ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ТекущаяЗадача.CRM_ТочкаМаршрута);
					ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				Иначе
					ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ДанныеВыбранногоСостоянияИнтереса.Этап);
					ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,ДанныеВыбранногоСостоянияИнтереса.Этап.ВариантЗавершения);
				КонецЕсли;
				
				CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
			Иначе
				CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(ТекущаяЗадача.БизнесПроцесс, ДанныеВыбранногоСостоянияИнтереса.Этап);
			КонецЕсли;
		Иначе
			ЗадачаОбъект								= ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.CRM_ВариантВыполнения			= ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения;
			Попытка
				ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
				ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения,
				ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Исключение
			КонецПопытки;
			// ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия);
			//
			// ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завершено взаимодействие"""+ТекВзаимодействие.ВидВзаимодействия+""" -> '") + Строка(ИзмененноеВзаимодействие.Ответственный);
			//
			// Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
			//	СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + Символы.ПС;
			//	ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
			// Иначе
			//	ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
			//	
			//	ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
			//	|"+ЗадачаОбъект.РезультатВыполнения;
			// КонецЕсли;
			ЗадачаОбъект.Записать();
			
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка,,Неопределено,,);
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Завершен Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Интерес", ТекущийОбъект.Ссылка);
			Запрос.УстановитьПараметр("Исполнитель",ТекущийОбъект.Ответственный);
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И НЕ ЗадачаИсполнителя.Выполнена";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекущаяЗадача = Выборка.Ссылка;
				ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + ТекущаяЗадача.ДатаНачала;
				СсылкаНаЗадачу = Выборка.Ссылка;
				ПолучитьТаблицуТипов();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает видимость реквизитов на форме.
//
// Параметры:
//	Нет.
Процедура УстановитьВидимостьЭлементов()
	
	Элементы.ПричинаОтказа.Видимость = (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
											И ЗначениеЗаполнено(Объект.ПричинаОтказа));
											
	ЭтоРазделенныйРежимРаботы = Константы.ИспользоватьРазделениеПоОбластямДанных.Получить();
	Элементы.ФормаОбщаяКомандаCRM_СоздатьПоручение.Видимость = НЕ ЭтоРазделенныйРежимРаботы;											
	
КонецПроцедуры

&НаСервере
// Процедура выводит на заголовок формы информацию о клиенте и контактном лице.
//
// Параметры:
//	нет
Процедура ОбновитьЗаголовокФормы()
	ТекПартнер = Объект.Партнер;
	ТекКонтакт = Объект.КонтактноеЛицо;
	ИмяКлиента = ?(ЗначениеЗаполнено(ТекПартнер), ТекПартнер.Наименование, Объект.ПотенциальныйКлиент.Наименование);
	ИмяКонтакта = ?(ЗначениеЗаполнено(ТекКонтакт), " (" + ТекКонтакт.Наименование + ")", "");
	ЭтотОбъект.Заголовок = НСтр("ru='Интерес клиента ';en='Lead'") + ИмяКлиента + ИмяКонтакта + ": " + Объект.Тема;
КонецПроцедуры

&НаСервере
// Функция получает список состояний из справочника CRM_СостоянияИнтересов.
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	СписокСостояний - СписокЗначений
Функция ПолучитьСписокСостоянийСервер(Задача, ТекСостояние = Неопределено, ТекущийЭтап = Неопределено)
	
	СписокСостояний = Новый СписокЗначений;
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Задача) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
		               |	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		               |	CRM_СостоянияИнтересов.Наименование КАК Наименование,
		               |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		               |	CRM_СостоянияИнтересов.Представление КАК Представление,
		               |	CRM_СостоянияИнтересов.Завершено КАК Завершено
		               |ИЗ
		               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		               |ГДЕ
		               |	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		               |	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		               |	И CRM_СостоянияИнтересов.Родитель = &Родитель
		               |	И CRM_СостоянияИнтересов.Используется
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочивания";
		
		Запрос.УстановитьПараметр("Родитель", ТекСостояние.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекСостояние = Неопределено Тогда
				СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление);
			Иначе
				Если Выборка.Ссылка = ТекСостояние Тогда
					КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
				ИначеЕсли Выборка.РеквизитДопУпорядочивания<ТекСостояние.РеквизитДопУпорядочивания И НЕ Выборка.Завершено Тогда
					КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
				Иначе
					КартинкаСостояния = Неопределено;
				КонецЕсли;
				СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление,, КартинкаСостояния);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Задача) Тогда
		
		Если Не ЗначениеЗаполнено(ТекущийЭтап) Тогда
			Если ЗначениеЗаполнено(Задача.БизнесПроцесс.ЭтапДосрочногоЗавершения) Тогда
				ТекущийЭтап = Задача.БизнесПроцесс.ЭтапДосрочногоЗавершения;
			Иначе
				ТекущийЭтап = Задача.CRM_ТочкаМаршрута;
			КонецЕсли;
		КонецЕсли;
		
		РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		РазрешеноДосрочноеЗавершение	= Истина;// Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
		
		НеФормируемЗадачи = Ложь;
		НеПройденоРазделение = Ложь;
		
		CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		
		СоответствиеЭтаповВариантам = Новый Соответствие;
		
		СписокЭтапов = Новый СписокЗначений;
		МассивЭтапов = Новый Массив;
		МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
		
		МассивТочекЗавершения = Новый Массив;
		
		Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
			
			СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
			
			Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
				ВариантВыполнения = 0;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
				
				Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
					Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
						МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
					Иначе
						НеПройденоРазделение = Истина;
						МассивИсходящихТочек.Очистить();
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого ЭлементСписка ИЗ СтруктураВариантовВыполнения.СписокВариантов Цикл
					ВариантВыполнения = ЭлементСписка.Значение;
					МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
					
					Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
						Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
							МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
						Иначе
							НеПройденоРазделение = Истина;
							МассивИсходящихТочек.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
						СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
						МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
							МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Интерес",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивЭтапов",МассивЭтапов);
		ТекстЗапроса = "ВЫБРАТЬ
		|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
		|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
		|ПОМЕСТИТЬ НастройкиЭтапов
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
		|ГДЕ
		|	CRM_БизнесПроцесс.Интерес = &Интерес
		|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
		Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_СостоянияИнтересов.Ссылка,
		|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		|	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	CRM_СостоянияИнтересов.Наименование,
		|	CRM_СостоянияИнтересов.Завершено,
		|	CRM_СостоянияИнтересов.Представление,
		|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
		|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
		|ГДЕ
		|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		СписокСостоянийТочки = Новый СписокЗначений;
		ЕстьНеудачныйВариант = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Этап) Тогда
				СписокСостоянийТочки.Добавить(Выборка.Этап);
				Если Выборка.Ссылка = ТекСостояние Тогда
					Если ТекущийЭтап = Выборка.Этап ИЛИ Выборка.Завершено Тогда
						КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
					ИначеЕсли Выборка.Этап.РеквизитДопУпорядочивания < ТекущийЭтап.РеквизитДопУпорядочивания И НЕ Выборка.Завершено Тогда
						КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
					Иначе
						КартинкаСостояния = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка.РеквизитДопУпорядочивания<ТекСостояние.РеквизитДопУпорядочивания Тогда
					КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
				Иначе
					КартинкаСостояния = Неопределено;
				КонецЕсли;
				Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
					ВариантВыполнения=Неопределено;
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),Истина);
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Представление + ", "+ Выборка.Этап,, КартинкаСостояния);
				Иначе
					ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),(НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Представление + ", "+ Выборка.Этап,, КартинкаСостояния);
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (Выборка.Этап.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТочкаЗавершения ИЗ МассивТочекЗавершения Цикл
			Если СписокСостоянийТочки.НайтиПоЗначению(ТочкаЗавершения)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокСостоянийТочки.Добавить(ТочкаЗавершения);
			ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
			Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
				Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель),
				Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(ТекСостояние.Родитель));
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,ТочкаЗавершения, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), (НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ ТочкаЗавершения);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Если РазрешеноПеремещатьЭтап Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",Задача.БизнесПроцесс.КартаМаршрута);
			Запрос.УстановитьПараметр("НомерВерсии",Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Запрос.УстановитьПараметр("МассивЭтапов",МассивТочекЗавершения);
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
			|ГДЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
			Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СписокСостоянийТочки.НайтиПоЗначению(Выборка.ТочкаМаршрута)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ВариантВыполнения	=Неопределено;
				Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
					Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель),
					Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(ТекСостояние.Родитель));
				СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,Выборка.ТочкаМаршрута, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ Выборка.ТочкаМаршрута);
				Если НЕ ЕстьНеудачныйВариант Тогда
					ЕстьНеудачныйВариант = (Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
			ВариантВыполнения	=Неопределено;
			Состояние			= Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель);
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние, Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
			Если Состояние = ТекСостояние Тогда
				КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
			Иначе
				КартинкаСостояния = Неопределено;
			КонецЕсли;
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%)",, КартинкаСостояния);
		КонецЕсли;
		Если (НеФормируемЗадачи ИЛИ НеПройденоРазделение) И НЕ РазрешеноПеремещатьЭтап Тогда
			СписокСостояний.Очистить();
			ПоедставлениеОшибки = НСтр("ru='Не все задачи выполнены. Смена состояния невозможна.';en='Not all tasks are completed. Change of state is not possible.'");
			СписокСостояний.Добавить("Ошибка",ПоедставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокСостояний;
	
КонецФункции

&НаСервере
Функция ПолучитьСвойстваДинамическогоСпискаСервер()
	Возврат CRM_ОбщегоНазначенияСервер.ПолучитьСвойстваДинамическогоСписка(ЭтотОбъект, "Список",
		"Обработка.CRM_УниверсальныйЖурналДокументов", Неопределено, Неопределено, Неопределено, Неопределено,
		"ВидСпискаИдентификаторТекущейНастройки", "Подключаемый_КомандаВидСписка");
КонецФункции

&НаСервере
// Процедура установки (снятия) пометки удаления объекта в списке.
//
Процедура ПометитьСнятьПометкуУдаленияНаСервере(ОбъектСсылка, Пометить)
	ОбъектПоСсылке = ОбъектСсылка.ПолучитьОбъект();
	ОбъектПоСсылке.УстановитьПометкуУдаления(Пометить);
КонецПроцедуры

&НаСервере
Процедура ПеревеситьИнтересНаСервере(Взаимодействие, Интерес);
	ВзаимодействиеОбъект = Взаимодействие.ПолучитьОбъект();
	ВзаимодействиеОбъект.ДокументОснование = Интерес;
	ВзаимодействиеОбъект.Записать();
КонецПроцедуры

&НаСервере
// Функция формирует список объектов, которые могут быть введены на основании текущего объекта.
//
// Параметры:
//	тип объекта - Ссылка на текущий объект списка
//
// Возвращаемое значение:
//	СписокОбъектов - СписокЗначений
Функция СформироватьСписокВводаНаОсновании(ТипОбъекта)

	НужныйОбъект = ТипОбъекта.Метаданные();

	СписокОбъектов = Новый СписокЗначений;

	МассивВидов = Новый Массив();
	МассивВидов.Добавить("Справочники");
	МассивВидов.Добавить("Документы");
	МассивВидов.Добавить("ПланыВидовХарактеристик");
	МассивВидов.Добавить("ПланыСчетов");
	МассивВидов.Добавить("ПланыВидовРасчета");
	МассивВидов.Добавить("БизнесПроцессы");
	МассивВидов.Добавить("Задачи");
	МассивВидов.Добавить("ПланыОбмена");
	
	СтрокаИсключений = "";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		СтрокаИсключений = ",УдалитьПроизвольныйЭД,";
	КонецЕсли;	

	Для Каждого МетаданныеВид Из МассивВидов Цикл
		Для Каждого МетаданныеОбъект Из Метаданные[МетаданныеВид] Цикл
			Если МетаданныеОбъект.ВводитсяНаОсновании.Содержит(НужныйОбъект) Тогда
				Если СтрНайти(СтрокаИсключений, "," + МетаданныеОбъект.Имя + ",") = 0 Тогда
					СписокОбъектов.Добавить(МетаданныеОбъект.ПолноеИмя(), МетаданныеОбъект.Синоним);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	СписокОбъектов.СортироватьПоПредставлению();
	Возврат СписокОбъектов;

КонецФункции

&НаСервере
// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
// с потенциального клиента на партнера.
//
// Параметры:
//	ПотенциальныйКлиент - СправочникСсылка.CRM_ПотенциальныеКлиенты
//	Партнер				- СправочникСсылка.Партнеры
Процедура ПеревеситьДокументыНаПартнера(ПотенциальныйКлиент, Партнер);
	CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(ОбъектСсылка)
	Результат = Новый Структура("ПолноеИмяМетаданных");
	
	Результат.ПолноеИмяМетаданных = ОбъектСсылка.Метаданные().ПолноеИмя();
	
	Возврат Результат;
КонецФункции

&НаКлиенте
// Процедура открвает форму документа из списка документов.
//
// Параметры:
//	нет
Процедура ОткрытьФормуТекущегоОбъекта()
	СтандартнаяОбработка = Ложь;
	Если Элементы.Список.ТекущиеДанные <> Неопределено  Тогда
		Попытка		СсылкаНаТекущийОбъект = Элементы.Список.ТекущиеДанные.Объект;
		Исключение	СсылкаНаТекущийОбъект = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено(СсылкаНаТекущийОбъект) Тогда Возврат; КонецЕсли;
		
		Если ТипЗнч(СписокОткрытыхФорм) <> Тип("СписокЗначений") Тогда
			СписокОткрытыхФорм = Новый СписокЗначений();
		КонецЕсли;
		
		ДанныеДляОткрытия = ПолучитьДанныеДляОткрытияФормыОбъектаПоСсылкеНаОбъект(Элементы.Список.ТекущиеДанные.Объект);
		ПараметрыОткрытия = Новый Структура("Ключ", Элементы.Список.ТекущиеДанные.Объект);
		
		Если ТипЗнч(СсылкаНаТекущийОбъект) = Тип("ДокументСсылка.Анкета") Тогда
			
			ПараметрыОткрытия.Вставить("ТолькоФормаЗаполнения",Истина);
			
			Если Элементы.Список.ТекущиеДанные.Проведен Тогда
				
				ПараметрыОткрытия.Вставить("ТолькоПросмотр",Истина);
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Элементы.Список.ТолькоПросмотр И НЕ ПараметрыОткрытия.Свойство("ТолькоПросмотр") Тогда
			ПараметрыОткрытия.Вставить("ТолькоПросмотр",Истина);
		КонецЕсли;
		
		Форма = ПолучитьФорму(ДанныеДляОткрытия.ПолноеИмяМетаданных + ".ФормаОбъекта", ПараметрыОткрытия, Элементы.Список);
		Если Форма <> Неопределено Тогда
			
			Форма.Открыть();
			#Если НЕ ВебКлиент Тогда
			СписокОткрытыхФорм.Добавить(Форма);
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
			ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
			#КонецЕсли
		Иначе
			СообщениеОтказПриПолученииФормы();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура создает нового партнера по его наименованию.
//
// Параметры:
//	НаименованиеСтр	- Строка	- Наименование нового партнера.
//
Процедура СоздатьПартнераПоНаименованию(Знач НаименованиеСтр)
	бИспользоватьПомощник = (CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ИспользоватьПомощникВводаНовогоКлиента") = Истина);
	СтруктураПараметрыНового = Новый Структура("Наименование,АдресПочты,Телефон", НаименованиеСтр, "", "");
	Если бИспользоватьПомощник Тогда
		CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, Новый Структура("ПараметрыНового", СтруктураПараметрыНового));
	Иначе
		ОткрытьФорму("Справочник.Партнеры.ФормаОбъекта", Новый Структура("ПараметрыНового", СтруктураПараметрыНового), ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры // СоздатьПартнераПоНаименованию()

&НаКлиенте
// Процедура определяет доступность потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПотенциальногоКлиента()
	ДоступностьКлиента	 									= ЗначениеЗаполнено(Объект.Партнер) ИЛИ НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	Элементы.Партнер.Видимость								= ДоступностьКлиента;
	Элементы.ДекорацияПартнерТелефон.Видимость				= ДоступностьКлиента;
	Элементы.Партнер.АвтоОтметкаНезаполненного				= ДоступностьКлиента;
	Элементы.Партнер.ОтметкаНезаполненного					= ДоступностьКлиента;
	Элементы.ГруппаПотенциальныйКлиент.Видимость			= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.Видимость					= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.АвтоОтметкаНезаполненного	= НЕ ДоступностьКлиента;
	Элементы.ПотенциальныйКлиент.ОтметкаНезаполненного		= НЕ ДоступностьКлиента;
	Элементы.СоздатьНовогоКлиента.Видимость					= НЕ ДоступностьКлиента;
	Элементы.ДекорацияПотенциальныйКлиентТелефон.Видимость	= НЕ ДоступностьКлиента;
	Элементы.КонтактноеЛицо.Видимость						= ДоступностьКлиента;
	Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного		= ДоступностьКлиента И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо");
	Элементы.КонтактноеЛицо.ОтметкаНезаполненного			= Элементы.КонтактноеЛицо.АвтоОтметкаНезаполненного;
	Элементы.ДекорацияКонтактноеЛицоТелефон.Видимость		= ДоступностьКлиента;
	Элементы.СтраницаКонтакты.Видимость						= ДоступностьКлиента;
	Элементы.ЗапланированныеАктивностиКонтактноеЛицо.Видимость	= ДоступностьКлиента;
КонецПроцедуры // ДоступностьПотенциальногоКлиента()	

&НаКлиенте
// Процедура устанавливает доступность и видимость полей формы.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//
Процедура УстановитьДоступностьИнтереса()
	
	Если Объект.Автор = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли Объект.Ответственный = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		ЕстьДоступУровняАккаунтМенеджера			= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(Объект.Партнер);
	Иначе
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	КонецЕсли;
	Элементы.ГруппаОбщиеСведения.ТолькоПросмотр	= НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаИнтерес.ТолькоПросмотр		= НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ЗапланированныеАктивности.ТолькоПросмотр		= НЕ ЕстьДоступУровняАккаунтМенеджера;
	
	Для Каждого ПодчиненныйЭлемент Из Элементы.ЗапланированныеАктивности.КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	Для Каждого ПодчиненныйЭлемент Из Элементы.ЗапланированныеАктивности.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	
	Элементы.Список.ТолькоПросмотр  							 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ОблакоТегов.ТолькоПросмотр 						 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаРеквизитыЛево.ТолькоПросмотр 				 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаОбщиеСведенияИсточникСостояние.ТолькоПросмотр = Не ЕстьДоступУровняАккаунтМенеджера;
	Элементы.Описание.ТолькоПросмотр 							 = Не ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ПанельСостоянийИнтереса.Доступность	 			 = ЕстьДоступУровняАккаунтМенеджера И (НЕ ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Не Объект.Завершен);
	
	Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	Элементы.ОбщаяКомандаCRM_УстановитьНовогоОтветственного.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	Если НЕ ЕстьДоступУровняАккаунтМенеджера Тогда
		Элементы.ДекорацияКонтактноеЛицоТелефон.Заголовок = "";	
	КонецЕсли;		
	
КонецПроцедуры // УстановитьДоступностьИнтереса()

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм()
	Если ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений") Тогда
		Если СписокОткрытыхФорм.Количество() = 0 Тогда
			Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
			Исключение КонецПопытки;
		Иначе
			бОбновлять = Ложь;
			нИндекс = 0;
			Пока нИндекс < СписокОткрытыхФорм.Количество() Цикл
				ЗначениеСписка = СписокОткрытыхФорм[нИндекс];
				
				Попытка		ФормаОткрыта = ЗначениеСписка.Значение.Открыта();
				Исключение	ФормаОткрыта = Ложь;
				КонецПопытки;
				
				Если Не ФормаОткрыта Тогда
					СписокОткрытыхФорм.Удалить(нИндекс);
					бОбновлять = Истина;
				Иначе
					нИндекс = нИндекс + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если бОбновлять Тогда
				ОбновитьСписок();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка ОтключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм");
	Исключение КонецПопытки;
	
	Если ТипЗнч(СписокОткрытыхФорм) = Тип("СписокЗначений") И СписокОткрытыхФорм.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикОжиданияОбработкаСпискаОткрытыхФорм", 1);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОтказПриПолученииФормы(ПараметрОбъект = Неопределено)
	ТекстСообщенияПоУмолчанию = НСтр("ru='Запрещено интерактивное создание данного объекта!';en='Interactive creation of the given object are forbidden!'");
	Если ПараметрОбъект = Неопределено Тогда
		ТекстСообщения = ТекстСообщенияПоУмолчанию;
	Иначе
		ПараметрОбъектПредставление = Строка(ПараметрОбъект);
		Если ЗначениеЗаполнено(ПараметрОбъектПредставление) Тогда
			ТекстСообщения = НСтр("ru='Запрещено интерактивное создание';en='Interactive creation are forbidden'") + " """ + ПараметрОбъектПредставление + """!";
		Иначе
			ТекстСообщения = ТекстСообщенияПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	ПоказатьПредупреждение(, ТекстСообщения, 10);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущаяСтрока;
	ТекДанные = Элементы.Список.ТекущиеДанные;

	Если ТекДанные = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;

	ПараметрКоманды = ТекДанные.Объект;
	
	Если ЗначениеЗаполнено(ПараметрКоманды) Тогда
	
		ОткрытьФорму("ОбщаяФорма.CRM_СтруктураПодчиненности",Новый Структура("ОбъектОтбора", ПараметрКоманды),
				Элементы.Список,
				КлючУникальности);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактныеЛицаПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаПриАктивизацииСтроки()
	Если Элементы.КонтактныеЛица.ТекущаяСтрока = Неопределено Тогда
		КонтактнаяИнформацияКЛ.Очистить();
		Возврат;
	КонецЕсли;
	ПоказатьКонтактнуюИнформациюКЛ(Элементы.КонтактныеЛица.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПоказатьКонтактнуюИнформациюКЛ(СтрокаСсылка)
	
	КонтактнаяИнформацияКЛ.Очистить();
	Если СтрокаСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	КИКонтактногоЛица = СтрокаСсылка.КонтактнаяИнформация;
	Для Каждого ОбъектКИ Из КИКонтактногоЛица Цикл
		НоваяКИ							= КонтактнаяИнформацияКЛ.Добавить();
		НоваяКИ.Вид						= ОбъектКИ.Вид;
		НоваяКИ.Значение				= ОбъектКИ.Представление;
		НоваяКИ.Тип						= ОбъектКИ.Тип;
		НоваяКИ.Порядок					= НоваяКИ.Вид.РеквизитДопУпорядочивания;
		НоваяКИ.CRM_ОсновнойДляСвязи	= ОбъектКИ.CRM_ОсновнойДляСвязи;
	КонецЦикла;	
	КонтактнаяИнформацияКЛ.Сортировать("Порядок");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияКЛПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_КонтактнаяИнформацияКЛПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияКЛПриАктивизацииСтроки()
	
	ТекСтрокаКИ = Элементы.КонтактнаяИнформацияКЛ.ТекущиеДанные;
	ДоступенМэйл = Ложь;
	ДоступенЗвонок = Ложь;
	Если ТекСтрокаКИ <> Неопределено Тогда
		Если ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты") Тогда 
			ДоступенМэйл = Истина;
		ИначеЕсли ТекСтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон") Тогда 
			ДоступенЗвонок = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КонтактнаяИнформацияОтправитьEmailКлиент.Доступность	= ДоступенМэйл;
	Элементы.КонтактнаяИнформацияПозвонитьКЛ.Доступность			= ДоступенЗвонок;
	Элементы.КонтактнаяИнформацияОтправитьСМСКЛ.Доступность			= ДоступенЗвонок;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрокаКонтакт = Элементы.КонтактныеЛица.ТекущаяСтрока;
	Если ТекСтрокаКонтакт <> Неопределено Тогда
		ПоказатьЗначение(, ТекСтрокаКонтакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриСменеСтраницы" элемента формы "Панель".
//
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница.Имя = "стрВзаимодействия" Тогда
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаЗадачиИПроцессы" Тогда
		ЗаполнитьДеревоПроцессов();
	КонецЕсли;	
КонецПроцедуры

#Область ОбработкаТаблицаНаКонтроль

&НаСервере
// Процедура обновляет таблицу "На контроле" из регистра сведений.
//
Процедура ОбновитьТаблицуНаКонтроле()
	
	НаКонтроле.Очистить();
	
	Запрос = Новый запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля КАК Статус,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Подразделение,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Комментарий
	|ИЗ
	|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, Объект = &Интерес) КАК CRM_ИнтересыНаКонтролеСрезПоследних
	|ГДЕ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для Каждого Выборка Из РезультатЗапроса Цикл
			НоваяСтрока = НаКонтроле.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;		
	
КонецПроцедуры	

#КонецОбласти

#Область СписокДокументовВзаимодействия

&НаКлиенте
// Подключаемый обработчик события "ПриАктивизацииСтроки" элемента формы "Активности".
//
Процедура Подключаемый_АктивностиПриАктивизацииСтроки()
	Если Элементы.Панель.ТекущаяСтраница.Имя <> "стрВзаимодействия" Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТекущийЭлемент) <> Тип("ТаблицаФормы") Тогда
		ТД = Элементы.ЗапланированныеАктивности.ТекущиеДанные;
	Иначе
		ТД = ТекущийЭлемент.ТекущиеДанные;
	КонецЕсли;
	Если ТекущийЭлемент.Имя <> "ИсторияВзаимодействий" Тогда
		Элементы.ИсторияВзаимодействий.ВыделенныеСтроки.Очистить();
	Иначе
		Если Элементы.ИсторияВзаимодействий.ВыделенныеСтроки.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		Элементы.ЗапланированныеАктивности.ВыделенныеСтроки.Очистить();
	КонецЕсли;
	
	Если ТД = Неопределено Тогда
		ВзаимодействиеЗакрыто = Истина;
	Иначе
		Если СкрытьПоказатьСписокДокументов Тогда
			СписокДокументовВзаимодействия	= CRM_ВзаимодействияСервер.СписокДокументовВзаимодействия(ТД.Ссылка);
		КонецЕсли;	
	КонецЕсли;
	Если ТекущийЭлемент.Имя = "ИсторияВзаимодействий" Тогда
		ВзаимодействиеЗакрыто = Истина;
	Иначе	
		ВзаимодействиеЗакрыто = Ложь;
	КонецЕсли;
	// Элементы.ВзаимодействияОтправитьEmailКлиент.Доступность		= НЕ ВзаимодействиеЗакрыто;
	// Элементы.ВзаимодействияОтправитьСМСКЛ.Доступность			= НЕ ВзаимодействиеЗакрыто;
	// Элементы.ВзаимодействияПозвонитьКЛ.Доступность				= НЕ ВзаимодействиеЗакрыто;
КонецПроцедуры // Подключаемый_ВзаимодействияПриАктивизацииСтроки()

&НаКлиенте
Процедура ЗапланированныеАктивностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПараметрыАктивности = Новый Структура;
	ПараметрыАктивности.Вставить("Ключ", ТекущиеДанные.Ссылка);
	ОткрытьФорму("РегистрСведений.CRM_ЗапланированныеАктивности.ФормаЗаписи", ПараметрыАктивности, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы "Взаимодействия".
//
Процедура АктивностиПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("Подключаемый_АктивностиПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды формы "ПоказыватьСкрыватьСписокДокументов".
//
Процедура ПоказыватьСкрыватьСписокДокументов(Команда)
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка	= НЕ Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	Элементы.ГруппаСписокДокументов.Видимость			= Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	СкрытьПоказатьСписокДокументов						= Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка;
	Подключаемый_АктивностиПриАктивизацииСтроки();
КонецПроцедуры // ПоказыватьСкрыватьСписокДокументов()

&НаКлиенте
// Процедура - обработчик события "ПриНажатии" элемента формы "СписокДокументовВзаимодействия".
//
Процедура СписокДокументовВзаимодействияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		ПозицияСсылки	= Найти(ДанныеСобытия.href, "e1cib");
		ТелоСсылки		= Сред(ДанныеСобытия.href, ПозицияСсылки);
		ПозицияКоманды	= Найти(ТелоСсылки, ":");
		СсылкаПерехода	= Лев(ТелоСсылки, ПозицияКоманды - 1);
		ИмяКоманды		= Сред(ТелоСсылки, ПозицияКоманды + 1);
		СсылкаНаОбъект	= CRM_ВзаимодействияСервер.ПолучитьСсылкуНаДокумент(СсылкаПерехода);
		Если ИмяКоманды = "Открыть" Тогда
			Попытка
				ПерейтиПоНавигационнойСсылке(СсылкаПерехода);
			Исключение
			КонецПопытки;
		ИначеЕсли ИмяКоманды = "ПрослушатьЗапись" Тогда
			МассивЗаписей	= CRM_ВзаимодействияСервер.ПолучитьМассивЗаписейЗвонка(СсылкаНаОбъект);
			Если МассивЗаписей.Количество() > 0 Тогда
				сфпСофтФонПроКлиент.сфпПолучитьФайлРазговора(МассивЗаписей[0]);	
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ПрослушатьЗаписи" Тогда
			сфпСофтФонПроКлиент.сфпОткрытьИсториюРазговора(СсылкаНаОбъект);	
		ИначеЕсли ИмяКоманды = "ПозвонитьНаНомер" Тогда
			ДанныеЗаполнения	= Новый Структура;
			ДанныеЗаполнения.Вставить("Основание",	СсылкаНаОбъект);	
			Если НЕ (Элементы.ЗапланированныеАктивности.ТекущиеДанные = Неопределено) Тогда
				ДанныеЗаполнения.Вставить("Взаимодействие", Элементы.ЗапланированныеАктивности.ТекущиеДанные.Ссылка);
			КонецЕсли;	
			АбонентКакСвязаться	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "АбонентКакСвязаться");
			АбонентКонтакт		= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(СсылкаНаОбъект, "АбонентКонтакт");
			Если НЕ ПустаяСтрока(АбонентКакСвязаться) Тогда
				сфпСофтФонПроКлиент.сфпПозвонить(АбонентКакСвязаться, АбонентКонтакт, ДанныеЗаполнения);	
			ИначеЕсли ЗначениеЗаполнено(АбонентКонтакт) Тогда
				СписокОбъектов	= Новый СписокЗначений;
				СписокОбъектов.Добавить(АбонентКонтакт);
				сфпСофтФонПроКлиент.сфпПозвонитьВыбравТелефон(СписокОбъектов, ДанныеЗаполнения);
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ОтветитьНаПисьмо" Тогда
			ОснованиеПисьма = Новый Структура;
			ОснованиеПисьма.Вставить("Основание",	СсылкаНаОбъект);
			ОснованиеПисьма.Вставить("Команда",		"Ответить");
			ПараметрыОткрытия = Новый Структура("Основание", ОснованиеПисьма);
			Если НЕ (Элементы.ЗапланированныеАктивности.ТекущиеДанные = Неопределено) Тогда
				ПараметрыОткрытия.Вставить("Взаимодействие", Элементы.ЗапланированныеАктивности.ТекущиеДанные.Ссылка);
			КонецЕсли;	
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		ИначеЕсли ИмяКоманды = "ОткрытьВложение" Тогда
			МассивВложений	= CRM_ВзаимодействияСервер.ПолучитьМассивВложенийПисьма(СсылкаНаОбъект);
			Если МассивВложений.Количество() > 0 Тогда
				УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(МассивВложений[0], ЭтотОбъект);
			КонецЕсли;	
		ИначеЕсли ИмяКоманды = "ОткрытьВложения" Тогда
			ПараметрыОткрытия = Новый Структура("Ключ", СсылкаНаОбъект);
			ПараметрыОткрытия.Вставить("ВсегдаПоказыватьВложения", Истина);
			ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СписокДокументовВзаимодействияПриНажатии()

&НаКлиенте
Процедура ДобавитьВзаимодействие(Команда)
	// Сразу открываем форму выбора взаимодействия.
	ОповещениеОВыбореВзаимодействия = Новый ОписаниеОповещения("ВыборВидаВзаимодействия", ЭтотОбъект);
	ЗначениеОтбора = Новый Структура;
	ЗначениеОтбора.Вставить("Направление", ПредопределенноеЗначение("Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее"));
	ЗначениеОтбора.Вставить("ВидДела", ПредопределенноеЗначение("Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес"));
	ЗначениеОтбора.Вставить("СостояниеИнтереса", Объект.СостояниеИнтереса);
	ПараметрыВыбораВидаВзаимодействия = Новый Структура("Отбор", ЗначениеОтбора);
	ОткрытьФорму("Справочник.CRM_ВидыВзаимодействий.ФормаВыбора", ПараметрыВыбораВидаВзаимодействия,,,,,ОповещениеОВыбореВзаимодействия);
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеАктивностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ДобавитьВзаимодействие(Неопределено);
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеАктивностиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	Если НЕ Элемент.ТекущиеДанные.РазрешенаОтмена Тогда
		ПоказатьПредупреждение(, НСтр("ru='Нельзя отменять задачу бизнес-процесса!';en='You can not undo the task of a business process!'"));
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапланированныеАктивностиПередУдалениемЗавершение", ЭтотОбъект, Элемент.ТекущиеДанные.Ссылка);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Отменить запланированную активность?';en='Do you want to cancel the scheduled activity?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапланированныеАктивностиПередУдалениемЗавершение(Результат, Активность) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОтменитьАктивностьСервер(Активность);
		Модифицированность = Истина;
		ОбновитьАктивностиНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтменитьАктивностьСервер(Активность)
	АктивностьОбъект = Активность.ПолучитьОбъект();
	Если ТипЗнч(Активность) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		АктивностьОбъект.УстановитьПометкуУдаления(Истина);
	Иначе
		АктивностьОбъект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено;
		АктивностьОбъект.Записать();
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Функция проверяет, чтобы в таблице Взаимодействий ожидаемая выручка была заполнена там, где у состояния стоит
// признак обязательного её заполнения.
//
// Параметры:
// 	нет
//
// Возвращаемое значение:
//	Булево - Истина - есть пустые даты
//			 Ложь - нет пустых дат.
Функция ПроверитьЗаполнениеОжидаемойВыручки()
	Результат = Ложь;
	УказыватьОжидаемуюВыручку = ТекущееСостояние.УказаниеОжидаемойВыручки;
	Если УказыватьОжидаемуюВыручку И Объект.ОжидаемаяВыручка = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена ожидаемая выручка. Запись документа невозможна!';en='The expected revenue is not filled. You can not record a document!'"), Объект.Ссылка,"ОжидаемаяВыручка",);
		Результат = Истина;
	КонецЕсли; 	
	Возврат Результат;
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандСофтфон

&НаСервере
// Функция возвращает необходимые параметры для открытия карточки клиента в CoMagic
//
// Параметры:
//  ИмяКоманды - Строка - Имя команды, которая вызывает эту функцию
//
// Возвращаемое значение:
//  СтруктураЗапроса - Структура - Содержит ссылку на объект и идентификатор в системе CoMagic
//
Функция сфпОткрытьКарточкуВCoMagicНаСервере(ИмяКоманды)
	СтруктураЗапроса = Новый Структура;
	Если ИмяКоманды = "сфпОткрытьПартнераВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.Партнер);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.Партнер.сфпCoMagicID);
	ИначеЕсли ИмяКоманды = "сфпОткрытьКонтактноеЛицоВCoMagic" Тогда
		СтруктураЗапроса.Вставить("Контакт", Объект.КонтактноеЛицо);
		СтруктураЗапроса.Вставить("CoMagicID", Объект.КонтактноеЛицо.сфпCoMagicID);
	КонецЕсли;		
	Возврат СтруктураЗапроса;
КонецФункции // сфпОткрытьКарточкуВCoMagic()

&НаКлиенте
// Процедура открывает карточку контакта в системе CoMagic
//
// Параметры:
//	Контакт		- СправочникСсылка	- Контакт
//  CoMagicID	- Строка			- Идентификатор контакта в системе CoMagic
//
Процедура сфпОткрытьКлиентаВСистемеCoMagic(Контакт, CoMagicID)
	Если ПустаяСтрока(CoMagicID) Тогда
		CoMagicID = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
	КонецЕсли;	
	Если ПустаяСтрока(CoMagicID) Тогда Возврат; КонецЕсли;
	КлючСессии	= сфпСофтФонПроСервер.сфпПолучитьКлючСессииCoMagic();
	Если НЕ ЗначениеЗаполнено(КлючСессии) Тогда Возврат; КонецЕсли;
	Адрес	= "http://app.comagic.ru/analytics/auditory/cmvisitor/?session_key=" + КлючСессии + "&visitor_id=" + CoMagicID;
	ПерейтиПоНавигационнойСсылке(Адрес);
КонецПроцедуры // сфпОткрытьКлиентаВСистемеCoMagic()

&НаСервере
Функция сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(ИнтересСсылка)
	
	Запрос = Новый Запрос; 
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	CRM_ЖурналДокументов.Объект.Ссылка КАК Звонок
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.ГлавнаяЗапись
	|	И CRM_ЖурналДокументов.CRM_Интерес = &Интерес
	|	И ТИПЗНАЧЕНИЯ(CRM_ЖурналДокументов.Объект) = ТИП(Документ.ТелефонныйЗвонок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	CRM_ЖурналДокументов.Объект.Дата";
	
	Запрос.УстановитьПараметр("Интерес", ИнтересСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Звонок.сфпCoMagicID;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

&НаКлиенте
// Процедура - обработчик видимостью кнопок по открытию в CoMagic
//
Процедура сфпУправлениеВидимостьюКнопокОткрытьВCoMagic()
	Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
		Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			Если ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.КонтактноеЛицо, "сфпCoMagicID")) Тогда
				Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
		    Иначе
				Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Истина;
			КонецЕсли;
			Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= НЕ ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "сфпCoMagicID"));
		ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если ПустаяСтрока(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Партнер, "сфпCoMagicID")) Тогда
				Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
			Иначе
				Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость	= Истина;
			КонецЕсли;
			Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
		Иначе
			Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость			= НЕ ПустаяСтрока(сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка));
			Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
		КонецЕсли;
	Иначе
		Элементы.КнопкаПартнерОткрытьВCoMagic.Видимость			= Ложь;
		Элементы.КнопкаКонтактноеЛицоОткрытьCoMagic.Видимость	= Ложь;
	КонецЕсли;
КонецПроцедуры // УправлениеВидимостьюКнопокОткрытьВCoMagic()

#КонецОбласти

#Область ПанельСостоянийИнтереса

&НаСервере
Процедура ЗаполнитьПанельСостоянийИнтереса(Этап = Неопределено)
	СписокСостояний = ПолучитьСписокСостоянийСервер(ТекущаяЗадача, Объект.СостояниеИнтереса, Этап);
	
	СтруктураДоступныхСостоянийИнтереса = Новый Структура;
		
	НовыйЭлемент = Неопределено;
	ТолькоВсеДействия = Истина;
	Пока Элементы.ПанельСостоянийИнтереса.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.ПанельСостоянийИнтереса.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	ГруппаЗавершение = Элементы.Добавить("ГруппаЗавершение", Тип("ГруппаФормы"), Элементы.ПанельСостоянийИнтереса);
	ГруппаЗавершение.Вид = ВидГруппыФормы.Подменю;
	ГруппаЗавершение.Заголовок = "Завершение";
	
	Для каждого Состояние из СписокСостояний Цикл
		Если ТипЗнч(Состояние.Значение) = Тип("Структура") Тогда
			ТекСостояние = Состояние.Значение.Состояние;
			ИмяКомандыСостояния = "СостояниеИнтереса"+СтрЗаменить(Строка(ТекСостояние.УникальныйИдентификатор()), "-", "")+"_"+СтрЗаменить(Строка(Состояние.Значение.Этап.УникальныйИдентификатор()), "-", "");
			Состояние.Значение.Вставить("Представление", Состояние.Представление);
		Иначе
			ТекСостояние = Состояние.Значение;
			ИмяКомандыСостояния = "СостояниеИнтереса"+СтрЗаменить(Строка(ТекСостояние.УникальныйИдентификатор()), "-", "");
		КонецЕсли;
		СтруктураДоступныхСостоянийИнтереса.Вставить(ИмяКомандыСостояния, Состояние.Значение);
		Если ТекСостояние.Завершено Тогда
			ЭлементРазмещения = ГруппаЗавершение;
		Иначе
			ЭлементРазмещения = Элементы.ПанельСостоянийИнтереса;
		КонецЕсли;
		Шрифт = Новый Шрифт;
		Если Состояние.Картинка = БиблиотекаКартинок.сфпКлиентОжидание Тогда
			ТолькоВсеДействия = Ложь;
			Если НовыйЭлемент<>Неопределено Тогда
				// НовыйЭлемент.ТолькоВоВсехДействиях = ТолькоВсеДействия;
				НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;
			ЦветЭлемента = Новый Цвет(150, 250, 250);
			Шрифт = Новый Шрифт(,, Истина);
			Если ЭлементРазмещения = ГруппаЗавершение Тогда
				ГруппаЗавершение.Заголовок = Состояние.Представление;
				ГруппаЗавершение.Картинка = Состояние.Картинка;
				ГруппаЗавершение.ШрифтЗаголовка = Шрифт;
				Если ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					ГруппаЗавершение.ЦветФона = Новый Цвет(150, 250, 150);
				Иначе
					ГруппаЗавершение.ЦветФона = WebЦвета.Лосось;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Состояние.Картинка = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение Тогда
			ЦветЭлемента = Новый Цвет(150, 250, 150);
		Иначе
			ТолькоВсеДействия = Ложь;
			Если НовыйЭлемент<>Неопределено Тогда
				// НовыйЭлемент.ТолькоВоВсехДействиях = ТолькоВсеДействия;
				НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;
			ЦветЭлемента = Неопределено;
		КонецЕсли;
		
		Если Команды.Найти(ИмяКомандыСостояния) = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКомандыСостояния);
			НоваяКоманда.Действие = "ПанельСостоянийИнтересаВыбор";
			НоваяКоманда.Подсказка = Состояние.Представление;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("КнопкаПанели"+ИмяКомандыСостояния, Тип("КнопкаФормы"), ЭлементРазмещения);
		НовыйЭлемент.Заголовок = Состояние.Представление;
		НовыйЭлемент.ИмяКоманды = ИмяКомандыСостояния;
		НовыйЭлемент.Картинка = Состояние.Картинка;
		НовыйЭлемент.Шрифт = Шрифт;
		Если ЦветЭлемента<>Неопределено Тогда
			НовыйЭлемент.ЦветФона = ЦветЭлемента;
		КонецЕсли;
		// НовыйЭлемент.ТолькоВоВсехДействиях = ТолькоВсеДействия;
		// НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если ТолькоВсеДействия Тогда
			НовыйЭлемент.Отображение = ОтображениеКнопки.Картинка;
		Иначе
			НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		КонецЕсли;	
	КонецЦикла;
	Элементы.Переместить(ГруппаЗавершение, Элементы.ПанельСостоянийИнтереса);
	Элементы.ПанельСостоянийИнтереса.Доступность = НЕ ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Не Объект.Завершен;
КонецПроцедуры

&НаКлиенте
Процедура ПанельСостоянийИнтересаВыбор(Команда)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадача, СписокОбязательныхТипов, Истина);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИмяКомандыСостояния = Команда.Имя;

	ДанныеВыбранногоСостоянияИнтереса = СтруктураДоступныхСостоянийИнтереса[ИмяКомандыСостояния];
	ВыбранноеСостояние = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"),
		ДанныеВыбранногоСостоянияИнтереса.Состояние, ДанныеВыбранногоСостоянияИнтереса);
	ВыбранныйЭтап = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"), ДанныеВыбранногоСостоянияИнтереса.Этап, Неопределено);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Состояние", ВыбранноеСостояние);
	Дополнительно.Вставить("Этап", ВыбранныйЭтап);
	Если ОбязательноВводитьРезультат Тогда
		// Добавить открытие формы для перенаправления интереса.
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Дополнительно);
		ПараметрыФормы = Новый Структура("Состояние", Объект.СостояниеИнтереса);
		ПараметрыФормы.Вставить("Выручка", Объект.ОжидаемаяВыручка);
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаВводаРезультатаВзаимодействия", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	ИначеЕсли ОткрыватьФормуПереносаИнтереса(ВыбранноеСостояние) Тогда
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Дополнительно);
		ПараметрыФормы = Новый Структура("Интерес, ИнтересОбъект, Задача, ДанныеВыбранногоСостоянияИнтереса", Объект.Ссылка, Объект, ТекущаяЗадача, ДанныеВыбранногоСостоянияИнтереса);
		ПараметрыФормы.Вставить("ОткрытиеИзИнтереса", Истина);
		Если ЗаполнятьПервичныйИнтерес Тогда
			СтруктураПервичногоИнтереса = Новый Структура;
			СтруктураПервичногоИнтереса.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
			СтруктураПервичногоИнтереса.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СтруктураПервичногоИнтереса", СтруктураПервичногоИнтереса);
		КонецЕсли;
		ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбработатьИнтересЗавершение(Новый Структура, Дополнительно)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрыватьФормуПереносаИнтереса(СостояниеИнтереса)
	
	УказыватьДостигнутыйРезультат = Ложь;
	Если СостояниеИнтереса.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Объект.Ссылка, ТипАктивности, СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
	КонецЕсли;
	Возврат УказыватьДостигнутыйРезультат
				ИЛИ СостояниеИнтереса.ИнтерактивноеПланированиеАктивностей
				ИЛИ (СостояниеИнтереса.УказаниеОжидаемойВыручки И НЕ ЗначениеЗаполнено(Объект.ОжидаемаяВыручка))
				ИЛИ (СостояниеИнтереса.ОбязательноеЗаполнениеКлиента И Не ЗначениеЗаполнено(Объект.Партнер))
				ИЛИ СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение;
	
КонецФункции

&НаСервере
Функция ПроверитьЗапланированныеАктивности()
	Если ЗначениеЗаполнено(Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности) Тогда
		Если Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИЗадача Тогда
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, Перечисления.CRM_ТипыАктивности.Взаимодействие); 
			РезультатПроверки = Истина;
			Если Результат = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'"));
				РезультатПроверки = Ложь;
			КонецЕсли;
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, Перечисления.CRM_ТипыАктивности.Задача); 
			Если Результат = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled tasks for the current lead. You can not record a document!'"));
				РезультатПроверки = Ложь;
			КонецЕсли;
			Возврат РезультатПроверки;
		ИначеЕсли Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Взаимодействие Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ТекстСообщения = НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'")
		ИначеЕсли Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Задача Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			ТекстСообщения = НСтр("ru='Нет запланированных личных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled personal tasks for the current lead. You can not record a document!'")
		Иначе 
			ТипАктивности = Неопределено;
			ТекстСообщения = НСтр("ru='Нет запланированных активностей по текущему интересу. Запись документа невозможна!';en='There are no scheduled activities for the current lead. You can not record a document!'")
		КонецЕсли;
		Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, ТипАктивности); 
		Если Результат = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СценарийИнтересаПриИзмененииНаСервере()
	Объект.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийИнтереса);
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаПриИзменении(Элемент)
	СценарийИнтересаПриИзмененииНаСервере();
	ЗаполнитьПанельСостоянийИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("Сценарий", СценарийИнтереса);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаВопроса(Ответ, КомандаИмя) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = СтрЗаменить(КомандаИмя,"Создать","");
	
	Если ИмяДокумента = "CRM_СчетНаОплатуПокупателю" И CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
		ИмяДокумента = "ЗаказКлиента";
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	
	Если Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия Тогда
		ТекДанные = Элементы.ЗапланированныеАктивности.ТекущиеДанные;
		
		Если НЕ ТекДанные = Неопределено Тогда
			СсылкаНаВзаимодействие	= ТекДанные.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	// ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	ПараметрыФормы.Вставить("Взаимодействие", СсылкаНаВзаимодействие);
	ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные не записаны.
			|Выполнение действия """+ВернутьЗаголовокКоманды(Команда.Имя)+": создать на основании"" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВопроса", ЭтотОбъект, Команда.Имя);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбработкаРезультатаВопроса(КодВозвратаДиалога.ОК, Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЛичнуюЗадачу(Команда)
	ПараметрыФормы = Новый Структура("Основание, ИзСпискаАктивностей", Объект.Ссылка, Истина);
	ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоручение(Команда)
	СтруктураОснования = Новый Структура("Основание,КартаМаршрута", Объект.Ссылка, ПредопределенноеЗначение("Справочник.CRM_КартыМаршрутов.Поручение"));
	ПараметрыФормы = Новый Структура("Основание",СтруктураОснования);
	ОткрытьФорму("БизнесПроцесс.CRM_БизнесПроцесс.Форма.ФормаПоручения",ПараметрыФормы, ЭтотОбъект,);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НЕ Настройки["СкрытьПоказатьСписокДокументов"] = Неопределено Тогда
		СкрытьПоказатьСписокДокументов = Настройки["СкрытьПоказатьСписокДокументов"];
	Иначе
		СкрытьПоказатьСписокДокументов	= Ложь;
	КонецЕсли;
	Элементы.ПоказыватьСкрыватьСписокДокументов.Пометка	= СкрытьПоказатьСписокДокументов;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ЗаполнитьПанельСостоянийИнтереса();
	ДанныеВыбранногоСостоянияИнтереса = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Партнер, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма",Новый Структура("БизнесПроцесс", БизнесПроцесс), ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи", Новый Структура("Задача", ТекущаяЗадача),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	// ПоказатьЗначение(, ЗначениеРеквизитаОбъекта(ТекущаяЗадача, "Описание"));
	//// Элементы.ТекущаяЗадачаОписание.Видимость = НЕ Элементы.ТекущаяЗадачаОписание.Видимость;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПроцессов()
	
	ДеревоВсеПроцессы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачаЗадачаИсполнителя.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЗадачаЗадачаИсполнителя.БизнесПроцесс = Неопределено
	               |			ТОГДА ""Личные задачи""
	               |		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс
	               |	КОНЕЦ КАК БизнесПроцесс
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
	               |ГДЕ
	               |	(ЗадачаЗадачаИсполнителя.БизнесПроцесс.Предмет = &Предмет
	               |			ИЛИ ЗадачаЗадачаИсполнителя.Предмет = &Предмет)
	               |	И ВЫБОР
	               |			КОГДА НЕ(ЗадачаЗадачаИсполнителя.CRM_СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	               |							ИЛИ ЗадачаЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО)
	               |					И ЗадачаЗадачаИсполнителя.Исполнитель = &Ответственный
	               |				ТОГДА НЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.Интерес = &Предмет
	               |			ИНАЧЕ НЕ ЗадачаЗадачаИсполнителя.CRM_Личная
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗадачаЗадачаИсполнителя.СрокИсполнения УБЫВ
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	               |ПО
	               |	БизнесПроцесс";
	
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		НовыйБП = ДеревоВсеПроцессы.ПолучитьЭлементы().Добавить();
		БизнесПроцесс = ВыборкаБП.БизнесПроцесс;
		Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
			НовыйБП.Наименование = БизнесПроцесс.Наименование;
		Иначе
			НовыйБП.Наименование = ВыборкаБП.БизнесПроцесс;
		КонецЕсли;
		НовыйБП.Ссылка = БизнесПроцесс;
		Выборка = ВыборкаБП.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗадача = НовыйБП.ПолучитьЭлементы().Добавить();
			Задача = Выборка.Ссылка;
			НоваяЗадача.Ссылка = Задача;
			НоваяЗадача.Наименование = Задача.Наименование;
			НоваяЗадача.Исполнитель = Задача.Исполнитель;
			НоваяЗадача.ДатаИсполнения = Задача.ДатаИсполнения;
			НоваяЗадача.ПринятаКИсполнению = Задача.ПринятаКИсполнению;
			НоваяЗадача.Просрочена = ?(Задача.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()), ИСТИНА, ЛОЖЬ);
			НоваяЗадача.СрокИсполнения = Задача.СрокИсполнения;
			НоваяЗадача.Выполнена = Задача.Выполнена;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСчетовНаСервере()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес"		, Объект.Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_ЖурналДокументов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	|	И CRM_ЖурналДокументов.CRM_Интерес = &Интерес";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "CRM_СчетНаОплатуПокупателю", "ЗаказПокупателя");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "CRM_СчетНаОплатуПокупателю", "ЗаказКлиента");
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат 	МассивСчетов;
КонецФункции

&НаКлиенте
Процедура ДекорацияСостояниеВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Заказ", МассивСчетов));
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
				ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьВВалюте");
				ИмяФормыОтчета = "Отчет.РасчетыСПокупателями.Форма";
			Иначе
				ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
				ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
			КонецЕсли;
		Иначе	
			ПараметрыФормы.Вставить("КлючВарианта", "Ведомость");
			ИмяФормыОтчета = "Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "По данному интересу нет взаиморасчетов.";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСуммаПродажОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("ЗаказПокупателя", МассивСчетов));
				ПараметрыФормы.Вставить("КлючВарианта", "Основной");
				ИмяФормыОтчета = "Отчет.Продажи.Форма";
			Иначе
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Заказ", МассивСчетов));
				ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
				ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
			КонецЕсли;
		Иначе	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПродажи", МассивСчетов));
			ПараметрыФормы.Вставить("КлючВарианта", "ПоНеделямДням");
			ИмяФормыОтчета = "Отчет.CRM_Продажи.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "По данному интересу нет взаиморасчетов.";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#Область ИсторияВзаимодействий

&НаКлиенте
Процедура ИсторияВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.CRM_Взаимодействие") Тогда
		ПараметрыФормы = Новый Структура("Ключ", ТекущиеДанные.Ссылка);
		Если ТекущиеДанные.ВходящееВзаимодействие Тогда
			ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокументаКраткая", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПараметрыФормы.Вставить("ОткрыватьФорму", Истина);
			ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ПараметрыФормы = Новый Структура("Ключ, ИзСпискаАктивностей", ТекущиеДанные.Ссылка, Ложь);
		ОткрытьФорму("Задача.ЗадачаИсполнителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПоказатьЗначение(,ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктивностиНаСервере()
	ОбновитьЗапланированныеАктивностиНаСервере();
	ОбновитьИсториюВзаимодействийНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗапланированныеАктивностиНаСервере()
	
	ЗапланированныеАктивности.Очистить();
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Интерес", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Взаимодействие.Ссылка КАК Ссылка,
	|	ЗапланированныеАктивности.Ответственный КАК Ответственный,
	|	ЗапланированныеАктивности.Тема КАК Тема,
	|	ЗапланированныеАктивности.ПланируемаяДата КАК ПланируемаяДата,
	|	0 КАК СтандартнаяКартинка,
	|	ИСТИНА КАК РазрешенаОтмена,
	|	Взаимодействие.ВидВзаимодействия КАК ТипАктивности,
	|	Взаимодействие.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 1
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 2
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 3
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 4
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 5
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 6
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 7
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 8
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 9
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидАктивностиКартинка
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗапланированныеАктивности КАК ЗапланированныеАктивности
	|		ПО (ЗапланированныеАктивности.ПланируемаяАктивность = Взаимодействие.Ссылка)
	|			И (ЗапланированныеАктивности.Объект = &Интерес)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
	|		ПО Взаимодействие.ВидВзаимодействия = ВидыВзаимодействий.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задача.Ссылка,
	|	ЗапланированныеАктивности.Ответственный,
	|	ЗапланированныеАктивности.Тема,
	|	ЗапланированныеАктивности.ПланируемаяДата,
	|	0,
	|	Задача.CRM_Личная,
	|	ЗапланированныеАктивности.ТипАктивности,
	|	Задача.CRM_КонтактноеЛицо,
	|	ВЫБОР
	|		КОГДА Задача.CRM_Личная
	|			ТОГДА 13
	|		ИНАЧЕ 14
	|	КОНЕЦ
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задача
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.CRM_ЗапланированныеАктивности КАК ЗапланированныеАктивности
	|		ПО (ЗапланированныеАктивности.ПланируемаяАктивность = Задача.Ссылка)
	|			И (ЗапланированныеАктивности.Объект = &Интерес)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаТаблица = РезультатЗапроса.Выгрузить();
	РезультатЗапросаТаблица.Сортировать("ПланируемаяДата Возр");
	
	ЗапланированныеАктивности.Загрузить(РезультатЗапросаТаблица);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсториюВзаимодействийНаСервере()
	
	ИсторияВзаимодействий.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Интерес", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЖурналДокументов.Объект КАК Ссылка,
	|	ЖурналДокументов.Дата КАК Дата,
	|	ЖурналДокументов.Описание КАК Описание,
	|	ЖурналДокументов.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ЖурналДокументов.Ответственный КАК Ответственный,
	|	ЖурналДокументов.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ЖурналДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ЖурналДокументов.ТипОбъекта КАК ТипОбъекта
	|ПОМЕСТИТЬ ДанныеЖурнала
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК ЖурналДокументов
	|ГДЕ
	|	ЖурналДокументов.ГлавнаяЗапись
	|	И ЖурналДокументов.CRM_Интерес = &Интерес
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка КАК Ссылка,
	|	ДанныеЖурнала.Дата КАК Дата,
	|	ДанныеЖурнала.Описание КАК Описание,
	|	ДанныеЖурнала.КонтактноеЛицо КАК КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный КАК Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса КАК СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления КАК ПометкаУдаления,
	|	Взаимодействия.ВидВзаимодействия КАК ТипОбъекта,
	|	ВЫБОР
	|		КОГДА ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВходящееВзаимодействие,
	|	ВЫБОР
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 1
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ТелефонныйЗвонок)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 2
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 3
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЛичнаяВстреча)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 4
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 5
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ЭлектронноеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 6
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 7
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.ПочтовоеПисьмо)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 8
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Входящее)
	|			ТОГДА 9
	|		КОГДА ВидыВзаимодействий.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСобытий.Прочее)
	|				И ВидыВзаимодействий.Направление = ЗНАЧЕНИЕ(Перечисление.CRM_ВходящееИсходящееСобытие.Исходящее)
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидСобытияКартинка,
	|	Взаимодействия.ДатаЗавершенияВзаимодействия КАК ДатаЗавершенияВзаимодействия,
	|	Взаимодействия.Результат КАК Результат,
	|	Взаимодействия.СтатусВзаимодействия КАК СтатусВзаимодействия
	|ИЗ
	|	Документ.CRM_Взаимодействие КАК Взаимодействия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = Взаимодействия.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.CRM_ВидыВзаимодействий КАК ВидыВзаимодействий
	|		ПО Взаимодействия.ВидВзаимодействия = ВидыВзаимодействий.Ссылка
	|ГДЕ
	|	(Взаимодействия.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Завершено)
	|			ИЛИ Взаимодействия.СтатусВзаимодействия = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияСобытий.Отменено))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	11,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ВходящиеПисьма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = ВходящиеПисьма.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	12,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ИсходящиеПисьма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = ИсходящиеПисьма.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Звонки.Входящий
	|			ТОГДА 11
	|		ИНАЧЕ 12
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК Звонки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = Звонки.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	0,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.СообщениеSMS КАК СообщенияSMS
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = СообщенияSMS.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	11,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.CRM_Заявка КАК Заявки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = Заявки.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА СообщенияЧатов.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыСообщенияМессенджера.Входящее)
	|			ТОГДА 11
	|		ИНАЧЕ 12
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.CRM_СообщениеМессенджера КАК СообщенияЧатов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = СообщенияЧатов.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеЖурнала.Ссылка,
	|	ДанныеЖурнала.Дата,
	|	ДанныеЖурнала.Описание,
	|	ДанныеЖурнала.КонтактноеЛицо,
	|	ДанныеЖурнала.Ответственный,
	|	ДанныеЖурнала.СостояниеИнтереса,
	|	ДанныеЖурнала.ПометкаУдаления,
	|	ДанныеЖурнала.ТипОбъекта,
	|	ЛОЖЬ,
	|	ВЫБОР
	|		КОГДА Задачи.CRM_Личная
	|			ТОГДА 13
	|		ИНАЧЕ 14
	|	КОНЕЦ,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	"""",
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Задача.ЗадачаИсполнителя КАК Задачи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЖурнала КАК ДанныеЖурнала
	|		ПО (ДанныеЖурнала.Ссылка = Задачи.Ссылка)
	|ГДЕ
	|	(Задачи.Выполнена
	|			ИЛИ Задачи.ПометкаУдаления)";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапросаТаблица = РезультатЗапроса.Выгрузить();
	РезультатЗапросаТаблица.Сортировать("Дата Убыв");
	
	ИсторияВзаимодействий.Загрузить(РезультатЗапросаТаблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюРеквизитов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Партнер", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.CRM_ИсторияРеквизитовПартнеров.ФормаСписка", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор,,,, РежимОткрытияОкнаФормы.Независимый);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИсторииРеквизитов(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Данные", "Интересы");
	ОткрытьФорму("РегистрСведений.CRM_НастройкаВерсионированияРеквизитовПартнеров.Форма.НастройкаВерсионирования", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		МодульПродажиКлиент	= ОбщегоНазначенияКлиент.ОбщийМодуль("ПродажиКлиент");
		ПараметрыВыбораСоглашения = МодульПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
		
		ПараметрыВыбораСоглашения.Элемент                     = Элемент;
		ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
		ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
		ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
		ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
		
		МодульПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
		
	Иначе	
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Соглашение можно выбрать только для зарегистрированного партнера.'"));
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

// +СтруктураПодчиненности
#Область СтруктураПодчиненности

&НаКлиенте
Процедура РежимСпискаДокументовПриИзменении(Элемент)
	
	Если РежимСпискаДокументов = 0 Тогда
		Элементы.ЗакладкиДокументов.ТекущаяСтраница = Элементы.СтраницаСписокДокументов;
		Элементы.ГруппаКоманднаяПанельСписка.Видимость = Истина;
		Элементы.ВыводитьАктивностиВСтруктуреПодчиненности.Видимость = Ложь;
	Иначе
		Элементы.ЗакладкиДокументов.ТекущаяСтраница = Элементы.СтраницаСтруктураПодчиненности;
		Элементы.ГруппаКоманднаяПанельСписка.Видимость = Ложь;
		Элементы.ВыводитьАктивностиВСтруктуреПодчиненности.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьДокументыНаФорме();
	
	CRM_ХранилищеНастроек.Сохранить("РежимСпискаДокументовВИнтересе",,РежимСпискаДокументов); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументы(Команда)
	ОбновитьДокументыНаФорме()
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаФорме()
	
	Если РежимСпискаДокументов = 0 Тогда
		Элементы.Список.Обновить();
	Иначе
		Если Объект.Ссылка.Пустая() Тогда
			Возврат;
		КонецЕсли;
		
		Если ФормаСтруктурыПодчиненности = Неопределено Тогда
			ФормаСтруктурыПодчиненности = ПолучитьФорму("ОбщаяФорма.CRM_СтруктураПодчиненностиИнтереса");
		КонецЕсли;
		
		ФормаСтруктурыПодчиненности.ОбъектСсылка = Объект.Ссылка;
		ФормаСтруктурыПодчиненности.ИсходныйОбъект = Объект.Ссылка;
		ФормаСтруктурыПодчиненности.ВыводитьАктивности = ВыводитьАктивностиВСтруктуреПодчиненности;
		ФормаСтруктурыПодчиненности.ОбновитьДеревоСтруктурыПодчиненности();
		ТаблицаСтруктурыПодчиненности = ФормаСтруктурыПодчиненности.ТаблицаОтчета;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСтруктурыПодчиненностиПриАктивизацииОбласти(Элемент)
	
	Если РежимСпискаДокументов = 0 Тогда Возврат; КонецЕсли;
	
	ТекущийОбъект = Элементы.ТаблицаСтруктурыПодчиненности.ТекущаяОбласть.Расшифровка;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект) Тогда
		Элементы.СписокСоздатьНаОсновании.Доступность = Ложь;
		Возврат;
	Иначе
		Элементы.СписокСоздатьНаОсновании.Доступность = Истина;
		СписокВводаНаОсновании = СформироватьСписокВводаНаОсновании(ТекущийОбъект);
		Элементы.СписокСоздатьНаОсновании.Доступность = Элементы.СписокСоздатьНаОсновании.Доступность И (ТекущийОбъект <> Неопределено) И (СписокВводаНаОсновании.Количество() > 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрыватьВзаимодействияВСтруктуреПодчиненностиПриИзменении(Элемент)
	ОбновитьДокументыНаФорме();
	CRM_ХранилищеНастроек.Сохранить("ВыводитьАктивностиВСтруктуреПодчиненности",,ВыводитьАктивностиВСтруктуреПодчиненности); 
КонецПроцедуры

#КонецОбласти //СтруктураПодчиненности
// -СтруктураПодчиненности

&НаКлиенте
Процедура Подключаемый_ПереключитьсяНаАктивности()
	
	Элементы.Панель.ТекущаяСтраница = Элементы.стрВзаимодействия;
	Если ЗначениеЗаполнено(КлючСтрокиАктивностей) Тогда
		Элементы.ЗапланированныеАктивности.ТекущаяСтрока = КлючСтрокиАктивностей;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

