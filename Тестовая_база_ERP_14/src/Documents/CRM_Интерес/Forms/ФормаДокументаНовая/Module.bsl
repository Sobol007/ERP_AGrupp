
#Область ОписаниеПеременных

// ЛентаСобытий

&НаКлиенте
Перем БыстрыйВвод_КэшированноеВремя;

&НаКлиенте
Перем БыстрыйВвод_КэшированнаяДатаНачала;

&НаКлиенте
Перем БыстрыйВвод_АктивенАвтоПодбор;

&НаКлиенте
Перем Лента_Прокрутить;

// Конец ЛентаСобытий

// +CRM_Модуль
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

// -CRM_Модуль

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "КоманднаяПанельФормы");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		Элемент = Элементы.Найти("РедактироватьСоставДополнительныхРеквизитов");
		Если Элемент<>Неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	ТекущееПодразделение = ТекущийПользователь.Подразделение;
	
	//Элементы.Ответственный.ТолькоПросмотр = Истина;
	Элементы.Ответственный.КнопкаВыбора = Ложь;
	Элементы.Перенаправить.Видимость = Истина;
	
	СценарийИнтереса = Объект.СостояниеИнтереса.Родитель;
	РазрешатьСозданиеИнтересовПоОдномуТипуУслуги = Константы.CRM_РазрешатьСозданиеИнтересовПоОдномуТипуУслуги.Получить();
	ЗаполнитьПервичныйИнтерес(Параметры.Основание);
	ЗаполнятьПервичныйИнтерес = Константы.CRM_ЗаполнятьПервичныйИнтерес.Получить();
	
// +CRM_Модуль	
//	ВалютаРасчетов = Объект.Договор.ВалютаРасчетов;
// -CRM_Модуль	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", ВалютаРегламентированногоУчета));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере();
		
		Если Объект.Завершен Тогда
			ТекущаяЗадача = CRM_ВзаимодействияСервер.ПолучитьЗадачуЗавершенногоИнтереса(Объект.Ссылка);
		Иначе
			ТекущаяЗадача = CRM_ВзаимодействияСервер.ПолучитьЗадачуБПИнтереса(Объект.Ссылка);
		КонецЕсли;
		БизнесПроцесс = ТекущаяЗадача.БизнесПроцесс;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		Если НЕ Объект.Завершен Тогда
			Элементы.ГруппаЭтапБП.Видимость = Истина;
			//ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			ТекущаяЗадачаПредставление = Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
			ПолучитьТаблицуТипов();
		КонецЕсли;
	КонецЕсли;
	Элементы.СценарийИнтереса.ТолькоПросмотр = (ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Объект.СостояниеИнтереса.Завершено);
	
	CRM_Теги.УстановитьПараметрыВыбора(Элементы);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснование.Видимость = Ложь;
	КонецЕсли;		
	
	Если Параметры.Свойство("ОткрытиеИзТелемаркетинга") И Параметры.ОткрытиеИзТелемаркетинга Тогда 
		ОткрытиеИзТелемаркетинга = Истина;
		Если Параметры.Свойство("СозданиеИзСтрокиТелемаркетинга") И Параметры.СозданиеИзСтрокиТелемаркетинга Тогда
			СозданиеИзСтрокиТелемаркетинга = Истина;
		КонецЕсли;			
		// Значит создаём интерес из телемаркетинга.
		Если Параметры.Свойство("Содержание") Тогда
			КаналПервичногоИнтереса = ПланыВидовХарактеристик.КаналыРекламныхВоздействий.CRM_БезУказанияИсточника;
			СодержаниеВзаимодействия = Параметры.Содержание; 
		КонецЕсли;						
		Если Параметры.Свойство("Взаимодействие") Тогда
			ВидВзаимодействияИзТелемаркетинга = Параметры.Взаимодействие;
		КонецЕсли;			
	КонецЕсли;
	
	// +Софтфон
	Если Параметры.Свойство("сфпВыбранныйОбъект") Тогда
		Если Параметры.сфпВыбранныйОбъект.Свойство("ПотенциальныйКлиент") Тогда
			Объект.ПотенциальныйКлиент = Параметры.сфпВыбранныйОбъект.ПотенциальныйКлиент;
		Иначе
			Объект.Партнер = Параметры.сфпВыбранныйОбъект.Партнер;
			Объект.КонтактноеЛицо = Параметры.сфпВыбранныйОбъект.КонтактноеЛицо;
		КонецЕсли;			
	КонецЕсли;	
	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		КлючевоеФизЛицо = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьФизЛицо(Объект.КонтактноеЛицо);
		Если КлючевоеФизЛицо = Неопределено Тогда
			Если ЗначениеЗаполнено(Объект.Партнер) И Объект.Партнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо Тогда
				МассивКЛ = РегистрыСведений.CRM_СвязиФизЛицСКонтактнымиЛицамиПартнеров.ПолучитьКонтактныеЛица(Объект.Партнер);
				Если МассивКЛ.Количество() > 0 Тогда
					CRM_ФизЛицо = Объект.Партнер;
				КонецЕсли;					
			КонецЕсли;	
		Иначе
			CRM_ФизЛицо = КлючевоеФизЛицо;
		КонецЕсли;			
	КонецЕсли;		
	// -Софтфон
	
	Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Если ЗначениеЗаполнено(Объект.ПотенциальныйКлиент.Организация) Тогда
			Элементы.ДекорацияОрганизацияПК.Заголовок = "Компания: "+ Объект.ПотенциальныйКлиент.Организация;
		Иначе
			Элементы.ДекорацияОрганизацияПК.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_УправлениеКонтактнойИнформацией.ИнициализацияКонтактнойИнформации(ЭтотОбъект);
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер, "ГруппаКИПартнера", МассивТиповКИ);
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.ПотенциальныйКлиент, "ГруппаКИПК", МассивТиповКИ);
	
	CRM_КлиентыСервер.ИнициализацияКонтактныхЛицПартнера(ЭтотОбъект, МассивТиповКИ, "Объект.КонтактноеЛицо");
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Партнер, Объект.КонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ);
	
	ОбновитьТаблицуНаКонтроле();	
	СформироватьПредставлениеВложений();
	СформироватьОписаниеКаналаИсточника();
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Партнер,
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	ОбязательноВводитьРезультат = Ложь;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	ЗаполнитьПанельСостоянийИнтереса();
	
	ЗаполнитьДанныеВзаиморасчетов();
	
	ОбновитьЗаголовокФормы();
	
	// ЛентаСобытий
	Лента_ЗначенияНастроек = CRM_ЛентаСобытий.НастройкиЛенты(ТекущийПользователь);
	CRM_ЛентаСобытий.НастроитьЛенту(ЭтотОбъект);
	НастроитьОбластьВвода();
	// Конец ЛентаСобытий
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Создан'") + ": ", , ЦветаСтиля.CRM_ЧерныйЦветТекста));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Строка(Объект.Автор), , ЦветаСтиля.CRM_ОсновнойГолубой, , "Автор"));
	КомпонентыФС.Добавить(" " + Формат(Объект.Дата, "ДФ=d.MM.yyyy")+" " + НСтр("ru = 'в'") + " " + Формат(Объект.Дата, "ДФ=HH.mm"));
	Элементы.ДекорацияАвторДата.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
	Элементы.ГруппаБизнесПроцессы.Видимость = Константы.CRM_ИспользоватьБизнесПроцессы.Получить();
	Если Элементы.ГруппаБизнесПроцессы.Видимость Тогда
		ЗаполнитьДеревоПроцессов();
	КонецЕсли;		

	Если Параметры.Свойство("ПозиционироватьНаВзаимодействие") Тогда
		Если ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ДокументСсылка.CRM_Взаимодействие") И ЗначениеЗаполнено(Параметры.ПозиционироватьНаВзаимодействие.ДатаЗавершенияВзаимодействия)
			ИЛИ ТипЗнч(Параметры.ПозиционироватьНаВзаимодействие) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И Параметры.ПозиционироватьНаВзаимодействие.Выполнена Тогда
			
		Иначе
			КлючОткрываемойАктивности = Параметры.ПозиционироватьНаВзаимодействие;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Модифицированность") Тогда
		Модифицированность = Параметры.Модифицированность;
	КонецЕсли;
	
	// Управление элементами на форме
	CRM_УправлениеЭлементамиНаФормах.ПриСозданииНаСервере(ЭтотОбъект,, "ГруппаДополнительно");
	// Конец Управление элементами на форме
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
// +CRM_Модуль
	ИспользоватьРучныеСкидкиВПродажах           = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах   = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	//ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	ИспользоватьОграниченияРучныхСкидок = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям")
	                                      ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	УстановитьДоступностьКомандБуфераОбмена();

// -CRM_Модуль
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДоступностьПотенциальногоКлиента();
	ДоступностьПервичногоИнтереса();
	УстановитьДоступностьИнтереса(); 
	// +CRM_Модуль
	ОбновитьЗаголовокГруппыТовары();
	ОформлениеИзбранного();
	
	Если КлючОткрываемойАктивности <> Неопределено Тогда
		ПодключитьОбработчикОжидания("ПозиционироватьНаВзаимодействие", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЛентаСобытий
	БыстрыйВвод_КэшированноеВремя = 0;
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	БыстрыйВвод_АктивенАвтоПодбор = Ложь;
	Лента_Прокрутить = Ложь;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	// Конец ЛентаСобытий
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда Возврат; КонецЕсли;
	
	Если НЕ ПроверитьЗапланированныеАктивности() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если ОткрытиеИзТелемаркетинга И НЕ СозданиеИзСтрокиТелемаркетинга Тогда 
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Отказ							= Истина;
			ОткрытиеИзТелемаркетинга		= Ложь;
			СозданиеИзСтрокиТелемаркетинга	= Истина;
			Закрыть(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
		// Если выбрали ответственного в форме выбора по типу услуги
		Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") И ИсточникВыбора.ИмяФормы = Нстр("ru='ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги';en='Common Form.CRM_SettingUsers for ServiceType'") Тогда
			Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Пользователи") Тогда
				Если ВыбранноеЗначение <> Объект.Ответственный Тогда
					Объект.Ответственный = ВыбранноеЗначение;
					Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
					Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
					
					Если CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
						СкопироватьУровеньДоступа();
					КонецЕсли;
					
					Модифицированность = Истина;
					Записать();
					Закрыть();
				КонецЕсли;
			КонецЕсли;
	
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументПродажи.Форма.Форма" Тогда
			
			ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
			
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма" Тогда
			
			ПолучитьЗагруженныеТоварыИзХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
			ОбновитьЗаголовокГруппыТовары();
	
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛентаСобытий_Обновить" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
	ИначеЕсли ИмяСобытия = "НовоеКонтактноеЛицоЗаписано" Тогда
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец") = Объект.Партнер Тогда
			Объект.КонтактноеЛицо = Параметр;
			НастроитьОбластьВвода();
			КонтактноеЛицоПриИзменении();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "КонтактноеЛицоЗаписано" Тогда
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец") = Объект.Партнер Тогда
			КонтактноеЛицоПриИзменении();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НовыйПотенциальныйКлиентЗаписан" И Параметр = Объект.ПотенциальныйКлиент Тогда
		
		ПотенциальныйКлиентПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "ЗаписьПартнера" И Параметр = Объект.Партнер Тогда
		
		ПартнерПриИзмененииНаСервере();
		
	ИначеЕсли ИмяСобытия = "Создан новый партнер" Тогда
		
		Если ТипЗнч(Источник) = Тип("УправляемаяФорма") Тогда
			Попытка
				бФормаОткрытаИзФормыЭтогоСобытия = (Источник.ВладелецФормы = ЭтотОбъект ИЛИ Источник.ВладелецФормы.ВладелецФормы = ЭтотОбъект);
			Исключение
				бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
			КонецПопытки;
		Иначе
			бФормаОткрытаИзФормыЭтогоСобытия = Ложь;
		КонецЕсли;
		Если бФормаОткрытаИзФормыЭтогоСобытия Тогда
			Если ТипЗнч(Параметр) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер = Параметр;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр;
				КонтактноеЛицоПриИзменении();
			КонецЕсли;
			НастроитьОбластьВвода();
			ДоступностьПотенциальногоКлиента();
			Модифицированность = Истина;
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗаписатьИнтерес" Тогда
		Если Параметр = ЭтотОбъект.УникальныйИдентификатор Тогда
			Записать();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзмененОтветственныйПоИнтересу" И Источник = ЭтотОбъект Тогда
		ОтветственныйПриИзменении(Элементы.Ответственный);
	ИначеЕсли ИмяСобытия = "ОбновленыДанныеСобытия" 
		И (СтрНайти(Источник.ИмяФормы, "CRM_БизнесПроцесс") > 0 ИЛИ СтрНайти(Источник.ИмяФормы, "ЗадачаИсполнителя") > 0) Тогда
		ЗаполнитьДеревоПроцессов();
	ИначеЕсли ИмяСобытия = "СтартованНовыйНезависимыйБП" И Объект.Ссылка = Параметр Тогда
		ЗаполнитьДеревоПроцессов();
	ИначеЕсли ИмяСобытия = "ИзменениеСпискаПрисоединенныхФайлов" И Объект.Ссылка = Параметр Тогда
		СформироватьПредставлениеВложений();
	ИначеЕсли ИмяСобытия = "Запись_Файл" И (ТипЗнч(Источник) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")
		ИЛИ ТипЗнч(Источник) = Тип("Массив") И Источник.Количество()>0 И ТипЗнч(Источник[0]) = Тип("СправочникСсылка.CRM_ИнтересПрисоединенныеФайлы")) Тогда
		СформироватьПредставлениеВложений();
	// +Софтфон
	ИначеЕсли (ИмяСобытия = "СозданКонтактДляИнтереса") И Параметр.Свойство("сфпИнтерес") И Параметр.сфпИнтерес = Строка(ЭтотОбъект.УникальныйИдентификатор) Тогда
		Если Параметр.Свойство("Контакт") Тогда
			Если ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
				Объект.Партнер = CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Параметр.Контакт, "Владелец");
				ПартнерПриИзменении(Неопределено);
				Объект.КонтактноеЛицо	= Параметр.Контакт;
				КонтактноеЛицоПриИзменении();
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.Партнеры") Тогда
				Объект.Партнер			= Параметр.Контакт;
				ПартнерПриИзменении(Неопределено);
			ИначеЕсли ТипЗнч(Параметр.Контакт) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
				Объект.ПотенциальныйКлиент = Параметр.Контакт;
				ДоступностьПотенциальногоКлиента();
				Элементы.ФормасфпСоздатьКонтакт.Видимость = Ложь;
			КонецЕсли;
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьПланировщик" Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
		//Если Параметр = Объект.Ссылка Тогда
		//	Элементы.ЗапланированныеАктивности.Обновить();
		//	Элементы.ИсторияВзаимодействий.Обновить();
		//	Модифицированность = Истина;
		//КонецЕсли;
		//Подключаемый_АктивностиПриАктивизацииСтроки();
	// -Софтфон
	ИначеЕсли (ИмяСобытия = "Запись_ЗадачаИсполнителя" ИЛИ ИмяСобытия = "СохраненаЛичнаяЗадача" ИЛИ ИмяСобытия = "СохраненоПоручение" ИЛИ ИмяСобытия = "ЗадачаВыполнена") Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		
		ЗаполнитьДеревоПроцессов();
		
	ИначеЕсли ИмяСобытия = "Запись_ЗаказКлиента" Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРискиКлиент.ОбработкаОповещения(ЭтотОбъект, Неопределено, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	CRM_Теги.ПриЧтенииНаСервере(ЭтотОбъект, Элементы);
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ДокументЗаписан = Ложь;
	Если Не Объект.Завершен Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не выбран основной контакт клиента!';en='Incomplete contact'"));
				Отказ = Истина;
			КонецЕсли;	
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен потенциальный клиент';en='Missing potential customer'"));
			Отказ = Истина;
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги, запись документа отменена!';en='Active lead of customer on the chosen type of service was discovered, the document record was canceled!'"));
				Отказ = Истина;
			КонецЕсли;	
		Иначе
			// С001031210
			// Если НЕ (Объект.СостояниеИнтереса = ПредопределенноеЗначение("Справочник.CRM_СостоянияИнтересов.ИнтересПотерян")) Тогда
			//	Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
			//		ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес потенциального клиента, запись документа отменена!';en='The active lead of the potential customer is detected, the record of the document is canceled!'"));
			//		Отказ = Истина;
			//	КонецЕсли;	
			// КонецЕсли;
		КонецЕсли;	
		Если CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.СостояниеИнтереса, "ОбязательноеЗаполнениеКлиента") Тогда
			Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнен клиент';en='The customer is not filled in'"));
				Отказ = Истина;
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И CRM_ОбщегоНазначенияСервер.ЗначениеРеквизитаОбъекта(Объект.Партнер, "ЮрФизЛицо") <> ПредопределенноеЗначение("Перечисление.КомпанияЧастноеЛицо.ЧастноеЛицо") Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено контактное лицо';en='Not filled in contact person'"));
				Отказ = Истина;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем, что поля подразделение и офис заполнены.
	Если Не ЗначениеЗаполнено(Объект.Подразделение)  Тогда
		ПодразделениеПользователя = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
		Если ЗначениеЗаполнено(ПодразделениеПользователя) Тогда
			Объект.Подразделение	= ПодразделениеПользователя;
		Иначе
			ТекстСообщения = Нстр("ru='У текущего пользователя не заполнено подразделение!';en='The current user does not have a department!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ответственный);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Офис)  Тогда		
		ОфисПодразделения = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");			
		Если ЗначениеЗаполнено(ОфисПодразделения) Тогда
			Объект.Офис	= ОфисПодразделения;
		Иначе
			ТекстСообщения = Нстр("ru='У подразделения пользователя не заполнен офис!';en=""The user's office does not have an office full!""");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Подразделение);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	НовыйИнтерес = Объект.Ссылка.Пустая();
	
КонецПроцедуры // ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.Ссылка.Ответственный <> Объект.Ответственный Тогда
		
		CRM_ОповещенияСервер.УдалитьОповещения(Объект.Ссылка, Объект.Ответственный);			
		
		Объект.Описание = НСтр("ru ='Переадресовано от '") + Объект.Ответственный + " " + CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса()
		+ НСтр("ru =' (предыдущее состояние ""'") + Объект.СостояниеИнтереса + """)" + Символы.ПС + Объект.Описание + Символы.ПС;
		МассивИнтересов = Новый Массив;
		МассивИнтересов.Добавить(Объект.Ссылка);
		CRM_ОбщегоНазначенияСервер.УстановитьНовогоОтветственногоВПодчиненныхВзаимодействиях(МассивИнтересов, Объект.Ответственный);
		Если Не Объект.Ответственный = ТекущийПользователь Тогда
			// Если объект перенаправил на себя текущий пользователь, то оповещять его об этом не надо.
			ПараметрыОповещения = CRM_ОповещенияСервер.ПолучитьПараметрыОповещения(Объект.Ответственный,Справочники.CRM_ВидыОповещений.ОповещатьОПереадресованныхДокументахЗадачах, Объект.Ссылка);
			Если НЕ (ПараметрыОповещения = Неопределено) Тогда
				CRM_ОповещенияСервер.ДобавитьОповещение(ПараметрыОповещения);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
			МассивЗадач = Новый Массив;
			МассивЗадач.Добавить(БизнесПроцесс);
			CRM_БизнесПроцессыИЗадачиСервер.УстановитьНовогоОтветственного(МассивЗадач, Объект.Ответственный);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя успешно завершать интерес потенциального клиента. Зарегистрируйте партнера.';en='It is impossible to successfully complete the lead of a potential customer. Register a partner.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка взаимодействий. если интерес не завршен и нет запланнированного взаимодействия - не даем записать
	// документ.
	//Если НЕ ПроверитьЗапланированныеАктивности() Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	
	// Проверка заполнения ожидаемой выручки.
	РезультатПоОжидаемойВыручке = ПроверитьЗаполнениеОжидаемойВыручки();
	
	Если Не Отказ И РезультатПоОжидаемойВыручке Тогда
		Отказ = РезультатПоОжидаемойВыручке;
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаписатьПервичныйИнтерес(ТекущийОбъект);
	ОбновитьЗаголовокФормы();
	
	Если ДанныеВыбранногоСостоянияИнтереса <> Неопределено Тогда
		ПеревестиИнтересВСледующееСостояниеПриЗаписиСервер(ТекущийОбъект);
	КонецЕсли;
	
	Если Не Отказ Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент) 
				И ЗначениеЗаполнено(ТекущийОбъект.Партнер)
				И НЕ ЗначениеЗаполнено(ТекущийОбъект.ПотенциальныйКлиент.Партнер) 
				Тогда
				
			ПотенциальныйКлиентОбъект = ТекущийОбъект.ПотенциальныйКлиент.ПолучитьОбъект();
			ПотенциальныйКлиентОбъект.Партнер = ТекущийОбъект.Партнер;
			ПотенциальныйКлиентОбъект.Записать();
			
			ПеревеситьДокументыНаПартнера(ТекущийОбъект.ПотенциальныйКлиент, ТекущийОбъект.Партнер);
			
		КонецЕсли;
	КонецЕсли;
		
	//ОбновитьСтатусыДокумента();
	
КонецПроцедуры // ПриЗаписиНаСервере()

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_Интерес", Объект.Ссылка);
	Оповестить("ОбновитьАРМ");
	// +СофтФон
	Если сфпСофтФонПроСервер.сфпИспользоватьСофтФон() Тогда
		Если ЗначениеЗаполнено(Объект.ДокументОснование) 
			И (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ТелефонныйЗвонок")) Тогда
			ОснованиеЗвонка = сфпСофтФонПроСервер.сфпПолучитьЗначениеРеквизита(Объект.ДокументОснование, "ВзаимодействиеОснование");
			Если ТипЗнч(ОснованиеЗвонка) = Тип("ДокументСсылка.CRM_Телемаркетинг") Тогда
				СтруктураОповещения = Новый Структура;
				СтруктураОповещения.Вставить("Основание",		ОснованиеЗвонка);
				СтруктураОповещения.Вставить("Звонок",			Объект.ДокументОснование);
				СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
				СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
				СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
				Оповестить("СофтФон_ЗаписьИнтереса", СтруктураОповещения);
			КонецЕсли;
		КонецЕсли;
		Если сфпСофтФонПроСервер.сфпИспользоватьCoMagic() Тогда
			//сфпCoMagicIDЗвонка = сфпПолучитьИдентификаторCoMagicУСвязанныхТелефонныхЗвонков(Объект.Ссылка);
			//Если НЕ ПустаяСтрока(сфпCoMagicIDЗвонка) Тогда
			//	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
			//		сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.КонтактноеЛицо, сфпCoMagicIDЗвонка);
			//	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
			//		сфпСофтФонПроСервер.сфпЗаписатьIDCoMagic(Объект.Партнер, сфпCoMagicIDЗвонка);
			//	КонецЕсли;	
			//	сфпУправлениеВидимостьюКнопокОткрытьВCoMagic();
			//КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	// -СофтФон
	
	Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") 
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы, "Объект")
		И ПроверитьНаличиеРеквизитаУФормы(ВладелецФормы.Объект, "Ссылка")
		И ((ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_Телемаркетинг")) 
		ИЛИ (ТипЗнч(ВладелецФормы.Объект.Ссылка) = Тип("ДокументСсылка.CRM_РассылкаЭлектронныхПисем"))) Тогда
			СтруктураОповещения = Новый Структура;
			СтруктураОповещения.Вставить("Партнер",			Объект.Партнер);
			СтруктураОповещения.Вставить("КонтактноеЛицо",	Объект.КонтактноеЛицо);
			СтруктураОповещения.Вставить("Интерес",			Объект.Ссылка);
			СтруктураОповещения.Вставить("ПартнерСтрокой",	Объект.Описание);
			Оповестить("ОбновитьСтрокуВТелемаркетинге", СтруктураОповещения);
	КонецЕсли;
	
	ДокументЗаписан = Истина;
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		СкорретироватьРеквизитыБизнесПроцесса();
	КонецЕсли;
	
	ТекущееСостояние = Объект.СостояниеИнтереса;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	ПроверкаЗаполнения(ПроверяемыеРеквизиты);
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработатьИнтересЗавершение(Результат, Дополнительно) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнтересЗавершениеНаСервере(Результат, Дополнительно)
	Если Объект.ВерсияДанных <> Объект.Ссылка.ВерсияДанных Тогда
		Прочитать();
	КонецЕсли;
	Если Результат.Свойство("Успех") Тогда
		Если Результат.Успех Тогда
			ЗаполнитьЗначенияСвойств(Объект, Результат.ИнтересОбъект,, "CRM_Теги, ДополнительныеРеквизиты, " + ?(CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM(), "Запасы", "Товары, СкидкиНаценки"));
			Если Результат.Свойство("КаналПервичногоИнтереса") Тогда
				КаналПервичногоИнтереса = Результат.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса = Результат.ИсточникПервичногоИнтереса;
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.Сообщение);
		КонецЕсли;
	Иначе	
		ПеревестиИнтересВСледующееСостояниеСервер(Дополнительно.Состояние, Дополнительно.Этап);
	КонецЕсли;

	Записать();
	
	ЗаполнитьПанельСостоянийИнтереса();
	
	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(Объект.СостояниеИнтереса);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса", Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
КонецПроцедуры

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеСервер(СостояниеИнтереса, Этап = Неопределено)
	
	Объект.СостояниеИнтереса = СостояниеИнтереса;
	Объект.ВероятностьСделки = СостояниеИнтереса.ВероятностьСделки;
	Объект.Завершен = СостояниеИнтереса.Завершено;
	
	Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
		Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
		ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
		Иначе
			ТипАктивности = Неопределено;
		КонецЕсли;
		РегистрыСведений.CRM_ЗапланированныеАктивности.ЗавершитьАктивности(Объект.Ссылка, "", ТипАктивности, СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
	КонецЕсли;
	
	МассивВидовВзаимодействий = Справочники.CRM_ВидыВзаимодействий.ПолучитьАвтоСоздаваемыеПоСостояниюИнтереса(Объект.СостояниеИнтереса);
	Если МассивВидовВзаимодействий.Количество()>0 Тогда
		Для каждого ВидНовогоВзаимодействия из МассивВидовВзаимодействий Цикл
			ПлановаяДата = ТекущаяДата()+ВидНовогоВзаимодействия.ПлановыйСрокДней*60*60*24;
			НовоеВзаимодействие = Документы.CRM_Взаимодействие.СоздатьДокумент();
			НовоеВзаимодействие.Автор					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.ВидВзаимодействия		= ВидНовогоВзаимодействия;
			НовоеВзаимодействие.Тема					= ВидНовогоВзаимодействия.Описание;
			НовоеВзаимодействие.ДокументОснование		= Объект.Ссылка;
			НовоеВзаимодействие.СтатусВзаимодействия	= Справочники.CRM_СостоянияСобытий.Запланировано;
			НовоеВзаимодействие.Партнер					= Объект.Партнер;
			НовоеВзаимодействие.КонтактноеЛицо			= Объект.КонтактноеЛицо;
			НовоеВзаимодействие.Подразделение			= Объект.Подразделение;
			НовоеВзаимодействие.Автор					= ТекущийПользователь;
			НовоеВзаимодействие.Дата					= ТекущаяДатаСеанса();
			НовоеВзаимодействие.Баллы					= ВидНовогоВзаимодействия.Баллы;
			НовоеВзаимодействие.ПлановаяДата			= ПлановаяДата;
			НовоеВзаимодействие.Ответственный			= Объект.Ответственный;
			НовоеВзаимодействие.Организация				= Объект.Организация;
			НовоеВзаимодействие.ПотенциальныйКлиент		= Объект.ПотенциальныйКлиент;
			НовоеВзаимодействие.НаВесьДень = (НовоеВзаимодействие.ПлановаяДата = НачалоДня(НовоеВзаимодействие.ПлановаяДата));
			НовоеВзаимодействие.Записать();
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаПриИзменении(Элемент)
	ДоступностьПервичногоИнтереса();
	Если ИсточникПервичногоИнтереса = Неопределено ИЛИ ИсточникПервичногоИнтереса.Пустая() Тогда
		Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Строка(CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(КаналПервичногоИнтереса, "ТипЗначения"));
	КонецЕсли;	
КонецПроцедуры // КаналПервичногоИнтересаПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "КаналПервичногоИнтереса".
//
Процедура КаналПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",		Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока",	КаналПервичногоИнтереса);
	ОткрытьФорму("ПланВидовХарактеристик.КаналыРекламныхВоздействий.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
КонецПроцедуры // КаналПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ИсточникПервичногоИнтереса".
//
Процедура ИсточникПервичногоИнтересаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Если ТипПВХ(КаналПервичногоИнтереса)= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("РежимВыбора",		Истина);
			ПараметрыФормы.Вставить("ТекущаяСтрока",	ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СкрытьПодменюВид",	Истина);
			ФормаВыбора = ПолучитьФорму("Справочник.МаркетинговыеМероприятия.ФормаВыбора", ПараметрыФормы, Элемент, ЭтотОбъект);
			ЭлементОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("Завершено");
			ЭлементОтбора.ПравоеЗначение	= Истина;
			ЭлементОтбора.Использование		= Истина;
			ГруппаОтбора					= ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы			= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("ДатаОкончания");
			ЭлементОтбора.ПравоеЗначение	= Дата("00010101");
			ЭлементОтбора.Использование		= Истина;
			ЭлементОтбора					= ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("CRM_ДатаАктуальности");
			ЭлементОтбора.ПравоеЗначение	= НачалоДня(ТекущаяДата());
			ЭлементОтбора.Использование		= Истина;
			ФормаВыбора.Открыть();
		ИначеЕсли ТипПВХ(КаналПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			СтандартнаяОбработка	= Ложь;
			ДополнительныеПараметры	= Новый Структура("Элемент", Элемент);
			ОписаниеВыбораПартнера	= Новый ОписаниеОповещения("ОбработкаВыбораПартнераИсточника", ЭтотОбъект, ДополнительныеПараметры);
			ПараметрыФормы			= Новый Структура;
			Если ЗначениеЗаполнено(ИсточникПервичногоИнтереса) И (ТипЗнч(ИсточникПервичногоИнтереса) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров")) Тогда
				ПараметрыФормы.Вставить("ТекущаяСтрока", CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ИсточникПервичногоИнтереса, "Владелец"));
			КонецЕсли;	
			ОткрытьФорму("Справочник.Партнеры.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно, , ОписаниеВыбораПартнера);
		КонецЕсли;	
	КонецЕсли;
	ДоступностьПервичногоИнтереса();
КонецПроцедуры // ИсточникПервичногоИнтересаНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "ТипУслуги".
//
Процедура ТипУслугиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если НЕ РазрешатьСозданиеИнтересовПоОдномуТипуУслуги И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!';en='Active lead of customer on the chosen type of service is found out!'"));
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			Если НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтересаПотенциальногоКлиента(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес потенциального клиента!';en='Active lead of the potential customer is found out!'"));
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ТипУслугиПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "ТипУслуги".
//
Процедура ТипУслугиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтандартнаяОбработка	= Ложь;
		ПараметрыФормы			= Новый Структура;
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если МассивСвоихТиповУслуг.Количество() > 0 Тогда
			// Если есть массив своих типов услуг, то накладываем фильтр.
			ПараметрыФормы.Вставить("МассивСвоихТиповУслуг", МассивСвоихТиповУслуг);
		КонецЕсли;	
		Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.ТипУслуги);
		КонецЕсли;	
		ОткрытьФорму("Справочник.CRM_ТипУслуги.ФормаВыбора", ПараметрыФормы, Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;	
КонецПроцедуры // ТипУслугиНачалоВыбора()

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФайлыЗавершение", ЭтотОбъект);
	ПроверкаВопросЗаписатьДанные(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ОтветственныйПриИзмененииНаСервере()
	Объект.Подразделение = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Ответственный, "Подразделение");
	Объект.Офис	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.Подразделение, "CRM_офис");
	ПодразделениеПриИзмененииСервере();
КонецПроцедуры	

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Ответственный".
//
Процедура ОтветственныйПриИзменении(Элемент)
	ОтветственныйПриИзмененииНаСервере();
КонецПроцедуры // ОтветственныйПриИзменении()

&НаСервере
Процедура ПодразделениеПриИзмененииСервере()
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		// Если типа услуги нет в массиве своих услуг, то его очищаем.
		МассивСвоихТиповУслуг	= CRM_ОбщегоНазначенияСервер.ПолучитьМассивДоступныхТиповУслугПодразделения(Объект.Подразделение);
		Если (МассивСвоихТиповУслуг.Количество() > 0) И (МассивСвоихТиповУслуг.Найти(Объект.ТипУслуги) = Неопределено) Тогда
			Объект.ТипУслуги = Справочники.CRM_ТипУслуги.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Подразделение".
//
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервере();		
КонецПроцедуры // ПодразделениеПриИзменении()

&НаСервере
Процедура ПотенциальныйКлиентПриИзмененииНаСервере()
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.ПотенциальныйКлиент, "ГруппаКИПК", МассивТиповКИ);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Партнер".
//
Процедура ПартнерПриИзменении(Элемент)
	
	Если Элемент<>Неопределено Тогда
		КаналПервичногоИнтереса	= Неопределено;
		ИсточникПервичногоИнтереса	= Неопределено;
	КонецЕсли;
	ПартнерПередИзменением = Партнер;
	Партнер = Объект.Партнер;
	
	ДополнительныеПараметры = Новый Структура("ПартнерПередИзменением", ПартнерПередИзменением);
	Если ПартнерПередИзменением <> Объект.Партнер Тогда
		
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			Если ЗначениеЗаполнено(Объект.ТипУслуги) 
				И НЕ CRM_ОбщегоНазначенияКлиент.ПроверитьВозможностьЗаписиИнтереса(Объект) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обнаружен активный интерес клиента по выбранному типу услуги!';en='Active lead of customer on the chosen type of service is found out!'"));
			КонецЕсли;	
		КонецЕсли;
		СтруктураДанные = ПолучитьДанныеПартнерПриИзменении(Объект.Дата, Объект.Валюта, Объект.Партнер, Объект.Организация, Объект.Проект);
		
		Объект.КонтактноеЛицо = СтруктураДанные.ОсновноеКонтактноеЛицо;
		КонтактноеЛицоПриИзменении();		
		
	    СформироватьОписаниеКаналаИсточника();
		ДоступностьПервичногоИнтереса();
		
		ОбновитьЗаголовокФормы();
		ОбновленПартнерКонтакт = Истина;
		
		ПартнерПриИзмененииНаСервере();
		
		// ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		// Отображать не по ссылке, а по ИНН, НЕ сохраняя в кэше.
		ЭтотОбъект.ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения.
		ОбновитьОтображениеИндексыСПАРК();
		// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ОбновитьОтображениеИндексов.
		
		ПартнерПриИзмененииСервер();
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
		Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПартнерПриИзменении()


&НаСервере
// Процедура - обработчик события "ПриИзменении" элемента формы "КонтактноеЛицо".
//
Процедура КонтактноеЛицоПриИзменении()
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Партнер, Объект.КонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ);

КонецПроцедуры // КонтактноеЛицоПриИзменении()

&НаКлиенте
Процедура ДекорацияАвторДатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВсеПроцессыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументыНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбъектОтбора", Объект.Ссылка);
	
	ОткрытьФорму("ОбщаяФорма.CRM_СтруктураПодчиненностиИнтереса", ПараметрыФормы);
	
КонецПроцедуры

#Область КонтактнаяИнформация_КонтактныеЛица

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНажатие(Команда)
	
	CRM_УправлениеКонтактнойИнформациейКлиент.КонтактнаяИнформацияНажатие(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаНажатие(Команда)
	
	CRM_КлиентыКлиент.КонтактныеЛицаНажатие(ЭтотОбъект, Команда);
	Если Команда.Имя = "СделатьКЛОсновным" Тогда
		Если Элементы["ГруппаСписокКЛ"].Скрыта() Тогда
			КонтактноеЛицоПриИзменении();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Контактное лицо не выбрано!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактныеЛицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	CRM_КлиентыКлиент.КонтактныеЛицаВыбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_ПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСсылки = ДанныеСобытия.href;
	Если Не ЗначениеЗаполнено(ДанныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаКоманд = CRM_ЛентаСобытийКлиент.ИменаКомандОбъектовЛенты();
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		ПозицияРазделителя = СтрНайти(ДанныеСсылки, ИмяКоманды);
		Если ПозицияРазделителя > 0 Тогда
			ПараметрКоманды = Сред(ДанныеСсылки, ПозицияРазделителя + СтрДлина(ИмяКоманды));
			CRM_ЛентаСобытийКлиент.ВыполнитьКомандуЛенты(ИмяКоманды, ПараметрКоманды, ЭтотОбъект);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	ПозицияРазделителя = СтрНайти(ДанныеСсылки, "ЛентаЗагрузитьЕще");
	Если ПозицияРазделителя > 0 Тогда
		Лента_КоличествоОбъектовИстории = Лента_КоличествоОбъектовИстории + 50;
		Лента_Прокрутить = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	ПерейтиПоНавигационнойСсылке(ДанныеСсылки);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборВсеСобытияПриИзменении(Элемент)
	
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	ПометкаВсеСобытия = НастройкаВсеСобытия.Пометка;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		НастройкаОтбора.Пометка = ПометкаВсеСобытия;
	КонецЦикла;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ОтборПриИзменении(Элемент)
	
	ПометкаСобытие = Истина;
	Для Сч = 1 По Лента_Отбор.Количество()-1 Цикл
		НастройкаОтбора = Лента_Отбор.Получить(Сч);
		ПометкаСобытие = Мин(ПометкаСобытие, НастройкаОтбора.Пометка);
	КонецЦикла;
	НастройкаВсеСобытия = Лента_Отбор.Получить(0);
	НастройкаВсеСобытия.Пометка = ПометкаСобытие;
	
	Если НастройкаВсеСобытия.Пометка Тогда
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрНеактивный;
	Иначе
		Элементы.Лента_ПоказатьОтборы.Картинка = Лента_КартинкаФильтрАктивный;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

// Общее

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаПриИзменении(Элемент = Неопределено)
	
	Если БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) И БыстрыйВвод_КэшированноеВремя > 0 Тогда
		БыстрыйВвод_ДатаНачала = БыстрыйВвод_ДатаНачала + БыстрыйВвод_КэшированноеВремя;
		БыстрыйВвод_КэшированноеВремя = 0;
	КонецЕсли;
	
	Если НачалоДня(БыстрыйВвод_КэшированнаяДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания) Тогда
		ВремяЗавершения = БыстрыйВвод_ДатаОкончания - НачалоДня(БыстрыйВвод_ДатаОкончания);
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаНачала) + ВремяЗавершения;
	КонецЕсли;
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(БыстрыйВвод_ДатаНачала) Тогда
		ПараметрыОткрытия.Вставить("ДатаПоУмолчанию", БыстрыйВвод_ДатаНачала);
	КонецЕсли;
	БыстрыйВвод_КэшированноеВремя = БыстрыйВвод_ДатаНачала - НачалоДня(БыстрыйВвод_ДатаНачала);
	CRM_ВзаимодействияКлиент.ДатаВзаимодействияНачалоВыбора(Объект, Элемент, ДанныеВыбора,
		СтандартнаяОбработка, ПараметрыОткрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаНачала,
		Элемент, БыстрыйВвод_ДатаНачала, Ложь, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяНачалаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаНачала = ВыбранныйЭлемент.Значение;
	БыстрыйВвод_ДатаНачалаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДатаОкончанияПриИзменении(Элемент)
	
	Если БыстрыйВвод_ДатаНачала > БыстрыйВвод_ДатаОкончания Тогда
		БыстрыйВвод_ДатаОкончания = БыстрыйВвод_ДатаНачала + 3600;
		БыстрыйВвод_ЗадачаВариантСрока = ПредопределенноеЗначение("Перечисление.CRM_ВариантыУстановкиДаты.ЧерезЧас");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение", ЭтотОбъект);
	ДобавлятьДлительность = (НачалоДня(БыстрыйВвод_ДатаНачала) = НачалоДня(БыстрыйВвод_ДатаОкончания));
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, БыстрыйВвод_ДатаОкончания,
		Элемент, БыстрыйВвод_ДатаНачала, ДобавлятьДлительность, ОповещениеЗавершения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВремяОкончанияНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ДатаОкончания = ВыбранныйЭлемент.Значение;
	
КонецПроцедуры

// Примечание

&НаКлиенте
Процедура БыстрыйВвод_ПримечаниеТемаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТемаЗаполнена = ЗначениеЗаполнено(Текст);
	ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
	БыстрыйВвод_Тема = Текст;
	
КонецПроцедуры

// Взаимодействие

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидПриИзменении(Элемент)
	
	БыстрыйВвод_Тема = CRM_ЛентаСобытий.ЗначениеРеквизитаОбъекта(БыстрыйВвод_ВзаимодействиеВид, "Описание");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеВидОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВзаимодействиеНаВесьДеньПриИзменении(Элемент)
	
	Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = (Не БыстрыйВвод_ВзаимодействиеНаВесьДень);
	
	Если БыстрыйВвод_ВзаимодействиеНаВесьДень Тогда
		ПараметрыДня = CRM_ЛентаСобытий.ПараметрыРабочегоДня(ТекущийПользователь);
		БыстрыйВвод_ДатаНачала = НачалоДня(БыстрыйВвод_ДатаНачала) + (ПараметрыДня.ВремяНачала - Дата('00010101'));
		БыстрыйВвод_ДатаОкончания = НачалоДня(БыстрыйВвод_ДатаОкончания) + (ПараметрыДня.ВремяОкончания - Дата('00010101'));
	КонецЕсли;
	
КонецПроцедуры

// Задача

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаПриИзменении(Элемент)
	
	БыстрыйВвод_ДатаОкончания = CRM_ЛентаСобытий.ДатаОкончанияПоВарианту(БыстрыйВвод_ДатаНачала, БыстрыйВвод_ЗадачаВариантСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ВариантСрокаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Письмо

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	БыстрыйВвод_ПисьмоУчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(БыстрыйВвод_ПисьмоУчетнаяЗапись) Тогда
		ПоказатьЗначение(, БыстрыйВвод_ПисьмоУчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПисьмоОтправительОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейПриИзменении(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейПисьма;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейКопий;
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ТекстРедактирования = БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстРедактирования) Тогда
		ЭтотОбъект[ИмяТаблицы].Очистить();
		Возврат;
	КонецЕсли;
	
	Длина = СтрДлина(ТекстРедактирования);
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	Элемент.УстановитьГраницыВыделения(1, НачалоКолонки, 1, КонецКолонки);
	
	ЕстьОшибки = Ложь;
	Результат = CRM_ОбщегоНазначенияКлиентСервер.АнализСтрокиАдресовЭП(ТекстРедактирования,, ЕстьОшибки);
	Если ЕстьОшибки Тогда
		Для каждого Адрес Из Результат Цикл
			Если Адрес.КодОшибки <> 0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Адрес.Сообщение,, ИмяЭлемента);
			КонецЕсли;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СоответствияАдресовИКонтактов = Новый СписокЗначений;
	ДанныеПолучателей = ЭтотОбъект[ИмяТаблицы];
	СтруктураДанных = CRM_ЛентаСобытий.ПреобразоватьИменаПолучателей(ДанныеПолучателей,
		БыстрыйВвод_ПисьмоУчетнаяЗапись, Результат, СоответствияАдресовИКонтактов);
	
	ЭтотОбъект[ИмяТаблицы].Очистить();
	Для Каждого ДанныеПолучателя Из СтруктураДанных.Получатели Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект[ИмяТаблицы].Добавить(), ДанныеПолучателя);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ГруппаАдресов = "Кому";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ГруппаАдресов = "Копии";
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ГруппаАдресов = "Скрытые";
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбранных = Новый СписокЗначений;
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучатели), "Кому");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиКопий), "Копии");
	СписокВыбранных.Добавить(УправлениеЭлектроннойПочтойКлиент.ТаблицуКонтактовВМассив(БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий), "Скрытые");
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",		БыстрыйВвод_ПисьмоУчетнаяЗапись);
	ПараметрыОткрытия.Вставить("СписокВыбранных",	СписокВыбранных);
	ПараметрыОткрытия.Вставить("ГруппаПоУмолчанию",	ГруппаАдресов);
	ПараметрыОткрытия.Вставить("ГруппаАдресов",		ГруппаАдресов);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура);
	ОткрытьФорму("ОбщаяФорма.CRM_АдреснаяКнига", ПараметрыОткрытия,,,,, ОповещениеЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если (ТипЗнч(Результат) <> Тип("Массив")) И (ТипЗнч(Результат) <> Тип("Соответствие")) Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйВвод_ПисьмоПолучатели.Очистить();
	БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
	БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
	
	Для Каждого Элемент Из Результат Цикл
		
		Если Элемент.Группа = "Кому" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ИначеЕсли Элемент.Группа = "Копии" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ИначеЕсли Элемент.Группа = "Скрытые" Тогда
			ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		Иначе
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ",", "");
		НоваяСтрока.Представление = СтрЗаменить(НоваяСтрока.Представление, ";", "");
		
	КонецЦикла;
	
	ДанныеКонтактов = Новый Структура;
	ДанныеКонтактов.Вставить("Кому", БыстрыйВвод_ПисьмоПолучатели);
	ДанныеКонтактов.Вставить("Копии", БыстрыйВвод_ПисьмоПолучателиКопий);
	ДанныеКонтактов.Вставить("Скрытые", БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий);
	
	ПредставленияКонтактов = CRM_ЛентаСобытий.ПредставленияКонтактовПисьма(ДанныеКонтактов);
	
	БыстрыйВвод_ПисьмоСписокПолучателейПисьма		= ПредставленияКонтактов.Кому;
	БыстрыйВвод_ПисьмоСписокПолучателейКопий		= ПредставленияКонтактов.Копии;
	БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий	= ПредставленияКонтактов.Скрытые;
	
	ВидимостьПолучателейКопий = БыстрыйВвод_ПисьмоПолучателиКопий.Количество() > 0;
	ВидимостьПолучателейСкрытыхКопий = БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Количество() > 0;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейКопий", "Видимость", ВидимостьПолучателейКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейКопии", "Видимость", Не ВидимостьПолучателейКопий);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий", "Видимость", ВидимостьПолучателейСкрытыхКопий);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"БыстрыйВвод_ПоказатьПолучателейСкрытойКопии", "Видимость", Не ВидимостьПолучателейСкрытыхКопий);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ЛОжь;
	
	ИмяЭлемента = Элемент.Имя;
	Если ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейПисьма" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучатели";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Кому)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Копии)'");
	ИначеЕсли ИмяЭлемента = "БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий" Тогда
		ИмяТаблицы = "БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий";
		ЗаголовокСписка = НСтр("ru = 'Список получателей письма (Скрытые копии)'");
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭтотОбъект[ИмяТаблицы].Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокСписка);
	ПараметрыОткрытия.Вставить("МассивПолучателей", ЭтотОбъект[ИмяТаблицы]);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.CRM_ФормаСпискаПолучателей", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не БыстрыйВвод_АктивенАвтоПодбор Тогда
		Возврат;
	КонецЕсли;
	
	НачалоСтроки = 0;
	КонецСтроки = 0;
	НачалоКолонки = 0;
	КонецКолонки = 0;
	Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	
	ТекстДоМаркера = Лев(Элемент.ТекстРедактирования, КонецКолонки-1);
	ТекстПослеМаркера = Сред(Элемент.ТекстРедактирования, КонецКолонки);
	
	СборнаяСтрока = "";
	
	Если Найти(ТекстДоМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
		Для Индекс = 0 По МассивПодстрок.ВГраница() Цикл
			Если Индекс = (МассивПодстрок.Количество()-1) Тогда
				Продолжить;
			КонецЕсли;
			СборнаяСтрока = СборнаяСтрока + ?(СборнаяСтрока="", "", ",") + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	СборнаяСтрока = СборнаяСтрока +?(СборнаяСтрока="", "", ",")+ ВыбранноеЗначение;
	
	Если Найти(ТекстПослеМаркера, ",") > 0 Тогда
		МассивПодстрок = СтрРазделить(ТекстПослеМаркера, ",");
		Для Индекс = 1 По МассивПодстрок.ВГраница() Цикл
			СборнаяСтрока = СборнаяСтрока + "," + МассивПодстрок[Индекс];
		КонецЦикла;
	КонецЕсли;
	
	ВыбранноеЗначение = СборнаяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СписокПолучателейАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	БыстрыйВвод_АктивенАвтоПодбор = (Не Ожидание = 0);
	
	Если БыстрыйВвод_АктивенАвтоПодбор Тогда
		
		ДанныеВыбора = Неопределено;
		
		НачалоСтроки = 0;
		КонецСтроки = 0;
		НачалоКолонки = 0;
		КонецКолонки = 0;
		Элемент.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		
		ТекстДоМаркера = Лев(Текст, КонецКолонки-1);
		ТекстПослеМаркера = Сред(Текст, КонецКолонки);
		
		ИтоговаяСтрокаДляПоиска = "";
		
		Если НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			МассивПодстрок = СтрРазделить(ТекстДоМаркера, ",");
			ИтоговаяСтрокаДляПоиска = МассивПодстрок[МассивПодстрок.Количество()-1];
		ИначеЕсли НЕ СокрЛП(ТекстДоМаркера) = "" И Найти(ТекстДоМаркера, ",") > 0 Тогда
			ИтоговаяСтрокаДляПоиска = "";
		Иначе
			ИтоговаяСтрокаДляПоиска = ТекстДоМаркера;
		КонецЕсли;
		
		Если Не ИтоговаяСтрокаДляПоиска = "" И СтрДлина(СокрЛП(ИтоговаяСтрокаДляПоиска)) > 0 Тогда
			СписокДляВыбора = CRM_ЛентаСобытий.СписокПолучателейАвтоПодборНаСервере(СокрЛП(ИтоговаяСтрокаДляПоиска));
			Если СписокДляВыбора.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				ДанныеВыбора = СписокДляВыбора;
			ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество() > 0 Тогда
				СписокИзИстории = Новый СписокЗначений;
				Для Каждого ЭлементИстории Из БыстрыйВвод_ПисьмоИсторияАдресов Цикл
					Если Найти(ЭлементИстории.Представление, ИтоговаяСтрокаДляПоиска) > 0 Тогда
						СтандартнаяОбработка = Ложь;
						СписокИзИстории.Добавить(ЭлементИстории.Значение, ЭлементИстории.Представление);
					КонецЕсли;
				КонецЦикла;
				ДанныеВыбора = СписокИзИстории;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли БыстрыйВвод_ПисьмоИсторияАдресов.Количество()>0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = БыстрыйВвод_ПисьмоИсторияАдресов;
	КонецЕсли;
	
КонецПроцедуры

// Чат

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ЧатПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура("Идентификатор", ВыбранноеЗначение);
	НайденныеСтроки = БыстрыйВвод_ЧатПолучатели.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныйПолучатель = НайденныеСтроки[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя	= НайденныйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес					= НайденныйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель					= НайденныйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя	= НайденныйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись			= НайденныйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа					= НайденныйПолучатель.Группа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьОжидаемуюВыручку(Команда)
	Объект.ОжидаемаяВыручка = Объект.Товары.Итог("СуммаСНДС");
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОписаниеЗадачи(Команда)
	ОткрытьФорму("ОбщаяФорма.CRM_ОписаниеЗадачи", Новый Структура("Задача", ТекущаяЗадача),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовогоКлиента(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПотенциальныйКлиент", Объект.ПотенциальныйКлиент);
	CRM_КлиентыКлиент.ОткрытьФормуБыстрогоВводаПартнера(ЭтотОбъект, ПараметрыФормы);
КонецПроцедуры // СоздатьНовогоКлиента()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипУслуги) Тогда
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги", Новый Структура("ТипУслуги", Объект.ТипУслуги),ЭтотОбъект);
	Иначе
		ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоТипуУслуги",,ЭтотОбъект);
	КонецЕсли;			
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьНаКонтроль(Команда)
	
	Если Модифицированность Тогда
		ОповещениеКонтрольВопрос = Новый ОписаниеОповещения("КонтрольВопросЗавершение", ЭтотОбъект);
		ПроверкаВопросЗаписатьДанные(ОповещениеКонтрольВопрос);
	Иначе
		КонтрольВопросЗавершение(Истина, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КартаМаршрута(Команда)
	
	ОткрытьФорму("Обработка.CRM_КартаМаршрутаБизнесПроцесса.Форма",Новый Структура("БизнесПроцесс", БизнесПроцесс), ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьГруппу(Команда)
	Группа = Неопределено;
	Родитель = ТекущийЭлемент.Родитель;
	Пока Группа = Неопределено Цикл
		Если ТипЗнч(Родитель) = Тип("ГруппаФормы") И Родитель.Поведение = ПоведениеОбычнойГруппы.Всплывающая Тогда
			Группа = Родитель;
		Иначе
			Родитель = Родитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Если Группа<>Неопределено Тогда
		Если Группа = Элементы.ТоварыВерхнийУровень Тогда
			Элементы.ГруппаТовары.РастягиватьПоВертикали = НЕ Элементы.ГруппаТовары.РастягиватьПоВертикали;
			Элементы.ГруппаТовары.РастягиватьПоГоризонтали = НЕ Элементы.ГруппаТовары.РастягиватьПоГоризонтали;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Избранный(Команда)
	Объект.Избранный = НЕ Объект.Избранный;
	ОформлениеИзбранного();
КонецПроцедуры

&НаСервере
Функция ВернутьЗаголовокКоманды(ИмяКоманды)
	
	Возврат Команды[ИмяКоманды].Заголовок;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРезультатаВопроса(Ответ, КомандаИмя) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДокумента = СтрЗаменить(КомандаИмя,"Создать","");
	
	Если ИмяДокумента = "CRM_СчетНаОплатуПокупателю" И CRM_ОбщегоНазначенияСервер.НайтиВМетаданныхПоИмени("Документы", "ЗаказКлиента") Тогда
		ИмяДокумента = "ЗаказКлиента";
	КонецЕсли;
	
	СсылкаНаВзаимодействие = ПредопределенноеЗначение("Документ.CRM_Взаимодействие.ПустаяСсылка");
	
	ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
	// ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	ПараметрыФормы.Вставить("Взаимодействие", СсылкаНаВзаимодействие);
	ОткрытьФорму("Документ."+ИмяДокумента+".ФормаОбъекта",ПараметрыФормы,ЭтотОбъект,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные не записаны.
			|Выполнение действия """+ВернутьЗаголовокКоманды(Команда.Имя)+": создать на основании"" возможно только после записи данных.
			|Данные будут записаны.'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРезультатаВопроса", ЭтотОбъект, Команда.Имя);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбработкаРезультатаВопроса(КодВозвратаДиалога.ОК, Команда.Имя);
	КонецЕсли;
	
КонецПроцедуры


#Область ЛентаСобытий

&НаКлиенте
Процедура Лента_Обновить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Лента_ПоказатьОтборы(Команда)
	
	Элементы.Лента_СписокОтборов.Показать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура БыстрыйВвод_СменитьСтраницу(Команда)
	
	ИмяКомандыМассив = СтрРазделить(Команда.Имя, "_");
	ПереключитьСтраницуБыстрогоВвода(ИмяКомандыМассив[1]);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Создать(Команда)
	
	Если Не CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		БыстрыйВвод_СоздатьЗавершение(Истина, Новый Структура);
	Иначе
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьПродолжить", ЭтотОбъект, Новый Структура);
		ТекстВопроса = НСтр("ru = 'Данные будут записаны. Продолжить?'");
		ПоказатьВопрос(ОповещениеЗавершения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьПродолжить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОповещениеЗавершения = Новый ОписаниеОповещения("БыстрыйВвод_СоздатьЗавершение", ЭтотОбъект, Новый Структура);
		CRM_ОбщегоНазначенияКлиент.Записать(ЭтотОбъект, Истина, ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_СоздатьЗавершение(ОбъектЗаписан, ДополнительныеПараметры) Экспорт
	
	Если ОбъектЗаписан Тогда
		ДанныеЗаполнения = CRM_ЛентаСобытийКлиент.ДанныеЗаполненияОбъектаБыстрогоВвода("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		CRM_ЛентаСобытий.СоздатьОбъектБыстрыйВвод("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ДанныеЗаполнения);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьЛенту", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_Отменить(Команда)
	
	ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ПоказатьПолучателейСкрытойКопии(Команда)
	
	Элементы.БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий.Видимость = Истина;
	Элементы.БыстрыйВвод_ПоказатьПолучателейСкрытойКопии.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйВвод_ДругиеПараметры(Команда)
	
	Если CRM_ЛентаСобытийКлиент.ПроверитьЗаполнениеБыстрогоВвода(БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект) Тогда
		CRM_ЛентаСобытийКлиент.ПоказатьПолнуюФормуОбъекта("ЛентаИнтереса", БыстрыйВвод_ТекущийТипОбъекта, ЭтотОбъект);
		ПереключитьСтраницуБыстрогоВвода("Примечание", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕще(Команда)
	
	ОпоыещениеЗавершения = Новый ОписаниеОповещения("ОбычныйВвод_ПоказатьЕщеЗавершение", ЭтотОбъект, Новый Структура);
	ПоказатьВыборИзМеню(ОпоыещениеЗавершения, ОбычныйВвод_Команды, Элементы.ОбычныйВвод_ПоказатьЕще);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбычныйВвод_ПоказатьЕщеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйТипОбъекта = ВыбранныйЭлемент.Значение;
	CRM_ЛентаСобытийКлиент.СоздатьОбъектОбычныйВвод("ЛентаИнтереса", ВыбранныйТипОбъекта, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Товары

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает доступность и видимость полей формы.
//
// Параметры:
//	Клиент	- СправочникСсылка	- Клиент
//	Контакт	- СправочникСсылка	- Контакт
//
Процедура УстановитьДоступностьИнтереса()
	
	Если Объект.Автор = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли Объект.Ответственный = ТекущийПользователь Тогда
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	ИначеЕсли ЗначениеЗаполнено(Объект.Партнер) Тогда
		ЕстьДоступУровняАккаунтМенеджера			= CRM_УправлениеДоступомВызовСервера.ЕстьДоступУровняАккаунтМенеджера(Объект.Партнер);
	Иначе
		ЕстьДоступУровняАккаунтМенеджера			= Истина;
	КонецЕсли;
	Элементы.ГруппаРеквизиты.ТолькоПросмотр	= НЕ ЕстьДоступУровняАккаунтМенеджера;
	
	//Элементы.Список.ТолькоПросмотр  							 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	//Элементы.ОблакоТегов.ТолькоПросмотр 						 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	//Элементы.ГруппаРеквизитыЛево.ТолькоПросмотр 				 = НЕ ЕстьДоступУровняАккаунтМенеджера;
	//Элементы.ГруппаОбщиеСведенияИсточникСостояние.ТолькоПросмотр = Не ЕстьДоступУровняАккаунтМенеджера;
	//Элементы.Описание.ТолькоПросмотр 							 = Не ЕстьДоступУровняАккаунтМенеджера;
	Элементы.ГруппаПанельСостояний.Доступность	 			 = ЕстьДоступУровняАккаунтМенеджера И (НЕ ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Не Объект.Завершен);
	
	Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = ЕстьДоступУровняАккаунтМенеджера;
	КонецЦикла;
	Элементы.Перенаправить.Доступность	= ЕстьДоступУровняАккаунтМенеджера;
	
КонецПроцедуры // УстановитьДоступностьИнтереса()

&НаСервере
// Процедура убирает лишние реквизиты из массива реквизитов для проверки на заполнение.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//
Процедура ПроверкаЗаполнения(ПроверяемыеРеквизиты)
	Если ЗаполнятьПервичныйИнтерес Тогда
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
		Иначе
			НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
		КонецЕсли;	
		Если НаличиеУчастников Тогда
			Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
				Если ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника") Тогда
					УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
				КонецЕсли;
			КонецЕсли;
		Иначе
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
			УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
		КонецЕсли;
	Иначе	
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
	Попытка
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Исключение
		ПредыдущийИсточник	= Неопределено;
	КонецПопытки;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"КаналПервичногоИнтереса");
		УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты,	"ИсточникПервичногоИнтереса");
	КонецЕсли;
КонецПроцедуры // ПроверяемыеРеквизиты()

&НаСервере
// Процедура присваивает Интересу следующее состояние и 
// заполняет сопутствующие реквизиты.
//
// Параметры:
// 	СостояниеИнтереса - СправочникСсылка.CRM_СостоянияИнтересов
// 
// Возвращаемое значение:
// 	Нет
Процедура ПеревестиИнтересВСледующееСостояниеПриЗаписиСервер(ТекущийОбъект)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И ТекущаяЗадача.CRM_Этап <> ДанныеВыбранногоСостоянияИнтереса.Этап Тогда
		Если ДанныеВыбранногоСостоянияИнтереса.ЭтоПереход Тогда
			Если (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение
					И ДанныеВыбранногоСостоянияИнтереса.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка())
					ИЛИ ДанныеВыбранногоСостоянияИнтереса.Этап.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
				
				ПараметрыДосрочногоЗавершения = Новый Структура();
				ПараметрыДосрочногоЗавершения.Вставить("ЗавершенДосрочно"				,Истина);
				ПараметрыДосрочногоЗавершения.Вставить("ПричинаДосрочногоЗавершения"	,Справочники.CRM_ПричиныОтказов.ПустаяСсылка());
				ПараметрыДосрочногоЗавершения.Вставить("Задача"							,ТекущаяЗадача);
				
				Если ДанныеВыбранногоСостоянияИнтереса.Этап = Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка() Тогда
					ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ТекущаяЗадача.CRM_ТочкаМаршрута);
					ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				Иначе
					ПараметрыДосрочногоЗавершения.Вставить("ЭтапДосрочногоЗавершения"	,ДанныеВыбранногоСостоянияИнтереса.Этап);
					ПараметрыДосрочногоЗавершения.Вставить("ВариантЗавершения"			,ДанныеВыбранногоСостоянияИнтереса.Этап.ВариантЗавершения);
				КонецЕсли;
				
				CRM_БизнесПроцессыСервер.ЗавершитьДосрочноБизнесПроцесс(ПараметрыДосрочногоЗавершения);
			Иначе
				CRM_БизнесПроцессыСервер.ВыполнитьПереходБизнесПроцессаНаЭтап(ТекущаяЗадача.БизнесПроцесс, ДанныеВыбранногоСостоянияИнтереса.Этап);
			КонецЕсли;
		Иначе
			ЗадачаОбъект								= ТекущаяЗадача.ПолучитьОбъект();
			ЗадачаОбъект.CRM_ВариантВыполнения			= ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения;
			Попытка
				ЗадачаОбъект.CRM_ВариантВыполненияСтрокой	= CRM_БизнесПроцессыСервер.ПолучитьПредставлениеВариантаУсловия(ЗадачаОбъект.CRM_ТочкаМаршрута,
				ДанныеВыбранногоСостоянияИнтереса.ВариантВыполнения,
				ЗадачаОбъект.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Исключение
			КонецПопытки;
			// ДатаСтрокой = CRM_БизнесПроцессыПереопределяемый.ПолучитьПредставлениеДатыДействия(ИзмененноеВзаимодействие.ДатаЗавершенияВзаимодействия);
			//
			// ПоследнееДействиеСтрокой = ДатаСтрокой+" "+НСтр("ru = 'Завершено взаимодействие"""+ТекВзаимодействие.ВидВзаимодействия+""" -> '") + Строка(ИзмененноеВзаимодействие.Ответственный);
			//
			// Если ПоследнееДействиеСтрокой = ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой Тогда
			//	СтрокаДляЗамены = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + Символы.ПС;
			//	ЗадачаОбъект.РезультатВыполнения = СтрЗаменить(ЗадачаОбъект.РезультатВыполнения,ПоследнееДействиеСтрокой + Символы.ПС,СтрокаДляЗамены);
			// Иначе
			//	ЗадачаОбъект.CRM_ПоследнееДействиеСтрокой = ПоследнееДействиеСтрокой;
			//	
			//	ЗадачаОбъект.РезультатВыполнения = ПоследнееДействиеСтрокой + Символы.ПС + ТекВзаимодействие.Результат + ?(ПустаяСтрока(ЗадачаОбъект.РезультатВыполнения),"",Символы.ПС) + "
			//	|"+ЗадачаОбъект.РезультатВыполнения;
			// КонецЕсли;
			ЗадачаОбъект.Записать();
			
			CRM_БизнесПроцессыИЗадачиВызовСервера.ВыполнитьЗадачу(ЗадачаОбъект.Ссылка,,Неопределено,,);
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Завершен Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Интерес", ТекущийОбъект.Ссылка);
			Запрос.УстановитьПараметр("Исполнитель",ТекущийОбъект.Ответственный);
			Запрос.Текст = "ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс.Интерес = &Интерес
			|	И НЕ ЗадачаИсполнителя.Выполнена";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекущаяЗадача = Выборка.Ссылка;
				//ТекущаяЗадачаПредставление = "Задача: "+ТекущаяЗадача.CRM_ТочкаМаршрута + ", срок: " + Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				ТекущаяЗадачаПредставление = Формат(ТекущаяЗадача.ДатаНачала, "ДФ='dd.MM.yyyy ЧЧ:мм'");
				СсылкаНаЗадачу = Выборка.Ссылка;
				ПолучитьТаблицуТипов();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура удаляет из массива проверяемых реквизитов реквизит с указанным именем.
//
// Параметры:
//	ПроверяемыеРеквизиты	- Массив	- Массив проверяемых реквизитов.
//	ИмяРеквизита			- Строка	- Имя удаляемого реквизита.
//
Процедура УдалитьИзПроверяемыхРеквизитов(ПроверяемыеРеквизиты, ИмяРеквизита)
	Индекс = ПроверяемыеРеквизиты.Найти(ИмяРеквизита);
	Если НЕ (Индекс = Неопределено) Тогда
		ПроверяемыеРеквизиты.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры // УдалитьИзПроверяемыхРеквизитов()

&НаСервере
// Процедура выполняет чтение сохраненных значений первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()
	// Определяем канал и источник первичного интереса.
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если НЕ Объект.Ссылка.Пустая() Тогда
		 	Интерес = Неопределено;
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.Партнер);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, Объект.Ссылка, Объект.ПотенциальныйКлиент);
			КонецЕсли;	
			Если ЗначениеЗаполнено(Интерес) Тогда
				// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
					КаналПервичногоИнтереса    = Интерес.КаналПервичногоИнтереса;
					ИсточникПервичногоИнтереса = Интерес.ИсточникПервичногоИнтереса;
				// КонецЕсли;
			КонецЕсли;	
			Элементы.ИсточникПервичногоИнтереса.Видимость = ЗначениеЗаполнено(КаналПервичногоИнтереса);
		КонецЕсли;
	Иначе
		Элементы.ГруппаИсточникПривлечения.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры // НеобходимыеДействияПриСозданииНаСервереЧтенииНаСервере()

Процедура ПолучитьТаблицуТипов()
	
	СтруктураТипов = CRM_БизнесПроцессыСервер.ПолучитьСтруктуруТипов_Новая(ТекущаяЗадача);
	ТаблицаТипов.Очистить();
	Если СтруктураТипов.ТаблицаТипов.Количество() > 0 Тогда
		СписокОбязательныхТипов = СтруктураТипов.СписокОбязательныхТипов;
		Для Каждого СтрокаТаб Из СтруктураТипов.ТаблицаТипов Цикл
			НоваяСтрока = ТаблицаТипов.Добавить();
			НоваяСтрока.ВидОбъекта		= СтрокаТаб.ВидОбъекта;
			НоваяСтрока.ЭтапОснования	= СтрокаТаб.ЭтапОснования;
			НоваяСтрока.Обязательный	= СтрокаТаб.Обязательный;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеВзаиморасчетов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасчетыСПокупателямиОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСПокупателями.Остатки(, Заказ В (&МассивСчетов)) КАК РасчетыСПокупателямиОстатки";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM()
		И НЕ (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасчетыСПокупателями.Остатки(, Заказ", "РасчетыСКлиентами.Остатки(, ЗаказКлиента");
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СуммаОстаток");
	Элементы.ДекорацияСостояниеВзаиморасчетов.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Задолженность'"), СуммаВзаиморасчетов);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_ПродажиОбороты.СтоимостьОборот КАК СтоимостьОборот
	               |ИЗ
	               |	РегистрНакопления.CRM_Продажи.Обороты(, , , ДокументПродажи В (&МассивСчетов)) КАК CRM_ПродажиОбороты";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(, , , ДокументПродажи", "Продажи.Обороты(, , , ЗаказПокупателя");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаОборот");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "CRM_Продажи.Обороты(, , , ДокументПродажи", "ВыручкаИСебестоимостьПродаж.Обороты(, , , ЗаказКлиента");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, ".СтоимостьОборот", ".СуммаВыручкиСНДСРеглОборот");
		КонецЕсли;
	КонецЕсли;
	
	ТабВзаиморасчетов = Запрос.Выполнить().Выгрузить();
	СуммаВзаиморасчетов =  ТабВзаиморасчетов.Итог("СтоимостьОборот");
	
	Элементы.ДекорацияСуммаПродаж.Заголовок = ЗаголовокНадписиВзаиморасчетов(НСтр("ru = 'Продажи'"), СуммаВзаиморасчетов);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	

&НаСервере
Функция ЗаголовокНадписиВзаиморасчетов(Заголовок, Сумма)
	
	КрупныйШрифт = Новый Шрифт(,10, Истина,,);
	МелкийШрифт  = Новый Шрифт(,9, Истина,,);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(Заголовок + ": ", Новый Шрифт(,10,), ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Сумма) Тогда
		СуммаСтрокой = Формат(?(Сумма<0, -Сумма, Сумма), "ЧДЦ=2; ЧРД=,; ЧРГ=' '; ЧН=0,00");
		ПозицияРазделителя = СтрНайти(СуммаСтрокой, ",");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Лев(СуммаСтрокой, ПозицияРазделителя), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(Сред(СуммаСтрокой, ПозицияРазделителя+1), МелкийШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , "Взаиморасчеты"));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Нет'"), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой, , "Взаиморасчеты"));
	КонецЕсли;
	// КомпонентыФС.Добавить(" " + Константы.ВалютаУправленческогоУчета.Получить().СимвольноеПредставление);
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
КонецФункции

&НаСервере
Функция ПолучитьМассивСчетовНаСервере()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Интерес"		, Объект.Ссылка);
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	CRM_ЖурналДокументов.Объект КАК Объект
	|ИЗ
	|	РегистрСведений.CRM_ЖурналДокументов КАК CRM_ЖурналДокументов
	|ГДЕ
	|	CRM_ЖурналДокументов.Объект ССЫЛКА Документ.CRM_СчетНаОплатуПокупателю
	|	И CRM_ЖурналДокументов.CRM_Интерес = &Интерес";
	
	Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
		Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "CRM_СчетНаОплатуПокупателю", "ЗаказПокупателя");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "CRM_СчетНаОплатуПокупателю", "ЗаказКлиента");
		КонецЕсли;
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	МассивСчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	Возврат 	МассивСчетов;
КонецФункции

&НаКлиенте
Процедура ДекорацияСостояниеВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Заказ", МассивСчетов));
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
				ПараметрыФормы.Вставить("КлючВарианта", "ВедомостьВВалюте");
				ИмяФормыОтчета = "Отчет.РасчетыСПокупателями.Форма";
			Иначе
				ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
				ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
			КонецЕсли;
		Иначе	
			ПараметрыФормы.Вставить("КлючВарианта", "Ведомость");
			ИмяФормыОтчета = "Отчет.CRM_ВедомостьВзаиморасчетыСКлиентами.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "По данному интересу нет взаиморасчетов.";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСуммаПродажОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивСчетов = ПолучитьМассивСчетовНаСервере();
	Если МассивСчетов.Количество() > 0 Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		Если НЕ CRM_ОбщегоНазначенияПовтИсп.ЭтоCRM() Тогда
			Если (ВРег(CRM_ОбщегоНазначенияПовтИсп.ПолучитьИмяКонфигурации()) = ВРег("УправлениеНебольшойФирмой_CRM")) Тогда
				ПараметрыФормы.Вставить("Отбор", Новый Структура("ЗаказПокупателя", МассивСчетов));
				ПараметрыФормы.Вставить("КлючВарианта", "Основной");
				ИмяФормыОтчета = "Отчет.Продажи.Форма";
			Иначе
				ПараметрыФормы.Вставить("Отбор", Новый Структура("Заказ", МассивСчетов));
				ПараметрыФормы.Вставить("КлючВарианта", "РасчетыСКлиентами");
				ИмяФормыОтчета = "Отчет.РасчетыСКлиентами.Форма";
			КонецЕсли;
		Иначе	
			ПараметрыФормы.Вставить("Отбор", Новый Структура("ДокументПродажи", МассивСчетов));
			ПараметрыФормы.Вставить("КлючВарианта", "ПоНеделямДням");
			ИмяФормыОтчета = "Отчет.CRM_Продажи.Форма";
		КонецЕсли;
		ОткрытьФорму(ИмяФормыОтчета, ПараметрыФормы);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "По данному интересу нет взаиморасчетов.";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольВопросЗавершение(ПродолжитьВыполнение, ДополнительныеПараметры) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		
		ДокументЗаписан = Ложь;
		ЭтотОбъект.Записать();
		
		Если ДокументЗаписан Тогда
			КонтрольОписаниеОповещения = Новый ОписаниеОповещения("КонтрольЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура("Интерес", Объект.Ссылка);
			ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаКонтроляНовая", ПараметрыФормы, ЭтотОбъект,,ВариантОткрытияОкна.ОтдельноеОкно, ,КонтрольОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрольЗавершениеНаСервере()
	ОбновитьТаблицуНаКонтроле();
КонецПроцедуры	

&НаКлиенте
Процедура КонтрольЗавершение(СтруктураНаКонтроле, ДополнительныеПараметры) Экспорт
	
	Если СтруктураНаКонтроле <> Неопределено Тогда
		
			Если СтруктураНаКонтроле.НаКонтроле Тогда
				
				CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
				ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"), СтруктураНаКонтроле.Комментарий);
				
			Иначе
				
				НайтиСтроки = НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь));
				
				Если НайтиСтроки.Количество() > 0 Тогда
					ТекКомментарий = НайтиСтроки[0].Комментарий;
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"), ТекКомментарий);						
				Иначе
					CRM_ОбщегоНазначенияСервер.CRM_ЗаписатьНовоеСостояниеНаКонтролеДляТекущегоПользователя(Объект.Ссылка, 
					ТекущийПользователь, ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.СнятоСКонтроля"));		
				КонецЕсли;
				
			КонецЕсли;
			КонтрольЗавершениеНаСервере();
			
			Оповестить("ОбновитьАРМ");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет таблицу "На контроле" из регистра сведений.
//
Процедура ОбновитьТаблицуНаКонтроле()
	
	НаКонтроле.Очистить();
	
	Запрос = Новый запрос;
	Запрос.Текст = 	
	"ВЫБРАТЬ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Пользователь,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля КАК Статус,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Подразделение,
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Комментарий
	|ИЗ
	|	РегистрСведений.CRM_ИнтересыНаКонтроле.СрезПоследних(&Период, ) КАК CRM_ИнтересыНаКонтролеСрезПоследних
	|ГДЕ
	|	CRM_ИнтересыНаКонтролеСрезПоследних.Объект = &Интерес
	|	И CRM_ИнтересыНаКонтролеСрезПоследних.СтатусКонтроля = &Статус";
	
	Запрос.УстановитьПараметр("Интерес", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса());
	Запрос.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.CRM_СтатусыКонтроляИнтереса.НаКонтроле"));
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Если РезультатЗапроса.Количество() > 0 Тогда
		Для Каждого Выборка Из РезультатЗапроса Цикл
			НоваяСтрока = НаКонтроле.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
	КонецЕсли;		
	
	Если НаКонтроле.НайтиСтроки(Новый Структура("Пользователь", ТекущийПользователь)).Количество() = 0 Тогда
		Элементы.ВзятьНаКонтроль.Заголовок = НСтр("ru = 'Взять на контроль'");
		Элементы.ВзятьНаКонтроль.Картинка = БиблиотекаКартинок.CRM_ВзятьНаКонтроль;
	Иначе	
		Элементы.ВзятьНаКонтроль.Заголовок = НСтр("ru = 'Снять с контроля'");
		Элементы.ВзятьНаКонтроль.Картинка = БиблиотекаКартинок.CRM_СнятьСКонтроля;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФайлыЗавершение(ПродолжитьВыполнение, ПараметрыВыполнения) Экспорт
	
	Если ПродолжитьВыполнение Тогда
		ПараметрыФормы = Новый Структура("ВладелецФайла", Объект.Ссылка);
		ПараметрыФормы.Вставить("ТолькоВложения",	Истина);
		ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтотОбъект.ТолькоПросмотр);
		
		ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы",
					  ПараметрыФормы, ЭтотОбъект, Ложь, Неопределено);
	КонецЕсли;
	
КонецПроцедуры //ОткрытьФайлыЗавершение()

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанные(ОписаниеОповещенияОЗавершении)
	
	Если Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаВопросЗаписатьДанныеЗавершение", ЭтотОбъект, ОписаниеОповещенияОЗавершении);
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные еще не записаны.
					   |Действие возможно только после записи данных. Записать?'"), 
					   РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВопросЗаписатьДанныеЗавершение(Ответ, ОписаниеОповещенияОЗавершении) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Истина);
		Иначе
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура выводит на заголовок формы информацию о клиенте и контактном лице.
//
// Параметры:
//	нет
Процедура ОбновитьЗаголовокФормы()
	ЭтотОбъект.Заголовок = НСтр("ru='Интерес клиента';en='Lead'") + ": " + Объект.Тема + " - " + СценарийИнтереса;
КонецПроцедуры

&НаСервере
Функция ПолучитьЧислоВложений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(CRM_ИнтересПрисоединенныеФайлы.Ссылка) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.CRM_ИнтересПрисоединенныеФайлы КАК CRM_ИнтересПрисоединенныеФайлы
	|ГДЕ
	|	CRM_ИнтересПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И НЕ CRM_ИнтересПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.КоличествоФайлов;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
		Возврат;
	КонецЕсли;
	
	ЧислоВложений = ПолучитьЧислоВложений();
	Если ЧислоВложений = 0 Тогда
		ВложенияПредставление = НСтр("ru='Файлы';en='Fales'");
	Иначе
		ВложенияПредставление = НСтр("ru='Файлы(';en='Fales('") + ЧислоВложений + ")"; 
	КонецЕсли;
			
КонецПроцедуры // СформироватьПредставлениеВложений()

&НаКлиенте
// Процедура определяет доступность потенциального клиента.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПотенциальногоКлиента()
	ДоступностьКлиента	 									= ЗначениеЗаполнено(Объект.Партнер) ИЛИ НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент);
	Элементы.ГруппаКлиент.Видимость								= ДоступностьКлиента;
	Элементы.Партнер.АвтоОтметкаНезаполненного				= ДоступностьКлиента;
	Элементы.Партнер.ОтметкаНезаполненного					= ДоступностьКлиента;
	Элементы.ГруппаПотенциальныйКлиент.Видимость			= НЕ ДоступностьКлиента;
	Элементы.ГруппаКонтакты.Видимость						= ДоступностьКлиента;
КонецПроцедуры // ДоступностьПотенциальногоКлиента()	

&НаСервере
Процедура СкорретироватьРеквизитыБизнесПроцесса()
	
	Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация
	ИЛИ НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
		
		БизнесПроцессОбъект = ТекущаяЗадача.БизнесПроцесс.ПолучитьОбъект();
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Наименование = Объект.Тема Тогда
			БизнесПроцессОбъект.Наименование = Объект.Тема;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Партнер = Объект.Партнер Тогда
			БизнесПроцессОбъект.Партнер = Объект.Партнер;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.КонтактноеЛицо = Объект.КонтактноеЛицо Тогда
			БизнесПроцессОбъект.КонтактноеЛицо = Объект.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Сумма = Объект.ОжидаемаяВыручка Тогда
			БизнесПроцессОбъект.Сумма = Объект.ОжидаемаяВыручка;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Организация = Объект.Организация Тогда
			БизнесПроцессОбъект.Организация = Объект.Организация;
		КонецЕсли;
		
		Если НЕ ТекущаяЗадача.БизнесПроцесс.Подразделение = Объект.Подразделение Тогда
			БизнесПроцессОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьУровеньДоступа()
	
	Если ЗначениеЗаполнено(Объект.Партнер) И ЗначениеЗаполнено(Объект.Ответственный["CRM_УровеньДоступа"])
		 И Объект.Партнер["CRM_УровниДоступа"].Найти(Объект.Ответственный["CRM_УровеньДоступа"],"УровеньДоступа") = Неопределено И Объект.Партнер["CRM_УровниДоступа"].Количество() > 0 Тогда
	
		ПартнерОбъект = Объект.Партнер.ПолучитьОбъект();
		НоваяСтрокаУровня = ПартнерОбъект["CRM_УровниДоступа"].Добавить();
		НоваяСтрокаУровня["УровеньДоступа"]= Объект.Ответственный["CRM_УровеньДоступа"];
		ПартнерОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция проверяет, чтобы в таблице Взаимодействий ожидаемая выручка была заполнена там, где у состояния стоит
// признак обязательного её заполнения.
//
// Параметры:
// 	нет
//
// Возвращаемое значение:
//	Булево - Истина - есть пустые даты
//			 Ложь - нет пустых дат.
Функция ПроверитьЗаполнениеОжидаемойВыручки()
	Результат = Ложь;
	УказыватьОжидаемуюВыручку = ТекущееСостояние.УказаниеОжидаемойВыручки;
	Если УказыватьОжидаемуюВыручку И Объект.ОжидаемаяВыручка = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнена ожидаемая выручка. Запись документа невозможна!';en='The expected revenue is not filled. You can not record a document!'"), Объект.Ссылка,"ОжидаемаяВыручка",);
		Результат = Истина;
	КонецЕсли; 	
	Возврат Результат;
КонецФункции

&НаСервере
// Процедура перезаписывает ссылки в документах ЭлектронноеПисьмоВходящее и ЭлектронноеПисьмоИсходящее
// с потенциального клиента на партнера.
//
// Параметры:
//	ПотенциальныйКлиент - СправочникСсылка.CRM_ПотенциальныеКлиенты
//	Партнер				- СправочникСсылка.Партнеры
Процедура ПеревеситьДокументыНаПартнера(ПотенциальныйКлиент, Партнер);
	CRM_ОбщегоНазначенияСервер.ПереопределитьПисьмаСПотенциальногоКлиентаНаПартнера(ПотенциальныйКлиент, Партнер);
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	
	МассивТиповКИ = Новый Массив;
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	МассивТиповКИ.Добавить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	
	CRM_УправлениеКонтактнойИнформацией.ВывестиКонтактнуюИнформациюОбъекта(ЭтотОбъект, Объект.Партнер, "ГруппаКИПартнера", МассивТиповКИ);
	CRM_КлиентыСервер.ВывестиКонтактныеЛицаПартнера(ЭтотОбъект, Объект.Партнер, Объект.КонтактноеЛицо, "ГруппаКонтакты", МассивТиповКИ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПроцессов()
	
	ДеревоВсеПроцессы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЗадачаЗадачаИсполнителя.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА ЗадачаЗадачаИсполнителя.БизнесПроцесс = Неопределено
	               |			ТОГДА ""Личные задачи""
	               |		ИНАЧЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс
	               |	КОНЕЦ КАК БизнесПроцесс
	               |ИЗ
	               |	Задача.ЗадачаИсполнителя КАК ЗадачаЗадачаИсполнителя
	               |ГДЕ
	               |	(ЗадачаЗадачаИсполнителя.БизнесПроцесс.Предмет = &Предмет
	               |			ИЛИ ЗадачаЗадачаИсполнителя.Предмет = &Предмет)
	               |	И ВЫБОР
	               |			КОГДА НЕ(ЗадачаЗадачаИсполнителя.CRM_СостояниеИнтереса = ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)
	               |							ИЛИ ЗадачаЗадачаИсполнителя.CRM_СостояниеИнтереса = НЕОПРЕДЕЛЕНО)
	               |					И ЗадачаЗадачаИсполнителя.Исполнитель = &Ответственный
	               |				ТОГДА НЕ ЗадачаЗадачаИсполнителя.БизнесПроцесс.Интерес = &Предмет
	               |			ИНАЧЕ НЕ ЗадачаЗадачаИсполнителя.CRM_Личная
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ЗадачаЗадачаИсполнителя.СрокИсполнения УБЫВ
	               |ИТОГИ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	               |ПО
	               |	БизнесПроцесс";
	
	Запрос.УстановитьПараметр("Ответственный", Объект.Ответственный);
	Запрос.УстановитьПараметр("Предмет", Объект.Ссылка);
	
	АктивныхПроцессов = 0;
	ВыборкаБП = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаБП.Следующий() Цикл
		НовыйБП = ДеревоВсеПроцессы.ПолучитьЭлементы().Добавить();
		ТекБизнесПроцесс = ВыборкаБП.БизнесПроцесс;
		Если ЗначениеЗаполнено(ТекБизнесПроцесс) Тогда
			НовыйБП.Наименование = ТекБизнесПроцесс.Наименование;
		Иначе
			НовыйБП.Наименование = ВыборкаБП.БизнесПроцесс;
		КонецЕсли;
		НовыйБП.Ссылка = ТекБизнесПроцесс;
		НовыйБП.Выполнена = ТекБизнесПроцесс.Завершен;
		Если НЕ ТекБизнесПроцесс.Завершен Тогда
			АктивныхПроцессов = АктивныхПроцессов + 1;
		КонецЕсли;
		Выборка = ВыборкаБП.Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяЗадача = НовыйБП.ПолучитьЭлементы().Добавить();
			Задача = Выборка.Ссылка;
			НоваяЗадача.Ссылка = Задача;
			НоваяЗадача.Наименование = Задача.Наименование;
			НоваяЗадача.Исполнитель = Задача.Исполнитель;
			НоваяЗадача.ДатаИсполнения = Задача.ДатаИсполнения;
			НоваяЗадача.ПринятаКИсполнению = Задача.ПринятаКИсполнению;
			НоваяЗадача.Просрочена = ?(Задача.СрокИсполнения < НачалоДня(ТекущаяДатаСеанса()), ИСТИНА, ЛОЖЬ);
			НоваяЗадача.СрокИсполнения = Задача.СрокИсполнения;
			НоваяЗадача.Выполнена = Задача.Выполнена;
		КонецЦикла;
	КонецЦикла;
	Элементы.ГруппаБизнесПроцессы.Заголовок = НСтр("ru = 'Бизнес-процессы'")+" ("+Строка(АктивныхПроцессов)+")";
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеПартнерПриИзменении(Дата, ВалютаДокумента, Партнер, Организация, Проект)
	
	СтруктураДанные = Новый Структура;
	Если ЗначениеЗаполнено(Партнер.CRM_ОсновноеКонтактноеЛицо) Тогда
		СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо",		Партнер.CRM_ОсновноеКонтактноеЛицо);
	Иначе
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
		                      |ИЗ
		                      |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		                      |ГДЕ
		                      |	КонтактныеЛицаПартнеров.Владелец = &Владелец
		                      |	И КонтактныеЛицаПартнеров.CRM_Состояние = ЗНАЧЕНИЕ(Перечисление.CRM_Состояние.Работает)
		                      |
		                      |УПОРЯДОЧИТЬ ПО
		                      |	КонтактныеЛицаПартнеров.ДатаРегистрацииСвязи УБЫВ");
		Запрос.УстановитьПараметр("Владелец", Партнер);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо", Выборка.Ссылка);
		Иначе
			СтруктураДанные.Вставить("ОсновноеКонтактноеЛицо", Партнер.CRM_ОсновноеКонтактноеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Если	Не ЗначениеЗаполнено(СтруктураДанные.ОсновноеКонтактноеЛицо)
		И	ЗначениеЗаполнено(Проект)
		И	ЗначениеЗаполнено(Проект.CRM_Партнер)
		И	Проект.CRM_Партнер = Партнер
		И	ЗначениеЗаполнено(Проект.CRM_КонтактноеЛицоПартнера) Тогда
		//
		СтруктураДанные.ОсновноеКонтактноеЛицо = Проект.CRM_КонтактноеЛицоПартнера;
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПартнерПриИзменении()

&НаКлиенте
// Процедура открывает краткую форму взаимодействия.
//
// Параметры:
//	Нет.
//
Процедура ПозиционироватьНаВзаимодействие()
	ПараметрыАктивности = Новый Структура;
	ПараметрыАктивности.Вставить("Ключ", КлючОткрываемойАктивности);
	ОткрытьФорму("РегистрСведений.CRM_ЗапланированныеАктивности.ФормаЗаписи", ПараметрыАктивности, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеИзбранного()
	Если Объект.Избранный Тогда
		Элементы.Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаГолубая;
		Элементы.Избранный.Заголовок = НСтр("ru = 'Снять отметку'");
	Иначе
		Элементы.Избранный.Картинка = БиблиотекаКартинок.CRM_ЗвездочкаСерая;
		Элементы.Избранный.Заголовок = НСтр("ru = 'Отметить'");
	КонецЕсли;
КонецПроцедуры

#Область ОбработкаПервичногоИнтереса

&НаСервере
// Процедура получает предыдущий интерес партнера.
//
// Параметры:
//	Нет.
//
Процедура ПолучитьПредыдущийПервичныйИнтересПоПартнеру(ДатаАктуальности)
	ПервичныйИнтерес.Очистить();
	ВыводитьНадпись = Ложь;
	Интерес = Неопределено;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.Партнер);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Объект.Дата, , Объект.ПотенциальныйКлиент);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Интерес) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
		СтрокаПервичногоИнтереса = ПервичныйИнтерес.Вставить(0);
		ЗаполнитьЗначенияСвойств(СтрокаПервичногоИнтереса, Интерес);
		СтрокаПервичногоИнтереса.КаналПервичногоИнтереса	= Интерес.КаналПервичногоИнтереса;
		СтрокаПервичногоИнтереса.ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
		СтрокаПервичногоИнтереса.Актуальность = Истина;			
		Если ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) 
			И ТипЗнч(Интерес.КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) 
					= Тип("СправочникСсылка.МаркетинговыеМероприятия") Тогда
			Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
				СтрокаПервичногоИнтереса.Актуальность = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности >= НачалоДня(Объект.Дата);
				ДатаАктуальности = Интерес.ИсточникПервичногоИнтереса.CRM_ДатаАктуальности;
			КонецЕсли;
		КонецЕсли;			
	КонецЕсли;
КонецПроцедуры // ПолучитьПредыдущийПервичныйИнтересПоПартнеру()

&НаСервере
// Процедура заполняет первичный интерес по документу - основанию.
//
// Параметры:
//	Основание	- ДокументСсылка	- Документ - основание.
//
Процедура ЗаполнитьПервичныйИнтерес(Основание)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		Если ЗначениеЗаполнено(Основание) И (ТипЗнч(Основание) = Тип("ДокументСсылка.CRM_Интерес")) Тогда
				Интерес = CRM_МаркетингСервер.ПолучитьПервичныйИнтерес(Основание.Дата, Основание);
				КаналПервичногоИнтереса		= Интерес.КаналПервичногоИнтереса;
				ИсточникПервичногоИнтереса	= Интерес.ИсточникПервичногоИнтереса;
				Элементы.ИсточникПервичногоИнтереса.Видимость = (ЗначениеЗаполнено(КаналПервичногоИнтереса)
				И НЕ ТипПВХ(КаналПервичногоИнтереса) <> Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"));
			КонецЕсли;
		Иначе
			Элементы.ГруппаПервичныйИнтерес.Видимость = Ложь;
		КонецЕсли;
КонецПроцедуры // ЗаполнитьПервичныйИнтерес()

&НаСервере
// Процедура формирует описание канала источника.
//
// Параметры:
//	Нет.
//
Процедура СформироватьОписаниеКаналаИсточника()
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		ПервичныйИнтерес.Очистить();
		ВыводитьНадпись = Ложь;
		Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
			АктуальноДо = '00010101';
			ПолучитьПредыдущийПервичныйИнтересПоПартнеру(АктуальноДо);
			Интерес = Неопределено;
			Попытка
				Интерес = ПервичныйИнтерес.Получить(0);
			Исключение
			КонецПопытки;
			РанееНеЗарегистровано = Ложь;
			// Если ПолучитьФункциональнуюОпцию("ИспользоватьМаркетинговыеМероприятия") Тогда
			Если НЕ (Интерес = Неопределено) И ЗначениеЗаполнено(Интерес.КаналПервичногоИнтереса) Тогда
				//ВыводитьНадпись = Истина;
				//	Надпись = "";
				//	CRM_МаркетингСервер.СформироватьНадписьПервичногоИнтереса(Объект.Ссылка, Интерес, АктуальноДо, Надпись, ВыводитьНадпись);
				//	Элементы.ИсточникПервичногоИнтереса.Подсказка = Надпись;
				Элементы.КаналПервичногоИнтереса.ПодсказкаВвода = Интерес.КаналПервичногоИнтереса;
				Если ЗначениеЗаполнено(Интерес.ИсточникПервичногоИнтереса) Тогда
					Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = Интерес.ИсточникПервичногоИнтереса.Наименование;
				Иначе
					Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = "";
				КонецЕсли;
			Иначе
				Элементы.КаналПервичногоИнтереса.ПодсказкаВвода = "";
				Элементы.ИсточникПервичногоИнтереса.ПодсказкаВвода = "";
			КонецЕсли;
			// КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // СформироватьОписаниеКаналаИсточника()

&НаСервере
// Процедура выполняет запись первичного интереса.
//
// Параметры:
//	ТекущийОбъект	- ДокументСсылка	- Текущий объект.
//
Процедура ЗаписатьПервичныйИнтерес(ТекущийОбъект)
	Если ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес") Тогда
		УстановитьПривилегированныйРежим(Истина);
		НаборЗаписей = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ТекущийОбъект.Дата);
		НаборЗаписей.Отбор.Сделка.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Записать();
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
			Если (НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса)
				И ТипЗнч(КаналПервичногоИнтереса.ТипЗначения.ПривестиЗначение()) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника"))
				ИЛИ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
				Запрос = Новый Запрос("
				|ВЫБРАТЬ
				|	ИсточникиПервичногоИнтереса.Период КАК Период
				|ИЗ
				|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
				|ГДЕ
				|	ИсточникиПервичногоИнтереса.Сделка = &Сделка
				|	И ИсточникиПервичногоИнтереса.Партнер = &Партнер
				|");
				Запрос.УстановитьПараметр("Сделка", ТекущийОбъект.Ссылка);
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.Партнер);
				Иначе
					Запрос.УстановитьПараметр("Партнер", ТекущийОбъект.ПотенциальныйКлиент);
				КонецЕсли;	
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ИсточникиПервичногоИнтереса.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.Период = Выборка.Период;
					МенеджерЗаписи.Сделка = ТекущийОбъект.Ссылка;
					Если ЗначениеЗаполнено(Объект.Партнер) Тогда
						МенеджерЗаписи.Партнер = ТекущийОбъект.Партнер;
					Иначе
						МенеджерЗаписи.Партнер = ТекущийОбъект.ПотенциальныйКлиент;
					КонецЕсли;	
					МенеджерЗаписи.Удалить();
				КонецЦикла;
				Запись = НаборЗаписей.Добавить();
				Запись.Период						= ТекущийОбъект.Дата;
				Если ЗначениеЗаполнено(Объект.Партнер) Тогда
					Запись.Партнер					= ТекущийОбъект.Партнер;
				Иначе
					Запись.Партнер					= ТекущийОбъект.ПотенциальныйКлиент;
				КонецЕсли;	
				Запись.Сделка						= ТекущийОбъект.Ссылка;
				Запись.ИсточникПервичногоИнтереса	= ИсточникПервичногоИнтереса;
				Запись.КаналПервичногоИнтереса		= КаналПервичногоИнтереса;
			КонецЕсли;
		КонецЕсли;
		НаборЗаписей.Записать();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры // ЗаписатьПервичныйИнтерес()

&НаСервереБезКонтекста
// Функция возвращает тип значения элемента ПВХ.
//
// Параметры:
//	ПВХСсылкка	- ЛюбаяСсылка	- Ссылка на элемент ПВХ.
//
// Возвращаемое значение:
//	Тип	- Тип значения элемента ПВХ.
//
Функция ТипПВХ(ПВХСсылка)
	Возврат ТипЗнч(ПВХСсылка.ТипЗначения.ПривестиЗначение());
КонецФункции // ТипПВХ()

&НаКлиенте
// Процедура определяет доступность первичного интереса.
//
// Параметры:
//	Нет.
//
Процедура ДоступностьПервичногоИнтереса()
	Если ПервичныйИнтерес.Количество() > 0 Тогда
		ПредыдущийИсточник	= ПервичныйИнтерес.Получить(0);
	Иначе
		ПредыдущийИсточник	= Неопределено;
	КонецЕсли;
	Если ПредыдущийИсточник = Неопределено Тогда
		Актуальность	= Ложь;
	Иначе	
		Актуальность	= ПредыдущийИсточник.Актуальность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.Партнер), Истина, Ложь);
	Иначе
		НаличиеУчастников = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент), Истина, Ложь);
	КонецЕсли;	
	Если НЕ ТолькоПросмотр Тогда
		Если НаличиеУчастников Тогда
			Элементы.КаналПервичногоИнтереса.Доступность	= Истина;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.КаналПервичногоИнтереса.Доступность		= Ложь;
			Элементы.КаналПервичногоИнтереса.ТолькоПросмотр		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Ложь;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Истина;
			Элементы.ИсточникПервичногоИнтереса.Доступность		= Истина;
			Элементы.ИсточникПервичногоИнтереса.ТолькоПросмотр	= Ложь;
		Иначе
			Элементы.ИсточникПервичногоИнтереса.Видимость		= Ложь;
		КонецЕсли;
	КонецЕсли;	
	// Отметки незаполненного
	Если Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	ИначеЕсли НЕ Актуальность И НЕ ЗначениеЗаполнено(КаналПервичногоИнтереса) Тогда
		// Если объязательно заполнять актуальный источник привлечения, тогда подсвечиваем канал первичного интереса.
		Если ЗаполнятьПервичныйИнтерес Тогда
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
		Иначе
			Элементы.КаналПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
			Элементы.КаналПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
		КонецЕсли;
	КонецЕсли;
	// Если Канал
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И НЕ ЗначениеЗаполнено(ИсточникПервичногоИнтереса) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Истина;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(КаналПервичногоИнтереса) И (ТипПВХ(КаналПервичногоИнтереса) = Тип("ПеречислениеСсылка.CRM_КаналыБезУказанияИсточника")) Тогда
		Элементы.ИсточникПервичногоИнтереса.АвтоОтметкаНезаполненного	= Ложь;
		Элементы.ИсточникПервичногоИнтереса.ОтметкаНезаполненного		= Ложь;
	КонецЕсли;
КонецПроцедуры // ДоступностьПервичногоИнтереса()

&НаКлиенте
// Функция проверяет наличие реквизиты у формы
//  Параметры:
//   Форма - УправляемаяФорма - Форма, у которой проверяем наличие реквизита
//   РеквизитПоиска - Строка - Реквизит формы
//
//  Возвращаемое значение:
//   Булево - Истина, если реквизит есть, Ложь - в противном случае
//
Функция ПроверитьНаличиеРеквизитаУФормы(Форма, РеквизитПоиска)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(РеквизитПоиска, Неопределено);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Форма);
	Если СтруктураПоиска[РеквизитПоиска]<> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции	

&НаКлиенте
// Процедура - обработчик выбора партнера - владельца.
//
// Параметры:
//	РезультатЗакрытия		- СправочникСсылка	- Владелец контактных лиц.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура ОбработкаВыбораПартнераИсточника(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда Возврат; КонецЕсли;
	ПараметрыФормы	= Новый Структура("Отбор", Новый Структура("Владелец", РезультатЗакрытия));
	ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора", ПараметрыФормы, ДополнительныеПараметры.Элемент, , ВариантОткрытияОкна.ОтдельноеОкно);
КонецПроцедуры // ОбработкаВыбораПартнераИсточника()

#КонецОбласти

#Область ПанельСостоянийИнтереса

&НаСервере
Процедура ЗаполнитьПанельСостоянийИнтереса(Этап = Неопределено)
	СписокСостояний = ПолучитьСписокСостоянийСервер(ТекущаяЗадача, Объект.СостояниеИнтереса, Этап);
	
	СтруктураДоступныхСостоянийИнтереса = Новый Структура;
	
	ИндексТекущего = -1;
	НовыйЭлемент = Неопределено;
	ТолькоВсеДействия = Истина;
	Пока Элементы.ГруппаПанельСостояний.ПодчиненныеЭлементы.Количество() > 0 Цикл
		Элементы.Удалить(Элементы.ГруппаПанельСостояний.ПодчиненныеЭлементы[0]);
	КонецЦикла;
	
	Если Объект.Завершен Тогда
		Если Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
			Элементы.ГруппаПанельСостояний.ЦветФона = Новый Цвет(220, 250, 220);
		Иначе
			Элементы.ГруппаПанельСостояний.ЦветФона = Новый Цвет(250, 220, 220);
		КонецЕсли;
	Иначе
		Элементы.ГруппаПанельСостояний.ЦветФона = Новый Цвет(230, 230, 230);
	КонецЕсли;
	Элементы.ПричинаОтказа.Видимость = (Объект.СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение);
	
	ПодменюНачало = Неопределено;
	КоличествоСостояний = СписокСостояний.Количество();
	Если КоличествоСостояний > 5 Тогда
		ПанельНачало = Элементы.Добавить("ПанельНачало", Тип("ГруппаФормы"), Элементы.ГруппаПанельСостояний);
		ПанельНачало.Вид = ВидГруппыФормы.КоманднаяПанель;
		ПанельНачало.РастягиватьПоГоризонтали = Ложь;
		
		
		ПодменюНачало = Элементы.Добавить("ГруппаНачало", Тип("ГруппаФормы"), ПанельНачало);
		ПодменюНачало.Вид = ВидГруппыФормы.Подменю;
		ПодменюНачало.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		ПодменюНачало.Заголовок = НСтр("ru = 'Предыдущие'");
	КонецЕсли;
	
	ГруппаЗавершение = Элементы.Добавить("ГруппаЗавершение", Тип("ГруппаФормы"), Элементы.ГруппаПанельСостояний);
	ГруппаЗавершение.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаЗавершение.ОтображатьЗаголовок = Ложь;
	ГруппаЗавершение.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	ЭлементСтрелка = Элементы.Добавить("ЭлементСтрелка", Тип("ДекорацияФормы"), ГруппаЗавершение);
	ЭлементСтрелка.Вид = ВидДекорацииФормы.Картинка;
	ЭлементСтрелка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправо;
	
	ПанельЗавершение = Элементы.Добавить("ПанельЗавершение", Тип("ГруппаФормы"), ГруппаЗавершение);
	ПанельЗавершение.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	ПодменюЗавершение = Элементы.Добавить("ПодменюЗавершение", Тип("ГруппаФормы"), ПанельЗавершение);
	ПодменюЗавершение.Вид = ВидГруппыФормы.Подменю;
	ПодменюЗавершение.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
	ПодменюЗавершение.Заголовок = НСтр("ru = 'Завершение'");
	
	Для каждого Состояние из СписокСостояний Цикл
		Индекс = СписокСостояний.Индекс(Состояние);
		Если ТипЗнч(Состояние.Значение) = Тип("Структура") Тогда
			ТекСостояние = Состояние.Значение.Состояние;
			ИмяКомандыСостояния = "СостояниеИнтереса"+СтрЗаменить(Строка(ТекСостояние.УникальныйИдентификатор()), "-", "")+"_"+СтрЗаменить(Строка(Состояние.Значение.Этап.УникальныйИдентификатор()), "-", "");
			Состояние.Значение.Вставить("Представление", Состояние.Представление);
		Иначе
			ТекСостояние = Состояние.Значение;
			ИмяКомандыСостояния = "СостояниеИнтереса"+СтрЗаменить(Строка(ТекСостояние.УникальныйИдентификатор()), "-", "");
		КонецЕсли;
		СтруктураДоступныхСостоянийИнтереса.Вставить(ИмяКомандыСостояния, Состояние.Значение);
		Если ТекСостояние.Завершено Тогда
			ЭлементРазмещения = ПодменюЗавершение;
		ИначеЕсли ПодменюНачало <> Неопределено Тогда
			Если Объект.Завершен Тогда
				Если Индекс+4 > КоличествоСостояний Тогда
					ЭлементСтрелка = Элементы.Добавить("ЭлементСтрелка"+Строка(Индекс), Тип("ДекорацияФормы"), Элементы.ГруппаПанельСостояний);
					ЭлементСтрелка.Вид = ВидДекорацииФормы.Картинка;
					ЭлементСтрелка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправо;
					
					ЭлементРазмещения = Элементы.ГруппаПанельСостояний;
				Иначе
					ЭлементРазмещения = ПодменюНачало;
				КонецЕсли;
			Иначе
				Если ИндексТекущего >= 0 И Индекс - ИндексТекущего < 2 Тогда
					ЭлементСтрелка = Элементы.Добавить("ЭлементСтрелка"+Строка(Индекс), Тип("ДекорацияФормы"), Элементы.ГруппаПанельСостояний);
					ЭлементСтрелка.Вид = ВидДекорацииФормы.Картинка;
					ЭлементСтрелка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправо;
					
					ЭлементРазмещения = Элементы.ГруппаПанельСостояний;
				ИначеЕсли ИндексТекущего = -1 Тогда
					ЭлементРазмещения = ПодменюНачало;
				Иначе
					ЭлементРазмещения = ПодменюЗавершение;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭлементРазмещения = Элементы.ГруппаПанельСостояний;
			Если Индекс > 0 Тогда
				ЭлементСтрелка = Элементы.Добавить("ЭлементСтрелка"+Строка(Индекс), Тип("ДекорацияФормы"), ЭлементРазмещения);
				ЭлементСтрелка.Вид = ВидДекорацииФормы.Картинка;
				ЭлементСтрелка.Картинка = БиблиотекаКартинок.CRM_СтрелкаВправо;
			КонецЕсли;	
		КонецЕсли;
		Шрифт = Новый Шрифт;
		Если Состояние.Картинка = БиблиотекаКартинок.сфпКлиентОжидание Тогда
			ИндексТекущего = Индекс;
			Если НовыйЭлемент<>Неопределено Тогда
				// НовыйЭлемент.ТолькоВоВсехДействиях = ТолькоВсеДействия;
				НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;
			//ЦветЭлемента = Новый Цвет(50, 150, 50);
			Шрифт = Новый Шрифт(,, Истина);
			Если ЭлементРазмещения = ПодменюЗавершение Тогда
				ПодменюЗавершение.Заголовок = Состояние.Представление;
				//ГруппаЗавершение.Картинка = Состояние.Картинка;
				ПодменюЗавершение.ШрифтЗаголовка = Шрифт;
				Если ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					ПодменюЗавершение.ЦветТекстаЗаголовка = Новый Цвет(50, 150, 50);
				Иначе
					ПодменюЗавершение.ЦветТекстаЗаголовка = WebЦвета.Лосось;
				КонецЕсли;
			ИначеЕсли ЭлементРазмещения = ПодменюНачало Тогда
				ПодменюНачало.Заголовок = Состояние.Представление;
				ПодменюНачало.ШрифтЗаголовка = Новый Шрифт(ПодменюНачало.ШрифтЗаголовка,,,Истина);
			КонецЕсли;
		ИначеЕсли Состояние.Картинка = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение Тогда
			ЦветЭлемента = Новый Цвет(50, 150, 50);
		Иначе
			ТолькоВсеДействия = Ложь;
			Если НовыйЭлемент<>Неопределено Тогда
				// НовыйЭлемент.ТолькоВоВсехДействиях = ТолькоВсеДействия;
				НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
			КонецЕсли;
			ЦветЭлемента = Неопределено;
			Если ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
				ЦветЭлемента = Новый Цвет(50, 150, 50);
			ИначеЕсли ТекСостояние.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
				ЦветЭлемента = WebЦвета.Лосось;
			КонецЕсли;
		КонецЕсли;
		
		Если Команды.Найти(ИмяКомандыСостояния) = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКомандыСостояния);
			НоваяКоманда.Действие = "ПанельСостоянийИнтересаВыбор";
			НоваяКоманда.Подсказка = Состояние.Представление;
		КонецЕсли;
		
		НовыйЭлемент = Элементы.Добавить("КнопкаПанели"+ИмяКомандыСостояния, Тип("КнопкаФормы"), ЭлементРазмещения);
		НовыйЭлемент.Заголовок = Состояние.Представление;
		НовыйЭлемент.ИмяКоманды = ИмяКомандыСостояния;
		Если Состояние.Картинка <> БиблиотекаКартинок.сфпКлиентОжидание Тогда
			НовыйЭлемент.Картинка = Состояние.Картинка;
		КонецЕсли;
		НовыйЭлемент.Шрифт = Шрифт;
		НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
		Если ЦветЭлемента<>Неопределено Тогда
			НовыйЭлемент.ЦветТекста = ЦветЭлемента;
		КонецЕсли;
		НовыйЭлемент.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если Индекс = ИндексТекущего И ПодменюНачало <> Неопределено Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	Элементы.Переместить(ГруппаЗавершение, Элементы.ГруппаПанельСостояний);
	Элементы.ГруппаПанельСостояний.Доступность = НЕ ЗначениеЗаполнено(ТекущаяЗадача) ИЛИ Не Объект.Завершен;
	
	Если Объект.Завершен ИЛИ ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ГруппаКонецПанели = Элементы.Добавить("ГруппаКонецПанели", Тип("ГруппаФормы"), Элементы.ГруппаПанельСостояний);
		ГруппаКонецПанели.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКонецПанели.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		ГруппаКонецПанели.ОтображатьЗаголовок = Ложь;
		
		Если Объект.Завершен Тогда
			ЭлементДатаЗавершения = Элементы.Добавить("ЭлементДатаЗавершения", Тип("ДекорацияФормы"), Элементы.ГруппаКонецПанели);
			ЭлементДатаЗавершения.Вид = ВидДекорацииФормы.Надпись;
			ЭлементДатаЗавершения.Заголовок = Формат(Объект.ДатаЗакрытия, "ДФ=d.MM.yyyy");
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
			НовыйЭлемент = Элементы.Добавить("ОткрытьКартуМаршрута", Тип("КнопкаФормы"), Элементы.ГруппаКонецПанели);
			НовыйЭлемент.Заголовок = НСтр("ru = 'Открыть карту маршрута'");
			НовыйЭлемент.ИмяКоманды = "КартаМаршрута";
			НовыйЭлемент.ОтображениеФигуры = ОтображениеФигурыКнопки.Нет;
			НовыйЭлемент.Отображение = ОтображениеКнопки.Картинка;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодменюНачало <> Неопределено И ПодменюНачало.ПодчиненныеЭлементы.Количество() = 1 Тогда
		ЭлементТекСостояние = ПодменюНачало.ПодчиненныеЭлементы[0];
		Элементы.Переместить(ЭлементТекСостояние, Элементы.ГруппаПанельСостояний, ПанельНачало); 
		ЭлементТекСостояние.Видимость = Истина;
		ЭлементТекСостояние.Шрифт = Новый Шрифт(ПодменюНачало.ШрифтЗаголовка,,,Истина);
		ЭлементТекСостояние.ЦветТекста = ЦветаСтиля.CRM_ЧерныйЦветТекста;
	КонецЕсли;
	
	КрупныйШрифт = Новый Шрифт(,10, Истина,,);
	МелкийШрифт  = Новый Шрифт(,9, Истина,,);
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Вероятность сделки'") + ": ", Новый Шрифт(,10) , ЦветаСтиля.CRM_ЦветДополнительногоТекста));
	
	Если ЗначениеЗаполнено(Объект.ВероятностьСделки) Тогда
		СуммаСтрокой = Формат(Объект.ВероятностьСделки, "ЧДЦ=0");
		КомпонентыЧисла = Новый Массив;
		КомпонентыЧисла.Добавить(Новый ФорматированнаяСтрока(СуммаСтрокой+"%", КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой));
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(КомпонентыЧисла, , , , ));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Нет'"), КрупныйШрифт, ЦветаСтиля.CRM_ОсновнойГолубой, , ));
	КонецЕсли;
	
	Элементы.ДекорацияВероятностьСделки.Заголовок = Новый ФорматированнаяСтрока(КомпонентыФС, , );
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельСостоянийИнтересаВыбор(Команда)
	
	Если ЗначениеЗаполнено(ТекущаяЗадача) И СписокОбязательныхТипов.Количество() > 0 Тогда
		МассивОшибок = CRM_БизнесПроцессыСервер.ПроверкаНаличияОбъектовПоБизнесПроцессу(ТекущаяЗадача, СписокОбязательныхТипов, Истина);
		Если МассивОшибок.Количество() > 0 Тогда
			Для Индекс = 0 По МассивОшибок.ВГраница() Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(МассивОшибок[Индекс]);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИмяКомандыСостояния = Команда.Имя;

	ДанныеВыбранногоСостоянияИнтереса = СтруктураДоступныхСостоянийИнтереса[ИмяКомандыСостояния];
	ВыбранноеСостояние = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"),
		ДанныеВыбранногоСостоянияИнтереса.Состояние, ДанныеВыбранногоСостоянияИнтереса);
	ВыбранныйЭтап = ?(ТипЗнч(ДанныеВыбранногоСостоянияИнтереса) = Тип("Структура"), ДанныеВыбранногоСостоянияИнтереса.Этап, Неопределено);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("Состояние", ВыбранноеСостояние);
	Дополнительно.Вставить("Этап", ВыбранныйЭтап);
	Если ОткрыватьФормуПереносаИнтереса(ВыбранноеСостояние) Тогда
		ПереносИнтересаЗавершение = Новый ОписаниеОповещения("ОбработатьИнтересЗавершение", ЭтотОбъект, Дополнительно);
		ПараметрыФормы = Новый Структура("Интерес, ИнтересОбъект, Задача, ДанныеВыбранногоСостоянияИнтереса", Объект.Ссылка, Объект, ТекущаяЗадача, ДанныеВыбранногоСостоянияИнтереса);
		ПараметрыФормы.Вставить("ОткрытиеИзИнтереса", Истина);
		Если ЗаполнятьПервичныйИнтерес Тогда
			СтруктураПервичногоИнтереса = Новый Структура;
			СтруктураПервичногоИнтереса.Вставить("КаналПервичногоИнтереса", КаналПервичногоИнтереса);
			СтруктураПервичногоИнтереса.Вставить("ИсточникПервичногоИнтереса", ИсточникПервичногоИнтереса);
			ПараметрыФормы.Вставить("СтруктураПервичногоИнтереса", СтруктураПервичногоИнтереса);
		КонецЕсли;
		ОткрытьФорму("Обработка.CRM_АРМ_МоиПродажи.Форма.ФормаПереносаИнтереса", ПараметрыФормы, ЭтотОбъект,, ВариантОткрытияОкна.ОтдельноеОкно,, ПереносИнтересаЗавершение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ОбработатьИнтересЗавершение(Новый Структура, Дополнительно)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрыватьФормуПереносаИнтереса(СостояниеИнтереса)
	
	УказыватьДостигнутыйРезультат = Ложь;
	Если СостояниеИнтереса.УказыватьДостигнутыйРезультат Тогда
		Если ЗначениеЗаполнено(СостояниеИнтереса.ЗавершатьЗапланированныеАктивности) Тогда
			Если СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Взаимодействия Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ИначеЕсли СостояниеИнтереса.ЗавершатьЗапланированныеАктивности = Перечисления.CRM_ЗавершаемыеТипыАктивности.Задачи Тогда
				ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			Иначе
				ТипАктивности = Неопределено;
			КонецЕсли;
			УказыватьДостигнутыйРезультат = РегистрыСведений.CRM_ЗапланированныеАктивности.ЕстьАктивностиКЗавершению(Объект.Ссылка, ТипАктивности, СостояниеИнтереса.ОтборЗавершаемыхАктивностей);
		КонецЕсли;
	КонецЕсли;
	Возврат УказыватьДостигнутыйРезультат
				ИЛИ СостояниеИнтереса.ИнтерактивноеПланированиеАктивностей
				ИЛИ (СостояниеИнтереса.УказаниеОжидаемойВыручки И НЕ ЗначениеЗаполнено(Объект.ОжидаемаяВыручка))
				ИЛИ (СостояниеИнтереса.ОбязательноеЗаполнениеКлиента И Не ЗначениеЗаполнено(Объект.Партнер))
				ИЛИ СостояниеИнтереса.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение;
	
КонецФункции

&НаСервере
Функция ПроверитьЗапланированныеАктивности()
	Если ЗначениеЗаполнено(Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности) Тогда
		Если Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.ВзаимодействиеИЗадача Тогда
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, Перечисления.CRM_ТипыАктивности.Взаимодействие); 
			РезультатПроверки = Истина;
			Если Результат = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'"));
				РезультатПроверки = Ложь;
			КонецЕсли;
			Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, Перечисления.CRM_ТипыАктивности.Задача); 
			Если Результат = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет запланированных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled tasks for the current lead. You can not record a document!'"));
				РезультатПроверки = Ложь;
			КонецЕсли;
			Возврат РезультатПроверки;
		ИначеЕсли Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Взаимодействие Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Взаимодействие;
			ТекстСообщения = НСтр("ru='Нет запланированных взаимодействий по текущему интересу. Запись документа невозможна!';en='There are no planned interactions for the current lead. You can not record a document!'")
		ИначеЕсли Объект.СостояниеИнтереса.ОбязательноеПланированиеАктивности = Перечисления.CRM_ПланируемыеТипыАктивности.Задача Тогда
			ТипАктивности = Перечисления.CRM_ТипыАктивности.Задача;
			ТекстСообщения = НСтр("ru='Нет запланированных личных задач по текущему интересу. Запись документа невозможна!';en='There are no scheduled personal tasks for the current lead. You can not record a document!'")
		Иначе 
			ТипАктивности = Неопределено;
			ТекстСообщения = НСтр("ru='Нет запланированных активностей по текущему интересу. Запись документа невозможна!';en='There are no scheduled activities for the current lead. You can not record a document!'")
		КонецЕсли;
		Результат = РегистрыСведений.CRM_ЗапланированныеАктивности.СледующаяЗапланированнаяАктивность(Объект.Ссылка, ТипАктивности); 
		Если Результат = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура СценарийИнтересаПриИзмененииНаСервере()
	Объект.СостояниеИнтереса = Справочники.CRM_СостоянияИнтересов.ПервичноеСостояниеСценария(СценарийИнтереса);
	Записать();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаПриИзменении(Элемент)
	СценарийИнтересаПриИзмененииНаСервере();
	ЗаполнитьПанельСостоянийИнтереса();
КонецПроцедуры

&НаКлиенте
Процедура СценарийИнтересаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура("Сценарий", СценарийИнтереса);
	ОткрытьФорму("Обработка.CRM_НастройкаСценарияПродаж.Форма.Форма", ПараметрыОткрытия, ЭтотОбъект);
КонецПроцедуры

&НаСервере
// Функция получает список состояний из справочника CRM_СостоянияИнтересов.
//
// Параметры:
//	нет
//
// Возвращаемое значение:
//	СписокСостояний - СписокЗначений
Функция ПолучитьСписокСостоянийСервер(Задача, ТекСостояние = Неопределено, ТекущийЭтап = Неопределено)
	
	СписокСостояний = Новый СписокЗначений;
	Если Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Задача) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	CRM_СостоянияИнтересов.Ссылка КАК Ссылка,
		               |	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		               |	CRM_СостоянияИнтересов.Наименование КАК Наименование,
		               |	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		               |	CRM_СостоянияИнтересов.Представление КАК Представление,
		               |	CRM_СостоянияИнтересов.Завершено КАК Завершено,
		               |	CRM_СостоянияИнтересов.ВидСостояния КАК ВидСостояния
		               |ИЗ
		               |	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		               |ГДЕ
		               |	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		               |	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		               |	И CRM_СостоянияИнтересов.Родитель = &Родитель
		               |	И CRM_СостоянияИнтересов.Используется
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочивания";
		
		Запрос.УстановитьПараметр("Родитель", ТекСостояние.Родитель);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТекСостояние = Неопределено Тогда
				СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление);
			Иначе
				Если Выборка.Ссылка = ТекСостояние Тогда
					КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
				ИначеЕсли Выборка.РеквизитДопУпорядочивания<ТекСостояние.РеквизитДопУпорядочивания И НЕ Выборка.Завершено Тогда
					КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
				ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					КартинкаСостояния = БиблиотекаКартинок.CRM_УспешноеЗавершение;
				ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
					КартинкаСостояния = БиблиотекаКартинок.CRM_НеудачноеЗавершение;
				Иначе
					КартинкаСостояния = Неопределено;
				КонецЕсли;
				СписокСостояний.Добавить(Выборка.Ссылка, Выборка.Представление,, КартинкаСостояния);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(Задача) Тогда
		
		Если Не ЗначениеЗаполнено(ТекущийЭтап) Тогда
			Если ЗначениеЗаполнено(Задача.БизнесПроцесс.ЭтапДосрочногоЗавершения) Тогда
				ТекущийЭтап = Задача.БизнесПроцесс.ЭтапДосрочногоЗавершения;
			Иначе
				ТекущийЭтап = Задача.CRM_ТочкаМаршрута;
			КонецЕсли;
		КонецЕсли;
		
		РазрешеноПеремещатьЭтап			= Задача.БизнесПроцесс.КартаМаршрута.РазрешитьПеремещатьТекущийЭтап;
		РазрешеноДосрочноеЗавершение	= Истина;// Задача.БизнесПроцесс.КартаМаршрута.РазрешеноДосрочноеЗавершение;
		
		НеФормируемЗадачи = Ложь;
		НеПройденоРазделение = Ложь;
		
		CRM_БизнесПроцессыСервер.ПроверитьВыполнениеГрупповойПереадресованнойЗадачи(Задача, НеФормируемЗадачи);
		
		СоответствиеЭтаповВариантам = Новый Соответствие;
		
		СписокЭтапов = Новый СписокЗначений;
		МассивЭтапов = Новый Массив;
		МассивЭтапов.Добавить(Задача.CRM_ТочкаМаршрута);
		
		МассивТочекЗавершения = Новый Массив;
		
		Если НЕ НеФормируемЗадачи ИЛИ РазрешеноПеремещатьЭтап Тогда
			
			СтруктураВариантовВыполнения = CRM_БизнесПроцессыСервер.ПолучитьВариантыВыполненияЗадачи(Задача);
			
			Если СтруктураВариантовВыполнения.СписокВариантов.Количество() = 0 Тогда
				ВариантВыполнения = 0;
				МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
				
				Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
					Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
						МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
					Иначе
						НеПройденоРазделение = Истина;
						МассивИсходящихТочек.Очистить();
					КонецЕсли;
				КонецЕсли;
				
				Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
					СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
					МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
						МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого ЭлементСписка ИЗ СтруктураВариантовВыполнения.СписокВариантов Цикл
					ВариантВыполнения = ЭлементСписка.Значение;
					МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута,,,ВариантВыполнения);
					
					Если МассивИсходящихТочек.Количество() = 1 И МассивИсходящихТочек[0].ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Слияние Тогда
						Если CRM_БизнесПроцессыСервер.ПроверитьТочкиПередСозданиемЗадач(МассивИсходящихТочек, Задача.БизнесПроцесс, Задача.CRM_ТочкаМаршрута, Истина) Тогда
							МассивИсходящихТочек = CRM_БизнесПроцессыЭкспортныеМетоды.ПолучитьСледующиеТочкиМаршрута(Задача.БизнесПроцесс, МассивИсходящихТочек[0].ИсходящаяТочка,,,ВариантВыполнения);
						Иначе
							НеПройденоРазделение = Истина;
							МассивИсходящихТочек.Очистить();
						КонецЕсли;
					КонецЕсли;
					
					Для Каждого СтруктураИсхточки ИЗ МассивИсходящихТочек Цикл
						СоответствиеЭтаповВариантам.Вставить(СтруктураИсхточки.ИсходящаяТочка,ВариантВыполнения);
						МассивЭтапов.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						Если СтруктураИсхточки.ИсходящаяТочка.Вид = Перечисления.CRM_ВидыТочекМаршрута.Завершение Тогда
							МассивТочекЗавершения.Добавить(СтруктураИсхточки.ИсходящаяТочка);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		СписокЭтапов.ЗагрузитьЗначения(МассивЭтапов);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Интерес",Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивЭтапов",МассивЭтапов);
		ТекстЗапроса = "ВЫБРАТЬ
		|	CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута КАК Этап,
		|	ЕСТЬNULL(CRM_НастройкиЭтаповБизнесПроцессов.Состояние, ЗНАЧЕНИЕ(Справочник.CRM_СостоянияИнтересов.ПустаяСсылка)) КАК Состояние
		|ПОМЕСТИТЬ НастройкиЭтапов
		|ИЗ
		|	БизнесПроцесс.CRM_БизнесПроцесс КАК CRM_БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.CRM_НастройкиЭтаповБизнесПроцессов КАК CRM_НастройкиЭтаповБизнесПроцессов
		|		ПО CRM_БизнесПроцесс.Ссылка = CRM_НастройкиЭтаповБизнесПроцессов.Объект
		|ГДЕ
		|	CRM_БизнесПроцесс.Интерес = &Интерес
		|	И НЕ CRM_БизнесПроцесс.ПометкаУдаления";
		Если НЕ РазрешеноПеремещатьЭтап Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И CRM_НастройкиЭтаповБизнесПроцессов.ТочкаМаршрута В(&МассивЭтапов)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	CRM_СостоянияИнтересов.Ссылка,
		|	CRM_СостоянияИнтересов.ВероятностьСделки КАК ВероятностьСделки,
		|	CRM_СостоянияИнтересов.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
		|	CRM_СостоянияИнтересов.Наименование,
		|	CRM_СостоянияИнтересов.Завершено,
		|	CRM_СостоянияИнтересов.Представление,
		|	CRM_СостоянияИнтересов.ВидСостояния,
		|	ЕСТЬNULL(НастройкиЭтапов.Этап, ЗНАЧЕНИЕ(Справочник.CRM_ТочкиМаршрутов.ПустаяСсылка)) КАК Этап
		|ИЗ
		|	Справочник.CRM_СостоянияИнтересов КАК CRM_СостоянияИнтересов
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиЭтапов КАК НастройкиЭтапов
		|		ПО CRM_СостоянияИнтересов.Ссылка = НастройкиЭтапов.Состояние
		|ГДЕ
		|	CRM_СостоянияИнтересов.ПометкаУдаления = ЛОЖЬ
		|	И CRM_СостоянияИнтересов.ВидДела = ЗНАЧЕНИЕ(Справочник.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес)
		|	И НЕ НастройкиЭтапов.Этап ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочивания";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		СписокСостоянийТочки = Новый СписокЗначений;
		ЕстьНеудачныйВариант = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Этап) Тогда
				СписокСостоянийТочки.Добавить(Выборка.Этап);
				Если Выборка.Ссылка = ТекСостояние Тогда
					Если ТекущийЭтап = Выборка.Этап ИЛИ Выборка.Завершено Тогда
						КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
					ИначеЕсли Выборка.Этап.РеквизитДопУпорядочивания < ТекущийЭтап.РеквизитДопУпорядочивания И НЕ Выборка.Завершено Тогда
						КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
					Иначе
						КартинкаСостояния = Неопределено;
					КонецЕсли;
				ИначеЕсли Выборка.РеквизитДопУпорядочивания<ТекСостояние.РеквизитДопУпорядочивания Тогда
					КартинкаСостояния = БиблиотекаКартинок.ПиктограммаПоказателяПриемлемоеЗначение;
				ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.УспешноеЗавершение Тогда
					КартинкаСостояния = БиблиотекаКартинок.CRM_УспешноеЗавершение;
				ИначеЕсли Выборка.ВидСостояния = Перечисления.CRM_ВидыСостоянияИнтереса.НеудачноеЗавершение Тогда
					КартинкаСостояния = БиблиотекаКартинок.CRM_НеудачноеЗавершение;
				Иначе
					КартинкаСостояния = Неопределено;
				КонецЕсли;
				Если СписокЭтапов.НайтиПоЗначению(Выборка.Этап) = Неопределено Тогда
					ВариантВыполнения=Неопределено;
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),Истина);
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Представление + ", "+ Выборка.Этап,, КартинкаСостояния);
				Иначе
					ВариантВыполнения = СоответствиеЭтаповВариантам.Получить(Выборка.Этап);
					СтруктураСостояния = Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Выборка.Ссылка,Выборка.Этап, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения),(НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
					СписокСостояний.Добавить(СтруктураСостояния, Выборка.Представление + ", "+ Выборка.Этап,, КартинкаСостояния);
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (Выборка.Этап.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТочкаЗавершения ИЗ МассивТочекЗавершения Цикл
			Если СписокСостоянийТочки.НайтиПоЗначению(ТочкаЗавершения)<>Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СписокСостоянийТочки.Добавить(ТочкаЗавершения);
			ВариантВыполнения	= СоответствиеЭтаповВариантам.Получить(ТочкаЗавершения);
			Состояние			= ?(ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
				Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель),
				Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(ТекСостояние.Родитель));
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,ТочкаЗавершения, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), (НеФормируемЗадачи И РазрешеноПеремещатьЭтап));
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ ТочкаЗавершения);
			Если НЕ ЕстьНеудачныйВариант Тогда
				ЕстьНеудачныйВариант = (ТочкаЗавершения.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
			КонецЕсли;
		КонецЦикла;
		
		Если РазрешеноПеремещатьЭтап Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Владелец",Задача.БизнесПроцесс.КартаМаршрута);
			Запрос.УстановитьПараметр("НомерВерсии",Задача.БизнесПроцесс.НомерВерсииКартыМаршрута);
			Запрос.УстановитьПараметр("МассивЭтапов",МассивТочекЗавершения);
			ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута
			|ИЗ
			|	Справочник.CRM_ТочкиМаршрутов.ИсходящиеТочки КАК CRM_ТочкиМаршрутовИсходящиеТочки
			|ГДЕ
			|	CRM_ТочкиМаршрутовИсходящиеТочки.Ссылка.Владелец = &Владелец
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.НомерВерсии = &НомерВерсии";
			Если МассивТочекЗавершения.Количество() > 0 Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	И НЕ CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута В(&МассивЭтапов)";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса + "
			|	И CRM_ТочкиМаршрутовИсходящиеТочки.ТочкаМаршрута.Вид = ЗНАЧЕНИЕ(Перечисление.CRM_ВидыТочекМаршрута.Завершение)";
			Запрос.Текст = ТекстЗапроса;
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если СписокСостоянийТочки.НайтиПоЗначению(Выборка.ТочкаМаршрута)<>Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ВариантВыполнения	=Неопределено;
				Состояние			= ?(Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно,
					Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель),
					Справочники.CRM_СостоянияИнтересов.УспешноеЗавершениеСценария(ТекСостояние.Родитель));
				СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние,Выборка.ТочкаМаршрута, ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
				СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%), "+ Выборка.ТочкаМаршрута);
				Если НЕ ЕстьНеудачныйВариант Тогда
					ЕстьНеудачныйВариант = (Выборка.ТочкаМаршрута.ВариантЗавершения = Справочники.CRM_ВариантыЗавершенияБизнесПроцесса.Неудачно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НЕ ЕстьНеудачныйВариант И РазрешеноДосрочноеЗавершение Тогда
			ВариантВыполнения	=Неопределено;
			Состояние			= Справочники.CRM_СостоянияИнтересов.НеудачноеЗавершениеСценария(ТекСостояние.Родитель);
			СтруктураСостояния	= Новый Структура("Состояние, Этап, ВариантВыполнения, ЭтоПереход",Состояние, Справочники.CRM_ТочкиМаршрутов.ПустаяСсылка(), ?(ВариантВыполнения=Неопределено,0,ВариантВыполнения), Истина);
			Если Состояние = ТекСостояние Тогда
				КартинкаСостояния = БиблиотекаКартинок.сфпКлиентОжидание;
			Иначе
				КартинкаСостояния = Неопределено;
			КонецЕсли;
			СписокСостояний.Добавить(СтруктураСостояния, Состояние.Наименование + " (" + Состояние.ВероятностьСделки + "%)",, КартинкаСостояния);
		КонецЕсли;
		Если (НеФормируемЗадачи ИЛИ НеПройденоРазделение) И НЕ РазрешеноПеремещатьЭтап Тогда
			СписокСостояний.Очистить();
			ПоедставлениеОшибки = НСтр("ru='Не все задачи выполнены. Смена состояния невозможна.';en='Not all tasks are completed. Change of state is not possible.'");
			СписокСостояний.Добавить("Ошибка",ПоедставлениеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокСостояний;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиТегов

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" элемента формы "Тег".
//
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Создание" элемента формы "Тег".
//
Процедура ТегСоздание(Элемент, СтандартнаяОбработка)
	CRM_ТегиКлиент.ТегСоздание(Элемент, СтандартнаяОбработка, ТекущееПодразделение);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаНавигационнойСсылки" элемента формы "Тег".
&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СПАРКРиски

&НаКлиенте
Процедура ДекорацияИндексыСПАРКРискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СПАРКРискиКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

// ИнтернетПоддержкаПользователей.СПАРКРиски
&НаКлиенте
Процедура ДекорацияСПАРКПодробноНажатие(Элемент)
	
	СПАРКРискиКлиент.ПоказатьЗначенияИндексовКонтрагента(ИндексыСПАРКРиски, ЭтотОбъект);
	
КонецПроцедуры
// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ОбновитьОтображениеИндексыСПАРК()

	ОбновитьОтображениеИндексыСПАРК();

КонецПроцедуры

// Обновляет отображение индексов СПАРК Риски.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьОтображениеИндексыСПАРК()

	ПараметрыОтображения = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРискиКлиент.ОтобразитьИндексыСПАРК(
		ЭтотОбъект.ИндексыСПАРКРиски,
		Неопределено,
		Объект.Партнер, // Искать по ссылке
		ЭтотОбъект,
		ПараметрыОтображения,
		Истина);

КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКомандПодключаемыхОтчетовИОбработок

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ЛентаСобытий

&НаКлиенте
Процедура Подключаемый_ОбновитьЛенту()
	
	ПараметрыЛенты = Новый Структура;
	ПараметрыЛенты.Вставить("Режим",			"ЛентаИнтереса");
	ПараметрыЛенты.Вставить("Объект",			Объект.Ссылка);
	ПараметрыЛенты.Вставить("АдресКартинок",	Лента_АдресКартинок);
	ПараметрыЛенты.Вставить("Отбор",			Лента_Отбор);
	ПараметрыЛенты.Вставить("ОбъектовИстории",	Лента_КоличествоОбъектовИстории);
	ПараметрыЛенты.Вставить("Прокрутить",		Лента_Прокрутить);
	ПараметрыЛенты.Вставить("Пустая",			Не ЗначениеЗаполнено(Объект.Ссылка));
	
	ПолучателиЧата = Новый Массив;
	Лента_HTML = CRM_ЛентаСобытий.СформироватьЛенту(ПараметрыЛенты, ПолучателиЧата);
	
	Лента_Прокрутить = Ложь;
	
	Если Лента_ЗначенияНастроек.ИспользоватьЧаты Тогда
		CRM_ЛентаСобытийКлиент.НастроитьОбластьВводаПослеФормированияЛенты(ПолучателиЧата, ЭтотОбъект);
		ВидимостьКомандыЧат = (БыстрыйВвод_ЧатПолучатели.Количество() > 0);
		Если БыстрыйВвод_ТекущийТипОбъекта = "Чат" И Не ВидимостьКомандыЧат Тогда
			ПереключитьСтраницуБыстрогоВвода("Примечание");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбластьВвода

&НаКлиенте
Процедура ПереключитьСтраницуБыстрогоВвода(Знач НовыйТипОбъекта, Знач ПолныйСброс = Ложь)
	
	Если БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта И Не ПолныйСброс Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущиейКнопки = "БыстрыйВвод_" + БыстрыйВвод_ТекущийТипОбъекта;
	ТекущийШрифтКнопки = Элементы[ИмяТекущиейКнопки].Шрифт;
	Элементы[ИмяТекущиейКнопки].Шрифт = Новый Шрифт(ТекущийШрифтКнопки,,, Ложь);
	
	ИмяКнопки = "БыстрыйВвод_" + НовыйТипОбъекта;
	ШрифтКнопки = Элементы[ИмяКнопки].Шрифт;
	Элементы[ИмяКнопки].Шрифт = Новый Шрифт(ШрифтКнопки,,, Истина);
	
	ИмяТекущейСтраницы = "БыстрыйВвод_Страница" + БыстрыйВвод_ТекущийТипОбъекта;
	Элементы[ИмяТекущейСтраницы].Видимость = Ложь;
	
	ИмяСтраницы = "БыстрыйВвод_Страница" + НовыйТипОбъекта;
	Элементы[ИмяСтраницы].Видимость = Истина;
	
	БыстрыйВвод_ТекущийТипОбъекта = НовыйТипОбъекта;
	
	НастроитьОбластьВводаПоСтранице(ПолныйСброс);
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		Элементы.БыстрыйВвод_ПримечаниеТема.ОбновитьТекстРедактирования();
	КонецЕсли;
	
	БыстрыйВвод_КэшированнаяДатаНачала = БыстрыйВвод_ДатаНачала;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВвода()
	
	НастроитьОбластьВводаПоСтранице();
	
	// Настройки элементов.
	Элементы.БыстрыйВвод_ЗадачаПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛицаПартнеров");
	
	СостоянияИнтереса = Новый Массив;
	СостоянияИнтереса.Добавить(Объект.СостояниеИнтереса);
	СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
	
	ПараметрыВыбораВида = Новый Массив;
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса", Новый ФиксированныйМассив(СостоянияИнтереса)));
	ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
	Элементы.БыстрыйВвод_ВзаимодействиеВид.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
	Элементы.БыстрыйВвод_ЗадачаДатаОкончания_Время.Видимость = Лента_ЗначенияНастроек.ВремяВСрокахЗадач;
	Элементы.БыстрыйВвод_Письмо.Видимость	= Лента_ЗначенияНастроек.ДоступнаПочта;
	
	БыстрыйВвод_ПисьмоОтправлятьСразу = Ложь;
	НастройкиРаботыСПочтой = Взаимодействия.ПолучитьНастройкуРаботаСПочтой();
	Если НастройкиРаботыСПочтой.Свойство("ОтправлятьСообщенияСразу") И НастройкиРаботыСПочтой.ОтправлятьСообщенияСразу Тогда
		БыстрыйВвод_ПисьмоОтправлятьСразу = Истина;
	КонецЕсли;
	
	// Обычный ввод
	ОбычныйВвод_Команды.Очистить();
	ОписанияКоманд = CRM_ЛентаСобытий.КомандыОбычногоВводаЛенты("ЛентаИнтереса", Лента_ЗначенияНастроек);
	Если ОписанияКоманд.Количество() = 0 Тогда
		Элементы.ОбычныйВвод_ПоказатьЕще.Видимость = Ложь;
	Иначе
		Для Каждого ОписаниеКоманды Из ОписанияКоманд Цикл
			// для интереса удаляем "Заказ" и "Коммерческое предложение"
			Если ОписаниеКоманды.Значение = "ЗаказКлиента" Или ОписаниеКоманды.Значение = "КоммерческоеПредложение" Тогда
				Продолжить;
			КонецЕсли;							
			НоваяКоманда = ОбычныйВвод_Команды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяКоманда, ОписаниеКоманды);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОбластьВводаПоСтранице(Знач ПолныйСброс = Ложь)
	
	//Общее
	ТекущаяДата = ТекущаяДатаСеанса();
	БыстрыйВвод_ДатаНачала = ТекущаяДата;
	Если ПолныйСброс Тогда
		// При создании или отмене создания объекта.
		БыстрыйВвод_Тема = "";
		БыстрыйВвод_Содержание = "";
	КонецЕсли;
	
	Если БыстрыйВвод_ТекущийТипОбъекта = "Примечание" Тогда
		
		ТемаЗаполнена = ЗначениеЗаполнено(БыстрыйВвод_Тема);
		ВысотаТемы = ?(ТемаЗаполнена, 2, 1);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_ПримечаниеТема", "Высота", ВысотаТемы);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "БыстрыйВвод_Команды1", "Видимость", ТемаЗаполнена);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Взаимодействие" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		ДанныеВидаВзаимодействия = CRM_ЛентаСобытий.ДанныеВидаВзаимодействияПоУмолчанию("ЛентаИнтереса", Объект.СостояниеИнтереса);
		БыстрыйВвод_ВзаимодействиеВид = ДанныеВидаВзаимодействия.Ссылка;
		Если БыстрыйВвод_Тема = "" Тогда
			БыстрыйВвод_Тема = ДанныеВидаВзаимодействия.Описание;
		КонецЕсли;
		
		БыстрыйВвод_ВзаимодействиеНаВесьДень = Ложь;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаНачала_Время.Видимость = Истина;
		Элементы.БыстрыйВвод_ВзаимодействиеДатаОкончания_Время.Видимость = Истина;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 3600;
		БыстрыйВвод_ВзаимодействиеПолучатель = Объект.КонтактноеЛицо;
		
		Элементы.БыстрыйВвод_ВзаимодействиеПолучатель.Видимость = CRM_ЛентаСобытий.ЭтоПартнерСКонтактами(Объект.Партнер);
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Задача" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		БыстрыйВвод_ЗадачаВариантСрока = Перечисления.CRM_ВариантыУстановкиДаты.ЧерезДень;
		БыстрыйВвод_ДатаОкончания = ТекущаяДата + 86400;
		БыстрыйВвод_ЗадачаПолучатель = ТекущийПользователь;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Письмо" Тогда
		
		БыстрыйВвод_Тема = СокрЛП(СтрЗаменить(БыстрыйВвод_Тема, Символы.ПС, " "));
		
		БыстрыйВвод_ПисьмоПолучатели.Очистить();
		БыстрыйВвод_ПисьмоПолучателиКопий.Очистить();
		БыстрыйВвод_ПисьмоПолучателиСкрытыхКопий.Очистить();
		БыстрыйВвод_ПисьмоСписокПолучателейПисьма = "";
		БыстрыйВвод_ПисьмоСписокПолучателейКопий = "";
		БыстрыйВвод_ПисьмоСписокПолучателейСкрытыхКопий = "";
		
		УчетныеЗаписиПочтыСписокВыбора = Элементы.БыстрыйВвод_ПисьмоОтправительПредставление.СписокВыбора;
		УчетныеЗаписиПочтыСписокВыбора.Очистить();
		CRM_УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(УчетныеЗаписиПочтыСписокВыбора,, ТекущийПользователь);
		Если УчетныеЗаписиПочтыСписокВыбора.Количество() > 0 Тогда
			УчетнаяЗаписьПоУмолчанию = CRM_ЛентаСобытий.УчетнаяЗаписьПоУмолчанию(ТекущийПользователь);
			ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора.НайтиПоЗначению(УчетнаяЗаписьПоУмолчанию);
			Если ЭлементСписка = Неопределено Тогда
				ЭлементСписка = УчетныеЗаписиПочтыСписокВыбора[0];
			КонецЕсли;
			БыстрыйВвод_ПисьмоУчетнаяЗапись = ЭлементСписка.Значение;
			БыстрыйВвод_ПисьмоОтправительПредставление = ЭлементСписка.Представление;
		КонецЕсли;
		
		ВладельцыКонтактнойИнформации = Новый Массив;
		Если ЗначениеЗаполнено(Объект.Партнер) Тогда
			ВладельцыКонтактнойИнформации.Добавить(Объект.Партнер);
			КонтактыПартнера = CRM_ЛентаСобытий.КонтактыПартнера(Объект.Партнер);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВладельцыКонтактнойИнформации, КонтактыПартнера);
		Иначе
			ВладельцыКонтактнойИнформации.Добавить(Объект.ПотенциальныйКлиент);
		КонецЕсли;
		
		ДанныеКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
			ВладельцыКонтактнойИнформации, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		БыстрыйВвод_ПисьмоИсторияАдресов.Очистить();
		Для Каждого Строка Из ДанныеКонтактнойИнформации Цикл
			ПредставлениеАдресаКонтакта = CRM_УправлениеЭлектроннойПочтой.ПолучитьПредставлениеАдресата(Строка.Объект, Строка.Представление, "");
			БыстрыйВвод_ПисьмоИсторияАдресов.Добавить(ПредставлениеАдресаКонтакта);
		КонецЦикла;
		
	ИначеЕсли БыстрыйВвод_ТекущийТипОбъекта = "Чат" Тогда
		
		// Если смогли переключиться на эту страницу - значит, получатели есть.
		ПервыйПолучатель = БыстрыйВвод_ЧатПолучатели[0];
		БыстрыйВвод_ЧатИдентификаторПолучателя = ПервыйПолучатель.Идентификатор;
		БыстрыйВвод_ЧатАдрес = ПервыйПолучатель.Адрес;
		БыстрыйВвод_ЧатПолучатель = ПервыйПолучатель.Контакт;
		БыстрыйВвод_ЧатПредставлениеПолучателя = ПервыйПолучатель.Представление;
		БыстрыйВвод_ЧатУчетнаяЗапись = ПервыйПолучатель.УчетнаяЗапись;
		БыстрыйВвод_ЧатГруппа = ПервыйПолучатель.Группа;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Товары

&НаКлиенте
Процедура ОбновитьЗаголовокГруппыТовары()
	// +CRM_Модуль
	//ИтогВсего = Объект.Запасы.Итог("Всего");
	//Элементы.Товары.Заголовок = НСтр("ru = 'Товары и услуги'") + " (" + Объект.Запасы.Количество() 
	//	+ ?(Объект.Запасы.Количество() = 0, "", ", " + ИтогВсего + " " + Строка(Объект.Валюта)) + ")";
	
	ИтогВсего = Объект.Товары.Итог("СуммаСНДС");
	Элементы.ТоварыВерхнийУровень.Заголовок = НСтр("ru = 'Товары и услуги'") + " (" + Объект.Товары.Количество() 
		+ ?(Объект.Товары.Количество() = 0, "", ", " + ИтогВсего + " " + Строка(Объект.Валюта)) + ")";
	// -CRM_Модуль
	
	Элементы.ГруппаПерезаполнитьОжидаемуюВыручку.Видимость = (ИтогВсего<>Объект.ОжидаемаяВыручка);
КонецПроцедуры

#КонецОбласти

#Область НастройкаРасположенияЭлементов

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормы(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение", ЭтотОбъект);
	CRM_УправлениеЭлементамиНаФормахКлиент.НастройкаРасположенияЭлементовФормы(ЭтотОбъект, ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершение(Результат, ДопПараметры) Экспорт
	Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_НастройкаРасположенияЭлементовФормыЗавершениеСервер(Результат, ДопПараметры)
	CRM_УправлениеЭлементамиНаФормах.РазместитьЭлементыПоНастройке(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область CRM_Модуль

// +CRM_Модуль

#Область CRM_Модуль_Разное

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСумма.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ВидЦены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьРучныеСкидкиВПродажах");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюПродажи(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеЦенаВключаетНДС(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

	//

	Ценообразование.УстановитьУсловноеОформлениеВидовЦен(ЭтаФорма);

	//
	
	НаборыСервер.УстановитьУсловноеОформление(ЭтаФорма, "Товары");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;	
	
	ВалютаДокумента = Объект.Валюта;
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	//ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	//
	//МассивЭлементов = Новый Массив();
	//
	//МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	//МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	//МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	//МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	//МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	//МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	//МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	//
	//МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	//МассивЭлементов.Добавить("СуммаРучнойСкидки");
	//МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	//МассивЭлементов.Добавить("СуммаАвтоСкидки");
	//МассивЭлементов.Добавить("ПроцентСкидки");
	//МассивЭлементов.Добавить("СуммаСкидки");
	//
	//ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиКоммерческогоПредложения(Форма)
	
	КоллекцияТовары = Форма.Объект.Товары;
	
	Форма.СуммаАвтоСкидки = КоллекцияТовары.Итог("СуммаАвтоматическойСкидки");

	Форма.СуммаРучнойСкидки = КоллекцияТовары.Итог("СуммаРучнойСкидки");

	Форма.СуммаСкидки = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	Форма.СуммаВсего = КоллекцияТовары.Итог("СуммаСНДС");
	
	СуммаБезНДС = КоллекцияТовары.Итог("Сумма");
	
	Если СуммаБезНДС > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаБезНДС + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = 100;
	Иначе
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
	КонецЕсли;
	
	ОтображатьИтогСуммыНДС = УчетНДСУПКлиентСервер.ПродажаОблагаетсяНДС(Форма.Объект.НалогообложениеНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗависимыеРеквизиты()
	
	Возврат Новый Структура();
	
	//Возврат Новый Структура(
	//	"Активность, БезВозвратнойТары, АктивностьБезВозвратнойТары",
	//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
	//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки",
	//	"Сумма,СуммаНДС,СуммаСНДС,СуммаАвтоматическойСкидки,СуммаРучнойСкидки");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТоваровВХранилище);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "НоменклатураНабора, ХарактеристикаНабора, Номенклатура, Характеристика, Упаковка, ВидЦены, Цена, КоличествоУпаковок, ПроцентРучнойСкидки");
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки, ТолькоАктивныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки,,ТолькоАктивныеСтроки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьУсловияПродаж()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	CRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьУсловияПродажПоУмолчанию(ДокументПродажи);
	
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(ДокументПродажи.Соглашение) Тогда
		ПриИзмененииХозяйственнойОперацииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента) Тогда
		
		ВалютаПриИзмененииСервер(Объект.Валюта);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДСПродажи()
	
	ПараметрыЗаполнения = CRM_Модуль_МетодыМодулейМенеджеровДокументов.ИнтересПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ИмяСобытия = ДополнительныеПараметры.ИмяСобытия;
    Параметр = ДополнительныеПараметры.Параметр;
    
    
    ОбработкаОповещенияФрагмент(ИмяСобытия, Параметр);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФрагмент(Знач ИмяСобытия, Знач Параметр)
    
    Если ИмяСобытия = "ПолученыСообщения"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПолученыСообщения(Параметр.Сообщения);
    КонецЕсли;
    
    Если ИмяСобытия = "КопированиеСтрокВБуферОбмена" Тогда
        
        УстановитьДоступностьКомандБуфераОбменаНаКлиенте();
        
    КонецЕсли;
    
    Если ИмяСобытия = "ДобавлениеПартнераВСегмент"
        ИЛИ ИмяСобытия = "УдалениеПартнераИзСегмента" Тогда
        
    КонецЕсли;
    
    Если ИмяСобытия = "Закрытие_РедактированиеКомплекта"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        ПриОкончанииРедактированияНабора(Параметр.АдресВоВременномХранилище);
    КонецЕсли;
    
    Если ИмяСобытия = "РедактироватьНабор"
        И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
        
        ПараметрыКомплекта = Новый Структура;
        ПараметрыКомплекта.Вставить("НоменклатураНабора", Параметр.НоменклатураНабора);
        ПараметрыКомплекта.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
        
        АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
        
        ПараметрыОткрытия = Новый Структура;
        ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
        ПараметрыОткрытия.Вставить("НоменклатураНабора",   Параметр.НоменклатураНабора);
        ПараметрыОткрытия.Вставить("ХарактеристикаНабора", Параметр.ХарактеристикаНабора);
        ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
        ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
        ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
        ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
        ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
        ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
        
        ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти // CRM_Модуль_Разное

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();

КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	Если ИспользоватьСоглашенияСКлиентами Тогда
		ЗаполнитьУсловияПродаж();
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения = Неопределено)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
		Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Если НЕ ИспользоватьСоглашенияСКлиентами Тогда
		ПараметрыВыбораВидаЦены = ЗначениеНастроекПовтИсп.ПараметрыВыбораВидаЦеныПоУмолчанию();
	
		ПараметрыВыбораВидаЦены.ЦенаВключаетНДС        = Объект.ЦенаВключаетНДС;
		ПараметрыВыбораВидаЦены.ИспользоватьПриПродаже = Истина;
		ПараметрыВыбораВидаЦены.Статус                 = Перечисления.СтатусыДействияВидовЦен.Действует;
		
		ВидЦеныПоУмолчанию = ЗначениеНастроекПовтИсп.ВидЦеныПоУмолчанию(ПараметрыВыбораВидаЦены);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()
	
	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	CRM_Модуль_МетодыМодулейОбъектовДокументов.ИнтересЗаполнитьУсловияПродажПоСоглашению(ДокументПродажи);
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	ВалютаДокумента = Объект.Валюта;
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта)
	
	СтараяВалюта                = ВалютаДокумента;
	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
		Объект.Товары,
		Объект.ЦенаВключаетНДС,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты,
		СтруктураКурсовНовойВалюты,
		Истина,
		Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер()
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьЗаголовокГруппыТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Если Копирование Тогда
		НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ, Истина);
		Возврат;
	КонецЕсли;

	Если ФлагРекурсии Тогда
		
		ФлагРекурсии = Ложь;
		Возврат;
		
	КонецЕсли;

	Отказ        = Истина;
	ФлагРекурсии = Истина;
	
	Элементы.Товары.ДобавитьСтроку();
	
	НоваяСтрока            = Элементы.Товары.ТекущиеДанные;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	НаборыКлиент.ПередУдалениемСтрокиТабличнойЧасти(ЭтаФорма, "Товары", Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПродажиКлиент.СтрокаНоменклатурыПриНачалеРедактирования(ЭтаФорма, "Товары", ТекущаяСтрока, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если НЕ Объект.СкидкиРассчитаны Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыВыборЗавершение", ЭтотОбъект, 
				Новый Структура("ВыбраннаяСтрока, Поле", ВыбраннаяСтрока, Поле)), 
				НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
            Возврат;
		КонецЕсли;
		
		ТекущиеДанные = ТоварыВыборФрагмент();

	ИначеЕсли НаборыКлиент.БлокируемыйЭлемент(Поле)
		И ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		
		ПараметрОповещения = Новый Структура;
		ПараметрОповещения.Вставить("НоменклатураНабора",   ТекущаяСтрока.НоменклатураНабора);
		ПараметрОповещения.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
		ПараметрОповещения.Вставить("ФормаВладелец", УникальныйИдентификатор);
		
		Оповестить("РедактироватьНабор", ПараметрОповещения, ЭтаФорма);
		
	ИначеЕсли Поле = Элементы.ТоварыНоменклатураНабора Тогда
	
		ПоказатьЗначение(Неопределено, Элементы.Товары.ТекущиеДанные.НоменклатураНабора);
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены выберите вид цены ""<произвольная>""'"),
				Объект.Ссылка,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбраннаяСтрока = ДополнительныеПараметры.ВыбраннаяСтрока;
    Поле = ДополнительныеПараметры.Поле;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ТоварыВыборФрагмент();

КонецПроцедуры

&НаКлиенте
Функция ТоварыВыборФрагмент()
    
    Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
    Возврат ТекущиеДанные;

КонецФункции

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	
	Если ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаЦены  = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, 
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", СтруктураПересчетаЦены);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ЦенообразованиеИСкидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ПоВсемСтрокам = Ложь)
	Если ПоВсемСтрокам Тогда
		МассивСтрок = Неопределено;
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
			МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
		КонецЦикла;
	КонецЕсли;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦены");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары, // Табличная часть
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	НаборыВызовСервера.ДополнитьДоПолногоНабора(Объект.Товары, МассивСтрок);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("ВидЦены", ВидЦен);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, ВидЦены");
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		ПараметрыЗаполнения,
		СтруктураДействий);
		
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция СтруктураСообщений()
	
	Возврат CRM_Модуль_СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСкидкиНаценкиКлиент()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
		
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ)
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		Отказ = Истина;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Объект.СкидкиРассчитаны = Истина;
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураСообщений = CRM_Модуль_СкидкиНаценкиСервер.СтруктураСообщений(Объект);
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки, АдресВоВременномХранилище)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
	ПараметрыСкидки = Новый Структура();
	ПараметрыСкидки.Вставить("ИспользуютсяАвтоматическиеСкидки", Истина);
	ПараметрыСкидки.Вставить("РассчитыватьСуммуСНДС", Истина);
	ПараметрыСкидки.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);
	ПараметрыСкидки.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	CRM_Модуль_СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, ПараметрыСкидки);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(CRM_Модуль_СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	CRM_Модуль_СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	CRM_Модуль_СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СкидкиИзменились = СкидкиНаценкиВызовСервера.НеобходимПерерасчетСкидок(
		Объект, 
		УправляемыеСкидки, 
		УникальныйИдентификатор, 
		АдресПримененныхСкидокВоВременномХранилище);
		
	Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
		СкидкиИзменились = Истина;
	КонецЕсли;

	Возврат СкидкиИзменились;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьПользователюРассчитатьСкидкиЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
		
		Отказ = Ложь;
		ПрименитьИзмененияСкидокНаценокНаКлиенте(Отказ);
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
		Если Не Отказ Тогда
			ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АвтоТест_ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	ЗаполнитьЦеныПоСоглашению(Команда)

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ПродажиКлиент.ВыбратьВидЦен(
			Новый ОписаниеОповещения("ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ЦенаВключаетНДС,
			Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенЗавершение(ВидЦен, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОшибкахОткрытияПодбора(Отказ)
	
	Если ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"), Объект.Ссылка, "Объект.Соглашение",,Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"), Объект.Ссылка, "Объект.Валюта",,Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина,
		"Документ.КоммерческоеПредложениеКлиенту.ФормаДокумента.Команда.ОткрытьПодбор");
	
	Отказ = Ложь;
	Если (ИспользоватьСоглашенияСКлиентами И Не ЗначениеЗаполнено(Объект.Соглашение))
		Или Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		ОчиститьСообщения();
		СообщитьОбОшибкахОткрытияПодбора(Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрЗаголовок = НСтр("ru = 'Подбор товаров в %Документ%'");
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Объект.Ссылка);
	Иначе
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", НСтр("ru = 'коммерческое предложение клиенту'"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Соглашение",      Объект.Соглашение);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ОстаткиПоВсемСкладам", Истина);
	ПараметрыФормы.Вставить("Валюта",    Объект.Валюта);
	ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
	ПараметрыФормы.Вставить("Дата",      Объект.Дата);
	ПараметрыФормы.Вставить("Документ",  Объект.Ссылка);
	ОткрытьФорму("Обработка.ПодборТоваровВДокументПродажи.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСкидкиНаценки(Команда)
	
	РассчитатьСкидкиНаценкиКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если Не Объект.СкидкиРассчитаны Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОткрытьИнформациюОСкидкахЗавершение", ЭтотОбъект), 
			НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ОткрытьИнформациюОСкидкахФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        
        СтруктураПараметры = Новый Структура;
        СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
        СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
        СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
        СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
        
        СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
        Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
            ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
        КонецЕсли;
        
    КонецЕсли;
    
    ОткрытьИнформациюОСкидкахФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидкахФрагмент()
    
    Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
        РассчитатьСкидкиБезПримененияКОбъекту();
    КонецЕсли;
    
    ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
    СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	Оповещение = Новый ОписаниеОповещения("НазначитьАвтоматическиеСкидкиЗавершение", ЭтотОбъект);
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидкиЗавершение(ВозвращенноеЗначение, ДополнительныеПараметры) Экспорт 
	
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Неопределено, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина, Ложь);
	
	Оповещение = Новый ОписаниеОповещения(
		"НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение", 
		ЭтотОбъект, 
		Новый Структура("АдресВоВременномХранилище", АдресВоВременномХранилище));
	
	СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта,
		Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрокЗавершение(СуммаРучнойСкидкиНаценки, ДополнительныеПараметры) Экспорт 
	
	АдресВоВременномХранилище = ДополнительныеПараметры.АдресВоВременномХранилище;
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		
		ОбновитьЗаголовокГруппыТовары();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	ОбновитьЗаголовокГруппыТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(
		ДанныеТаблицы,
		ТаблицаФормы,
		Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСтроки(Команда)
	
	КоличествоТоваровДоВставки = Объект.Товары.Количество();
	
	ПолучитьСтрокиИзБуфераОбмена();
	
	КоличествоВставленных = Объект.Товары.Количество()-КоличествоТоваровДоВставки;
	КопированиеСтрокКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоВставленных);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСтроки(Команда)
	
	Если КопированиеСтрокКлиент.ВозможноКопированиеСтрок(Элементы.Товары.ТекущаяСтрока) Тогда
		СкопироватьСтрокиНаСервере();
		КопированиеСтрокКлиент.ОповеститьПользователяОКопированииСтрок(Элементы.Товары.ВыделенныеСтроки.Количество());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗагружатьЦены", Истина);
	ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыФормы.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
	
	ОткрытьФорму(
		"Обработка.ЗагрузкаДанныхИзВнешнихФайлов.Форма.Форма",
		ПараметрыФормы,
		ЭтаФорма,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставНабора(Команда)
	
	ВыбраннаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКомплекта = Новый Структура;
	ПараметрыКомплекта.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыКомплекта.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыКомплекта.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	АдресНабораВоВременномХранилище = АдресНабораВоВременномХранилище(ПараметрыКомплекта);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресВоВременномХранилище", АдресНабораВоВременномХранилище);
	ПараметрыОткрытия.Вставить("НоменклатураНабора", ТекущаяСтрока.НоменклатураНабора);
	ПараметрыОткрытия.Вставить("ХарактеристикаНабора", ТекущаяСтрока.ХарактеристикаНабора);
	ПараметрыОткрытия.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	ПараметрыОткрытия.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	ПараметрыОткрытия.Вставить("Валюта", Объект.Валюта);
	ПараметрыОткрытия.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыОткрытия.Вставить("Дата", Объект.Дата);
	ПараметрыОткрытия.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("Склад", Объект.Склад);
	ПараметрыОткрытия.Вставить("СкрыватьКомандуОстаткиНаСкладах", Ложь);
	
	ОткрытьФорму("Обработка.РедактированиеНабора.Форма.Форма", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(СтруктураСообщений(), ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСБуферомОбмена

&НаСервере
Процедура СкопироватьСтрокиНаСервере()
	
	КопированиеСтрокСервер.ПоместитьВыделенныеСтрокиВБуферОбмена(Элементы.Товары.ВыделенныеСтроки, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиИзБуфераОбмена()
	
	ТаблицаТоваров = КопированиеСтрокСервер.ПолучитьСтрокиИзБуфераОбмена();
	
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		ТекущаяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара);
		Если НЕ ИспользоватьРучныеСкидкиВПродажах Тогда
			ТекущаяСтрока.ПроцентРучнойСкидки = 0;
			ТекущаяСтрока.СуммаРучнойСкидки = 0;
		КонецЕсли;
		
		ТекущаяСтрока.ИндексНабора = ?(ЗначениеЗаполнено(ТекущаяСтрока.НоменклатураНабора), 1, 0);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",
			Новый Структура("НалогообложениеНДС, Дата", Объект.НалогообложениеНДС, Объект.Дата));
		
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьКомандБуфераОбмена()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы,
		МассивЭлементов,
		"Доступность",
		НЕ ОбщегоНазначения.ПустойБуферОбмена("Строки"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандБуфераОбменаНаКлиенте()
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("ТоварыВставитьСтроки");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюВставитьСтроки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Наборы

&НаКлиентеНаСервереБезКонтекста
Функция КолонкиНабора(Форма)
	
	Колонки = Новый Массив;
	Колонки.Добавить("Номенклатура");
	Колонки.Добавить("Характеристика");
	
	Колонки.Добавить("Цена");
	Колонки.Добавить("ВидЦены");
	Колонки.Добавить("Упаковка");
	Колонки.Добавить("Количество");
	Колонки.Добавить("КоличествоУпаковок");
	
	Если Форма.ИспользоватьРучныеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентРучнойСкидки");
		Колонки.Добавить("СуммаРучнойСкидки");
	КонецЕсли;
	Если Форма.ИспользоватьАвтоматическиеСкидкиВПродажах Тогда
		Колонки.Добавить("ПроцентАвтоматическойСкидки");
		Колонки.Добавить("СуммаАвтоматическойСкидки");
	КонецЕсли;
	
	Колонки.Добавить("СтавкаНДС");
	Колонки.Добавить("СуммаНДС");
	Колонки.Добавить("СуммаСНДС");
	Колонки.Добавить("Сумма");
	
	Возврат Колонки;
	
КонецФункции

&НаКлиенте
// Вызывается через ОписаниеОповещения из общего модуля НаборыКлиент 
Процедура ПриУдаленииКомплектующих(Действие, ДополнительныйПараметр) Экспорт
	
	Если НаборыКлиент.ДействиеРедактироватьНабор(Действие) Тогда
		НаборыКлиент.ПриУдаленииКомплектующих(ЭтаФорма, "Товары", ДополнительныйПараметр);
	ИначеЕсли НаборыКлиент.ДействиеУдалитьВесьНабор(Действие) Тогда
		ПриУдаленииКомплектующихНаСервере("Товары", ДополнительныйПараметр);
	КонецЕсли;
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриУдаленииКомплектующихНаСервере(ИмяТЧ, ДополнительныйПараметр)
	НаборыСервер.ПриУдаленииКомплектующих(ЭтаФорма, ИмяТЧ, ДополнительныйПараметр);
КонецПроцедуры

&НаСервере
Функция АдресНабораВоВременномХранилище(Параметры)
	
	Возврат НаборыСервер.АдресНабораВоВременномХранилище(ЭтаФорма, Параметры, "Товары");
	
КонецФункции

&НаСервере
Процедура ПриОкончанииРедактированияНабора(АдресВоВременномХранилище)
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", ЗависимыеРеквизиты());

	ПараметрыДанных = Новый Структура;
	ПараметрыДанных.Вставить("Данные", ПолучитьИзВременногоХранилища(АдресВоВременномХранилище));
	ПараметрыДанных.Вставить("СтруктураДействийСИзмененнымиСтроками", СтруктураДействийСИзмененнымиСтроками);
	ПараметрыДанных.Вставить("СтруктураДействийСДобавленнымиСтроками", СтруктураДействийСДобавленнымиСтроками);
	ПараметрыДанных.Вставить("КолонкиНабора", КолонкиНабора(ЭтаФорма));
	
	НаборыСервер.ПриОкончанииРедактированияНабора(ЭтаФорма, "Товары", ПараметрыДанных);
	
	РассчитатьИтоговыеПоказателиКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураДействий);
	НаборыСервер.ЗаполнитьСлужебныеРеквизиты(ЭтаФорма);
	
	ОбщегоНазначенияУТ.ЗаполнитьДубликатыЗависимыхРеквизитовВКоллекции(Объект.Товары, ЗависимыеРеквизиты());
	
КонецПроцедуры

#КонецОбласти

// -CRM_Модуль
#КонецОбласти

#КонецОбласти


