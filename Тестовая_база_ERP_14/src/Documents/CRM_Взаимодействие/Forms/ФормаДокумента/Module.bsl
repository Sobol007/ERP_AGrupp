
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("ОткрыватьФорму") И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда 
		НеОбрабатыватьОткрытие = Истина;
		Возврат; 
	КонецЕсли;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", "");
		ДополнительныеПараметры.Вставить("Объект", Объект);
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Параметры.Свойство("ВидВзаимодействия") И
			ЗначениеЗаполнено(Параметры.ВидВзаимодействия) Тогда
			Объект.ВидВзаимодействия = Параметры.ВидВзаимодействия;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытоИзФормыНапоминаний = Ложь;
	Параметры.Свойство("ОткрытоИзФормыНапоминаний", ОткрытоИзФормыНапоминаний);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	CRM_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ОтрисоватьКатегорииНаФорме();
	ЗаполнитьГруппуОповещений();
	
	ПериодическоеСтароеЗначение = Объект.Периодическое;
	
	ПереместитьДопРеквизиты();
	ДобавитьПартнераВСторонниеЛица();
	
	ПараметрыВыбораВида = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.Направление", Перечисления.CRM_ВходящееИсходящееСобытие.Исходящее));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес));
			СостоянияИнтереса = Новый Массив;
			СостоянияИнтереса.Добавить(Объект.ДокументОснование.СостояниеИнтереса);
			СостоянияИнтереса.Добавить(Справочники.CRM_СостоянияИнтересов.ПустаяСсылка());
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.СостояниеИнтереса", Новый ФиксированныйМассив(СостоянияИнтереса)));
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.Задача_ЗадачаИсполнителя));
		Иначе
			ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
		КонецЕсли;
	Иначе
		ПараметрыВыбораВида.Добавить(Новый ПараметрВыбора("Отбор.ВидДела", Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы));
	КонецЕсли;
	Элементы.ВидВзаимодействия.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораВида);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НеОбрабатыватьОткрытие Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ПараметрыОткрытия = Новый Структура("Ключ, ПозиционироватьНаВзаимодействие", Объект.ДокументОснование, Объект.Ссылка);
			ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыОткрытия);
		Иначе
			ПоказатьЗначение(, Объект.ДокументОснование);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	// Поиск себя.
	МассивСтрок = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь));
	Если МассивСтрок.Количество() > 0 Тогда
		Элементы.СвоиЛица.ТекущаяСтрока = МассивСтрок[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	//Если Объект.Ссылка.Пустая() И Объект.СторонниеЛица.Количество()>0 Тогда
	//	Для каждого ТекущаяСтрока из Объект.СторонниеЛица Цикл
	//		ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока);
	//	КонецЦикла;
	//КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// При открытии Интереса вместо взаимодействия отрабатывает оповещение и падает на УправлениеСвойствамиКлиент
	Если ИмяСобытия = "СПАРКРиски:ИзмененоСостояниеФоновогоЗадания" Тогда
		Возврат;
	КонецЕсли;
	Если ИмяСобытия = "УстановленНовыйОтветственный" Тогда
		// Нового ответственного - из гостей.
		НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", Объект.Ответственный));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Объект.ОтветственныйПосетитМероприятие = НайденныеСтроки[0].ПосетитМероприятие;
			Объект.СвоиЛица.Удалить(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
	
	CRM_СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.Свойства
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		Если МодульУправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ОткрытоИзФормыНапоминаний И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Оповестить("ПисьмоУспешноОткрытоИзНапоминания",Новый Структура("Ссылка, Пользователь", Объект.Ссылка, ПользователиКлиентСервер.ТекущийПользователь()));
	КонецЕсли; 	
	Если Не ЗначениеЗаполнено(Объект.СостояниеИнтереса) И ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		Объект.СостояниеИнтереса = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ДокументОснование, "СостояниеИнтереса");	
	КонецЕсли; 
	
	Если ЭтотОбъект.Модифицированность Тогда
		ВопросИзмененияЗадавался = Ложь;
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
	ДатаНовая				= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	ОкончаниеСобытияНовое	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан, ВремяОкончанияПлан);
	Объект.ПлановаяДата					= ДатаНовая;
	Объект.ПлановаяДатаЗавершение	= ОкончаниеСобытияНовое;
	
	Если Не ВопросИзмененияЗадавался Тогда
		ПериодическоеСобытиеСпособИзмененияРяда = "";
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			бПризнакИзмененоВРяде = Неопределено;
			Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде И НЕ ПризнакПериодическоеСобытиеИнициализация Тогда
				// Проверка на то, что даты были изменены больше чем на день - для периодического события это означает установку
				// флага ИзмененоВРяде.
				ДатаСтарая				= Объект.ПлановаяДата;
				ОкончаниеСобытияСтарое	= Объект.ПлановаяДатаЗавершение;
				бИзмененаДатаНачала		= НЕ (НачалоДня(ДатаСтарая) = НачалоДня(ДатаНовая));
				бИзмененаДатаОкончания	= НЕ (НачалоДня(ОкончаниеСобытияСтарое) = НачалоДня(ОкончаниеСобытияНовое));
				Если бИзмененаДатаНачала ИЛИ бИзмененаДатаОкончания Тогда
					бПризнакИзмененоВРяде = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			Если Не ПризнакПериодическоеСобытиеИнициализация Тогда
				Если Объект.Периодическое Тогда
					Если НЕ Объект.ИзмененоВРяде И (бПризнакИзмененоВРяде = Истина) Тогда
						Объект.ИзмененоВРяде = Истина;
					КонецЕсли;
				ИначеЕсли ПериодическоеСтароеЗначение И НЕ Объект.ИзмененоВРяде Тогда
					// Снята пометка "Периодическое".
					ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда";
				КонецЕсли;
				Если Объект.Периодическое И НЕ Объект.ИзмененоВРяде Тогда
					Если ПризнакПериодическоеСобытиеИнициализация Тогда
						ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
					Иначе
						Если НЕ Модифицированность И НЕ ПризнакИзмененоРасписание Тогда
							ПериодическоеСобытиеСпособИзмененияРяда = "";
						Иначе
							ПараметрыФормы = Новый Структура("ДоступныеДействия", Новый Массив());
							Если НЕ ПризнакИзмененоРасписание Тогда
								ПараметрыФормы.ДоступныеДействия.Добавить("ТолькоТекущее");
							КонецЕсли;
							ПараметрыФормы.ДоступныеДействия.Добавить("ДоКонцаРяда");
							ПараметрыФормы.ДоступныеДействия.Добавить("ВесьРяд");
							
							Отказ = Истина;
							ОП = Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект);
							ОткрытьФорму("Документ.CRM_Взаимодействие.Форма.ФормаИзменениеПериодическогоСобытия", ПараметрыФормы, ЭтотОбъект,,,,ОП, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Параметры, Дополнительно) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПринятьИзменения = Истина Тогда 
			ПериодическоеСобытиеСпособИзмененияРяда = Параметры.СпособИзмененияРяда;
			ВопросИзмененияЗадавался = Истина;
			Записать();
		Иначе
			ВопросИзмененияЗадавался = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоМероприятия = ЭтоНовыйОбъект;
	Если ТекущийОбъект.СтатусВзаимодействия.ТипСостояния = Перечисления.CRM_ТипыСостоянийСобытий.Завершено И ТекущийОбъект.СтатусВзаимодействия<>ТекущийОбъект.Ссылка.СтатусВзаимодействия Тогда
		Если ЗначениеЗаполнено(ТекущийОбъект.ДокументОснование) И ТипЗнч(ТекущийОбъект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			ТекущийОбъект.СостояниеИнтереса = ТекущийОбъект.ДокументОснование.СостояниеИнтереса;	
		КонецЕсли; 
		ТекущийОбъект.ДатаЗавершенияВзаимодействия = ТекущаяДатаСеанса();
		ТекущийОбъект.ЗавершившийПользователь = Пользователи.АвторизованныйПользователь();
	КонецЕсли;	
	Если ТекущийОбъект.СтатусВзаимодействия.ТипСостояния <> Перечисления.CRM_ТипыСостоянийСобытий.Завершено И ЗначениеЗаполнено(ТекущийОбъект.ДатаЗавершенияВзаимодействия) Тогда
		ТекущийОбъект.ДатаЗавершенияВзаимодействия = Дата(1,1,1);
	КонецЕсли;
	Если НЕ ЭтоНовыйОбъект Тогда
		CRM_ОповещенияСервер.УдалитьОповещения(ТекущийОбъект.Ссылка);
	КонецЕсли;	
	
	ТекущийОбъект.ОрганизаторGApi = ТекущийОбъект.Ответственный;
	ТекущийОбъект.СторонниеЛица.Свернуть("Партнер,КонтактноеЛицо,Адрес,ПредставлениеАдреса,Принадлежность,Телефон,ПосетитМероприятие","ОтправлятьСМС,ОтправлятьПоПочте");
	
	// Периодичность
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПериодическоеСобытиеСпособИзмененияРяда",ПериодическоеСобытиеСпособИзмененияРяда);
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если (ПризнакПериодическоеСобытиеИнициализация Или ПризнакИзмененоРасписание) И ТекущийОбъект.Периодическое Тогда
			
			Если ПризнакПериодическоеСобытиеИнициализация Тогда
				ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд";
			КонецЕсли;
			
			Если ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			ИначеЕсли ПериодическоеСобытиеСпособИзмененияРяда = "ДоКонцаРяда" Тогда
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.ПлановаяДата, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			Иначе
				МассивДатРасписания = Справочники.CRM_РядыСобытий.ПолучитьМассивДатРасписания(ТекущийОбъект.РядСобытий.ДатаНачала, ТекущийОбъект.РядСобытий.ДатаОкончания, ТекущийОбъект.РядСобытий);
			КонецЕсли;
			
			Если МассивДатРасписания.Количество() = 0 Тогда
				Если ПризнакПериодическоеСобытиеИнициализация Или ПериодическоеСобытиеСпособИзмененияРяда = "ВесьРяд" Тогда
					Отказ = Истина;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Расписание периодического события настроенно некорректно - в указанный период не попадает ни одного события!';en='The schedule of periodic event are adjust incorrectly - to the specified period did not get any event!'"), СтатусСообщения.Важное);
					Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
					Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;
					Возврат;
				КонецЕсли;
			Иначе
				ДатаВремяПервоеСобытие = МассивДатРасписания[0];
				ТекущийОбъект.ПлановаяДата = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ПлановаяДата - НачалоДня(ТекущийОбъект.ПлановаяДата)) ;
				ТекущийОбъект.ПлановаяДатаЗавершение = НачалоДня(ДатаВремяПервоеСобытие) + (ТекущийОбъект.ПлановаяДатаЗавершение - НачалоДня(ТекущийОбъект.ПлановаяДатаЗавершение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Признаки. по которым в дальнейшем после записи будем определять, надо ли	оповестить участников мероприятия.
	ЭтоНовыйОбъект = ТекущийОбъект.Ссылка.Пустая();
	ПризнакНовогоМероприятия = ЭтоНовыйОбъект;
	Если НЕ ЭтоНовыйОбъект Тогда
		Если НЕ (ТекущийОбъект.ПлановаяДата = ТекущийОбъект.Ссылка.ПлановаяДата) ИЛИ НЕ (ТекущийОбъект.ПлановаяДатаЗавершение = ТекущийОбъект.Ссылка.ПлановаяДатаЗавершение) Тогда
			ПризнакИзмененаДата = Истина;
		КонецЕсли;
		Если НЕ (ТекущийОбъект.Место = ТекущийОбъект.Ссылка.Место) Тогда
			ПризнакИзмененоМестоМероприятия = Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И НЕ (Год(ТекущийОбъект.Дата) = Год(ТекущийОбъект.Ссылка.Дата)) Тогда
		ТекущийОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ПроверитьНаличиеНовыхУчастников(ТекущийОбъект);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбъектЗаписанПользователем");
	
	CRM_СобытияФорм.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.СторонниеЛица.Количество() > 0 Тогда
		ТекущийОбъект.Партнер = Справочники.Партнеры.ПустаяСсылка();
		ТекущийОбъект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;	
	
	Если ТекущийОбъект.СторонниеЛица.Количество() = 1 Тогда
		ТекущийОбъект.Партнер = ТекущийОбъект.СторонниеЛица[0].Партнер;
		ТекущийОбъект.КонтактноеЛицо = ТекущийОбъект.СторонниеЛица[0].КонтактноеЛицо;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Объект.ПлановаяДата	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТаблицаНастроекОповещений = ДанныеФормыВЗначение(ЭтотОбъект._ТаблицаОповещений, Тип("ТаблицаЗначений"));
	СтруктураИзменений = Новый Структура;
	СтруктураИзменений.Вставить("Новое",				ПризнакНовогоМероприятия);
	СтруктураИзменений.Вставить("ИзмененаДата",			ПризнакИзмененаДата);
	СтруктураИзменений.Вставить("ИзмененоМесто",		ПризнакИзмененоМестоМероприятия);
	СтруктураИзменений.Вставить("ИзмененСостав",		ИзмененСоставСтороннихУчастников);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаНастроекОповещений",					ТаблицаНастроекОповещений);
	СтруктураДанных.Вставить("ОтменаИлиЗавершениеВзаимодействия",			
		Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Отменено Или
		Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено);
	СтруктураДанных.Вставить("НовыеУчастники",								НовыеУчастники);
	СтруктураДанных.Вставить("УдаленныеУчастники",							УдаленныеУчастники);
	СтруктураДанных.Вставить("ЭтоНовоеСобытие",								ПризнакНовогоМероприятия);
	СтруктураДанных.Вставить("ИзмененСоставУчастников",						ИзмененСоставУчастников);
	СтруктураДанных.Вставить("ПризнакПериодическоеСобытиеИнициализация",	ПризнакПериодическоеСобытиеИнициализация);
	СтруктураДанных.Вставить("Пользователь",								ТекущийПользователь);
	СтруктураДанных.Вставить("Состояние",									СтруктураИзменений);
	АдресНастроек = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	
	Если ПризнакИзмененыОповещения ИЛИ ПризнакПериодическоеСобытиеИнициализация ИЛИ ИзмененСоставУчастников Тогда
		// Тут надо формировать записи оповещений.
		CRM_ОповещенияСервер.СформироватьОповещенияПоСобытию(ТекущийОбъект.Ссылка, АдресНастроек);
		ИзмененСоставУчастников	= Ложь;
		ПризнакИзмененыОповещения	= Ложь;
	КонецЕсли;
	
	// Периодичность
	Если ЗначениеЗаполнено(ТекущийОбъект.РядСобытий) Тогда
		Если ПериодическоеСобытиеСпособИзмененияРяда = "УдалитьВсеСобытияРяда" Тогда
			// Если удаляются все события ряда, форма должна быть закрыта после записи, т.к. объекта, связанного с формой, уже
			// не будет.
			ЗакрытьФормуПослеЗаписиСОповещением = Истина;
			// Объект нужно разблокировать т.к. он будет удаляться программно.
			Попытка
				ТекущийОбъект.Разблокировать();
			Исключение
			КонецПопытки;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.ПлановаяДата,,АдресНастроек);
		ИначеЕсли ТекущийОбъект.Периодическое И Не ТекущийОбъект.ИзмененоВРяде И ЗначениеЗаполнено(ПериодическоеСобытиеСпособИзмененияРяда) Тогда
			Если ПризнакИзмененоРасписание Тогда
				//ЗакрытьФормуПослеЗаписиСОповещением = Истина;
				// Объект нужно разблокировать т.к. он будет изменяться программно.
				Попытка
					ТекущийОбъект.Разблокировать();
				Исключение
				КонецПопытки;
			КонецЕсли;
			CRM_МероприятияСервер.ИзменитьМероприятияРяда(ТекущийОбъект.Ссылка, ПериодическоеСобытиеСпособИзмененияРяда, ТекущийОбъект.ПлановаяДата,,АдресНастроек);
		КонецЕсли;
		ПериодическоеСобытиеСпособИзмененияРяда		= "";
		ПризнакПериодическоеСобытиеИнициализация	= Ложь;
		ПризнакИзмененоРасписание					= Ложь;
	КонецЕсли;
	
	CRM_СобытияФорм.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновитьПланировщик", Объект.ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидВзаимодействияПриИзменении(Элемент)
	ВидВзаимодействияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
	СтараяДатаНачала = Объект.ПлановаяДата; 
	
	Объект.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	
	Если НачалоДня(СтараяДатаНачала) = НачалоДня(Объект.ПлановаяДатаЗавершение) Тогда
		ДатаОкончанияПлан = ДатаНачала;
		Объект.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан, ВремяОкончанияПлан);
	КонецЕсли;	
	
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;	
	
	ПересчитатьДатыОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	
	Объект.ПлановаяДата = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;	
	
	ПересчитатьДатыОповещений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяНачалаНачалоВыбораЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяНачала, Элемент,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаНачалоВыбораЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяНачала = ВыбранноеВремя.Значение;
		ВремяНачалаПриИзменении(Элементы.ВремяНачала)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПланПриИзменении(Элемент)
	Объект.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан, ВремяОкончанияПлан);
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланПриИзменении(Элемент)
	Объект.ПлановаяДатаЗавершение = CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан, ВремяОкончанияПлан);
	Если Объект.Периодическое Тогда
		ПризнакИзмененоРасписание = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВремяОкончанияПланЗавершение", ЭтотОбъект);
	CRM_ОбщегоНазначенияКлиентСервер.ВыбратьВремяИзСписка(ЭтотОбъект, ВремяОкончанияПлан, Элемент,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВремяОкончанияПланЗавершение(ВыбранноеВремя, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеВремя <> Неопределено Тогда
		ВремяОкончанияПлан = ВыбранноеВремя.Значение;
		ВремяОкончанияПланПриИзменении(Элементы.ВремяОкончанияПлан)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаВесьДеньПриИзменении(Элемент)
	
	НастроитьВидимостьИДоступностьФормы();
	
	Если Объект.НаВесьДень Тогда
		УстановитьВремяНачалоВремяОкончание();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодическоеПриИзменении(Элемент)
	
	Если Объект.Периодическое Тогда
		Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
			СоздатьНовыйЭлементРядСобытий();
		ИначеЕсли НЕ Объект.Ссылка.Пустая() Тогда
			Если Объект.ИзмененоВРяде Тогда
				РядСобытийСтарый = Объект.РядСобытий;
				Объект.РядСобытий = ПредопределенноеЗначение("Справочник.CRM_РядыСобытий.ПустаяСсылка");
				СоздатьНовыйЭлементРядСобытий();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ Объект.Ссылка.Пустая() И Объект.ИзмененоВРяде И ЗначениеЗаполнено(РядСобытийСтарый) Тогда
			Объект.РядСобытий = РядСобытийСтарый;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьВидимостьИДоступностьФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПартнерПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриИзменении(Элемент)
	РезультатПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГостиМогутИзменятьМероприятиеПриИзменении(Элемент)
	
	Если Объект.ГостиМогутИзменятьМероприятие Тогда
		Объект.ГостиМогутПриглашатьДругихГостей = Истина;
		Объект.ГостиМогутВидетьСписокГостей = Истина;
	КонецЕсли;
	
	Элементы.ГостиМогутПриглашатьДругихГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
	Элементы.ГостиМогутВидетьСписокГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура();
	ОповещениеВыбораМеста	= Новый ОписаниеОповещения("ОбработкаВыбораМеста", ЭтотОбъект, ДополнительныеПараметры);
	ПараметрыФормы			= Новый Структура();
	ПараметрыФормы.Вставить("РежимВыбора",			Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",	Истина);
	ОткрытьФорму("Справочник.CRM_Помещения.ФормаВыбора", ПараметрыФормы, Элемент, , , , ОповещениеВыбораМеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораМеста(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	Объект.Место = СокрЛП(РезультатВыбора);
	Если ТипЗнч(РезультатВыбора) = Тип("СправочникСсылка.CRM_Помещения") Тогда
		Объект.Помещение					= РезультатВыбора;
		Элементы.Место.РедактированиеТекста	= Ложь;
	Иначе
		Объект.Помещение					= ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
		Элементы.Место.РедактированиеТекста	= Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МестоОчистка(Элемент, СтандартнаяОбработка)
	Объект.Помещение = ПредопределенноеЗначение("Справочник.CRM_Помещения.ПустаяСсылка");
	Элементы.Место.РедактированиеТекста = Истина;
КонецПроцедуры // МестоОчистка()

&НаКлиенте
Процедура МестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Массив = ВернутьПомещенияПоТексту(Текст);
	СписокПодбора = Новый СписокЗначений;
	Для Каждого Стр Из Массив Цикл
		СписокПодбора.Добавить(Стр);		
	КонецЦикла;
	ДанныеВыбора = СписокПодбора;
КонецПроцедуры // МестоАвтоПодбор()

&НаКлиенте
Процедура РядСобытийНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		СоздатьНовыйЭлементРядСобытий();
	Иначе
		ОткрытьФормуРасписания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПосетитМероприятиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПосетитМероприятие = Объект.ОтветственныйПосетитМероприятие;
	Если ПосетитМероприятие = 0 Тогда
		Объект.ОтветственныйПосетитМероприятие = 1;
	ИначеЕсли ПосетитМероприятие = 1 Тогда
		Объект.ОтветственныйПосетитМероприятие = 2;
	ИначеЕсли ПосетитМероприятие = 2 Тогда
		Объект.ОтветственныйПосетитМероприятие = 0;
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

#Область ПривязкаДокументовКИнтересамКлиентов

&НаКлиенте
Процедура Подключаемый_ИнтересНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ЭтотОбъект.КлиентСписок) Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		СтруктураОтбора.Вставить("Партнер", ЭтотОбъект.КлиентСписок);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормыВыбора = Новый Структура;
		ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
		ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
		ПараметрыФормыВыбора.Вставить("ЭтоВыборИнтереса"	, Истина);		
		
		ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка		= Ложь;
	
	CRM_ОбщегоНазначенияКлиент.ИнтересОбработкаВыбора(ВыбранноеЗначение, ЭтотОбъект, ТекущийЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОчистка(Элемент, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияКлиент.Подключаемый_ИнтересОткрытие(Элемент, СтандартнаяОбработка, ЭтотОбъект.CRM_ТаблицаИнтересов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимВыбора"			, Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор"	, Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе"	, Истина);
	ПараметрыФормыВыбора.Вставить("Отбор"				, СтруктураОтбора);
	
	ОткрытьФорму("Документ.CRM_Интерес.Форма.ФормаСписка", ПараметрыФормыВыбора, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПередУдалением(Элемент, Отказ)
	
	Если НЕ Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные = Неопределено Тогда
		Отказ = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные.ВведенНаОсновании;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_CRM_ТаблицаИнтересовПослеУдаления(Элемент)
	
	Если ЭтотОбъект.CRM_ТаблицаИнтересов.Количество() > 0 Тогда
		ЭтотОбъект.CRM_ИнтересСтрокой = CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ЭтотОбъект.CRM_ТаблицаИнтересов[0].Ссылка);
	Иначе
		ЭтотОбъект.CRM_ИнтересСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Оповещения

&НаКлиенте
// Динамически подключаемый обработчик добавления оповещения.
//
// Параметры:
//	Элемент					- ЭлементФормы 	- Элемент формы.
//	СтандартнаяОбработка	- Булево		- Признак стандартной обработки.
//
Процедура Подключаемый_ДобавитьОповещение(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьОповещение();
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
	// При добавлении оповещения изменения в форме не отражаются.
	Модифицированность = Истина;
КонецПроцедуры // Подключаемый_ДобавитьОповещение()

&НаКлиенте
// Динамически подключаемый обработчик изменения оповещения.
//
// Параметры:
//	Элемент	- ЭлементФормы	- Элемент формы.
//
Процедура Подключаемый_ОповещениеПриИзменении(Элемент)
	Если Найти(Элемент.Имя, "ПолеКанала_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеКанала_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеСрокаОповещения_","");
	ИначеЕсли Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0 Тогда
		ИдПолей = СтрЗаменить(Элемент.Имя, "ПолеПериодаОповещения_","");
	КонецЕсли;
	Если (Найти(Элемент.Имя, "ПолеСрокаОповещения_") > 0)
		ИЛИ (Найти(Элемент.Имя, "ПолеПериодаОповещения_") > 0) Тогда
		ДатаОповещения = ДатаНачала;
		ВремяОповещения = ВремяНачала;
		СрокОповещения = ЭтотОбъект["_СрокОповещения" + Строка(ИдПолей)];

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура(" Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	ЭтотОбъект["_ПериодОповещения" + Строка(ИдПолей)]);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		ЭтотОбъект["_ДатаОповещения"+Строка(ИдПолей)]					= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		Элементы["ПолеДатыОповещения_"+Строка(ИдПолей)].ЦветТекста	= ?(ЭтотОбъект["_ДатаОповещения" + Строка(ИдПолей)] > ТекущаяДата(), Новый Цвет(25,85,174), Новый Цвет(255,0,0));
	КонецЕсли;
	ПриИзмененииОповещения(ИдПолей);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры // Подключаемый_ОповещениеПриИзменении()

&НаКлиенте
// Динамически подключаемый обработчик удаления оповещения.
//
// Параметры:
//	Команда	- КомандаФормы 	- Команда формы.
//
Процедура Подключаемый_УдалитьОповещение(Команда)
	УдалитьОповещение(Команда.Имя);
	ПризнакИзмененыОповещения = Истина;
	CRM_ШаблоныОбъектовКлиент.ПоместитьКомандыГруппыТолькоВоВсеДействия(ЭтотОбъект);
КонецПроцедуры //  Подключаемый_УдалитьОповещение()

#КонецОбласти

#Область Тэги

&НаКлиенте
Процедура ТегПриИзменении(Элемент)
	CRM_ТегиКлиент.ТегПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТегОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	CRM_ТегиКлиент.ТегОбработкаНавигационнойСсылки(ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатие(Элемент)
	МассивКатегорий = Новый Массив();
	Для Каждого КатегорияСтрока Из Объект.Категории Цикл
		МассивКатегорий.Добавить(КатегорияСтрока.Категория);
	КонецЦикла;
	
	СтруктураОписаниеКатегорий = Новый Структура("МассивКатегорий,ОсновнаяКатегория", МассивКатегорий, Объект.ОсновнаяКатегория);
	ОписаниеОповещения = Новый ОписаниеОповещения("ДекорацияВыбратьГруппуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.удалитьCRM_Мероприятие.Форма.ФормаВыборКатегорий", Новый Структура("ОписаниеКатегорий", СтруктураОписаниеКатегорий), ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыбратьГруппуНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Модифицированность = Истина;
		
		Объект.Категории.Очистить();
		Для Каждого СтрокаКатегория Из Результат.СписокВыбранныеКатегории Цикл
			НоваяСтрока = Объект.Категории.Добавить();
			НоваяСтрока.Категория = СтрокаКатегория.Значение;
		КонецЦикла;
		Объект.ОсновнаяКатегория = Результат.ОсновнаяКатегория;
		
		ОтрисоватьКатегорииНаФорме();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвоиЛица

&НаКлиенте
Процедура СвоиЛицаПриИзменении(Элемент)
	
	НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь));
	ТекущийПользовательУчастник = НайденныеСтроки.Количество() > 0 Или ТекущийПользователь = Объект.Ответственный;
	
	Элементы.РассылатьУведомлениПриИзменении.Видимость = ВключенаСинхронизацияКалендаря И Объект.СвоиЛица.Количество() > 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаПриАктивизацииСтроки(Элемент)
	
	УстановитьПометкуУчастия(Элемент.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаЛицоПриИзменении(Элемент)
	ТД = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТД = Неопределено Тогда Возврат; КонецЕсли;
	ПриИзмененииЛица(ТД);
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвоиЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СвоиЛица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Лицо) Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущиеДанные));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ОбъектКонтактнойИнформации", ТекущиеДанные.Лицо); 
	
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОповещениеЗавершения, СписокАдресов, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСторонниеЛица

&НаКлиенте
Процедура СторонниеЛицаПриИзменении(Элемент)
	
	ИзмененСоставСтороннихУчастников = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПриАктивизацииСтроки(Элемент)
	
	УстановитьПометкуУчастия(Элемент.ТекущиеДанные, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтакногоЛица(ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаКонтактноеЛицоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	ПриИзмененииПартнераКонтакногоЛица(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресПриИзменении(Элемент)
	
	РезультатПроверки = CRM_ОбщегоНазначенияКлиентСервер.АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если НЕ (РезультатПроверки.КодОшибки = 0) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СторонниеЛицаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораАдреса", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущиеДанные));
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТекущиеДанные.Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТекущиеДанные.КонтактноеЛицо); 
	
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	ПоказатьВыборИзСписка(ОповещениеЗавершения, СписокАдресов, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СоздатьНовыйИнтерес(Команда)
	НовыйИнтерес  = СоздатьНовыйИнтересНаСервере();
	
	Если НЕ ЗначениеЗаполнено(НовыйИнтерес) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Обнаружен активный интерес клиента  типу услуги Поставка. ПО, запись документа отменена!';en='An active lead of customer to the type of service delivery was discovered. Software, the document was canceled!'"));
	Иначе		
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", НовыйИнтерес);
		
		ОткрытьФорму("Документ.CRM_Интерес.ФормаОбъекта", ПараметрыФормы);
		
		Элементы.СоздатьНовыйИнтерес.Видимость = Ложь; 
		
		Если ОткрытоИзФормыНапоминаний И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Оповестить("ПисьмоУспешноОткрытоИзНапоминания",Новый Структура("Ссылка, Пользователь", Объект.Ссылка, ПользователиКлиентСервер.ТекущийПользователь()));
		КонецЕсли; 	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Позвонить(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) И НЕ ЗначениеЗаполнено(Объект.Партнер) И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Возврат;
	ИначеЕсли НЕ сфпСофтФонПроКлиент.сфпПроверитьДоступностьСофтФон(Истина) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов	= Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		МассивКонтактов = Новый Массив;
		МассивКонтактов.Добавить(Объект.КонтактноеЛицо);
		МассивКонтактов.Добавить(Объект.Партнер);
		МассивТелефонов = сфпПолучитьМассивТелефонов(МассивКонтактов);		
	ИначеЕсли ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		МассивКонтактов = Новый Массив;
		МассивКонтактов.Добавить(Объект.ПотенциальныйКлиент);		
		МассивТелефонов = сфпПолучитьМассивТелефонов(МассивКонтактов);				
	КонецЕсли;		
	Для Каждого ЭлементМассива Из МассивТелефонов Цикл
		СписокТелефонов.Добавить(ЭлементМассива.Значение, ЭлементМассива.Представление);
	КонецЦикла;	
	ДанныеЗаполнения	= Новый Структура;
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ДанныеЗаполнения.Вставить("Основание",	Объект.ДокументОснование);	
	Иначе
		ДанныеЗаполнения.Вставить("Основание",	Объект.Ссылка);	
	КонецЕсли;
	ДанныеЗаполнения.Вставить("Взаимодействие", Объект.Ссылка);
	Если СписокТелефонов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
	ИначеЕсли СписокТелефонов.Количество() = 1 Тогда
		ОповещениеВыбораТелефона(СписокТелефонов[0], ДанныеЗаполнения);
	Иначе
		ОповещениеВыбораТелефона	= Новый ОписаниеОповещения("ОповещениеВыбораТелефона", ЭтотОбъект, ДанныеЗаполнения);
		СписокТелефонов.ПоказатьВыборЭлемента(ОповещениеВыбораТелефона);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьEmailКлиент(Команда)

	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы = Новый Структура("Основание",Объект.ДокументОснование);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.ДокументОснование);
	Иначе
		ПараметрыФормы = Новый Структура("Основание",Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(Объект.Партнер)
			И НЕ ЗначениеЗаполнено(Объект.ПотенциальныйКлиент) Тогда
		Возврат;
	КонецЕсли;
	СписокEmail	= Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо),Объект.КонтактноеЛицо,Объект.Партнер);
	Иначе
		Контакт = Объект.ПотенциальныйКлиент;
	КонецЕсли;	
			
	МассивEmail = ПолучитьМассивEmail(Контакт);

	Для Каждого ЭлементМассива Из МассивEmail Цикл
		СписокEmail.Добавить(ЭлементМассива.Контакт, ЭлементМассива.Значение);
	КонецЦикла;	
	Если СписокEmail.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан Email контактного лица или потенциального клиента';en='No email of contact person or potential customer'"));
	ИначеЕсли СписокEmail.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("Кому", СписокEmail);
	Иначе
		ПараметрыФормы.Вставить("ТолькоКому", Истина);
		ОповещениеВыбораEmail	= Новый ОписаниеОповещения("ОбработкаВыбораEmail", ЭтотОбъект, ПараметрыФормы);
		СписокEmail.ПоказатьВыборЭлемента(ОповещениеВыбораEmail);
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьСМС(Команда)
	Контакт = ?(ЗначениеЗаполнено(Объект.ПотенциальныйКлиент),Объект.ПотенциальныйКлиент,Объект.КонтактноеЛицо);
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		Контакт = ?(ЗначениеЗаполнено(Объект.КонтактноеЛицо),Объект.КонтактноеЛицо,Объект.Партнер);
	Иначе
		Контакт = Объект.ПотенциальныйКлиент;
	КонецЕсли;	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	СписокТелефонов = SMS4B_Взаимодействия.SMS4B_ТелефоныКонтакта(Контакт);
	
	Для Каждого ЭлементСписка Из СписокТелефонов Цикл
		КИ	= ЭлементСписка.Значение;
		Прервать;
	КонецЦикла;
	
	Если КИ = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не указан номер телефона';en='Missing phone number'"));
		Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.SMS4B_ИспользоватьSMS4B() Тогда
		CRM_ОбщегоНазначенияКлиент.ОткрытьФормуОшибкиПодключения("СМС");
		Возврат;
	ИначеЕсли НЕ SMS4B_ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОткрытияФормыНастроек", ЭтотОбъект);
		ПоказатьВопрос(ОП, "Отправка SMS невозможна так как не установлены параметры подключения.
						|Открыть форму настроек?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	Структура = Новый Структура();
	Структура.Вставить("Ссылка",	Контакт);
	Структура.Вставить("Телефон",	КИ);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", Структура);
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.ДокументОснование);	
	Иначе
		ПараметрыФормы.Вставить("ДанныеЗаполнения", Объект.Ссылка);	
	КонецЕсли;
	ПараметрыФормы.Вставить("Взаимодействие", Объект.Ссылка);
	ОткрытьФорму("Документ.СообщениеSMS.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры // ОтправитьСМС()

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	УдалитьВзаимодействиеИзКалендаря();
	
	МассивЗадач = Новый Массив;
	МассивЗадач.Добавить(Объект.Ссылка);
	CRM_БизнесПроцессыИЗадачиКлиент.ОбработкаКомандыПеренаправить(МассивЗадач, Новый Структура("Источник",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМесто(Команда)
	ДополнительныеПараметры		= Новый Структура;
	ОписаниеПодбораМеста		= Новый ОписаниеОповещения("ОбработкаПодбораМеста", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Место",							Объект.Помещение);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачала + (ВремяНачала - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончанияПлан + (ВремяОкончанияПлан - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораМеста);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораМеста(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	Если РезультатОткрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		МинимальнаяВыбраннаяДата = Неопределено;
		МаксимальнаяВыбраннаяДата = Неопределено;
		Для Каждого ДобавляемоеПомещение Из РезультатОткрытия Цикл
			Если НЕ ЗначениеЗаполнено(ДобавляемоеПомещение.Помещение) Тогда
				Продолжить;
			КонецЕсли;
			Если (МинимальнаяВыбраннаяДата = Неопределено) ИЛИ (МинимальнаяВыбраннаяДата > ДобавляемоеПомещение.НачалоПериода) Тогда
				МинимальнаяВыбраннаяДата = ДобавляемоеПомещение.НачалоПериода;
			КонецЕсли;
			Если (МаксимальнаяВыбраннаяДата = Неопределено) ИЛИ (МаксимальнаяВыбраннаяДата < ДобавляемоеПомещение.ОкончаниеПериода) Тогда
				МаксимальнаяВыбраннаяДата = ДобавляемоеПомещение.ОкончаниеПериода;
			КонецЕсли;
			Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
				Объект.Место		= СокрЛП(ДобавляемоеПомещение.Помещение);
				Объект.Помещение	= ДобавляемоеПомещение.Помещение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
			ДатаНачала		= ДатаВремя.Дата;
			ДатаНачалаПриИзменении(Неопределено);
			ВремяНачала		= ДатаВремя.Время;
			ВремяНачалаПриИзменении(Неопределено);
			ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
			ДатаОкончанияПлан	= ДатаВремя.Дата;
			ДатаОкончанияПланПриИзменении(Неопределено);
			ВремяОкончанияПлан	= ДатаВремя.Время;
			ВремяОкончанияПланПриИзменении(Неопределено);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбораМеста()

&НаКлиенте
Процедура ДобавитьПользователя(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
	СкрываемыеПользователи = Новый СписокЗначений;
	СкрываемыеПользователи.Добавить(Объект.Ответственный);
	ПараметрыФормы.Вставить("СкрываемыеПользователи", СкрываемыеПользователи);
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.Пользователи.ФормаВыбора",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ОповещениеЗавершения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФизЛицо(Команда)
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);	
	ОписаниеВыбораФизЛица	= Новый ОписаниеОповещения("ОбработкаВыбораСвоиЛица", ЭтотОбъект);
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,,ОписаниеВыбораФизЛица,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСвоиЛица(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> Неопределено Тогда
		НоваяСтрока = Объект.СвоиЛица.Добавить();
		НоваяСтрока.Лицо = РезультатВыбора;
		ПриИзмененииЛица(НоваяСтрока);
	КонецЕсли;
	Элементы.РассылатьУведомлениПриИзменении.Видимость = ВключенаСинхронизацияКалендаря И Объект.СвоиЛица.Количество() > 0;
КонецПроцедуры

&НаКлиенте
Процедура УчастиеВМероприятии(Команда)
	
	ЭтоСвойУчастник = СтрНайти(Команда.Имя, "СвоиЛица") > 0;
	Если ЭтоСвойУчастник Тогда
		ТекущиеДанные = Элементы.СвоиЛица.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.СторонниеЛица.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли СтрНайти(Команда.Имя, "Да") Тогда
		ТекущиеДанные.ПосетитМероприятие = 1;
	ИначеЕсли СтрНайти(Команда.Имя, "МожетБыть") Тогда
		ТекущиеДанные.ПосетитМероприятие = 2;
	ИначеЕсли СтрНайти(Команда.Имя, "Нет") Тогда
		ТекущиеДанные.ПосетитМероприятие = 0;
	КонецЕсли;
	
	УстановитьПометкуУчастия(ТекущиеДанные, ЭтоСвойУчастник);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьУчастников(Команда)
	
	МассивУчастников			= ПолучитьМассивУчастников();
	ДополнительныеПараметры		= Новый Структура("МассивУчастников", МассивУчастников);
	ОписаниеПодбораУчастников	= Новый ОписаниеОповещения("ОбработкаПодбораУчастников", ЭтотОбъект, ДополнительныеПараметры); 
	ПараметрыСтруктура			= Новый Структура();
	ПараметрыСтруктура.Вставить("Пользователи",						МассивУчастников);
	ПараметрыСтруктура.Вставить("ПериодНачало",						ДатаНачала + (ВремяНачала - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ПериодОкончание",					ДатаОкончанияПлан + (ВремяОкончанияПлан - Дата("00010101")));
	ПараметрыСтруктура.Вставить("ВыбиратьПериоды");
	ПараметрыСтруктура.Вставить("ЗакрыватьФормуПослеВыбораПериодов");
	ПараметрыСтруктура.Вставить("ПоказыватьПериодДокумента");
	ПараметрыСтруктура.Вставить("ИнтервалШкалыВремени",				30);
	ОткрытьФорму("ОбщаяФорма.CRM_ПодборПользователейПоКалендарю",	ПараметрыСтруктура, ЭтотОбъект, , , , ОписаниеПодбораУчастников);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораУчастников(РезультатОткрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(РезультатОткрытия) = Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МинимальнаяВыбраннаяДата	= Неопределено;
	МаксимальнаяВыбраннаяДата	= Неопределено;
	МассивВыбранныеПользователи	= Новый Массив();
	Для Каждого ДобавляемыйПользователь Из РезультатОткрытия Цикл
		МассивВыбранныеПользователи.Добавить(ДобавляемыйПользователь.Пользователь);
		Если Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ДобавляемыйПользователь.Пользователь)).Количество() = 0 Тогда
			НоваяСтрока = Объект.СвоиЛица.Добавить();
			НоваяСтрока.Лицо	= ДобавляемыйПользователь.Пользователь;
			ПриИзмененииЛица(НоваяСтрока);
		КонецЕсли;
		Если МинимальнаяВыбраннаяДата = Неопределено Или МинимальнаяВыбраннаяДата > ДобавляемыйПользователь.НачалоПериода Тогда
			МинимальнаяВыбраннаяДата = ДобавляемыйПользователь.НачалоПериода;
		КонецЕсли;
		Если МаксимальнаяВыбраннаяДата = Неопределено Или МаксимальнаяВыбраннаяДата < ДобавляемыйПользователь.ОкончаниеПериода Тогда
			МаксимальнаяВыбраннаяДата = ДобавляемыйПользователь.ОкончаниеПериода;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйПользователь Из ДополнительныеПараметры.МассивУчастников Цикл
		Если МассивВыбранныеПользователи.Найти(УдаляемыйПользователь) = Неопределено Тогда
			НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", УдаляемыйПользователь));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.СвоиЛица.Удалить(НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(МинимальнаяВыбраннаяДата) И ЗначениеЗаполнено(МаксимальнаяВыбраннаяДата) Тогда
		ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МинимальнаяВыбраннаяДата);
		ДатаНачало		= ДатаВремя.Дата;
		ВремяНачало		= ДатаВремя.Время;
		ДатаВремя		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(МаксимальнаяВыбраннаяДата);
		ДатаОкончание	= ДатаВремя.Дата;
		ВремяОкончание	= ДатаВремя.Время;
		ДатаНачалаПриИзменении(Неопределено);
		ВремяНачалаПриИзменении(Неопределено);
		ДатаОкончанияПланПриИзменении(Неопределено);
		ВремяОкончанияПланПриИзменении(Неопределено);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

#Область ПривязкаДокументовКИнтересамКлиентов

&НаКлиенте
Процедура Подключаемый_СкрытьПоказатьИнтересы(Команда)
	
	Элементы.СкрытьПоказатьИнтересы.Пометка = НЕ Элементы.СкрытьПоказатьИнтересы.Пометка;
	Элементы.ГруппаCRM_ТаблицаИнтересов.Видимость = Элементы.СкрытьПоказатьИнтересы.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Основной(Команда)
	
	ТекущиеДанные = Элементы.CRM_ТаблицаИнтересов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	CRM_ДобавитьИнтересНаСервере(ТекущиеДанные.Ссылка, Истина);
	ЭтотОбъект.CRM_ИнтересСтрокой	= CRM_ОбщегоНазначенияСервер.СформироватьПредставлениеИнтересаСтрокой(ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	CRM_СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияКалендарей

&НаКлиенте
Процедура ОткрытьВКалендаре(Команда)
	
	Если ЗначениеЗаполнено(ГиперссылкаВКалендаре) Тогда
		ПерейтиПоНавигационнойСсылке(ГиперссылкаВКалендаре);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДата);
	ДатаНачала = ДатаИВремя.Дата;
	ВремяНачала = ДатаИВремя.Время;
	
	ДатаИВремя = CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
	ДатаОкончанияПлан = ДатаИВремя.Дата;
	ВремяОкончанияПлан = ДатаИВремя.Время;
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("CRM_ПросмотрЗадачДругихПользователейВКалендаре");
	
	НайденныеСтроки = Объект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", ТекущийПользователь));
	ТекущийПользовательУчастник = НайденныеСтроки.Количество() > 0 Или ТекущийПользователь = Объект.Ответственный;
	
	// Проверку доступности синхронизации производим по ответственному.
	ВключенаСинхронизацияКалендаря = CRM_СинхронизацияКалендарей.ВключенаСинхронизацияКалендаря(Объект.Ответственный);
	
	ВключеныТеги = ПолучитьФункциональнуюОпцию("CRM_ИспользоватьТеги");
	Если ВключеныТеги Тогда
		Подключаемый_ОбновитьОблакоТегов();
	КонецЕсли;
	
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("КалендарьДляСинхронизации");
	Если ЗначениеЗаполнено(Календарь) Тогда
		СервисКалендарей = Календарь.СервисКалендарей;
	Иначе
		СервисКалендарей = Неопределено;
	КонецЕсли;
	ДанныеЗаписиКалендаря = РегистрыСведений.CRM_СобытияКалендаря.ИдентификаторыПоСобытиюКалендаря(Объект.Ссылка, ТекущийПользователь);
	ГиперссылкаВКалендаре = ДанныеЗаписиКалендаря.Гиперссылка;
	
	НастроитьВидимостьИДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьИДоступностьФормы()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.УстановитьНовогоОтветственного.Видимость = Ложь;
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Элементы.УстановитьНовогоОтветственного.Видимость = Ложь;
			Элементы.УстановитьНовогоОтветственного1.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр = Ложь;
		Элементы.Ответственный.КнопкаВыбора = Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		Элементы.Ответственный.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
		Элементы.СтраницыВидыВзаимодействия.ТекущаяСтраница = Элементы.ГруппаВстреча;
	Иначе	
		Элементы.СтраницыВидыВзаимодействия.ТекущаяСтраница = Элементы.ГруппаВзаимодействие;
	КонецЕсли;
	
	Элементы.СостояниеИнтереса.Видимость = НЕ Объект.СостояниеИнтереса.Пустая();
	Элементы.СостояниеИнтереса1.Видимость = НЕ Объект.СостояниеИнтереса.Пустая();
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", ТекущийПользователь.Подразделение);
	НовыйМассив = Новый Массив();
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.Тег.ПараметрыВыбора = НовыеПараметры;
	
	Элементы.РассылатьУведомлениПриИзменении.Видимость = ВключенаСинхронизацияКалендаря И Объект.СвоиЛица.Количество() > 0;
	Элементы.ОткрытьВКалендаре.Видимость = Ложь;
	Если ВключенаСинхронизацияКалендаря Тогда
		Элементы.ОткрытьВКалендаре.Картинка = CRM_СинхронизацияКалендарей.КартинкаСервисаКалендарей(СервисКалендарей);
		Элементы.ОткрытьВКалендаре.Видимость = ЗначениеЗаполнено(ГиперссылкаВКалендаре);
	КонецЕсли;
	
	Элементы.СвоиЛицаАдрес.Видимость = ВключенаСинхронизацияКалендаря;
	Элементы.СторонниеЛицаАдрес.Видимость = ВключенаСинхронизацияКалендаря;
	
	Элементы.ВремяНачала1.Видимость    = (НЕ Объект.НаВесьДень);
	Элементы.ВремяОкончанияПлан2.Видимость = (НЕ Объект.НаВесьДень);
	
	Элементы.ВремяНачала.Видимость    = (НЕ Объект.НаВесьДень);
	Элементы.ВремяОкончанияПлан.Видимость = (НЕ Объект.НаВесьДень);

	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Ответственный.ТолькоПросмотр	= Ложь;
		Элементы.Ответственный.КнопкаВыбора		= Истина;
	Иначе
		Элементы.Ответственный.ТолькоПросмотр	= Истина;
		Элементы.Ответственный.КнопкаВыбора		= Ложь;
	КонецЕсли;
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ЕстьПолныеПрава = (ЭтоПолноправныйПользователь ИЛИ (Объект.Автор = ТекПользователь) ИЛИ (Объект.Ответственный = ТекПользователь));
	Если НЕ ЕстьПолныеПрава Тогда
		
		Элементы.ГруппаСторонниеЛица.Видимость	= Ложь;
		
		// Только просмотр
		Если Объект.ГостиМогутИзменятьМероприятие Тогда
			Если НЕ Объект.ГостиМогутВидетьСписокГостей Тогда
				Элементы.ГруппаСвоиЛица.Видимость	= Ложь;
			ИначеЕсли НЕ Объект.ГостиМогутПриглашатьДругихГостей Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТолькоПросмотр	= Истина;
			Для Каждого ПодчиненныйЭлемент Из КоманднаяПанель.ПодчиненныеЭлементы Цикл
				ПодчиненныйЭлемент.Видимость	= Ложь;
			КонецЦикла;
			Элементы.ДатаНачала1.ТолькоПросмотр = Истина;
			Элементы.ВремяНачала1.ТолькоПросмотр = Истина;
			Элементы.ДатаОкончанияПлан2.ТолькоПросмотр = Истина;
			Элементы.ВремяОкончанияПлан2.ТолькоПросмотр = Истина;
			Элементы.ПодобратьМесто.Видимость = Ложь;
			Элементы.УстановитьНовогоОтветственного.Видимость	= Ложь;
			Элементы.УстановитьНовогоОтветственного1.Доступность = Ложь;
			Если Объект.ГостиМогутВидетьСписокГостей Тогда
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КоманднаяПанель.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
				Для Каждого ПодчиненныйЭлемент Из Элементы.СвоиЛица.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
					ПодчиненныйЭлемент.Видимость	= Ложь;
				КонецЦикла;
			Иначе	
				Элементы.ГруппаСвоиЛица.Видимость	= Ложь;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	// видимость расписания
	Элементы.РядСобытийНаименование.Видимость = Не Объект.ИзмененоВРяде;
	Элементы.РядСобытийНаименование1.Видимость = Не Объект.ИзмененоВРяде;
	Если Элементы.РядСобытийНаименование.Видимость Тогда
		Элементы.Периодическое.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.Периодическое1.Доступность = (Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
		Элементы.РядСобытийНаименование1.Доступность = (Объект.Периодическое И ЗначениеЗаполнено(Объект.РядСобытий) И Не Объект.ИзмененоВРяде);
	КонецЕсли;
	
	Элементы.РядСобытийНаименование.Видимость = Объект.Периодическое;
	
	Элементы.ГостиМогутПриглашатьДругихГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
	Элементы.ГостиМогутВидетьСписокГостей.Доступность = Не Объект.ГостиМогутИзменятьМероприятие;
	
	Элементы.РассылатьУведомлениПриИзменении.Видимость = ВключенаСинхронизацияКалендаря И
		(Объект.СвоиЛица.Количество() > 0 Или Объект.СторонниеЛица.Количество() > 0);
	
	Элементы.ОблакоТегов.Видимость = ВключеныТеги;
	
КонецПроцедуры // НастроитьВидимостьИДоступностьФормы()

&НаСервере
Процедура ПереместитьДопРеквизиты()
	Если Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
		Элементы.Переместить(Элементы.ГруппаДополнительныеРеквизиты, Элементы["ГруппаВстречаДопРеквизиты"]);
	Иначе
		Элементы.Переместить(Элементы.ГруппаДополнительныеРеквизиты, Элементы["ГруппаРеквизиты"]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВидВзаимодействияПриИзмененииНаСервере()
	
	Объект.Баллы = Объект.ВидВзаимодействия.Баллы;
	Объект.СостояниеИнтереса = Объект.ВидВзаимодействия.СостояниеИнтереса;
	Если НЕ ЗначениеЗаполнено(Объект.Тема) Тогда
		Объект.Тема = Объект.ВидВзаимодействия.Описание;
	КонецЕсли;	
	
	Если Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда
		Элементы.СтраницыВидыВзаимодействия.ТекущаяСтраница = Элементы.ГруппаВстреча;
	Иначе	
		Элементы.СтраницыВидыВзаимодействия.ТекущаяСтраница = Элементы.ГруппаВзаимодействие;
	КонецЕсли;
	
	ДобавитьПартнераВСторонниеЛица();
	ПереместитьДопРеквизиты();
	
КонецПроцедуры	

&НаСервере
Процедура ПартнерПриИзмененииНаСервере()
	Объект.КонтактноеЛицо = Объект.Партнер.CRM_ОсновноеКонтактноеЛицо;
КонецПроцедуры

&НаСервере
Процедура РезультатПриИзмененииНаСервере()
	Объект.ДатаЗавершенияВзаимодействия = CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса();
	Объект.ЗавершившийПользователь = Пользователи.ТекущийПользователь();
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйИнтересНаСервере()
	
	НужноЗаписыватьПередСозданиемИнтереса	 = Ложь;
	СостояниеИнтереса						 = Справочники.CRM_СостоянияИнтересов.ПустаяСсылка();
		
	// Будем закрывать старые взаимодействия, где автор = ответственному.
	Если Объект.ПлановаяДата <= CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса() И Объект.Автор = Объект.Ответственный Тогда
		Объект.СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;	
		НужноЗаписыватьПередСозданиемИнтереса = Истина;
	КонецЕсли; 
	
	// Если не заполнено состояние интереса, то заполним его до создания интереса.
	Если Не ЗначениеЗаполнено(Объект.СостояниеИнтереса) Тогда
		Объект.СостояниеИнтереса = СостояниеИнтереса;
		НужноЗаписыватьПередСозданиемИнтереса = Истина;
	КонецЕсли; 
	
	Если НужноЗаписыватьПередСозданиемИнтереса Тогда
		Записать();
	КонецЕсли; 
	
	ОбъектИнтерес							 = Документы.CRM_Интерес.СоздатьДокумент();
	ОбъектИнтерес.Дата						 = Объект.Дата;
	ОбъектИнтерес.Автор						 = Объект.Автор;
	ОбъектИнтерес.СостояниеИнтереса			 = ?(ЗначениеЗаполнено(Объект.СостояниеИнтереса), Объект.СостояниеИнтереса, СостояниеИнтереса);
	ОбъектИнтерес.Партнер					 = Объект.Партнер;
	ОбъектИнтерес.КонтактноеЛицо			 = Объект.КонтактноеЛицо;
	ОбъектИнтерес.Описание					 = Объект.Содержание;
	ОбъектИнтерес.Ответственный				 = Объект.Ответственный;
	ОбъектИнтерес.Подразделение				 = Объект.Подразделение;
	
	ОбъектИнтерес.Офис						 = ОбъектИнтерес.Подразделение.CRM_Офис;
	ОбъектИнтерес.Тема						 = Объект.Содержание;
	ОбъектИнтерес.Завершен					 = Ложь;
	
	ЗначениеНастройки = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеНастройки("ОсновнойПроект");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		ОбъектИнтерес.Проект = ЗначениеНастройки;
	КонецЕсли;
		
	МожноЗаписатьИнтерес = Истина;
	Если ЗначениеЗаполнено(ОбъектИнтерес.Партнер) И ЗначениеЗаполнено(ОбъектИнтерес.ТипУслуги) Тогда		
		// Проверяем аккаунт-менеджера.
		ТекПользователь		= ПользователиКлиентСервер.АвторизованныйПользователь();
		ОсновнойМенеджер	= CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ОбъектИнтерес.Партнер, "ОсновнойМенеджер");
		ЭтоАккаунтМенеджер = (ТекПользователь = ОсновнойМенеджер);
		// Сразу определяем, руководитель ли аккаунт-менеджера.
		МассивРуководителей = CRM_УправлениеДоступомПовтИсп.ПолучитьРуководителейПользователя(ОсновнойМенеджер);
		ЭтоРукводительАккаунтМенеджера = Не (МассивРуководителей.Найти(ТекПользователь) = Неопределено);
		
		// Если это аккаунт-менеджер или его руководитель разрешаем записать интерес, не смотря на наличие / отсутсвие
		// активных.
		Если ЭтоАккаунтМенеджер ИЛИ ЭтоРукводительАккаунтМенеджера Тогда
			МожноЗаписатьИнтерес = Истина;
		Иначе
			// Если нет, то проверяем активные по данному клиенту / типу услуги.
			МассивИнтересовКлиента = CRM_ОбщегоНазначенияСервер.ПолучитьМассивИнтересовКлиента(ОбъектИнтерес.Ссылка, ОбъектИнтерес.Партнер, ОбъектИнтерес.ТипУслуги);
			Для Каждого ЭлементМассива Из МассивИнтересовКлиента Цикл
				ОтветственныйМенеджер = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЭлементМассива, "Ответственный");
				Если ОтветственныйМенеджер = ОбъектИнтерес.Ответственный Тогда
					// Если уже есть интерес с данным ответственным.
					МожноЗаписатьИнтерес = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
	
	Если МожноЗаписатьИнтерес Тогда
		ОбъектИнтерес.Записать();	
		Возврат ОбъектИнтерес.Ссылка;
	Иначе
		Возврат Документы.CRM_Интерес.ПустаяСсылка();	
	КонецЕсли; 
		
КонецФункции

&НаКлиенте
Процедура ПриИзмененииЛица(ТекущаяСтрока)
	
	ТекущаяСтрока.ПосетитМероприятие = 2;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Лицо) Тогда
		ТекущаяСтрока.Адрес = "";
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("ОбъектКонтактнойИнформации", ТекущаяСтрока.Лицо); 
	
	СписокАдресов = CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СписокАдресов.Количество() > 0 Тогда
		ЕстьДляОповещений = Ложь;
		Для Каждого ЭлементСписка Из СписокАдресов Цикл
			Если ЭлементСписка.Пометка Тогда
				Адрес = ЭлементСписка.Значение;
				Если Адрес.Количество() = 0 Тогда
					ТекущаяСтрока.Адрес	= "";
				Иначе	
					ТекущаяСтрока.Адрес	= Адрес.Представление;
				КонецЕсли;
				ЕстьДляОповещений = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьДляОповещений Тогда
			Адрес = СписокАдресов[0].Значение;
			Если Адрес.Количество() = 0 Тогда
				ТекущаяСтрока.Адрес		= "";
			Иначе	
				ТекущаяСтрока.Адрес		= Адрес.Представление;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Адрес				= "";
	КонецЕсли;
	
	УстановитьПометкуУчастия(ТекущаяСтрока, Истина);
	
КонецПроцедуры // ПриИзмененииЛица()

&НаКлиенте
Процедура ПриИзмененииПартнераКонтакногоЛица(ТекущаяСтрока, ПодставлятьКонтактноеЛицо = Ложь)
	
	ТекущаяСтрока.ПосетитМероприятие = 2;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партнер) Тогда
		ТекущаяСтрока.Адрес					= "";
		ТекущаяСтрока.Принадлежность		= Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПодставлятьКонтактноеЛицо Тогда
		ТекущаяСтрока.КонтактноеЛицо = CRM_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущаяСтрока.Партнер, "CRM_ОсновноеКонтактноеЛицо");
	КонецЕсли;
	
	СтруктураПоиска	= Новый Структура;
	СтруктураПоиска.Вставить("Партнер",			ТекущаяСтрока.Партнер); 
	СтруктураПоиска.Вставить("КонтактноеЛицо",	ТекущаяСтрока.КонтактноеЛицо); 
	СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска,
		ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты"));
	Если СписокАдресов.Количество() > 0 Тогда
		ЕстьДляОповещений = Ложь;
		Для Каждого ЭлементСписка Из СписокАдресов Цикл
			Если ЭлементСписка.Пометка Тогда
				Адрес = ЭлементСписка.Значение;
				Если Адрес.Количество() = 0 Тогда
					ТекущаяСтрока.Адрес				= "";
					ТекущаяСтрока.Принадлежность	= Ложь;
				Иначе	
					ТекущаяСтрока.Адрес				= Адрес.Представление;
					ТекущаяСтрока.Принадлежность	= (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
				КонецЕсли;
				ЕстьДляОповещений = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЕстьДляОповещений Тогда
			Адрес = СписокАдресов[0].Значение;
			Если Адрес.Количество() = 0 Тогда
				ТекущаяСтрока.Адрес					= "";
				ТекущаяСтрока.Принадлежность		= Ложь;
			Иначе	
				ТекущаяСтрока.Адрес					= Адрес.Представление;
				ТекущаяСтрока.Принадлежность		= (Адрес.Объект = ТекущаяСтрока.КонтактноеЛицо);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущаяСтрока.Адрес				= "";
		ТекущаяСтрока.Принадлежность	= Ложь;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПартнераКонтакногоЛица()

&НаКлиенте
Процедура УстановитьПометкуУчастия(ТекущиеДанные, ЭтоСвойУчастник)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ПосетитМероприятие = 0 Тогда
		ВыбранноеУчастие = "Нет";
	ИначеЕсли ТекущиеДанные.ПосетитМероприятие = 1 Тогда
		ВыбранноеУчастие = "Да";
	Иначе
		ВыбранноеУчастие = "МожетБыть";
	КонецЕсли;
	
	Если ЭтоСвойУчастник Тогда
		ЭлементРодитель = Элементы.СвоиЛицаПосещениеМероприятия;
		ПрефиксИмени = "СвоиЛица";
	Иначе
		ЭлементРодитель = Элементы.СторонниеЛицаПосещениеМероприятия;
		ПрефиксИмени = "СторонниеЛица";
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из ЭлементРодитель.ПодчиненныеЭлементы Цикл
		ТекЭлемент.Пометка = (ТекЭлемент.Имя = (ПрефиксИмени + ВыбранноеУчастие));
	КонецЦикла;	
	
КонецПроцедуры // УстановитьПометкуУчастия()

&НаСервереБезКонтекста
Функция ВернутьПомещенияПоТексту(Текст)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", СокрЛП(Текст) + "%");
	Запрос.Текст = "ВЫБРАТЬ
	               |	CRM_Помещения.Ссылка
	               |ИЗ
	               |	Справочник.CRM_Помещения КАК CRM_Помещения
	               |ГДЕ
	               |	CRM_Помещения.Наименование ПОДОБНО &Текст
	               |	И (НЕ CRM_Помещения.ПометкаУдаления)";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");                            
КонецФункции // ВернутьПомещенияПоТексту()

&НаСервере
Процедура УстановитьВремяНачалоВремяОкончание()
	ВремяНачалаРабочегоДня		= CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,	"ВремяНачалаРабочегоДня");
	ВремяОкончанияРабочегоДня = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Объект.Ответственный,	"ВремяОкончанияРабочегоДня");
	Если НЕ ЗначениеЗаполнено(ВремяНачалаРабочегоДня) Тогда
		ВремяНачалаРабочегоДня = Константы.CRM_НачалоРабочегоДня.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВремяОкончанияРабочегоДня) Тогда
		ВремяОкончанияРабочегоДня = Константы.CRM_КонецРабочегоДня.Получить();
	КонецЕсли;
	ВремяНачала		= ВремяНачалаРабочегоДня;
	ВремяОкончанияПлан = ВремяОкончанияРабочегоДня;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПартнераВСторонниеЛица()
	
	Если НЕ Объект.Партнер.Пустая() И Объект.ВидВзаимодействия.ВидСобытия = Перечисления.CRM_ВидыСобытий.ЛичнаяВстреча Тогда 
		СтруктураПоиска = Новый Структура("Партнер", Объект.Партнер);
		МассивСтрок = Объект.СторонниеЛица.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрок.Количество() = 0 Тогда
			Стр = Объект.СторонниеЛица.Добавить();
			Стр.Партнер = Объект.Партнер;
			Стр.КонтактноеЛицо = Стр.Партнер.CRM_ОсновноеКонтактноеЛицо;
			СтруктураПоиска	= Новый Структура;
			СтруктураПоиска.Вставить("Партнер",			Стр.Партнер); 
			СтруктураПоиска.Вставить("КонтактноеЛицо",	Стр.КонтактноеЛицо); 
			// E-майл
			Если ИспользоватьОповещенияЭлектроннаяПочта Тогда
				СписокАдресов	= CRM_ОбщегоНазначенияСервер.СформироватьСписокКонтактнойИнформации(СтруктураПоиска, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
				Если СписокАдресов.Количество() > 0 Тогда
					ЕстьДляОповещений = Ложь;
					Для Каждого ЭлементСписка Из СписокАдресов Цикл
						Если ЭлементСписка.Пометка Тогда
							Адрес = ЭлементСписка.Значение;
							Если Адрес.Количество() = 0 Тогда
								Стр.Адрес					= "";
								Стр.ПредставлениеАдреса	= "";
								Стр.Принадлежность		= Ложь;
							Иначе	
								Стр.Адрес					= Адрес.Представление;
								Стр.ПредставлениеАдреса	= ?(Адрес.Объект = Стр.Партнер,Строка(Стр.Партнер), Строка(Стр.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
								Стр.Принадлежность		= (Адрес.Объект = Стр.КонтактноеЛицо);
							КонецЕсли;
							ЕстьДляОповещений = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ ЕстьДляОповещений Тогда
						Адрес = СписокАдресов[0].Значение;
						Если Адрес.Количество() = 0 Тогда
							Стр.Адрес					= "";
							Стр.ПредставлениеАдреса	= "";
							Стр.Принадлежность		= Ложь;
						Иначе	
							Стр.Адрес					= Адрес.Представление;
							Стр.ПредставлениеАдреса	= ?(Адрес.Объект = Стр.Партнер,Строка(Стр.Партнер),Строка(Стр.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
							Стр.Принадлежность		= (Адрес.Объект = Стр.КонтактноеЛицо);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Стр.Адрес					= "";
					Стр.ПредставлениеАдреса	= "";
					Стр.Принадлежность		= Ложь;
				КонецЕсли;
			Иначе
				Стр.Адрес					= "";
				Стр.ПредставлениеАдреса	= "";
				Стр.Принадлежность		= Ложь;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивУчастников()
	МассивУчастников = Новый Массив();
	Для Каждого СтрокаТаблицы Из Объект.СвоиЛица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Лицо) И ТипЗнч(СтрокаТаблицы.Лицо) = Тип("СправочникСсылка.Пользователи") Тогда
			Если МассивУчастников.Найти(СтрокаТаблицы.Лицо) = Неопределено Тогда
				МассивУчастников.Добавить(СтрокаТаблицы.Лицо);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУчастников;
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораАдреса(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Адрес = РезультатВыбора.Значение;
	ДополнительныеПараметры.ТекущаяСтрока.Адрес = Адрес.Представление;
	Модифицированность = Истина;
	
КонецПроцедуры

#Область ПривязкаДокументовКИнтересамКлиентов

&НаСервере
Процедура CRM_ДобавитьИнтересНаСервере(ВыбранноеЗначение,ВНачало = Ложь)
	
	МассивСтрок = ЭтотОбъект.CRM_ТаблицаИнтересов.НайтиСтроки(новый Структура("Ссылка",ВыбранноеЗначение));
	
	Если МассивСтрок.Количество() = 0 Тогда
		Если ВНачало Тогда
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Вставить(0);
		Иначе
			НоваяСтрока = ЭтотОбъект.CRM_ТаблицаИнтересов.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ВыбранноеЗначение);
	ИначеЕсли ВНачало Тогда
		ЭтотОбъект.CRM_ТаблицаИнтересов.Сдвинуть(ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]),-ЭтотОбъект.CRM_ТаблицаИнтересов.Индекс(МассивСтрок[0]));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Оповещения

&НаСервере
// Процедура удаляет оповещение.
//
// Параметры:
//	ИмяКоманды	- Строка	- Имя команды.
//
Процедура УдалитьОповещение(ИмяКоманды)
	ИдПолей = СтрЗаменить(ИмяКоманды, "УдалитьОповещение_","");
	Если НЕ Элементы.Найти("ПолеКанала_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеКанала_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ДекорацияПолеСрокаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ДекорацияПолеСрокаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеСрокаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеСрокаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеПериодаОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеПериодаОповещения_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("Кнопка_УдалитьОповещение_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["Кнопка_УдалитьОповещение_" + ИдПолей]);
	КонецЕсли;
	Если НЕ Элементы.Найти("ПолеДатыОповещения_" + ИдПолей) = Неопределено Тогда
		Элементы.Удалить(Элементы["ПолеДатыОповещения_" + ИдПолей]);
	КонецЕсли;
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля","ПолеКанала_" + ИдПолей));
	Если МассивСтрок.Количество() > 0 Тогда
		_ТаблицаОповещений.Удалить(_ТаблицаОповещений.Индекс(МассивСтрок[0]));
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид>5 Тогда Продолжить; КонецЕсли;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	Если Ид < 5 Тогда
		Если Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.ГруппаОповещений);
			НовыйЭлемент.Заголовок	= "Добавить оповещение";
			НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
			НовыйЭлемент.Гиперссылка= Истина;
			НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьОповещение()

&НаСервере
// Процедура добавляет оповещение.
//
// Параметры:
//	Нет.
//
Процедура ДобавитьОповещение()
	Ид = 0;
	Пока Ид < 5 Цикл
		Ид = Ид + 1;
		Если НЕ Элементы.Найти("ПолеКанала_"+Строка(Ид)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементГруппа = Элементы.Найти("ГруппаКанала_"+Строка(Ид));
		Если ЭлементГруппа = Неопределено Тогда
			ЭлементГруппа = Элементы.Вставить("ГруппаКанала_"+Строка(Ид),Тип("ГруппаФормы"),Элементы.ГруппаОповещений, Элементы._ДобавитьОповещение);
			ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
			ЭлементГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ЭлементГруппа.ОтображатьЗаголовок = Ложь;
		КонецЕсли;
		
		НоваяСтрока = _ТаблицаОповещений.Добавить();
		НоваяСтрока.Канал			= Перечисления.CRM_КаналыОповещений.Напоминание;
		НоваяСтрока.СрокОповещения	= 10;
		НоваяСтрока.Периодичность	= Перечисления.CRM_ПериодичностьОповещений.Минута;
		НоваяСтрока.ИмяПоля			= "ПолеКанала_"+Строка(Ид);
		НоваяСтрока.ДатаОповещения	= "ПолеКанала_"+Строка(Ид);
		
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала)));
		СтруктураОповещения.Вставить("ВидОповещения"	,ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрока.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрока.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Пользователи.ТекущийПользователь());
		
		НоваяСтрока.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		Если ИспользоватьНапоминания Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.Напоминание;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта;
		ИначеЕсли ИспользоватьОповещенияЭлектроннаяПочта Тогда
			ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = Перечисления.CRM_КаналыОповещений.СМС;
		КонецЕсли;
		
 		Элемент = Элементы.Добавить("ДекорацияПолеСрокаОповещения_"+Строка(Ид),Тип("ДекорацияФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Заголовок = "за";
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = 10;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = Перечисления.CRM_ПериодичностьОповещений.Минута;
		
		Элемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), ЭлементГруппа);
		Элемент.ИмяКоманды					= "УдалитьОповещение_"+Строка(Ид);
		Элемент.Заголовок					= "Удалить";
		Элемент.Картинка					= БиблиотекаКартинок.Удалить;
		Элемент.Отображение					= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru='Планируемая дата оповещения';en='Schedulable date of the notification'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = НоваяСтрока.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		Прервать;
	КонецЦикла;
	
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		ЭлементФормы = Элементы.Найти(СтрокаТаб.ИмяПоля);
		ЭлементФормы.Заголовок = Строка(Ид);
		//ЭлементФормы.Заголовок = "Оповещение №"+Строка(Ид);
	КонецЦикла;
	
	Если _ТаблицаОповещений.Количество() = 5 Тогда
		Если НЕ Элементы.Найти("_ДобавитьОповещение") = Неопределено Тогда
			Элементы.Удалить(Элементы["_ДобавитьОповещение"]);
		КонецЕсли;
	КонецЕсли;
	ПризнакИзмененыОповещения	= Ложь;
КонецПроцедуры // ДобавитьОповещение()

&НаСервере
// Процедура - обработчик события "ПриИзмененииОповещения".
//
// Параметры:
//	Ид	- Строка	- Идентификатор оповещения.
//
Процедура ПриИзмененииОповещения(Ид)
	МассивСтрок = _ТаблицаОповещений.НайтиСтроки(Новый Структура("ИмяПоля", "ПолеКанала_" + Ид));
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок[0].Канал			= ЭтотОбъект["_КаналОповещения" + Ид];
		МассивСтрок[0].СрокОповещения	= ЭтотОбъект["_СрокОповещения" + Ид];
		МассивСтрок[0].Периодичность	= ЭтотОбъект["_ПериодОповещения" + Ид];
		МассивСтрок[0].ДатаОповещения	= ЭтотОбъект["_ДатаОповещения" + Строка(Ид)];
	КонецЕсли;
КонецПроцедуры // ПриИзмененииОповещения()

&НаСервере
// Процедура заполняет настройки оповещений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьГруппуОповещений()
	
	ИспользоватьНапоминания					= Константы.CRM_ИспользоватьНапоминания.Получить();
	ИспользоватьОповещенияСМС				= Константы.CRM_ИспользоватьОповещенияСМС.Получить();
	ИспользоватьОповещенияЭлектроннаяПочта	= Константы.CRM_ИспользоватьОповещенияЭлектроннаяПочта.Получить();
	
	Если Не ТекущийПользовательУчастник Тогда
		// Не нужно отрисовывать оповещения, если пользователь не имеет отношения к взаимодействию.
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОповещений(ТекущийПользователь);
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	// Всего предполагается 5 полей оповещений, по аналогии с гуглом.
	Ид = 0;
	Пока НЕ Ид = 5 Цикл
		Ид = Ид + 1;
		
		ОписаниеТиповКанал = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_КаналыОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_КаналОповещения"+Строка(Ид), ОписаниеТиповКанал);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		НовыйРеквизит = Новый РеквизитФормы("_СрокОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповПериод = Новый ОписаниеТипов("ПеречислениеСсылка.CRM_ПериодичностьОповещений");
		НовыйРеквизит = Новый РеквизитФормы("_ПериодОповещения"+Строка(Ид), ОписаниеТиповПериод);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		ОписаниеТиповСрок = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
		НовыйРеквизит = Новый РеквизитФормы("_ДатаОповещения"+Строка(Ид), ОписаниеТиповСрок);
		НовыйРеквизит.СохраняемыеДанные = Истина;
		МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
		НоваяКомандаФормы = Команды.Добавить("УдалитьОповещение_"+Строка(Ид));
		НоваяКомандаФормы.Заголовок					= "Удалить";
		НоваяКомандаФормы.Подсказка					= "Удалить оповещение";
		НоваяКомандаФормы.Действие					= "Подключаемый_УдалитьОповещение";
		НоваяКомандаФормы.ИзменяетСохраняемыеДанные	= Истина;
		
	КонецЦикла;
	Если МассивДобавляемыхРеквизитов.Количество() > 0 Тогда
		ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	КонецЕсли;
	Ид = 0;
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = Ид + 1;
		Если Ид > 5 Тогда Прервать; КонецЕсли; 
		ЭлементГруппа = Элементы.Добавить("ГруппаКанала_"+Строка(Ид),Тип("ГруппаФормы"),Элементы.ГруппаОповещений);
		ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ЭлементГруппа.ОтображатьЗаголовок = Ложь;
		СтрокаТаб.ИмяПоля = "ПолеКанала_"+Строка(Ид);
		
		Элемент = Элементы.Добавить("ПолеКанала_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.Заголовок					= Строка(Ид);
		//Элемент.Заголовок					= "Оповещение №"+Строка(Ид);
		//Элемент.ПоложениеЗаголовка			=ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					="_КаналОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Истина; //Ложь;
		Элемент.Ширина						= 0; //17
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_КаналОповещения"+Строка(Ид)] = СтрокаТаб.Канал;
		
 		Элемент = Элементы.Добавить("ДекорацияПолеСрокаОповещения_"+Строка(Ид),Тип("ДекорацияФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидДекорацииФормы.Надпись;
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Заголовок = "за";
		
		Элемент = Элементы.Добавить("ПолеСрокаОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_СрокОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.КнопкаРегулирования			= Истина;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_СрокОповещения"+Строка(Ид)] = СтрокаТаб.СрокОповещения;
		
		Элемент = Элементы.Добавить("ПолеПериодаОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ПериодОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.Ширина						= 5;
		//Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбора");
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОповещениеПриИзменении");
		
		ЭтотОбъект["_ПериодОповещения"+Строка(Ид)] = СтрокаТаб.Периодичность;
		
		НовыйЭлемент = Элементы.Добавить("Кнопка_УдалитьОповещение_"+Строка(Ид),Тип("КнопкаФормы"), ЭлементГруппа);
		НовыйЭлемент.ИмяКоманды			= "УдалитьОповещение_"+Строка(Ид);
		НовыйЭлемент.Заголовок			= "Удалить";
		НовыйЭлемент.Картинка			= БиблиотекаКартинок.Удалить;
		НовыйЭлемент.Отображение		= ОтображениеКнопки.Картинка;
		
		Элемент = Элементы.Добавить("ПолеДатыОповещения_"+Строка(Ид),Тип("ПолеФормы"),ЭлементГруппа);
		Элемент.Вид 						= ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка 			= ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным					= "_ДатаОповещения"+Строка(Ид);
		Элемент.РастягиватьПоГоризонтали	= Ложь;
		Элемент.ТолькоПросмотр				= Истина;
		Элемент.Подсказка					= НСтр("ru='Планируемая дата оповещения';en='Schedulable date of the notification'");
		
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
		
		
	КонецЦикла;
	
	Если Ид < 5 Тогда
		НовыйЭлемент = Элементы.Добавить("_ДобавитьОповещение", Тип("ДекорацияФормы"), Элементы.ГруппаОповещений);
		НовыйЭлемент.Заголовок	= "Добавить оповещение";
		НовыйЭлемент.Вид		= ВидДекорацииФормы.Надпись;
		НовыйЭлемент.Гиперссылка= Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие",	"Подключаемый_ДобавитьОповещение");
	КонецЕсли;
	
	ПересчитатьДатыОповещений();
КонецПроцедуры // ЗаполнитьГруппуОповещений()

&НаСервере
// Процедура заполняет таблицу оповещений.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьТаблицуОповещений(Пользователь)
	
	Запрос = Новый Запрос;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("Пользователь"	, Пользователь);
		Запрос.УстановитьПараметр("Предмет"			, Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание) КАК Канал,
		|	CRM_Напоминания.СрокОповещения,
		|	CRM_Напоминания.Периодичность,
		|	0 КАК ПолеСортировки
		|ИЗ
		|	РегистрСведений.CRM_Напоминания КАК CRM_Напоминания
		|ГДЕ
		|	CRM_Напоминания.Пользователь = &Пользователь
		|	И CRM_Напоминания.Предмет = &Предмет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	CRM_Оповещения.Канал,
		|	CRM_Оповещения.СрокОповещения,
		|	CRM_Оповещения.Периодичность,
		|	1
		|ИЗ
		|	РегистрСведений.CRM_Оповещения КАК CRM_Оповещения
		|ГДЕ
		|	CRM_Оповещения.Получатель = &Пользователь
		|	И CRM_Оповещения.Предмет = &Предмет
		|	И CRM_Оповещения.ВидОповещения = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПолеСортировки";
	Иначе
		ПризнакИзмененыОповещения = Истина;
		Запрос.УстановитьПараметр("Пользователь"	, Пользователь);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
		|	CRM_ОповещенияПользовательскиеНастройки.СрокОповещения,
		|	CRM_ОповещенияПользовательскиеНастройки.Периодичность,
		|	ВЫБОР
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.Напоминание
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.Напоминание)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.ЭлектроннаяПочта)
		|		КОГДА CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.CRM_КаналыОповещений.СМС)
		|	КОНЕЦ КАК Канал,
		|	CRM_ОповещенияПользовательскиеНастройки.ВидОповещения КАК ВидОповещения
		|ИЗ
		|	РегистрСведений.CRM_ОповещенияПользовательскиеНастройки КАК CRM_ОповещенияПользовательскиеНастройки
		|ГДЕ
		|	CRM_ОповещенияПользовательскиеНастройки.Пользователь = &Пользователь
		|	И CRM_ОповещенияПользовательскиеНастройки.ВидОповещения.Родитель = ЗНАЧЕНИЕ(Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия)
		|	И (CRM_ОповещенияПользовательскиеНастройки.ЭлектроннаяПочта
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.СМС
		|			ИЛИ CRM_ОповещенияПользовательскиеНастройки.Напоминание)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидОповещения";
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если (Выборка.Канал = Перечисления.CRM_КаналыОповещений.Напоминание И НЕ ИспользоватьНапоминания)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.СМС И НЕ ИспользоватьОповещенияСМС)
		ИЛИ (Выборка.Канал = Перечисления.CRM_КаналыОповещений.ЭлектроннаяПочта И НЕ ИспользоватьОповещенияЭлектроннаяПочта) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТаб = _ТаблицаОповещений.Добавить();
		НоваяСтрокаТаб.Канал			= Выборка.Канал;
		НоваяСтрокаТаб.СрокОповещения	= Выборка.СрокОповещения;
		НоваяСтрокаТаб.Периодичность	= Выборка.Периодичность;
		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет"			,Новый Структура("Дата", Объект.Дата));
		СтруктураОповещения.Вставить("ВидОповещения"	,Справочники.CRM_ВидыОповещений.ЗапланированныеСобытия);
		СтруктураОповещения.Вставить("СрокОповещения"	,НоваяСтрокаТаб.СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность"	,НоваяСтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("ВпередПоКалендарю", Ложь);
		СтруктураОповещения.Вставить("Получатель"		,Объект.Ответственный);
		НоваяСтрокаТаб.ДатаОповещения = CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуОповещений()

&НаСервере
// Процедура пересчитывает даты оповещений.
//
// Параметры:
//	Нет.
//
Процедура ПересчитатьДатыОповещений()
	Для Каждого СтрокаТаб Из _ТаблицаОповещений Цикл
		Ид = СтрЗаменить(СтрокаТаб.ИмяПоля, "ПолеКанала_", "");
		ДатаОповещения = ДатаНачала;
		ВремяОповещения = ВремяНачала;
		СрокОповещения = СтрокаТаб.СрокОповещения;

		СтруктураОповещения = Новый Структура;
		СтруктураОповещения.Вставить("Предмет",			Новый Структура("Дата", CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОповещения, ВремяОповещения)));
		СтруктураОповещения.Вставить("ВидОповещения",	ПредопределенноеЗначение("Справочник.CRM_ВидыОповещений.ЗапланированныеСобытия"));
		СтруктураОповещения.Вставить("СрокОповещения",	СрокОповещения);
		СтруктураОповещения.Вставить("Периодичность",	СтрокаТаб.Периодичность);
		СтруктураОповещения.Вставить("Получатель",		ПользователиКлиентСервер.ТекущийПользователь());
		СтруктураОповещения.Вставить("ВпередПоКалендарю"	,Ложь);
		СтрокаТаб.ДатаОповещения	= CRM_ОповещенияСервер.ПолучитьДатуОповещения(СтруктураОповещения);
		ЭтотОбъект["_ДатаОповещения"+Строка(Ид)] = СтрокаТаб.ДатаОповещения;
		Элементы["ПолеДатыОповещения_"+Строка(Ид)].ЦветТекста = ?(СтрокаТаб.ДатаОповещения > CRM_ОбщегоНазначенияСервер.ПолучитьТекущуюДатуСеанса(),Новый Цвет(25,85,174),Новый Цвет(255,0,0));
	КонецЦикла;
	ПризнакИзмененыОповещения = Истина;
КонецПроцедуры 

&НаСервере
// Процедура проверяет наличие новых участников.
//
// Параметры:
//	ТекущийОбъект	- ДокументОбъект	- Текущий документ.
//
Процедура ПроверитьНаличиеНовыхУчастников(ТекущийОбъект)
	
	НовыеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.СвоиЛица Цикл
		Участник = СтрокаУчастника.Лицо;
		Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = ТекущийОбъект.Ссылка.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", Участник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НовыеУчастники.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	ЕстьНовыеУчастники = НовыеУчастники.Количество() > 0;
	
	УдаленныеУчастники.Очистить();
	Для Каждого СтрокаУчастника Из ТекущийОбъект.Ссылка.СвоиЛица Цикл
		Участник = СтрокаУчастника.Лицо;
		Если ТипЗнч(Участник) <> Тип("СправочникСсылка.Пользователи") Тогда
			Продолжить;
		КонецЕсли;
		НайденныеСтроки = ТекущийОбъект.СвоиЛица.НайтиСтроки(Новый Структура("Лицо", Участник));
		Если НайденныеСтроки.Количество() = 0 Тогда
			УдаленныеУчастники.Добавить(Участник);
		КонецЕсли;
	КонецЦикла;
	ЕстьУдаленныеУчастники = УдаленныеУчастники.Количество() > 0;
	
	ИзмененСоставУчастников = ЕстьНовыеУчастники Или ЕстьУдаленныеУчастники;
	
КонецПроцедуры

#КонецОбласти

#Область Тэги

&НаСервере
// Процедура обновляет отображение тегов на форме.
//
Процедура Подключаемый_ОбновитьОблакоТегов()
	
	CRM_Теги.ОбновитьОблакоТегов(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Категории

&НаСервере
Процедура ОтрисоватьКатегорииНаФорме()
	ПрефиксРеквизита = "ПолеВводаКатегория";
	МассивУдаляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	Пока Истина Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		Попытка
			ТестовыйРеквизит = ЭтотОбъект[ИмяРеквизита];
			МассивУдаляемыхРеквизитов.Добавить(ИмяРеквизита);
			нИндекс = нИндекс + 1;
		Исключение
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	МассивКатегорий = Новый Массив();
	Если ЗначениеЗаполнено(Объект.ОсновнаяКатегория) Тогда
		МассивКатегорий.Добавить(Объект.ОсновнаяКатегория);
	КонецЕсли;
	Для Каждого СтрокаКатегория Из Объект.Категории Цикл
		Если ЗначениеЗаполнено(СтрокаКатегория.Категория) И МассивКатегорий.Найти(СтрокаКатегория.Категория) = Неопределено Тогда
			МассивКатегорий.Добавить(СтрокаКатегория.Категория);
		КонецЕсли;
	КонецЦикла;
	
	МассивДобавляемыхРеквизитов = Новый Массив();
	нИндекс = 1;
	ОписаниеТиповКатегория = Новый ОписаниеТипов("СправочникСсылка.CRM_Категории");
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		РеквизитКатегория = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповКатегория);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитКатегория);
		
		нИндекс = нИндекс + 1;
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхРеквизитов Цикл
		Попытка Элементы.Удалить(Элементы[УдаляемыйЭлемент]);
		Исключение КонецПопытки;
	КонецЦикла;
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов, МассивУдаляемыхРеквизитов);
	
	нИндекс = 1;
	Для Каждого ДобавляемаяКатегория Из МассивКатегорий Цикл
		ИмяРеквизита = ПрефиксРеквизита + Формат(нИндекс, "ЧДЦ=0; ЧН=0; ЧГ=");
		
		ЭтотОбъект[ИмяРеквизита] = ДобавляемаяКатегория;
		
		ЭлементКатегория = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Элементы.ГруппаКатегории);
		ЭлементКатегория.Вид					= ВидПоляФормы.ПолеВвода;
		ЭлементКатегория.ПоложениеЗаголовка		= ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементКатегория.ПутьКДанным			= ИмяРеквизита;
		ЭлементКатегория.РедактированиеТекста	= Ложь;
		ЭлементКатегория.КнопкаСпискаВыбора		= Ложь;
		ЭлементКатегория.КнопкаВыбора			= Ложь;
		ЭлементКатегория.КнопкаОчистки			= Ложь;
		ЭлементКатегория.КнопкаРегулирования	= Ложь;
		ЭлементКатегория.КнопкаОткрытия			= Ложь;
		ЭлементКатегория.КнопкаВыпадающегоСписка= Ложь;   
		
		ЦветКатегории = Новый Цвет(ДобавляемаяКатегория.ЦветКрасный, ДобавляемаяКатегория.ЦветЗеленый, ДобавляемаяКатегория.ЦветСиний);
		ЭлементКатегория.ЦветФона = ЦветКатегории;
		ЭлементКатегория.ЦветТекста = CRM_ОбщегоНазначенияКлиентСервер.ПолучитьКонтрастныйЦвет(ЦветКатегории);
		
		Если нИндекс = 1 Тогда
			ЭлементКатегория.Шрифт = Новый Шрифт(ЭлементКатегория.Шрифт,,, Истина);
		КонецЕсли;
		
		ЭлементКатегория.УстановитьДействие("НачалоВыбора",	"Подключаемый_ПолеВводаИгнорироватьОбработчикНачалоВыбора");
		ЭлементКатегория.УстановитьДействие("Очистка",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОчистка");
		ЭлементКатегория.УстановитьДействие("Открытие",		"Подключаемый_ПолеВводаИгнорироватьОбработчикОткрытие");
		нИндекс = нИндекс + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область КомандыВзаимодействия

&НаКлиенте
Процедура ОповещениеВыбораТелефона(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	сфпСофтФонПроКлиент.сфпПозвонить(РезультатВыбора.Значение, Объект.КонтактноеЛицо, ДополнительныеПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораEmail(РезультатВыбора, ПараметрыФормы) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	СписокАдресов = Новый СписокЗначений;
	СписокАдресов.Добавить(РезультатВыбора.Значение, РезультатВыбора.Представление);
	
	ПараметрыФормы.Вставить("Кому", СписокАдресов);
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивEmail(Контакт)
	МассивEmail = Новый Массив;
	Для Каждого ЭлементКИ Из Контакт.КонтактнаяИнформация Цикл
		Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			СтруктураКИ = Новый Структура;
			СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
			СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление);
			СтруктураКИ.Вставить("Контакт", Контакт);
			Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
				МассивEmail.Вставить(0, СтруктураКИ);
			Иначе
				МассивEmail.Добавить(СтруктураКИ);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	Возврат МассивEmail;
КонецФункции

&НаСервереБезКонтекста
Функция сфпПолучитьМассивТелефонов(МассивКонтактов)
	МассивТелефонов = Новый Массив;
	Для Каждого ЭлементМассива Из МассивКонтактов Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Партнеры") Тогда
			ИмяОбъекта = Нстр("ru='Партнер';en='Partner'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
			ИмяОбъекта = Нстр("ru='Контактное лицо';en='Contact person'");
		ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.CRM_ПотенциальныеКлиенты") Тогда
			ИмяОбъекта = Нстр("ru='Потенциальный клиент';en='Potential customer'");			
		КонецЕсли;			
		Для Каждого ЭлементКИ Из ЭлементМассива.КонтактнаяИнформация Цикл
			Если ЭлементКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
				СтруктураКИ = Новый Структура;
				СтруктураКИ.Вставить("Значение",		ЭлементКИ.Представление); 
				СтруктураКИ.Вставить("Представление",	ЭлементКИ.Вид.Наименование + ": " + ЭлементКИ.Представление + " (" + ЭлементМассива.Наименование + " <" + ИмяОбъекта +">" + ")");
				Если ЭлементКИ.CRM_ОсновнойДляСвязи Тогда
					МассивТелефонов.Вставить(0, СтруктураКИ);
				Иначе
					МассивТелефонов.Добавить(СтруктураКИ);
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
	КонецЦикла;	
	Возврат МассивТелефонов;
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства


&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		МодульУправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщегоНазначения.ОбщийМодуль("УправлениеСвойствами");
		МодульУправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СинхронизацияКалендарей

&НаСервере
Процедура УдалитьВзаимодействиеИзКалендаря()
	
	CRM_СинхронизацияКалендарей.УдалитьВзаимодействиеИзКалендаря(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СозданиеЭлементаРядаСобытий()
	Объект.ПлановаяДата					= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаНачала, ВремяНачала);
	Объект.ПлановаяДатаЗавершение	= CRM_ОбщегоНазначенияКлиентСервер.СформироватьДатуИзДатыИВремени(ДатаОкончанияПлан, ВремяОкончанияПлан);
	
	ПараметрыФормы				= Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура("ДатаНачала", НачалоДня(ДатаНачала)));
	ПараметрыФормы.Вставить("ВремяНачала", ВремяНачала);
	ПараметрыФормы.Вставить("ВремяКонца", ВремяОкончанияПлан);
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Истина);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияОСозданииРядаСобытий(Параметры, Дополнительно) Экспорт
	Если Параметры <> Неопределено Тогда
		Если Параметры.ПризнакЗакрытия = Истина Тогда
			Если Дополнительно.НовыйРяд Тогда
				Если ЗначениеЗаполнено(Параметры.Ссылка) Тогда
					Объект.РядСобытий	= Параметры.Ссылка;
					ВремяНачало			= Параметры.ВремяНачала;
					ВремяОкончание		= Параметры.ВремяКонца;
					ПризнакПериодическоеСобытиеИнициализация	= Истина;
					ПризнакИзмененоРасписание					= Истина;
					Объект.ИзмененоВРяде						= Ложь;
					Записать();
				Иначе
					Объект.Периодическое = Ложь;
				КонецЕсли;
			Иначе
				Если Параметры.ДанныеБылиИзменены Тогда
					ВремяНачало		 = Параметры.ВремяНачала;
					ВремяОкончание	 = Параметры.ВремяКонца;
					ПризнакИзмененоРасписание = Истина;
					Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НастроитьВидимостьИДоступностьФормы();
	Иначе
		Если Дополнительно.НовыйРяд Тогда
			Объект.Периодическое = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму расписания.
//
// Параметры:
//	Нет.
//
Процедура ОткрытьФормуРасписания()
	ДатаВремяНачала		= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДата);
	ДатаВремяОкончания	= CRM_ОбщегоНазначенияКлиентСервер.РазделитьДатаНаДатуИВремя(Объект.ПлановаяДатаЗавершение);
	ПараметрыФормы = Новый Структура("Ключ", Объект.РядСобытий);
	
	ПараметрыФормы.Вставить("ВремяНачала", ДатаВремяНачала.Время);
	ПараметрыФормы.Вставить("ВремяКонца", ДатаВремяОкончания.Время);
	ПараметрыФормы.Вставить("ДатаНачала", НачалоДня(Объект.Дата));
	
	Дополнительно = Новый Структура;
	Дополнительно.Вставить("НовыйРяд", Ложь);
	ОП = Новый ОписаниеОповещения("ОбработкаОповещенияОСозданииРядаСобытий", ЭтотОбъект, Дополнительно);
		
	ОткрытьФорму("Справочник.CRM_РядыСобытий.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, ,,, ОП);
	
КонецПроцедуры // ОткрытьФормуРасписания()

&НаКлиенте
// Процедура создает новый элемент ряда событий.
//
// Параметры:
//	Нет.
//
Процедура СоздатьНовыйЭлементРядСобытий()
	Если ЗначениеЗаполнено(Объект.РядСобытий) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстВопроса = (НСтр(	"ru = 'Данные еще не записаны.
								|Установка признака периодичности возможна только после записи данных.
								|Данные будут записаны.'"));
		ОП = Новый ОписаниеОповещения("ОбработкаОповещенияВопросОЗаписи", ЭтотОбъект);
		ПоказатьВопрос(ОП, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		СозданиеЭлементаРядаСобытий();
	КонецЕсли;

КонецПроцедуры // СоздатьНовыйЭлементРядСобытий()

&НаКлиенте
// Процедура обработки ответа на вопрос о записи документа.
//
Процедура ОбработкаОповещенияВопросОЗаписи(Параметры, Дополнительно) Экспорт
	Если Параметры = КодВозвратаДиалога.Да Тогда
		Записать();
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Объект.Периодическое = Ложь;
		НастроитьВидимостьИДоступностьФормы();
		Возврат;
	КонецЕсли;
	СозданиеЭлементаРядаСобытий();
КонецПроцедуры

#КонецОбласти

