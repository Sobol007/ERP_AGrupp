
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	CRM_ОбщегоНазначенияСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.CRM_Интерес") Тогда
		
		ДокументОснование	= ДанныеЗаполнения.Ссылка;
		КонтактноеЛицо		= ДанныеЗаполнения.КонтактноеЛицо;
		ОжидаемаяВыручка	= ДанныеЗаполнения.ОжидаемаяВыручка;
		Ответственный		= ДанныеЗаполнения.Ответственный;
		Партнер				= ДанныеЗаполнения.Партнер;
		Подразделение		= ДанныеЗаполнения.Подразделение;
		ПотенциальныйКлиент	= ДанныеЗаполнения.ПотенциальныйКлиент;
		Организация			= ДанныеЗаполнения.Организация;
		СостояниеИнтереса	= ДанныеЗаполнения.СостояниеИнтереса;
		
		Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = Партнер.CRM_ОсновноеКонтактноеЛицо;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	// Дозаполнение по умолчанию.
	Если Не ЗначениеЗаполнено(ПлановаяДата) Тогда
		ПлановаяДата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПлановаяДатаЗавершение) Тогда
		ПлановаяДатаЗавершение = ПлановаяДата + 3600;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = ЭтотОбъект.Автор;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		Подразделение = Ответственный.Подразделение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Автор, "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтатусВзаимодействия) Тогда
		СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Запланировано;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидВзаимодействия) Тогда
		ВидВзаимодействия = CRM_ВзаимодействияСервер.ПолучитьОсновнойВидВзаимодействия();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидВзаимодействия) Тогда
		ВидВзаимодействия = Справочники.CRM_ВидыВзаимодействий.Встреча;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Помещение) Тогда
		Место = Строка(Помещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЗаписьНовогоВзаимодействия", ЭтоНовый());
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		МетаданныеДокументаОснования = ДокументОснование.Метаданные();
		
		Если НЕ ЗначениеЗаполнено(КонтактноеЛицо)
			И CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("КонтактноеЛицо", МетаданныеДокументаОснования)
			Тогда
			КонтактноеЛицо = ДокументОснование.КонтактноеЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Партнер) И НЕ ЗначениеЗаполнено(ПотенциальныйКлиент) И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") Тогда
			Партнер = ДокументОснование.Партнер;
			Если CRM_ОбщегоНазначенияСервер.ЕстьРеквизитДокумента("ПотенциальныйКлиент", МетаданныеДокументаОснования) Тогда
				ПотенциальныйКлиент = ДокументОснование.ПотенциальныйКлиент;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПлановаяДатаЗавершение) ИЛИ
			ПлановаяДатаЗавершение < ПлановаяДата Тогда
			ПлановаяДатаЗавершение = ПлановаяДата + 60*15;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИмпортИзВнешнегоКалендаря") Тогда
		Возврат;
	КонецЕсли;
	
	// +Календари
	ЗарегистрироватьИзменениеВПланеОбмена();
	// -Календари
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Документ_CRM_Интерес 
		или ВидВзаимодействия.ВидДела = Справочники.CRM_ВидыДелВзаимодействий.Задача_ЗадачаИсполнителя Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	ИначеЕсли ВидВзаимодействия.ВидДела <> Справочники.CRM_ВидыДелВзаимодействий.ПрочиеДокументы Тогда
		ПроверяемыеРеквизиты.Добавить("ДокументОснование");
	КонецЕсли;

	//Если СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
	//	ПроверяемыеРеквизиты.Добавить("ЗавершившийПользователь");
	//КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// +Календари

Процедура ЗарегистрироватьИзменениеВПланеОбмена()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДополнительныеСвойства.Свойство("ЗаписьНовогоВзаимодействия") Тогда
		ЗаписьНовогоВзаимодействия = ДополнительныеСвойства.ЗаписьНовогоВзаимодействия;
	Иначе
		ЗаписьНовогоВзаимодействия = Ложь;
	КонецЕсли;
	Если ЗаписьНовогоВзаимодействия И
		СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено Тогда
		Возврат;
	КонецЕсли;
	
	Календарь = CRM_ОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "КалендарьДляСинхронизации");
	Если Не ЗначениеЗаполнено(Календарь) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаСинхронизации = Календарь.СервисКалендарей.ДатаНачалаСинхронизации;
	Если Дата < ДатаНачалаСинхронизации Тогда
		Возврат;
	КонецЕсли;
	
	УзелДляКалендаря = ПланыОбмена.CRM_СинхронизацияКалендарей.УзелДляКалендаря(Календарь);
	ОбменДанными.Получатели.Добавить(УзелДляКалендаря);
	УдалитьДублированиеРегистрацииИзменений(УзелДляКалендаря);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Удаляет регистрацию изменений в случае, когда у объекта был изменен календарь перед выгрузкой
Процедура УдалитьДублированиеРегистрацииИзменений(УзелДляКалендаря)
	
	//Если ЗначениеЗаполнено(Идентификатор) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВзаимодействияИзменения.Узел
	|ИЗ
	|	Документ.CRM_Взаимодействие.Изменения КАК ВзаимодействияИзменения
	|ГДЕ
	|	ВзаимодействияИзменения.Ссылка = &Ссылка
	|	И ВзаимодействияИзменения.Узел <> &Узел");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Узел", УзелДляКалендаря);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.УдалитьРегистрациюИзменений(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку(0), Ссылка);
	
КонецПроцедуры

Процедура ОтразитьВКалендаре() Экспорт
	
	// Запись взаимодействия в календарь ответственного.
	НаборЗаписей = РегистрыСведений.CRM_СобытияКалендаря.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	
	Идентификатор		= "";
	ETag				= "";
	ИндексЦвета			= "";
	Гиперссылка			= "";
	
	ДополнительныеСвойства.Свойство("Идентификатор",		Идентификатор);
	ДополнительныеСвойства.Свойство("ETag",					ETag);
	ДополнительныеСвойства.Свойство("ИндексЦвета",			ИндексЦвета);
	ДополнительныеСвойства.Свойство("Гиперссылка",			Гиперссылка);
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		НаборЗаписей.Прочитать();
		Для Каждого СохраненнаяЗапись Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(СохраненнаяЗапись.Идентификатор) Тогда
				Идентификатор		= СохраненнаяЗапись.Идентификатор;
				ETag				= СохраненнаяЗапись.ETag;
				ИндексЦвета			= СохраненнаяЗапись.ИндексЦвета;
				Гиперссылка			= СохраненнаяЗапись.Гиперссылка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		Ключ = CRM_СинхронизацияКалендарей.КлючИзИдентификатора(
			Идентификатор, "Документы.CRM_Взаимодействие.ОтразитьВКалендаре()");
	Иначе
		Ключ = CRM_СинхронизацияКалендарей.КлючИзИдентификатора(
			СтрЗаменить(Ссылка.УникальныйИдентификатор(), "-", ""), "Документы.CRM_Взаимодействие.ОтразитьВКалендаре()");
	КонецЕсли;
	
	// Запись в календарь ответственного.
	ЗаписьСобытия = НаборЗаписей.Добавить();
	ЗаписьСобытия.Идентификатор			= Идентификатор;
	ЗаписьСобытия.Ключ					= Ключ;
	ЗаписьСобытия.ETag					= ETag;
	ЗаписьСобытия.ИндексЦвета			= ИндексЦвета;
	ЗаписьСобытия.Гиперссылка			= Гиперссылка;
	ЗаполнитьСобытиеКалендаря(ЗаписьСобытия, Ответственный);
	
	// Запись в календари участников.
	Для Каждого ДанныеУчастника Из СвоиЛица Цикл
		
		Если ТипЗнч(ДанныеУчастника.Лицо) <> Тип("СправочникСсылка.Пользователи") Или
			Не ЗначениеЗаполнено(ДанныеУчастника.Лицо) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписьСобытия = НаборЗаписей.Добавить();
		ЗаполнитьСобытиеКалендаря(ЗаписьСобытия, ДанныеУчастника.Лицо);
		
		Если (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.CRM_Интерес") И ДокументОснование.Избранный) 
			ИЛИ (ТипЗнч(ДокументОснование) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") И ДокументОснование.Важность = Перечисления.ВариантыВажностиЗадачи.Высокая) Тогда
			ЗаписьСобытия.Важность = Перечисления.ВариантыВажностиВзаимодействия.Высокая;
		КонецЕсли;
	
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьСобытиеКалендаря(ЗаписьСобытия, Пользователь)
	
	ЗаписьСобытия.ПериодНачало				= ПлановаяДата;
	ЗаписьСобытия.ПериодОкончание			= ПлановаяДатаЗавершение;
	
	ЗаписьСобытия.Пользователь				= Пользователь;
	ЗаписьСобытия.Объект					= Ссылка;
	ЗаписьСобытия.Подразделение				= Подразделение;
	ЗаписьСобытия.ПомещениеСобытия			= Помещение;
	
	ЗаписьСобытия.Тема 						= Тема;
	ЗаписьСобытия.ВходящееИсходящееСобытие	= ВидВзаимодействия.Направление;
	ЗаписьСобытия.ВидСобытия				= ВидВзаимодействия.ВидСобытия;
	ЗаписьСобытия.ОсновнаяКатегорияСобытия	= ОсновнаяКатегория;
	ЗаписьСобытия.ВидВзаимодействия			= ВидВзаимодействия;
	ЗаписьСобытия.ВидДела					= ВидВзаимодействия.ВидДела;
	ЗаписьСобытия.НаВесьДень				= НаВесьДень;
	ЗаписьСобытия.СостояниеСобытия			= СтатусВзаимодействия;
	
	ЗаписьСобытия.Завершено					= СтатусВзаимодействия = Справочники.CRM_СостоянияСобытий.Завершено;
	
	ЗаписьСобытия.Партнер					= ?(ЗначениеЗаполнено(Партнер), Партнер, ПотенциальныйКлиент);
	ЗаписьСобытия.Балл						= Баллы;
	
КонецПроцедуры

// -Календари

#КонецОбласти

#КонецЕсли
