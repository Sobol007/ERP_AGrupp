&НаКлиенте
Перем ПараметрыОбработчика;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиПодключенияКСервисуИППЗаданы = ПартнерыИКонтрагенты.НастройкиПодключенияКСервисуИППЗаданы();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ДополнительныеПараметрыКИ = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформацией();
	ДополнительныеПараметрыКИ.Вставить("ИмяЭлементаДляРазмещения", "ГруппаКонтактнаяИнформация");
	ДополнительныеПараметрыКИ.Вставить("ПоложениеЗаголовкаКИ", ПоложениеЗаголовкаЭлементаФормы.Лево);
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтаФорма, Объект, ДополнительныеПараметрыКИ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
		
		Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекущаяСтрокаЗадачи") Тогда
		АГ_ТекущаяСтрокаЗадачи = Параметры.ТекущаяСтрокаЗадачи;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Истина;
	Иначе
		АГ_ТекущаяСтрокаЗадачи = 9999999999;
		Элементы.АГ_ГруппаИсполнениеТри.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();

	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Объект.ОбособленноеПодразделение Тогда
		ВидКонтрагента = "ОбособленноеПодразделение";
	ИначеЕсли ЗначениеЗаполнено(Объект.ЮрФизЛицо) Тогда
		ВидКонтрагента = ОбщегоНазначения.ИмяЗначенияПеречисления(Объект.ЮрФизЛицо);
	КонецЕсли;
	
	//НастройкиПолейФормы = Справочники.БанковскиеСчетаКонтрагентов.НастройкиПолейФормы();
	//ЗначениеВРеквизитФормы(НастройкиПолейФормы, "НастройкиПолей");
	//ЗависимостиПолейФормы = ДенежныеСредстваСервер.ЗависимостиПолейФормы(НастройкиПолейФормы);
	//ЗначениеВРеквизитФормы(ЗависимостиПолейФормы, "ЗависимостиПолей");
	
	//ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	//ИспользоватьВалютныеПлатежи = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныеПлатежи");
	//
	////++ НЕ УТ
	//ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	//
	//Если ПоддержкаПлатежей275ФЗ И ЗначениеЗаполнено(Объект.ГосударственныйКонтракт) Тогда
	//	УстановитьПривилегированныйРежим(Истина);
	//	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ГосударственныйКонтракт, "Состояние")
	//		= Перечисления.СостоянияГосударственныхКонтрактов.Завершен Тогда
	//		Элементы.ГосударственныйКонтракт.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСнизу;
	//	Иначе
	//		Элементы.ГосударственныйКонтракт.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
	//	КонецЕсли;
	//	УстановитьПривилегированныйРежим(Ложь);
	//КонецЕсли;
	////-- НЕ УТ
	
	//ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	//ВалютныйСчет = (ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Объект.ВалютаДенежныхСредств <> ВалютаРеглУчета);
	//ИностранныйБанк = ?(Объект.ИностранныйБанк, 1, 0);
	
	ЗаполнитьРеквизитыБанка();
	//СформироватьАвтоНаименование();
	//
	//ИспользоватьТекстКорреспондента = ЗначениеЗаполнено(Объект.ТекстКорреспондента);
	//Если ИспользоватьТекстКорреспондента Тогда
	//	ТекстКорреспондента = Объект.ТекстКорреспондента;
	//Иначе
	//	ЗаполнитьТекстКорреспондента();
	//КонецЕсли;
	//
	//ИспользоватьИННКорреспондента = ЗначениеЗаполнено(Объект.ИННКорреспондента);
	//Если ИспользоватьИННКорреспондента Тогда
	//	ИННКорреспондента = Объект.ИННКорреспондента;
	//Иначе
	//	ЗаполнитьИННКорреспондента();
	//КонецЕсли;
	//
	//ИспользоватьКППКорреспондента = ЗначениеЗаполнено(Объект.КППКорреспондента);
	//Если ИспользоватьКППКорреспондента Тогда
	//	КППКорреспондента = Объект.КППКорреспондента;
	//Иначе
	//	ЗаполнитьКППКорреспондента();
	//КонецЕсли;
	//
	//СчетФизЛица = (ТипЗнч(Объект.Владелец) = Тип("СправочникСсылка.ФизическиеЛица"));
	//
	//КонтрагентФизЛицо = Ложь;
	//Если Не СчетФизЛица И ЗначениеЗаполнено(Объект.Владелец) Тогда
	//	КонтрагентФизЛицо = (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ЮрФизЛицо") = Перечисления.ЮрФизЛицо.ФизЛицо);
	//КонецЕсли;
	//
	//УправлениеЭлементамиФормы();
	//НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтаФорма, Объект, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ФизЛицо") Тогда
		Объект.КодПоОКПО = "";
	КонецЕсли;
	
	Если Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Объект.КодПоОКПО = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИНН) Или Объект.ЮрФизЛицо <> ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо") Тогда
		Объект.КПП = "";
	КонецЕсли;
	
	// Если контрагент не является резидентом РФ, то страна регистрации должна быть Россией.
	Если Не Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
		Объект.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	КонецЕсли;
	
	//Если Не Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицоНеРезидент") Тогда
	//	Объект.НалоговыйНомер = "";
	//КонецЕсли;
	
	CRM_ЗаписатьВсеТипыОтношений();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимостьКнопок();
	CRM_ЗаполнитьВсеТипыОтношений();
	CRM_ЗаполнитьТипыОтношений();
КонецПроцедуры


&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	ЭтоЮрЛицо = ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо);
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, ЭтоЮрЛицо, ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		
		РезультатЗапуска = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеДанныеПартнераПоИННЗапустить(Объект.ИНН,
		                                                                                               Объект.ЮрФизЛицо,
		                                                                                               УникальныйИдентификатор,
		                                                                                               ФоновоеЗаданиеИдентификатор);
		
		ФоновоеЗаданиеИдентификатор  = РезультатЗапуска.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатЗапуска.АдресХранилища;
		
		Если РезультатЗапуска.ЗаданиеЗапущено Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПараметрыОбработчика.ТекущийИнтервал = 2;
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 2, Истина);
		Иначе
			ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатЗапуска.РеквизитыКонтрагента);
		КонецЕсли;

	КонецЕсли;
	
	//УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	//ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	//СамообслуживаниеКлиентСервер.УстановитьВидимостьПредупрежденийГоловногоКонтрагента(
	//	ЭтотОбъект, Объект.ОбособленноеПодразделение, Объект.ГоловнойКонтрагент, Объект.ИНН);
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтрагентаПриИзменении(Элемент)
	
	Если ВидКонтрагента = "ОбособленноеПодразделение" Тогда
		
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
		Объект.ОбособленноеПодразделение = Истина;
		
		//Если Объект.ГоловнойКонтрагент = Объект.Ссылка Тогда
		//	Объект.ГоловнойКонтрагент = Неопределено;
		//КонецЕсли;
		
	Иначе
		
		Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо." + ВидКонтрагента);
		Объект.ОбособленноеПодразделение = Ложь;
		
		//Если Объект.ГоловнойКонтрагент <> Объект.Ссылка Тогда
		//	Объект.ГоловнойКонтрагент = Неопределено;
		//КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//УстановитьРеквизитыПроверкиКонтрагента(ЭтотОбъект);
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	//УправлениеДоступностью();
	//ОтключитьОтметкуНезаполненного();
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски

КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	Если Не ПустаяСтрока(Объект.НомерСчета) Тогда
		НомерСчетаПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НомерСчетаПриИзмененииСервер()
	
	Валюта = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(Объект.НомерСчета);
	Если ЗначениеЗаполнено(Валюта) Тогда
		Объект.ВалютаДенежныхСредств = Валюта;
	КонецЕсли;
	
	//УправлениеЭлементамиФормы();
	//СформироватьАвтоНаименование();
	
КонецПроцедуры

&НаКлиенте
Процедура БИКБанкаПриИзменении(Элемент)
	РеквизитБанкаПриИзменении("БИКБанка");
КонецПроцедуры

&НаКлиенте
Процедура РеквизитБанкаПриИзменении(ИмяЭлемента)
	
	Если ИмяЭлемента = "БИКБанка" Тогда
		//Если Не Объект.РучноеИзменениеРеквизитовБанка И Не Объект.ИностранныйБанк Тогда
			Если Не ЗаполнитьРеквизитыБанкаПоБИК("Банк", БИКБанка, Истина) И ЗначениеЗаполнено(БИКБанка) Тогда
				
				СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
				СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка",  НСтр("ru = 'Выбрать из списка'"));
				СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",   НСтр("ru = 'Продолжить ввод'"));
				СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",    НСтр("ru = 'Отменить ввод'"));
				
				ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
				ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Значение%", БИКБанка);
				
				Ответ = Неопределено;
				
				ПоказатьВопрос(
					Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииПослеВопроса",
					ЭтотОбъект,
					Новый Структура("ИмяЭлемента, СписокВариантовОтветовНаВопрос, ТекстВопроса",
						ИмяЭлемента, СписокВариантовОтветовНаВопрос, ТекстВопроса)),
					ТекстВопроса,
					СписокВариантовОтветовНаВопрос,
					0,,
					НСтр("ru = 'Выбор банка из классификатора'"));
				Возврат;
			КонецЕсли;
		//КонецЕсли;
	//ИначеЕсли ИмяЭлемента = "БИКБанкаДляРасчетов" Тогда
	//	Если Не Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов И Не ВалютныйСчет Тогда
	//		Если Не ЗаполнитьРеквизитыБанкаПоБИК("БанкДляРасчетов", БИКБанкаДляРасчетов, Истина)
	//			И ЗначениеЗаполнено(БИКБанкаДляРасчетов) Тогда
	//			
	//			СписокВариантовОтветовНаВопрос = Новый СписокЗначений;
	//			СписокВариантовОтветовНаВопрос.Добавить("ВыбратьИзСписка", НСтр("ru = 'Выбрать из списка'"));
	//			СписокВариантовОтветовНаВопрос.Добавить("ПродолжитьВвод",  НСтр("ru = 'Продолжить ввод'"));
	//			СписокВариантовОтветовНаВопрос.Добавить("ОтменитьВвод",    НСтр("ru = 'Отменить ввод'"));
	//			
	//			ТекстВопроса = НСтр("ru = 'Банк с БИК  %Значение% не найден в классификаторе банков.'");
	//			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Значение%", БИКБанкаДляРасчетов);
	//			
	//			ПоказатьВопрос(
	//				Новый ОписаниеОповещения("РеквизитБанкаПриИзмененииЗавершение", ЭтотОбъект),
	//				ТекстВопроса,
	//				СписокВариантовОтветовНаВопрос,
	//				0,,
	//				НСтр("ru = 'Выбор банка-корреспондента из классификатора'"));
	//			Возврат;
	//		КонецЕсли;
	//	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБИК(ТипБанка, БИК = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	НашлиПоБИК   = Ложь;
	ЗаписьОБанке = Неопределено;
	
	Если ТипБанка = "Банк" Тогда
		СтруктураРеквизитов = Новый Структура(РеквизитыБанка());
	//Иначе
	//	СтруктураРеквизитов = Новый Структура(РеквизитыБанкаДляРасчетов());
	КонецЕсли;
	
	Для каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ЭтаФорма[КлючИЗначение.Ключ] = "";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(БИК) Тогда
		
		РаботаСБанками.ПолучитьДанныеКлассификатора(БИК,, ЗаписьОБанке);
		
		Если ЗначениеЗаполнено(ЗаписьОБанке) Тогда
			ЗаполнитьРеквизитыБанкаПоБанку(ТипБанка, ЗаписьОБанке, ПеренестиЗначенияРеквизитов);
			Объект[ТипБанка] = ЗаписьОБанке;
			НашлиПоБИК = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НашлиПоБИК;
	
КонецФункции

&НаСервере
Функция ЗаполнитьРеквизитыБанкаПоБанку(ТипБанка, Банк = "", ПеренестиЗначенияРеквизитов = Ложь)
	
	Если ТипБанка = "Банк" Тогда
		
		СтруктураРеквизитов = Новый Структура;
		ИменаРеквизитов = СтрРазделить(РеквизитыБанка(), ",", Ложь);
		Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			СтруктураРеквизитов.Вставить(ИмяРеквизита, СтрЗаменить(ИмяРеквизита, "Банка", ""));
		КонецЦикла;
		СтруктураРеквизитов.Вставить("БИКБанка", "Код");
		СтруктураРеквизитов.Вставить("СВИФТБанка", "СВИФТБИК");
		СтруктураРеквизитов.Вставить("НаименованиеБанкаМеждународное", "МеждународноеНаименование");
		
		РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, СтруктураРеквизитов);
		
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыБанка);
		
		Если ПеренестиЗначенияРеквизитов Тогда
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыБанка);
			Объект.Банк = Неопределено;
		КонецЕсли;
		
	//ИначеЕсли ТипБанка = "БанкДляРасчетов" Тогда
	//	
	//	СтруктураРеквизитов = Новый Структура;
	//	ИменаРеквизитов = СтрРазделить(РеквизитыБанкаДляРасчетов(), ",", Ложь);
	//	Для каждого ИмяРеквизита Из ИменаРеквизитов Цикл
	//		СтруктураРеквизитов.Вставить(ИмяРеквизита, СтрЗаменить(ИмяРеквизита, "БанкаДляРасчетов", ""));
	//	КонецЦикла;
	//	СтруктураРеквизитов.Вставить("БИКБанкаДляРасчетов", "Код");
	//	СтруктураРеквизитов.Вставить("СВИФТБанкаДляРасчетов", "СВИФТБИК");
	//	СтруктураРеквизитов.Вставить("НаименованиеБанкаДляРасчетовМеждународное", "МеждународноеНаименование");
	//	
	//	РеквизитыБанка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Банк, СтруктураРеквизитов);
	//	
	//	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыБанка);
	//	
	//	Если ПеренестиЗначенияРеквизитов Тогда
	//		ЗаполнитьЗначенияСвойств(Объект, РеквизитыБанка);
	//		Объект.БанкДляРасчетов = Неопределено;
	//	КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыБанка()
	
	Возврат "БИКБанка, СВИФТБанка, НаименованиеБанка, НаименованиеБанкаМеждународное, КоррСчетБанка, СтранаБанка, ГородБанка,
		|ГородБанкаМеждународный, АдресБанка, АдресБанкаМеждународный, ТелефоныБанка";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыБанка()
	
	//Если Объект.РучноеИзменениеРеквизитовБанка Тогда
	//	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, РеквизитыБанка());
	//Иначе
		Если Не Объект.Банк.Пустая() Тогда
			ЗаполнитьРеквизитыБанкаПоБанку("Банк", Объект.Банк, Ложь);
		КонецЕсли;
	//КонецЕсли;
	
	//Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
	//	Если ЗначениеЗаполнено(Объект.БанкДляРасчетов)
	//		Или ЗначениеЗаполнено(Объект.БИКБанкаДляРасчетов)
	//		Или ЗначениеЗаполнено(Объект.СВИФТБанкаДляРасчетов) Тогда
	//		ИспользуетсяБанкДляРасчетов = Истина;
	//	Иначе
	//		ИспользуетсяБанкДляРасчетов = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//Если Объект.РучноеИзменениеРеквизитовБанкаДляРасчетов Тогда
	//	ЗаполнитьЗначенияСвойств(ЭтаФорма, Объект, РеквизитыБанкаДляРасчетов());
	//Иначе
	//	Если Не Объект.БанкДляРасчетов.Пустая() Тогда
	//		ЗаполнитьРеквизитыБанкаПоБанку("БанкДляРасчетов", Объект.БанкДляРасчетов, Ложь);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопок()
	
	Элементы.ФормаПроверитьНаДублирование.Доступность = Объект.ЕстьДубли;
	Элементы.ФормаСогласоватьКонтрагента.Видимость = Не Объект.ЕстьДубли;
	Элементы.ФормаСогласоватьКонтрагента.Доступность = (Объект.Статус = ПредопределенноеЗначение("Перечисление.АГ_СтатусыЗаявок.ПодготовкаКПодачеЗаявки"));
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Объект.СтранаРегистрации);
	
	Отбор = Новый Структура("ИмяРеквизита", Элемент.Имя);
	Строки = ЭтаФорма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	ДанныеСтроки = ?(Строки.Количество() = 0, Неопределено, Строки[0]);
	Если ДанныеСтроки <> Неопределено
		И ДанныеСтроки.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МеждународныйАдресКонтрагентаЗаявка") Тогда
			ПараметрыОткрытия.Вставить("РазрешитьВводАдресаВСвободнойФорме", Ложь);
	КонецЕсли;
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация

#КонецОбласти

#Область ТипыОтношений

&НаКлиенте
// Процедура  заполняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьВсеТипыОтношений()
	CRM_ВсеТипыОтношений.Очистить();
	CRM_ВсеТипыОтношений.Добавить("Поставщик",			"Поставщик",		Объект.Поставщик);
	CRM_ВсеТипыОтношений.Добавить("Клиент",				"Покупатель",		Объект.Клиент);
	CRM_ВсеТипыОтношений.Добавить("Конкурент",			"Конкурент",		Объект.Конкурент);
	CRM_ВсеТипыОтношений.Добавить("Перевозчик",			"Перевозчик",		Объект.Перевозчик);
	CRM_ВсеТипыОтношений.Добавить("ПрочиеОтношения",	"Прочие отношения",	Объект.ПрочиеОтношения);
	CRM_ВсеТипыОтношений.Добавить("ОбслуживаетсяТорговымиПредставителями",	"Обслуживается торговыми представителями",	Объект.ОбслуживаетсяТорговымиПредставителями);
	CRM_ВсеТипыОтношений.Добавить("CRM_Госорганы",		"Госорганы",		Объект.CRM_Госорганы);
	CRM_ВсеТипыОтношений.Добавить("CRM_Учредитель",		"Учредитель",		Объект.CRM_Учредитель);
КонецПроцедуры // CRM_ЗаполнитьВсеТипыОтношений()

&НаСервере
// Процедура сохраняет все типы отношений клиента.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаписатьВсеТипыОтношений()
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если НЕ (Объект[ТипОтношений.Значение] = ТипОтношений.Пометка) Тогда
			Объект[ТипОтношений.Значение] = ТипОтношений.Пометка;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры // CRM_ЗаписатьВсеТипыОтношений()

&НаКлиенте
// Процедура заполняет реквизит формы CRM_ТипыОтношений.
//
// Параметры:
//	Нет.
//
Процедура CRM_ЗаполнитьТипыОтношений()
	CRM_ТипыОтношений = "";
	Для Каждого ТипОтношений Из CRM_ВсеТипыОтношений Цикл
		Если ТипОтношений.Пометка Тогда
			CRM_ТипыОтношений = CRM_ТипыОтношений  + "; " + ТипОтношений.Представление;
		КонецЕсли;
	КонецЦикла;	
	Если СтрДлина(CRM_ТипыОтношений) > 0 Тогда
		CRM_ТипыОтношений = Сред(CRM_ТипыОтношений, 3);
	КонецЕсли;	

КонецПроцедуры // CRM_ЗаполнитьТипыОтношений();

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" элемента формы "CRM_ТипыОтношений".
//
Процедура CRM_ТипыОтношенийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка	= Ложь;
	ДополнительныеПараметры	= Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		ДополнительныеПараметры.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	ОповещениеВыбора		= Новый ОписаниеОповещения("CRM_ОбработкаВыбораТиповОтношений", ЭтотОбъект, ДополнительныеПараметры);
	CRM_ВсеТипыОтношений.ПоказатьОтметкуЭлементов(ОповещениеВыбора, НСтр("ru='Отметьте типы отношений с клиентом'"));
КонецПроцедуры // CRM_ТипыОтношенийНачалоВыбора()

&НаКлиенте
// Процедура - обработчик выбора типов отношений.
//
// Параметры:
//	СписокТипов				- СписокЗначений	- Список типов отношений.
//	ДополнительныеПараметры	- Структура			- Структура дополнительных параметров.
//
Процедура CRM_ОбработкаВыбораТиповОтношений(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = Неопределено Тогда Возврат; КонецЕсли;
	
	НовыеЗначенияТипыОтношений = Новый Структура;
	
	// сохраним значения до изменения
	Для каждого CRM_ВсеТипыОтношенийЭлемент Из CRM_ВсеТипыОтношений Цикл
		
		НовыеЗначенияТипыОтношений.Вставить(CRM_ВсеТипыОтношенийЭлемент.Значение, CRM_ВсеТипыОтношенийЭлемент.Пометка);	
	
	КонецЦикла;
	
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Поставщик И Не НовыеЗначенияТипыОтношений.Поставщик Тогда
		
		Если НовыеЗначенияТипыОтношений.Перевозчик Тогда
			
			ЭлементПеревозчик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Перевозчик");
			
			ЭлементПеревозчик.Пометка = Ложь;		
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.Перевозчик И НовыеЗначенияТипыОтношений.Перевозчик Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Поставщик Тогда
			
			ЭлементПоставщик = CRM_ВсеТипыОтношений.НайтиПоЗначению("Поставщик");
			
			ЭлементПоставщик.Пометка = Истина;
	
		КонецЕсли;
	
	КонецЕсли; 
		
	// если поставщик был снят, то перевозчик тоже должен быть снят
	
	Если ДополнительныеПараметры.Клиент И Не НовыеЗначенияТипыОтношений.Клиент Тогда
		
		Если НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
			
			ЭлементОбслуживаетсяТорговымиПредставителями = CRM_ВсеТипыОтношений.НайтиПоЗначению("ОбслуживаетсяТорговымиПредставителями");
			
			ЭлементОбслуживаетсяТорговымиПредставителями.Пометка = Ложь;
	
		КонецЕсли;
		
	// если перевозчик был установлен, то поставщик тоже должен быть установлен
		
	ИначеЕсли Не ДополнительныеПараметры.ОбслуживаетсяТорговымиПредставителями И НовыеЗначенияТипыОтношений.ОбслуживаетсяТорговымиПредставителями Тогда
	
		Если Не НовыеЗначенияТипыОтношений.Клиент Тогда
			
			ЭлементКлиент = CRM_ВсеТипыОтношений.НайтиПоЗначению("Клиент");
			
			ЭлементКлиент.Пометка = Истина;		
	
		КонецЕсли;
	
	КонецЕсли; 
			
	CRM_ЗаполнитьТипыОтношений();
	
КонецПроцедуры // CRM_ОбработкаВыбораТиповОтношений()	

	
#КонецОбласти


&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	
	ИННЗаполненКорректно = Истина;
	
	ТекстСообщения = "";
	Если ПустаяСтрока(Объект.ИНН) Тогда
		ИННЗаполненКорректно = Ложь;
	ИначеЕсли НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Объект.ИНН, 
		                                                                          ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо),
		                                                                          ТекстСообщения) Тогда
		
		ОчиститьСообщения();
		ИННЗаполненКорректно = Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,
			,"Объект.ИНН",,);
			
	КонецЕсли;
	
	Если ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно) Тогда
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте");
		РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
		                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо),
		                       Объект.ИНН,
		                       ФоновоеЗаданиеИдентификатор);
		
		ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ЭтотОбъект.ИндексыСПАРКРиски = Неопределено;
	//ОбновитьОтображениеИндексыСПАРК();
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	
	РезультатВыполнения = ПартнерыИКонтрагентыВызовСервера.ФоновоеЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ВыполнитьЗаполнениеРеквизитовПоИНН(РезультатВыполнения.РеквизитыКонтрагента);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПоНаименованию(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтрокаПоиска", Объект.НаименованиеПолное);
	ДопПараметры = Новый Структура;
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоНаименованиюЗавершение", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.ЗаполнениеРеквизитовКонтрагента",ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоНаименованиюЗавершение(Результат, ДопПараметры) Экспорт
	
	Если НЕ СамообслуживаниеКлиентСервер.ЭтоИНН(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыКонтрагента = ПартнерыИКонтрагентыВызовСервера.ДанныеКонтрагентаПоИНН(
	                       ОбщегоНазначенияУТКлиентСервер.ЭтоЮрЛицо(Объект.ЮрФизЛицо),
	                       Результат,
	                       ФоновоеЗаданиеИдентификатор);
	
	ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, Истина);
	//УстановитьДоступностьКнопкиЗаполнитьПоИНН(ЭтотОбъект);
	//ТекущийЭлемент = Элементы.НаименованиеСокращенное;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаДублирование(Команда)
	Если Не ЗначениеЗаполнено(Объект.ИНН) Тогда
		Сообщить("ИНН не заполнен");
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.КПП) Тогда
		Сообщить("КПП не заполнен");
		Возврат;
	КонецЕсли;
	Дубль = ПроверитьНаДублированиеНаСервере(Объект.ИНН, Объект.КПП);
	Если ТипЗнч(Дубль) = Тип("СправочникСсылка.Контрагенты") Тогда
		Предупреждение("В базе существует контрагент " + Дубль + " с указанными ИНН и КПП");
		Объект.ЕстьДубли = Истина;
	Иначе
		Сообщить("Дубли не найдены");
		Объект.ЕстьДубли = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаДублированиеНаСервере(ИНН, КПП)
	Возврат Документы.АГ_ЗаявкаНаСозданиеИзменениеНовогоКонтрагента.ПроверитьНаДублирование(ИНН, КПП);	
КонецФункции


#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(РеквизитыКонтрагента, ЗаполнятьИНН = Ложь)
	
	Если РеквизитыКонтрагента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		
		ПартнерыИКонтрагентыКлиент.ПоказатьПользователюОшибкуПолученияРеквизитовКонтрагентаПоИНН(РеквизитыКонтрагента.ОписаниеОшибки);
		
	Иначе
		
		РезультатСравнения = ПартнерыИКонтрагентыКлиент.РезультатСравненияПолученныхДанныхКонтрагентаСИмеющимися(РеквизитыКонтрагента,
		                                                                                                         ДанныеОбъектаДляСравнения(),
		                                                                                                         ЗаполнятьИНН);
		
		Если РезультатСравнения.ЕстьИзменения Тогда
			
			Если РезультатСравнения.ЕстьИзмененияВЗаполненныхРеквизитах Тогда 
				
				ОписаниеОповещенияПерезаполнить = Новый ОписаниеОповещения("ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение",
				                                                           ЭтотОбъект,
				                                                           Новый Структура("РеквизитыКонтрагента", РеквизитыКонтрагента));
				ТекстВопроса = НСтр("ru = 'Перезаполнить реквизиты контрагента на основании данных ЕГРЮЛ\ЕГРИП?'");
				ПоказатьВопрос(ОписаниеОповещенияПерезаполнить, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Иначе
				
				ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеРеквизитовКонтрагентаПоИННЗавершение(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(ДополнительныеПараметры.РеквизитыКонтрагента);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнениеРеквизитовПоДаннымИННВозможно(ИННЗаполненКорректно)

	Возврат СамообслуживаниеКлиентСервер.ЗаполнениеРеквизитовПоДаннымИННВозможно(
	               ИННЗаполненКорректно,
	               НастройкиПодключенияКСервисуИППЗаданы,
	               Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо"),
	               Объект.ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ИндивидуальныйПредприниматель"),
	               Объект.ОбособленноеПодразделение); 

КонецФункции

&НаКлиенте
Функция ДанныеОбъектаДляСравнения()

	ДанныеДляСравнения = ПартнерыИКонтрагентыКлиент.ИнициироватьСтруктураДанныхДляСравнения();
	ЗаполнитьЗначенияСвойств(ДанныеДляСравнения, Объект, "КПП, ИНН, Наименование");
	ДанныеДляСравнения.НаименованиеСокращенное = Объект.НаименованиеПолное;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагентаЗаявка"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.Телефон = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	ДанныеКонтактнойИнформации = ПартнерыИКонтрагентыКлиент.ДанныеСтрокиКонтактнойИнформацииПоВиду(
	                                      ЭтотОбъект,
	                                      ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагентаЗаявка"));
	Если ДанныеКонтактнойИнформации <> Неопределено Тогда
		ДанныеДляСравнения.ЮридическийАдрес = ДанныеКонтактнойИнформации.Представление;
	КонецЕсли;
	
	Возврат ДанныеДляСравнения;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьРевизитыКонтрагентаПоПолученнымДанным(РеквизитыКонтрагента)

	ЗаполнитьЗначенияСвойств(Объект, РеквизитыКонтрагента, "ИНН, Наименование");
	Если РеквизитыКонтрагента.Свойство("КПП") Тогда
		Если РеквизитыКонтрагента.КПП <> Объект.КПП Тогда
			Объект.КПП = РеквизитыКонтрагента.КПП;
			//ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюКПП(Объект, РеквизитыКонтрагента);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.НаименованиеПолное <> РеквизитыКонтрагента.НаименованиеСокращенное Тогда
		Объект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		//ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюНаименований(Объект, РеквизитыКонтрагента);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("Телефон") Тогда
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтрагентаЗаявка"),
		                                                                РеквизитыКонтрагента.Телефон);
	КонецЕсли;
	
	Если РеквизитыКонтрагента.Свойство("ЮридическийАдрес") Тогда
		
		ПартнерыИКонтрагентыКлиент.ЗаполнитьЭлементКонтактнойИнформации(ЭтотОбъект,
		                                                                ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагентаЗаявка"),
		                                                                РеквизитыКонтрагента.ЮридическийАдрес);
		
		//ПартнерыИКонтрагентыКлиент.ЗаполнитьИсториюАдресов(ЭтотОбъект, РеквизитыКонтрагента);
		Объект.СтранаРегистрации = ПолучитьСтрануПоАдресу(РеквизитыКонтрагента.ЮридическийАдрес);
	КонецЕсли;
	
	//УправлениеДоступностью();
	
	Модифицированность = Истина;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	//ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентаВСправочнике(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрануПоАдресу(ЮрАдрес)
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(ЮрАдрес.КонтактнаяИнформация) Тогда
		РезультатыЧтения = Новый Структура;
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(ЮрАдрес.КонтактнаяИнформация, Перечисления.ТипыКонтактнойИнформации.Адрес, РезультатыЧтения);
	Иначе
		XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(ЮрАдрес.КонтактнаяИнформация, ЮрАдрес.Представление, );
	КонецЕсли;
	Если ЗначениеЗаполнено(XDTOКонтактная.Состав.Страна) Тогда
		Страна = Справочники.СтраныМира.НайтиПоНаименованию(XDTOКонтактная.Состав.Страна);
		Если Страна = Неопределено Тогда
			Возврат Справочники.СтраныМира.ПустаяСсылка();
		Иначе	
			Возврат Страна;
		КонецЕсли;		
	Иначе
		Возврат Справочники.СтраныМира.ПустаяСсылка();
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СогласоватьКонтрагента

&НаКлиенте
Процедура СогласоватьКонтрагента(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПроверитьПодключениеЗавершение", ЭтотОбъект, Объект.Ссылка);
	ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодключение(
		ОписаниеОповещения,,, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, ПараметрКоманды) Экспорт
	
	Если Результат = Истина Тогда // авторизация успешна
		
		СоздатьБизнесПроцесс(ПараметрКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Создает бизнес-процесс. При передаче в качестве предмета ссылки на объект ИС создает связанный
// объект ДО, если эта связь не была установлена ранее.
//
// Параметры:
//   Предмет - ЛюбаяСсылка - ссылка на объект интегрируемой системы, или
//           - Структура - описание объекта ДО, со свойствами:
//               id - Строка - идентификатор;
//               type - Строка - тип;
//               name - Строка - наименование предмета.
//   ГлавнаяЗадача - Ссылка - описание главной задачи бизнес-процесса:
//     id - Строка - идентификатор;
//     type - Строка - тип;
//     name - Строка - наименование главной задачи.
//   ОписаниеОповещения - ОписаниеОповещения - описание оповещения, вызываемого при завершении.
//
Процедура СоздатьБизнесПроцесс(Предмет = Неопределено, ГлавнаяЗадача = Неопределено,
	ОписаниеОповещения = Неопределено)
	
	Параметры1 = Новый Структура;
	Параметры1.Вставить("ГлавнаяЗадача", ГлавнаяЗадача);
	Параметры1.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	Параметры1.Вставить("Предмет", Предмет);
	
	ОписаниеОповещенияПродолжение = Новый ОписаниеОповещения(
		"СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО",
		ЭтаФорма,
		Параметры1);
	
	Если Предмет = Неопределено
		Или ТипЗнч(Предмет) = Тип("Структура") Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПродолжение, Предмет);
	Иначе
		НачатьПоискСвязанногоОбъектаДО(Предмет, ОписаниеОповещенияПродолжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет поиск связанного объекта ДО, при необходимости создавая его на основании объекта ИС 
// с заполнением по правилам интеграции, если подходящее правило существует.
//
// Параметры:
//   ОбъектИС - Произвольный - объект ИС, для которого разыскивается связанный объект ДО.
//   ОписаниеОповещения - ОписаниеОповещения - обработчик, вызываемый после создания с
//     передачей в качестве параметра Структуры (id, type, name).
//
Процедура НачатьПоискСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения) Экспорт
	
	Результат = ИнтеграцияС1СДокументооборотВызовСервера.
		ДанныеОбъектаДОПоВнешнемуОбъекту(ОбъектИС);
		
	Если Результат <> Неопределено Тогда // найден
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Результат);
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.НачатьСозданиеСвязанногоОбъектаДО(ОбъектИС, ОписаниеОповещения, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Продолжает создание бизнес-процесса после поиска связанного объекта ДО.
//
// Параметры:
//   Результат - Структура - описание предмета-объекта ДО (id, type, name), или 
//             - Неопределено, если предмет не выбран.
//   Параметры - Структура - см. СоздатьБизнесПроцесс.
//
Процедура СоздатьБизнесПроцессПослеПоискаСвязанногоОбъектаДО(Результат, Параметры1) Экспорт
	
	// Отличим случай, когда предмет не выбран, от случая, когда предмет не нужен.
	Если Параметры1.Предмет <> Неопределено Тогда
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Параметры1.Предмет = Результат;
	КонецЕсли;
	
	// получение дерева шаблонов процессов.
	//Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
		
		//ОписаниеОповещения = Параметры.ОписаниеОповещения;
		//Параметры.ОписаниеОповещения = Неопределено;
		//
		//ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",
		//	Параметры,,,,, ОписаниеОповещения);
		
	//Иначе
	//	
	//	Оповещение = Новый ОписаниеОповещения("ПоддержкаСовместимости_СоздатьБизнесПроцессЗавершение", 
	//		ЭтотОбъект, Параметры);
	//	 
	//	НачатьВыборТипаБизнесПроцесса(Оповещение);
		
	//КонецЕсли;
	
	СоздатьБизнесПроцессНаСервере(Параметры1.Предмет);
	УстановитьВидимостьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьБизнесПроцессНаСервере(ПараметрПредмет)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();	
	
	Предмет = ПараметрПредмет.name;
	ПредметID = ПараметрПредмет.id;
	ПредметТип = ПараметрПредмет.type;
	ВидДокументаID = "";
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПолучатьВидДокумента = Ложь;
		Если НЕ ЗначениеЗаполнено(ВидДокументаID) Тогда 
			// пакетные запросы
			Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.3.2.3") Тогда
				ПолучатьВидДокумента = Истина;
			Иначе
				Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
				ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПредметID, ПредметТип);
				Запрос.objectIds.Добавить(ОбъектИд);
				Запрос.columnSet.Добавить("documentType");
				Результат = Прокси.execute(Запрос);
				ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
				Объект1 = Результат.objects[0];
				Если Найти(Объект1.objectID.type,"Document") <> 0 Тогда
					ВидДокумента = Объект1.documentType.name;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента);
	Иначе
		ЗаполнитьДеревоШаблонов();
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоШаблонов(ПолучатьВидДокумента = Ложь)
	
	Дерево = РеквизитФормыВЗначение("ДеревоШаблонов");
	Дерево.Строки.Очистить();
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Если ПолучатьВидДокумента Тогда
		
		Пакет =  ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMBatchRequest");
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПредметID, ПредметТип);
		Запрос.objectIds.Добавить(ОбъектИд);
		Запрос.columnSet.Добавить("documentType");
		
		Пакет.requests.Добавить(Запрос);
		
	КонецЕсли;
		
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetBusinessProcessTemplatesTreeRequest");
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ПредметБизнесПроцессаИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
		ПредметБизнесПроцессаИд.id = ПредметID;
		ПредметБизнесПроцессаИд.type = ПредметТип;
    	Запрос.businessProcessTargetID = ПредметБизнесПроцессаИд;
	КонецЕсли;

	Если ПолучатьВидДокумента Тогда
		Пакет.requests.Добавить(Запрос);
		Результаты = Прокси.execute(Пакет);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результаты);
		
		РезультатВидДокумента = Результаты.responses[0];
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатВидДокумента);
		Объект1 = РезультатВидДокумента.objects[0];
		Если Найти(Объект1.objectID.type,"Document") <> 0 Тогда
			ВидДокумента = Объект1.documentType.name;
		КонецЕсли;
		
		РезультатДеревоШаблонов = Результаты.responses[1];
		
	Иначе
		РезультатДеревоШаблонов = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатДеревоШаблонов);
	КонецЕсли;
	
	ПорядокБизнесПроцессов = новый Массив();
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOrder");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessApproval");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessPerformance");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConsideration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessAcquaintance");
	ПорядокБизнесПроцессов.Добавить("DMComplexBusinessProcess");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessRegistration");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessConfirmation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInvitation");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessOutgoingDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessInternalDocumentProcessing");
	ПорядокБизнесПроцессов.Добавить("DMBusinessProcessIncomingDocumentProcessing");
	
	СкрытьПоручения = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("2.0.0.0");
	
	Для каждого Раздел из РезультатДеревоШаблонов.BusinessProcessTemplatesTree Цикл
		
		РазделДерева = Дерево.Строки.Добавить();
		РазделДерева.Наименование = Раздел.name;
		РазделДерева.Подсказка = Раздел.hint;
		РазделДерева.ЭтоЗаголовок = Истина;
		
		Если РазделДерева.Наименование = "Другие шаблоны" Тогда
			РазделДерева.Развернуть = Ложь;
		Иначе
			РазделДерева.Развернуть = Истина;
		КонецЕсли;
		
		Для каждого Шаблон из Раздел.elements Цикл
			
			Если СкрытьПоручения
				И Шаблон.businessProcessType = "DMBusinessProcessOrder" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаРаздела = РазделДерева.Строки.Добавить();
			СтрокаРаздела.Наименование = Шаблон.name;
			СтрокаРаздела.Подсказка = Шаблон.hint;
			СтрокаРаздела.ЭтоЗаголовок = Ложь;
			СтрокаРаздела.ТипПроцесса = Шаблон.businessProcessType;
			Если ЗначениеЗаполнено(Шаблон.template.objectID.id) Тогда
				СтрокаРаздела.ШаблонID = Шаблон.template.objectID.id;
				СтрокаРаздела.ШаблонТип = Шаблон.template.objectID.type;
			Иначе
				СтрокаРаздела.Индекс = ПорядокБизнесПроцессов.Найти(СтрокаРаздела.ТипПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
		РазделДерева.Строки.Сортировать("Индекс");
		
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоШаблонов);
	
	Данные = Дерево.Строки.Найти("Согласование Заявки НСИ на Контрагента", "Наименование", Истина);
	Если Данные = Неопределено Тогда
		Сообщить("Не найден подходящий шаблон или процесс");
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПредметБизнесПроцесса = Новый Структура;
	ПредметБизнесПроцесса.Вставить("id", ПредметID);
	ПредметБизнесПроцесса.Вставить("type", ПредметТип);
	ПараметрыФормы.Вставить("Предмет", ПредметБизнесПроцесса);
	
	Если Не ЗначениеЗаполнено(Данные.ШаблонID) Тогда
		Сообщить("Заполнены не все данные в шаблоне или процессе");
		Возврат;		
	КонецЕсли;
	
	ШаблонБизнесПроцесса = Новый Структура;
	ШаблонБизнесПроцесса.Вставить("id", Данные.ШаблонID);
	ШаблонБизнесПроцесса.Вставить("type", Данные.ШаблонТип);
	ПараметрыФормы.Вставить("Шаблон", ШаблонБизнесПроцесса);
				
	Если ЗаполнитьСтартоватьПроцесс(Данные.ТипПроцесса, ПараметрыФормы) Тогда
		Сообщить("Процесс запущен");
		Объект.Статус = Перечисления.АГ_СтатусыЗаявок.Согласование;
	Иначе
		Сообщить("Что-то пошло не так!");
	КонецЕсли;
		
				
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтартоватьПроцесс(ТипПроцесса, ПараметрыЗапуска)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
	Если ПараметрыЗапуска.Свойство("Предмет") Тогда
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон, ПараметрыЗапуска.Предмет);
	Иначе
		ШаблонПроцесса = ИнтеграцияС1СДокументооборот.НовыйБизнесПроцессПоШаблону(Прокси, ТипПроцесса, ПараметрыЗапуска.Шаблон);
	КонецЕсли;
	
	НовыйПроцесс = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, ШаблонПроцесса.ObjectId.type);
	ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(Прокси, НовыйПроцесс, ШаблонПроцесса);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, НовыйПроцесс);
		
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, РезультатЗапуска, "DMError") Тогда
		Возврат Ложь;
	Иначе
		ПроцессID = РезультатЗапуска.businessProcess.ObjectID.id;
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуПервая(Команда)

	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуВторая(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументСогласованСЗамечаниями", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

&НаКлиенте
Процедура АГ_ВыполнитьЗадачуТретья(Команда)
	
	ЭтаФорма.Закрыть();
	Оповестить("ДокументНеСогласован", АГ_ТекущаяСтрокаЗадачи);
	
КонецПроцедуры	

#КонецОбласти

